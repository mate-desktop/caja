# 1 "caja-desktop-link-monitor.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 398 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "caja-desktop-link-monitor.c" 2
# 25 "caja-desktop-link-monitor.c"
# 1 "../config.h" 1
# 26 "caja-desktop-link-monitor.c" 2
# 1 "/usr/include/gtk-3.0/gtk/gtk.h" 1
# 30 "/usr/include/gtk-3.0/gtk/gtk.h"
# 1 "/usr/include/gtk-3.0/gdk/gdk.h" 1
# 30 "/usr/include/gtk-3.0/gdk/gdk.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkconfig.h" 1







# 1 "/usr/include/glib-2.0/glib.h" 1
# 32 "/usr/include/glib-2.0/glib.h"
# 1 "/usr/include/glib-2.0/glib/galloca.h" 1
# 34 "/usr/include/glib-2.0/glib/galloca.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 34 "/usr/include/glib-2.0/glib/gtypes.h"
# 1 "/usr/lib64/glib-2.0/include/glibconfig.h" 1








# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 40 "/usr/include/glib-2.0/glib/gmacros.h"
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3
# 84 "/usr/bin/../lib/clang/19/include/stddef.h" 3
# 1 "/usr/bin/../lib/clang/19/include/__stddef_header_macro.h" 1 3
# 85 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3



# 1 "/usr/bin/../lib/clang/19/include/__stddef_ptrdiff_t.h" 1 3
# 18 "/usr/bin/../lib/clang/19/include/__stddef_ptrdiff_t.h" 3
typedef long int ptrdiff_t;
# 89 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3
# 18 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 3
typedef long unsigned int size_t;
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3
# 103 "/usr/bin/../lib/clang/19/include/stddef.h" 3
# 1 "/usr/bin/../lib/clang/19/include/__stddef_wchar_t.h" 1 3
# 24 "/usr/bin/../lib/clang/19/include/__stddef_wchar_t.h" 3
typedef int wchar_t;
# 104 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3
# 123 "/usr/bin/../lib/clang/19/include/stddef.h" 3
# 1 "/usr/bin/../lib/clang/19/include/__stddef_max_align_t.h" 1 3
# 19 "/usr/bin/../lib/clang/19/include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 124 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3




# 1 "/usr/bin/../lib/clang/19/include/__stddef_offsetof.h" 1 3
# 129 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3
# 41 "/usr/include/glib-2.0/glib/gmacros.h" 2
# 10 "/usr/lib64/glib-2.0/include/glibconfig.h" 2

# 1 "/usr/bin/../lib/clang/19/include/limits.h" 1 3
# 25 "/usr/bin/../lib/clang/19/include/limits.h" 3
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 402 "/usr/include/features.h" 3 4
# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 19 "/usr/include/bits/timesize.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 20 "/usr/include/bits/timesize.h" 2 3 4
# 22 "/usr/include/features-time64.h" 2 3 4
# 403 "/usr/include/features.h" 2 3 4
# 489 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 490 "/usr/include/features.h" 2 3 4
# 511 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 730 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 731 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 732 "/usr/include/sys/cdefs.h" 2 3 4
# 512 "/usr/include/features.h" 2 3 4
# 535 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 536 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 195 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 38 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 2 3 4
# 81 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/bits/pthread_stack_min-dynamic.h" 1 3 4
# 29 "/usr/include/bits/pthread_stack_min-dynamic.h" 3 4
# 1 "/usr/include/bits/pthread_stack_min.h" 1 3 4
# 30 "/usr/include/bits/pthread_stack_min-dynamic.h" 2 3 4
# 82 "/usr/include/bits/local_lim.h" 2 3 4
# 162 "/usr/include/bits/posix1_lim.h" 2 3 4
# 196 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 200 "/usr/include/limits.h" 2 3 4
# 26 "/usr/bin/../lib/clang/19/include/limits.h" 2 3
# 12 "/usr/lib64/glib-2.0/include/glibconfig.h" 2
# 1 "/usr/bin/../lib/clang/19/include/float.h" 1 3
# 13 "/usr/lib64/glib-2.0/include/glibconfig.h" 2
# 45 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef signed char gint8;
typedef unsigned char guint8;

typedef signed short gint16;
typedef unsigned short guint16;






typedef signed int gint32;
typedef unsigned int guint32;
# 66 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef signed long gint64;
typedef unsigned long guint64;
# 82 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef signed long gssize;
typedef unsigned long gsize;
# 93 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef gint64 goffset;
# 109 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef signed long gintptr;
typedef unsigned long guintptr;
# 201 "/usr/lib64/glib-2.0/include/glibconfig.h"
typedef int GPid;
# 35 "/usr/include/glib-2.0/glib/gtypes.h" 2

# 1 "/usr/include/glib-2.0/glib/gversionmacros.h" 1
# 37 "/usr/include/glib-2.0/glib/gtypes.h" 2


# 1 "/usr/include/glib-2.0/glib/glib-visibility.h" 1
# 40 "/usr/include/glib-2.0/glib/gtypes.h" 2

# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 108 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3 4
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 26 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 19 "/usr/include/bits/timesize.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 20 "/usr/include/bits/timesize.h" 2 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 143 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 27 "/usr/include/bits/time.h" 2 3 4
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4
# 10 "/usr/include/bits/types/time_t.h" 3 4
typedef __time_t time_t;
# 39 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4


# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4





# 1 "/usr/include/bits/endian.h" 1 3 4
# 35 "/usr/include/bits/endian.h" 3 4
# 1 "/usr/include/bits/endianness.h" 1 3 4
# 36 "/usr/include/bits/endian.h" 2 3 4
# 7 "/usr/include/bits/types/struct_timespec.h" 2 3 4




struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/bits/types/struct_timespec.h" 3 4
};
# 43 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;




typedef __pid_t pid_t;





# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 27 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 61 "/usr/include/time.h" 2 3 4
# 72 "/usr/include/time.h" 3 4
extern clock_t clock (void) __attribute__ ((__nothrow__ ));



extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ ));


extern double difftime (time_t __time1, time_t __time0);


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ ));
# 99 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp)
   __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 3, 4)));
# 116 "/usr/include/time.h" 3 4
extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) __attribute__ ((__nothrow__ ));
# 132 "/usr/include/time.h" 3 4
extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ ));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ ));
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ ));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ ));
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ ));



extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ ));
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ ));



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ ));
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ ));



extern int daylight;
extern long int timezone;
# 246 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ ));
# 263 "/usr/include/time.h" 3 4
extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ ));







extern int dysize (int __year) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));
# 281 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ ));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));
# 323 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 338 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ ));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ ));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ ));



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ ));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ ));
# 376 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ ));






extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 42 "/usr/include/glib-2.0/glib/gtypes.h" 2
# 52 "/usr/include/glib-2.0/glib/gtypes.h"
typedef char gchar;
typedef short gshort;
typedef long glong;
typedef int gint;
typedef gint gboolean;

typedef unsigned char guchar;
typedef unsigned short gushort;
typedef unsigned long gulong;
typedef unsigned int guint;

typedef float gfloat;
typedef double gdouble;
# 109 "/usr/include/glib-2.0/glib/gtypes.h"
typedef void* gpointer;
typedef const void *gconstpointer;

typedef gint (*GCompareFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef gint (*GCompareDataFunc) (gconstpointer a,
                                                 gconstpointer b,
       gpointer user_data);
typedef gboolean (*GEqualFunc) (gconstpointer a,
                                                 gconstpointer b);
# 136 "/usr/include/glib-2.0/glib/gtypes.h"
typedef gboolean (*GEqualFuncFull) (gconstpointer a,
                                                 gconstpointer b,
                                                 gpointer user_data);

typedef void (*GDestroyNotify) (gpointer data);
typedef void (*GFunc) (gpointer data,
                                                 gpointer user_data);
typedef guint (*GHashFunc) (gconstpointer key);
typedef void (*GHFunc) (gpointer key,
                                                 gpointer value,
                                                 gpointer user_data);
# 160 "/usr/include/glib-2.0/glib/gtypes.h"
typedef gpointer (*GCopyFunc) (gconstpointer src,
                                                 gpointer data);
# 170 "/usr/include/glib-2.0/glib/gtypes.h"
typedef void (*GFreeFunc) (gpointer data);
# 184 "/usr/include/glib-2.0/glib/gtypes.h"
typedef const gchar * (*GTranslateFunc) (const gchar *str,
       gpointer data);
# 528 "/usr/include/glib-2.0/glib/gtypes.h"
typedef union _GDoubleIEEE754 GDoubleIEEE754;
typedef union _GFloatIEEE754 GFloatIEEE754;





union _GFloatIEEE754
{
  gfloat v_float;
  struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
  } mpn;
};
union _GDoubleIEEE754
{
  gdouble v_double;
  struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
  } mpn;
};
# 578 "/usr/include/glib-2.0/glib/gtypes.h"
typedef struct _GTimeVal GTimeVal __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));

struct _GTimeVal
{
  glong tv_sec;
  glong tv_usec;
} __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));

typedef gint grefcount;
typedef gint gatomicrefcount;
# 35 "/usr/include/glib-2.0/glib/galloca.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4






# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 108 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3 4
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) ;




extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 107 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2))) ;






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 4)))
                                           ;





extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 246 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 286 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 323 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 350 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 3)));
# 380 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)))

                                         ;



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) __attribute__ ((__nothrow__ ));
# 432 "/usr/include/string.h" 3 4
extern int strerror_r (int __errnum, char *__buf, size_t __buflen) __asm__ ("" "__xpg_strerror_r") __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)))


                                          ;
# 458 "/usr/include/string.h" 3 4
extern char *strerror_l (int __errnum, locale_t __l) __attribute__ ((__nothrow__ ));



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 24 "/usr/include/strings.h" 2 3 4
# 34 "/usr/include/strings.h" 3 4
extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 68 "/usr/include/strings.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 96 "/usr/include/strings.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern int ffs (int __i) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));





extern int ffsl (long int __l) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ )) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));
# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)))
                                                  ;



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ ));
# 489 "/usr/include/string.h" 3 4
extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlcpy (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
  __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) ;



extern size_t strlcat (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
  __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) ;
# 36 "/usr/include/glib-2.0/glib/galloca.h" 2
# 33 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/garray.h" 1
# 38 "/usr/include/glib-2.0/glib/garray.h"
typedef struct _GBytes GBytes;
typedef struct _GArray GArray;
typedef struct _GByteArray GByteArray;
typedef struct _GPtrArray GPtrArray;

struct _GArray
{
  gchar *data;
  guint len;
};

struct _GByteArray
{
  guint8 *data;
  guint len;
};

struct _GPtrArray
{
  gpointer *pdata;
  guint len;
};
# 71 "/usr/include/glib-2.0/glib/garray.h"
 extern
GArray* g_array_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size);
 extern
GArray* g_array_new_take (gpointer data,
                                   gsize len,
                                   gboolean clear,
                                   gsize element_size);
 extern
GArray* g_array_new_take_zero_terminated (gpointer data,
                                          gboolean clear,
                                          gsize element_size);
 extern
gpointer g_array_steal (GArray *array,
                                   gsize *len);
 extern
GArray* g_array_sized_new (gboolean zero_terminated,
       gboolean clear_,
       guint element_size,
       guint reserved_size);
 extern
GArray* g_array_copy (GArray *array);
 extern
gchar* g_array_free (GArray *array,
       gboolean free_segment);
 extern
GArray *g_array_ref (GArray *array);
 extern
void g_array_unref (GArray *array);
 extern
guint g_array_get_element_size (GArray *array);
 extern
GArray* g_array_append_vals (GArray *array,
       gconstpointer data,
       guint len);
 extern
GArray* g_array_prepend_vals (GArray *array,
       gconstpointer data,
       guint len);
 extern
GArray* g_array_insert_vals (GArray *array,
       guint index_,
       gconstpointer data,
       guint len);
 extern
GArray* g_array_set_size (GArray *array,
       guint length);
 extern
GArray* g_array_remove_index (GArray *array,
       guint index_);
 extern
GArray* g_array_remove_index_fast (GArray *array,
       guint index_);
 extern
GArray* g_array_remove_range (GArray *array,
       guint index_,
       guint length);
 extern
void g_array_sort (GArray *array,
       GCompareFunc compare_func);
 extern
void g_array_sort_with_data (GArray *array,
       GCompareDataFunc compare_func,
       gpointer user_data);
 extern
gboolean g_array_binary_search (GArray *array,
                                   gconstpointer target,
                                   GCompareFunc compare_func,
                                   guint *out_match_index);
 extern
void g_array_set_clear_func (GArray *array,
                                   GDestroyNotify clear_func);






 extern
GPtrArray* g_ptr_array_new (void);
 extern
GPtrArray* g_ptr_array_new_with_free_func (GDestroyNotify element_free_func);
 extern
GPtrArray* g_ptr_array_new_take (gpointer *data,
                                           gsize len,
                                           GDestroyNotify element_free_func);
 extern
GPtrArray* g_ptr_array_new_from_array (gpointer *data,
                                           gsize len,
                                           GCopyFunc copy_func,
                                           gpointer copy_func_user_data,
                                           GDestroyNotify element_free_func);
 extern
gpointer* g_ptr_array_steal (GPtrArray *array,
                                            gsize *len);
 extern
GPtrArray *g_ptr_array_copy (GPtrArray *array,
                                           GCopyFunc func,
                                           gpointer user_data);
 extern
GPtrArray* g_ptr_array_sized_new (guint reserved_size);
 extern
GPtrArray* g_ptr_array_new_full (guint reserved_size,
        GDestroyNotify element_free_func);
 extern
GPtrArray* g_ptr_array_new_null_terminated (guint reserved_size,
                                            GDestroyNotify element_free_func,
                                            gboolean null_terminated);
 extern
GPtrArray* g_ptr_array_new_take_null_terminated (gpointer *data,
                                                  GDestroyNotify element_free_func);
 extern
GPtrArray* g_ptr_array_new_from_null_terminated_array (gpointer *data,
                                                       GCopyFunc copy_func,
                                                       gpointer copy_func_user_data,
                                                       GDestroyNotify element_free_func);
 extern
gpointer* g_ptr_array_free (GPtrArray *array,
        gboolean free_seg);
 extern
GPtrArray* g_ptr_array_ref (GPtrArray *array);
 extern
void g_ptr_array_unref (GPtrArray *array);
 extern
void g_ptr_array_set_free_func (GPtrArray *array,
                                           GDestroyNotify element_free_func);
 extern
void g_ptr_array_set_size (GPtrArray *array,
        gint length);
 extern
gpointer g_ptr_array_remove_index (GPtrArray *array,
        guint index_);
 extern
gpointer g_ptr_array_remove_index_fast (GPtrArray *array,
        guint index_);
 extern
gpointer g_ptr_array_steal_index (GPtrArray *array,
                                           guint index_);
 extern
gpointer g_ptr_array_steal_index_fast (GPtrArray *array,
                                           guint index_);
 extern
gboolean g_ptr_array_remove (GPtrArray *array,
        gpointer data);
 extern
gboolean g_ptr_array_remove_fast (GPtrArray *array,
        gpointer data);
 extern
GPtrArray *g_ptr_array_remove_range (GPtrArray *array,
        guint index_,
        guint length);
 extern
void g_ptr_array_add (GPtrArray *array,
        gpointer data);
 extern
void g_ptr_array_extend (GPtrArray *array_to_extend,
                                           GPtrArray *array,
                                           GCopyFunc func,
                                           gpointer user_data);
 extern
void g_ptr_array_extend_and_steal (GPtrArray *array_to_extend,
                                           GPtrArray *array);
 extern
void g_ptr_array_insert (GPtrArray *array,
                                           gint index_,
                                           gpointer data);
 extern
void g_ptr_array_sort (GPtrArray *array,
        GCompareFunc compare_func);
 extern
void g_ptr_array_sort_with_data (GPtrArray *array,
        GCompareDataFunc compare_func,
        gpointer user_data);
 extern
void g_ptr_array_sort_values (GPtrArray *array,
                                           GCompareFunc compare_func);
 extern
void g_ptr_array_sort_values_with_data (GPtrArray *array,
                                              GCompareDataFunc compare_func,
                                              gpointer user_data);
 extern
void g_ptr_array_foreach (GPtrArray *array,
        GFunc func,
        gpointer user_data);
 extern
gboolean g_ptr_array_find (GPtrArray *haystack,
                                           gconstpointer needle,
                                           guint *index_);
 extern
gboolean g_ptr_array_find_with_equal_func (GPtrArray *haystack,
                                             gconstpointer needle,
                                             GEqualFunc equal_func,
                                             guint *index_);

 extern
gboolean g_ptr_array_is_null_terminated (GPtrArray *array);





 extern
GByteArray* g_byte_array_new (void);
 extern
GByteArray* g_byte_array_new_take (guint8 *data,
                                            gsize len);
 extern
guint8* g_byte_array_steal (GByteArray *array,
                                            gsize *len);
 extern
GByteArray* g_byte_array_sized_new (guint reserved_size);
 extern
guint8* g_byte_array_free (GByteArray *array,
         gboolean free_segment);
 extern
GBytes* g_byte_array_free_to_bytes (GByteArray *array);
 extern
GByteArray *g_byte_array_ref (GByteArray *array);
 extern
void g_byte_array_unref (GByteArray *array);
 extern
GByteArray* g_byte_array_append (GByteArray *array,
         const guint8 *data,
         guint len);
 extern
GByteArray* g_byte_array_prepend (GByteArray *array,
         const guint8 *data,
         guint len);
 extern
GByteArray* g_byte_array_set_size (GByteArray *array,
         guint length);
 extern
GByteArray* g_byte_array_remove_index (GByteArray *array,
         guint index_);
 extern
GByteArray* g_byte_array_remove_index_fast (GByteArray *array,
         guint index_);
 extern
GByteArray* g_byte_array_remove_range (GByteArray *array,
         guint index_,
         guint length);
 extern
void g_byte_array_sort (GByteArray *array,
         GCompareFunc compare_func);
 extern
void g_byte_array_sort_with_data (GByteArray *array,
         GCompareDataFunc compare_func,
         gpointer user_data);
# 34 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gasyncqueue.h" 1
# 34 "/usr/include/glib-2.0/glib/gasyncqueue.h"
# 1 "/usr/include/glib-2.0/glib/gthread.h" 1
# 34 "/usr/include/glib-2.0/glib/gthread.h"
# 1 "/usr/include/glib-2.0/glib/gatomic.h" 1
# 30 "/usr/include/glib-2.0/glib/gatomic.h"
# 1 "/usr/include/glib-2.0/glib/glib-typeof.h" 1
# 31 "/usr/include/glib-2.0/glib/gatomic.h" 2



 extern
gint g_atomic_int_get (const volatile gint *atomic);
 extern
void g_atomic_int_set (volatile gint *atomic,
                                                               gint newval);
 extern
void g_atomic_int_inc (volatile gint *atomic);
 extern
gboolean g_atomic_int_dec_and_test (volatile gint *atomic);
 extern
gboolean g_atomic_int_compare_and_exchange (volatile gint *atomic,
                                                               gint oldval,
                                                               gint newval);
 extern
gboolean g_atomic_int_compare_and_exchange_full (gint *atomic,
                                                                gint oldval,
                                                                gint newval,
                                                                gint *preval);
 extern
gint g_atomic_int_exchange (gint *atomic,
                                                               gint newval);
 extern
gint g_atomic_int_add (volatile gint *atomic,
                                                               gint val);
 extern
guint g_atomic_int_and (volatile guint *atomic,
                                                               guint val);
 extern
guint g_atomic_int_or (volatile guint *atomic,
                                                               guint val);
 extern
guint g_atomic_int_xor (volatile guint *atomic,
                                                               guint val);

 extern
gpointer g_atomic_pointer_get (const volatile void *atomic);
 extern
void g_atomic_pointer_set (volatile void *atomic,
                                                               gpointer newval);
 extern
gboolean g_atomic_pointer_compare_and_exchange (volatile void *atomic,
                                                               gpointer oldval,
                                                               gpointer newval);
 extern
gboolean g_atomic_pointer_compare_and_exchange_full (void *atomic,
                                                                    gpointer oldval,
                                                                    gpointer newval,
                                                                    void *preval);
 extern
gpointer g_atomic_pointer_exchange (void *atomic,
                                                               gpointer newval);
 extern
gintptr g_atomic_pointer_add (volatile void *atomic,
                                                               gssize val);
 extern
guintptr g_atomic_pointer_and (volatile void *atomic,
                                                               gsize val);
 extern
guintptr g_atomic_pointer_or (volatile void *atomic,
                                                               gsize val);
 extern
guintptr g_atomic_pointer_xor (volatile void *atomic,
                                                               gsize val);

__attribute__((__deprecated__("Use '" "g_atomic_int_add" "' instead"))) extern
gint g_atomic_int_exchange_and_add (volatile gint *atomic,
                                                               gint val);
# 35 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 28 "/usr/include/glib-2.0/glib/gerror.h"
# 1 "/usr/bin/../lib/clang/19/include/stdarg.h" 1 3
# 47 "/usr/bin/../lib/clang/19/include/stdarg.h" 3
# 1 "/usr/bin/../lib/clang/19/include/__stdarg_header_macro.h" 1 3
# 48 "/usr/bin/../lib/clang/19/include/stdarg.h" 2 3



# 1 "/usr/bin/../lib/clang/19/include/__stdarg___gnuc_va_list.h" 1 3
# 12 "/usr/bin/../lib/clang/19/include/__stdarg___gnuc_va_list.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 52 "/usr/bin/../lib/clang/19/include/stdarg.h" 2 3




# 1 "/usr/bin/../lib/clang/19/include/__stdarg_va_list.h" 1 3
# 12 "/usr/bin/../lib/clang/19/include/__stdarg_va_list.h" 3
typedef __builtin_va_list va_list;
# 57 "/usr/bin/../lib/clang/19/include/stdarg.h" 2 3




# 1 "/usr/bin/../lib/clang/19/include/__stdarg_va_arg.h" 1 3
# 62 "/usr/bin/../lib/clang/19/include/stdarg.h" 2 3




# 1 "/usr/bin/../lib/clang/19/include/__stdarg___va_copy.h" 1 3
# 67 "/usr/bin/../lib/clang/19/include/stdarg.h" 2 3




# 1 "/usr/bin/../lib/clang/19/include/__stdarg_va_copy.h" 1 3
# 72 "/usr/bin/../lib/clang/19/include/stdarg.h" 2 3
# 29 "/usr/include/glib-2.0/glib/gerror.h" 2

# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 38 "/usr/include/glib-2.0/glib/gquark.h"
typedef guint32 GQuark;



 extern
GQuark g_quark_try_string (const gchar *string);
 extern
GQuark g_quark_from_static_string (const gchar *string);
 extern
GQuark g_quark_from_string (const gchar *string);
 extern
const gchar * g_quark_to_string (GQuark quark) __attribute__ ((__const__));
# 63 "/usr/include/glib-2.0/glib/gquark.h"
 extern
const gchar * g_intern_string (const gchar *string);
 extern
const gchar * g_intern_static_string (const gchar *string);
# 31 "/usr/include/glib-2.0/glib/gerror.h" 2
# 43 "/usr/include/glib-2.0/glib/gerror.h"
typedef struct _GError GError;

struct _GError
{
  GQuark domain;
  gint code;
  gchar *message;
};
# 142 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorInitFunc) (GError *error);
# 160 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorCopyFunc) (const GError *src_error, GError *dest_error);
# 175 "/usr/include/glib-2.0/glib/gerror.h"
typedef void (*GErrorClearFunc) (GError *error);

 extern
GQuark g_error_domain_register_static (const char *error_type_name,
                                         gsize error_type_private_size,
                                         GErrorInitFunc error_type_init,
                                         GErrorCopyFunc error_type_copy,
                                         GErrorClearFunc error_type_clear);

 extern
GQuark g_error_domain_register (const char *error_type_name,
                                  gsize error_type_private_size,
                                  GErrorInitFunc error_type_init,
                                  GErrorCopyFunc error_type_copy,
                                  GErrorClearFunc error_type_clear);

 extern
GError* g_error_new (GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (__printf__, 3, 4)));

 extern
GError* g_error_new_literal (GQuark domain,
                                gint code,
                                const gchar *message);
 extern
GError* g_error_new_valist (GQuark domain,
                                gint code,
                                const gchar *format,
                                va_list args) __attribute__((__format__ (__printf__, 3, 0)));

 extern
void g_error_free (GError *error);
 extern
GError* g_error_copy (const GError *error);

 extern
gboolean g_error_matches (const GError *error,
                                GQuark domain,
                                gint code);




 extern
void g_set_error (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) __attribute__((__format__ (__printf__, 4, 5)));

 extern
void g_set_error_literal (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *message);



 extern
void g_propagate_error (GError **dest,
    GError *src);


 extern
void g_clear_error (GError **err);


 extern
void g_prefix_error (GError **err,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (__printf__, 2, 3)));


 extern
void g_prefix_error_literal (GError **err,
                                       const gchar *prefix);


 extern
void g_propagate_prefixed_error (GError **dest,
                                       GError *src,
                                       const gchar *format,
                                       ...) __attribute__((__format__ (__printf__, 3, 4)));
# 36 "/usr/include/glib-2.0/glib/gthread.h" 2
# 1 "/usr/include/glib-2.0/glib/gutils.h" 1
# 35 "/usr/include/glib-2.0/glib/gutils.h"
# 1 "/usr/bin/../lib/clang/19/include/stdarg.h" 1 3
# 36 "/usr/include/glib-2.0/glib/gutils.h" 2



 extern
const gchar * g_get_user_name (void);
 extern
const gchar * g_get_real_name (void);
 extern
const gchar * g_get_home_dir (void);
 extern
const gchar * g_get_tmp_dir (void);
 extern
const gchar * g_get_host_name (void);
 extern
const gchar * g_get_prgname (void);
 extern
void g_set_prgname (const gchar *prgname);
 extern
const gchar * g_get_application_name (void);
 extern
void g_set_application_name (const gchar *application_name);
 extern
gchar * g_get_os_info (const gchar *key_name);
# 181 "/usr/include/glib-2.0/glib/gutils.h"
 extern
void g_reload_user_special_dirs_cache (void);
 extern
const gchar * g_get_user_data_dir (void);
 extern
const gchar * g_get_user_config_dir (void);
 extern
const gchar * g_get_user_cache_dir (void);
 extern
const gchar * g_get_user_state_dir (void);
 extern
const gchar * const * g_get_system_data_dirs (void);
# 213 "/usr/include/glib-2.0/glib/gutils.h"
 extern
const gchar * const * g_get_system_config_dirs (void);

 extern
const gchar * g_get_user_runtime_dir (void);
# 241 "/usr/include/glib-2.0/glib/gutils.h"
typedef enum {
  G_USER_DIRECTORY_DESKTOP,
  G_USER_DIRECTORY_DOCUMENTS,
  G_USER_DIRECTORY_DOWNLOAD,
  G_USER_DIRECTORY_MUSIC,
  G_USER_DIRECTORY_PICTURES,
  G_USER_DIRECTORY_PUBLIC_SHARE,
  G_USER_DIRECTORY_TEMPLATES,
  G_USER_DIRECTORY_VIDEOS,

  G_USER_N_DIRECTORIES
} GUserDirectory;

 extern
const gchar * g_get_user_special_dir (GUserDirectory directory);
# 265 "/usr/include/glib-2.0/glib/gutils.h"
typedef struct _GDebugKey GDebugKey;
struct _GDebugKey
{
  const gchar *key;
  guint value;
};



 extern
guint g_parse_debug_string (const gchar *string,
         const GDebugKey *keys,
         guint nkeys);

 extern
gint g_snprintf (gchar *string,
         gulong n,
         gchar const *format,
         ...) __attribute__((__format__ (__printf__, 3, 4)));
 extern
gint g_vsnprintf (gchar *string,
         gulong n,
         gchar const *format,
         va_list args)
         __attribute__((__format__ (__printf__, 3, 0)));

 extern
void g_nullify_pointer (gpointer *nullify_location);

typedef enum
{
  G_FORMAT_SIZE_DEFAULT = 0,
  G_FORMAT_SIZE_LONG_FORMAT = 1 << 0,
  G_FORMAT_SIZE_IEC_UNITS = 1 << 1,
  G_FORMAT_SIZE_BITS = 1 << 2,
  G_FORMAT_SIZE_ONLY_VALUE = 1 << 3,
  G_FORMAT_SIZE_ONLY_UNIT = 1 << 4
} GFormatSizeFlags;

 extern
gchar *g_format_size_full (guint64 size,
                             GFormatSizeFlags flags);
 extern
gchar *g_format_size (guint64 size);

__attribute__((__deprecated__("Use '" "g_format_size" "' instead"))) extern
gchar *g_format_size_for_display (goffset size);
# 324 "/usr/include/glib-2.0/glib/gutils.h"
typedef void (*GVoidFunc) (void) __attribute__((__deprecated__));


#pragma clang diagnostic push
# 327 "/usr/include/glib-2.0/glib/gutils.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_atexit (GVoidFunc func);
#pragma clang diagnostic pop
# 347 "/usr/include/glib-2.0/glib/gutils.h"
 extern
gchar* g_find_program_in_path (const gchar *program);
# 365 "/usr/include/glib-2.0/glib/gutils.h"
 extern
gint (g_bit_nth_lsf) (gulong mask,
                                 gint nth_bit);
 extern
gint (g_bit_nth_msf) (gulong mask,
                                 gint nth_bit);
 extern
guint (g_bit_storage) (gulong number);

static inline gint
g_bit_nth_lsf_impl (gulong mask,
                    gint nth_bit)
{
  if ((__builtin_expect (__extension__ ({ int _g_boolean_var_0; if (nth_bit < -1) _g_boolean_var_0 = 1; else _g_boolean_var_0 = 0; _g_boolean_var_0; }), 0)))
    nth_bit = -1;
  while (nth_bit < ((8 * 8) - 1))
    {
      nth_bit++;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}

static inline gint
g_bit_nth_msf_impl (gulong mask,
                    gint nth_bit)
{
  if (nth_bit < 0 || (__builtin_expect (__extension__ ({ int _g_boolean_var_1; if (nth_bit > 8 * 8) _g_boolean_var_1 = 1; else _g_boolean_var_1 = 0; _g_boolean_var_1; }), 0)))
    nth_bit = 8 * 8;
  while (nth_bit > 0)
    {
      nth_bit--;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}

static inline guint
g_bit_storage_impl (gulong number)
{

  return (__builtin_expect (__extension__ ({ int _g_boolean_var_2; if (number) _g_boolean_var_2 = 1; else _g_boolean_var_2 = 0; _g_boolean_var_2; }), 1)) ?
           ((8 * 8U - 1) ^ (guint) __builtin_clzl(number)) + 1 : 1;
# 421 "/usr/include/glib-2.0/glib/gutils.h"
}




# 1 "/usr/include/stdlib.h" 1 3 4
# 26 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 103 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_wchar_t.h" 1 3 4
# 104 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4




# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3 4
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 33 "/usr/include/stdlib.h" 2 3 4







# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 56 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 57 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 98 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ )) ;



extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 480 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ )) atoi (const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void*)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__ )) atol (const char *__nptr)
{
  return strtol (__nptr, (char **) ((void*)0), 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__ )) atoll (const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void*)0), 10);
}
# 505 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ )) ;


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 33 "/usr/include/sys/types.h" 3 4
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;
# 59 "/usr/include/sys/types.h" 3 4
typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;
# 103 "/usr/include/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 144 "/usr/include/sys/types.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 145 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 33 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/sys/select.h" 2 3 4





typedef __suseconds_t suseconds_t;





typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {






    __fd_mask __fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];


  } fd_set;






typedef __fd_mask fd_mask;
# 102 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 180 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 227 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/bits/atomic_wide_counter.h" 1 3 4
# 25 "/usr/include/bits/atomic_wide_counter.h" 3 4
typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/bits/struct_mutex.h" 3 4
};
# 77 "/usr/include/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/bits/struct_rwlock.h" 3 4
};
# 90 "/usr/include/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/sys/types.h" 2 3 4
# 515 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ ));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ ));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) __attribute__ ((__nothrow__ ));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ ));



extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ ));







extern double drand48 (void) __attribute__ ((__nothrow__ ));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ ));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ ));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ ));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern __uint32_t arc4random (void)
     __attribute__ ((__nothrow__ )) ;


extern void arc4random_buf (void *__buf, size_t __size)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern __uint32_t arc4random_uniform (__uint32_t __upper_bound)
     __attribute__ ((__nothrow__ )) ;




extern void *malloc (size_t __size) __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__))
                                         ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ )) __attribute__ ((__warn_unused_result__)) ;


extern void free (void *__ptr) __attribute__ ((__nothrow__ ));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ )) __attribute__ ((__warn_unused_result__))

                       ;


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ )) ;



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ ));
# 707 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__))
                                         ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
                                         ;



extern void abort (void) __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));






extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));





extern void _Exit (int __status) __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;
# 786 "/usr/include/stdlib.h" 3 4
extern int putenv (char *__string) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ ));
# 814 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 827 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 849 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 870 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;
# 923 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;
# 940 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ )) ;






typedef int (*__compar_fn_t) (const void *, const void *);
# 960 "/usr/include/stdlib.h" 3 4
extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;


# 1 "/usr/include/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (const void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 {




   return (void *) __p;



 }
    }

  return ((void*)0);
}
# 966 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
# 980 "/usr/include/stdlib.h" 3 4
extern int abs (int __x) __attribute__ ((__nothrow__ )) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ )) __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ )) __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ )) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ )) __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ )) __attribute__ ((__const__)) ;
# 1012 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ ));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ ));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ ));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ ))
                                      ;

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ ))

                                    ;






extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;
# 1099 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2, 3))) ;
# 1145 "/usr/include/stdlib.h" 3 4
extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 1155 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__ )) atof (const char *__nptr)
{
  return strtod (__nptr, (char **) ((void*)0));
}
# 1156 "/usr/include/stdlib.h" 2 3 4
# 427 "/usr/include/glib-2.0/glib/gutils.h" 2
# 37 "/usr/include/glib-2.0/glib/gthread.h" 2




 extern
GQuark g_thread_error_quark (void);

typedef enum
{
  G_THREAD_ERROR_AGAIN
} GThreadError;

typedef gpointer (*GThreadFunc) (gpointer data);

typedef struct _GThread GThread;

typedef union _GMutex GMutex;
typedef struct _GRecMutex GRecMutex;
typedef struct _GRWLock GRWLock;
typedef struct _GCond GCond;
typedef struct _GPrivate GPrivate;
typedef struct _GOnce GOnce;

union _GMutex
{

  gpointer p;
  guint i[2];
};

struct _GRWLock
{

  gpointer p;
  guint i[2];
};

struct _GCond
{

  gpointer p;
  guint i[2];
};

struct _GRecMutex
{

  gpointer p;
  guint i[2];
};


struct _GPrivate
{

  gpointer p;
  GDestroyNotify notify;
  gpointer future[2];
};

typedef enum
{
  G_ONCE_STATUS_NOTCALLED,
  G_ONCE_STATUS_PROGRESS,
  G_ONCE_STATUS_READY
} GOnceStatus;


struct _GOnce
{
  volatile GOnceStatus status;
  volatile gpointer retval;
};
# 146 "/usr/include/glib-2.0/glib/gthread.h"
 extern
GThread * g_thread_ref (GThread *thread);
 extern
void g_thread_unref (GThread *thread);
 extern
GThread * g_thread_new (const gchar *name,
                                                 GThreadFunc func,
                                                 gpointer data);
 extern
GThread * g_thread_try_new (const gchar *name,
                                                 GThreadFunc func,
                                                 gpointer data,
                                                 GError **error);
 extern
GThread * g_thread_self (void);
__attribute__ ((__noreturn__)) extern
void g_thread_exit (gpointer retval);
 extern
gpointer g_thread_join (GThread *thread);
 extern
void g_thread_yield (void);


 extern
void g_mutex_init (GMutex *mutex);
 extern
void g_mutex_clear (GMutex *mutex);
 extern
void g_mutex_lock (GMutex *mutex);
 extern
gboolean g_mutex_trylock (GMutex *mutex);
 extern
void g_mutex_unlock (GMutex *mutex);

 extern
void g_rw_lock_init (GRWLock *rw_lock);
 extern
void g_rw_lock_clear (GRWLock *rw_lock);
 extern
void g_rw_lock_writer_lock (GRWLock *rw_lock);
 extern
gboolean g_rw_lock_writer_trylock (GRWLock *rw_lock);
 extern
void g_rw_lock_writer_unlock (GRWLock *rw_lock);
 extern
void g_rw_lock_reader_lock (GRWLock *rw_lock);
 extern
gboolean g_rw_lock_reader_trylock (GRWLock *rw_lock);
 extern
void g_rw_lock_reader_unlock (GRWLock *rw_lock);

 extern
void g_rec_mutex_init (GRecMutex *rec_mutex);
 extern
void g_rec_mutex_clear (GRecMutex *rec_mutex);
 extern
void g_rec_mutex_lock (GRecMutex *rec_mutex);
 extern
gboolean g_rec_mutex_trylock (GRecMutex *rec_mutex);
 extern
void g_rec_mutex_unlock (GRecMutex *rec_mutex);

 extern
void g_cond_init (GCond *cond);
 extern
void g_cond_clear (GCond *cond);
 extern
void g_cond_wait (GCond *cond,
                                                 GMutex *mutex);
 extern
void g_cond_signal (GCond *cond);
 extern
void g_cond_broadcast (GCond *cond);
 extern
gboolean g_cond_wait_until (GCond *cond,
                                                 GMutex *mutex,
                                                 gint64 end_time);

 extern
gpointer g_private_get (GPrivate *key);
 extern
void g_private_set (GPrivate *key,
                                                 gpointer value);
 extern
void g_private_replace (GPrivate *key,
                                                 gpointer value);

 extern
gpointer g_once_impl (GOnce *once,
                                                 GThreadFunc func,
                                                 gpointer arg);
 extern
gboolean g_once_init_enter (volatile void *location);
 extern
void g_once_init_leave (volatile void *location,
                                                 gsize result);

 extern
gboolean g_once_init_enter_pointer (void *location);
 extern
void g_once_init_leave_pointer (void *location,
                                                 gpointer result);
# 307 "/usr/include/glib-2.0/glib/gthread.h"
 extern
guint g_get_num_processors (void);







typedef void GMutexLocker;
# 365 "/usr/include/glib-2.0/glib/gthread.h"
static inline GMutexLocker *
g_mutex_locker_new (GMutex *mutex)
{
  g_mutex_lock (mutex);
  return (GMutexLocker *) mutex;
}
# 383 "/usr/include/glib-2.0/glib/gthread.h"
static inline void
g_mutex_locker_free (GMutexLocker *locker)
{
  g_mutex_unlock ((GMutex *) locker);
}
# 438 "/usr/include/glib-2.0/glib/gthread.h"
typedef void GRecMutexLocker;
# 486 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic push
# 486 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline GRecMutexLocker *
g_rec_mutex_locker_new (GRecMutex *rec_mutex)
{
  g_rec_mutex_lock (rec_mutex);
  return (GRecMutexLocker *) rec_mutex;
}
#pragma clang diagnostic pop
# 506 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic push
# 506 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline void
g_rec_mutex_locker_free (GRecMutexLocker *locker)
{
  g_rec_mutex_unlock ((GRecMutex *) locker);
}
#pragma clang diagnostic pop
# 564 "/usr/include/glib-2.0/glib/gthread.h"
typedef void GRWLockWriterLocker;
# 643 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic push
# 643 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline GRWLockWriterLocker *
g_rw_lock_writer_locker_new (GRWLock *rw_lock)
{
  g_rw_lock_writer_lock (rw_lock);
  return (GRWLockWriterLocker *) rw_lock;
}
#pragma clang diagnostic pop
# 664 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic push
# 664 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline void
g_rw_lock_writer_locker_free (GRWLockWriterLocker *locker)
{
  g_rw_lock_writer_unlock ((GRWLock *) locker);
}
#pragma clang diagnostic pop
# 722 "/usr/include/glib-2.0/glib/gthread.h"
typedef void GRWLockReaderLocker;
# 741 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic push
# 741 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline GRWLockReaderLocker *
g_rw_lock_reader_locker_new (GRWLock *rw_lock)
{
  g_rw_lock_reader_lock (rw_lock);
  return (GRWLockReaderLocker *) rw_lock;
}
#pragma clang diagnostic pop
# 762 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic push
# 762 "/usr/include/glib-2.0/glib/gthread.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline void
g_rw_lock_reader_locker_free (GRWLockReaderLocker *locker)
{
  g_rw_lock_reader_unlock ((GRWLock *) locker);
}
#pragma clang diagnostic pop
# 35 "/usr/include/glib-2.0/glib/gasyncqueue.h" 2



typedef struct _GAsyncQueue GAsyncQueue;

 extern
GAsyncQueue *g_async_queue_new (void);
 extern
GAsyncQueue *g_async_queue_new_full (GDestroyNotify item_free_func);
 extern
void g_async_queue_lock (GAsyncQueue *queue);
 extern
void g_async_queue_unlock (GAsyncQueue *queue);
 extern
GAsyncQueue *g_async_queue_ref (GAsyncQueue *queue);
 extern
void g_async_queue_unref (GAsyncQueue *queue);

__attribute__((__deprecated__("Use '" "g_async_queue_ref" "' instead"))) extern
void g_async_queue_ref_unlocked (GAsyncQueue *queue);

__attribute__((__deprecated__("Use '" "g_async_queue_unref" "' instead"))) extern
void g_async_queue_unref_and_unlock (GAsyncQueue *queue);

 extern
void g_async_queue_push (GAsyncQueue *queue,
                                                 gpointer data);
 extern
void g_async_queue_push_unlocked (GAsyncQueue *queue,
                                                 gpointer data);
 extern
void g_async_queue_push_sorted (GAsyncQueue *queue,
                                                 gpointer data,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
void g_async_queue_push_sorted_unlocked (GAsyncQueue *queue,
                                                 gpointer data,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
gpointer g_async_queue_pop (GAsyncQueue *queue);
 extern
gpointer g_async_queue_pop_unlocked (GAsyncQueue *queue);
 extern
gpointer g_async_queue_try_pop (GAsyncQueue *queue);
 extern
gpointer g_async_queue_try_pop_unlocked (GAsyncQueue *queue);
 extern
gpointer g_async_queue_timeout_pop (GAsyncQueue *queue,
                                                 guint64 timeout);
 extern
gpointer g_async_queue_timeout_pop_unlocked (GAsyncQueue *queue,
                                                 guint64 timeout);
 extern
gint g_async_queue_length (GAsyncQueue *queue);
 extern
gint g_async_queue_length_unlocked (GAsyncQueue *queue);
 extern
void g_async_queue_sort (GAsyncQueue *queue,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
void g_async_queue_sort_unlocked (GAsyncQueue *queue,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);

 extern
gboolean g_async_queue_remove (GAsyncQueue *queue,
                                                 gpointer item);
 extern
gboolean g_async_queue_remove_unlocked (GAsyncQueue *queue,
                                                 gpointer item);
 extern
void g_async_queue_push_front (GAsyncQueue *queue,
                                                 gpointer item);
 extern
void g_async_queue_push_front_unlocked (GAsyncQueue *queue,
                                                 gpointer item);

#pragma clang diagnostic push
# 115 "/usr/include/glib-2.0/glib/gasyncqueue.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_async_queue_timeout_pop" "' instead"))) extern
gpointer g_async_queue_timed_pop (GAsyncQueue *queue,
                                                 GTimeVal *end_time);
__attribute__((__deprecated__("Use '" "g_async_queue_timeout_pop_unlocked" "' instead"))) extern
gpointer g_async_queue_timed_pop_unlocked (GAsyncQueue *queue,
                                                 GTimeVal *end_time);
#pragma clang diagnostic pop
# 35 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gbacktrace.h" 1
# 38 "/usr/include/glib-2.0/glib/gbacktrace.h"
# 1 "/usr/include/signal.h" 1 3 4
# 30 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/signum-generic.h" 1 3 4
# 76 "/usr/include/bits/signum-generic.h" 3 4
# 1 "/usr/include/bits/signum-arch.h" 1 3 4
# 77 "/usr/include/bits/signum-generic.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;

     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR,

  SEGV_MTEAERR,

  SEGV_MTESERR,

  SEGV_CPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};
# 178 "/usr/include/bits/siginfo-consts.h" 3 4
enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ ));
# 88 "/usr/include/signal.h" 3 4
extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ ));
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) __attribute__ ((__nothrow__ ));






extern int killpg (__pid_t __pgrp, int __sig) __attribute__ ((__nothrow__ ));



extern int raise (int __sig) __attribute__ ((__nothrow__ ));



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     __attribute__ ((__nothrow__ ));
extern int gsignal (int __sig) __attribute__ ((__nothrow__ ));




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 173 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));


extern int siggetmask (void) __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));
# 193 "/usr/include/signal.h" 3 4
typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 229 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 27 "/usr/include/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 230 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) __attribute__ ((__nothrow__ ));






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) __attribute__ ((__nothrow__ ));


extern int sigpending (sigset_t *__set) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));







extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));
# 292 "/usr/include/signal.h" 3 4
extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     __attribute__ ((__nothrow__ ));







# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 302 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) __attribute__ ((__nothrow__ ));






# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 312 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/bits/types/stack_t.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 24 "/usr/include/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 314 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 37 "/usr/include/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];
# 101 "/usr/include/sys/ucontext.h" 3 4
struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 317 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) __attribute__ ((__nothrow__ ))
  __attribute__ ((__deprecated__ ("Use sigaction with SA_RESTART instead")));

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 328 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/sigstksz.h" 1 3 4
# 329 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 330 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) __attribute__ ((__nothrow__ ));




# 1 "/usr/include/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 340 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     __attribute__ ((__nothrow__ )) __attribute__ ((__deprecated__));
# 376 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)__attribute__ ((__nothrow__ ));


extern int pthread_kill (pthread_t __threadid, int __signo) __attribute__ ((__nothrow__ ));
# 377 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) __attribute__ ((__nothrow__ ));

extern int __libc_current_sigrtmax (void) __attribute__ ((__nothrow__ ));





# 1 "/usr/include/bits/signal_ext.h" 1 3 4
# 392 "/usr/include/signal.h" 2 3 4
# 39 "/usr/include/glib-2.0/glib/gbacktrace.h" 2



 extern
void g_on_error_query (const gchar *prg_name);
 extern
void g_on_error_stack_trace (const gchar *prg_name);
# 37 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbase64.h" 1
# 32 "/usr/include/glib-2.0/glib/gbase64.h"
 extern
gsize g_base64_encode_step (const guchar *in,
                                 gsize len,
                                 gboolean break_lines,
                                 gchar *out,
                                 gint *state,
                                 gint *save);
 extern
gsize g_base64_encode_close (gboolean break_lines,
                                 gchar *out,
                                 gint *state,
                                 gint *save);
 extern
gchar* g_base64_encode (const guchar *data,
                                 gsize len) __attribute__ ((__malloc__));
 extern
gsize g_base64_decode_step (const gchar *in,
                                 gsize len,
                                 guchar *out,
                                 gint *state,
                                 guint *save);
 extern
guchar *g_base64_decode (const gchar *text,
                                 gsize *out_len) __attribute__ ((__malloc__));
 extern
guchar *g_base64_decode_inplace (gchar *text,
                                 gsize *out_len);
# 38 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbitlock.h" 1
# 34 "/usr/include/glib-2.0/glib/gbitlock.h"
 extern
void g_bit_lock (volatile gint *address,
                                           gint lock_bit);
 extern
gboolean g_bit_trylock (volatile gint *address,
                                           gint lock_bit);
 extern
void g_bit_unlock (volatile gint *address,
                                           gint lock_bit);

 extern
void g_pointer_bit_lock (volatile void *address,
                                           gint lock_bit);

 extern
void g_pointer_bit_lock_and_get (gpointer address,
                                           guint lock_bit,
                                           guintptr *out_ptr);

 extern
gboolean g_pointer_bit_trylock (volatile void *address,
                                           gint lock_bit);
 extern
void g_pointer_bit_unlock (volatile void *address,
                                           gint lock_bit);

 extern
gpointer g_pointer_bit_lock_mask_ptr (gpointer ptr,
                                           guint lock_bit,
                                           gboolean set,
                                           guintptr preserve_mask,
                                           gpointer preserve_ptr);

 extern
void g_pointer_bit_unlock_and_set (void *address,
                                           guint lock_bit,
                                           gpointer ptr,
                                           guintptr preserve_mask);
# 39 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbookmarkfile.h" 1
# 28 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
# 1 "/usr/include/glib-2.0/glib/gdatetime.h" 1
# 33 "/usr/include/glib-2.0/glib/gdatetime.h"
# 1 "/usr/include/glib-2.0/glib/gtimezone.h" 1
# 34 "/usr/include/glib-2.0/glib/gtimezone.h"
typedef struct _GTimeZone GTimeZone;
# 51 "/usr/include/glib-2.0/glib/gtimezone.h"
typedef enum
{
  G_TIME_TYPE_STANDARD,
  G_TIME_TYPE_DAYLIGHT,
  G_TIME_TYPE_UNIVERSAL
} GTimeType;

__attribute__((__deprecated__("Use '" "g_time_zone_new_identifier" "' instead"))) extern
GTimeZone * g_time_zone_new (const gchar *identifier);
 extern
GTimeZone * g_time_zone_new_identifier (const gchar *identifier);
 extern
GTimeZone * g_time_zone_new_utc (void);
 extern
GTimeZone * g_time_zone_new_local (void);
 extern
GTimeZone * g_time_zone_new_offset (gint32 seconds);

 extern
GTimeZone * g_time_zone_ref (GTimeZone *tz);
 extern
void g_time_zone_unref (GTimeZone *tz);

 extern
gint g_time_zone_find_interval (GTimeZone *tz,
                                                                         GTimeType type,
                                                                         gint64 time_);

 extern
gint g_time_zone_adjust_time (GTimeZone *tz,
                                                                         GTimeType type,
                                                                         gint64 *time_);

 extern
const gchar * g_time_zone_get_abbreviation (GTimeZone *tz,
                                                                         gint interval);
 extern
gint32 g_time_zone_get_offset (GTimeZone *tz,
                                                                         gint interval);
 extern
gboolean g_time_zone_is_dst (GTimeZone *tz,
                                                                         gint interval);
 extern
const gchar * g_time_zone_get_identifier (GTimeZone *tz);
# 34 "/usr/include/glib-2.0/glib/gdatetime.h" 2
# 89 "/usr/include/glib-2.0/glib/gdatetime.h"
typedef gint64 GTimeSpan;
# 122 "/usr/include/glib-2.0/glib/gdatetime.h"
typedef struct _GDateTime GDateTime;

 extern
void g_date_time_unref (GDateTime *datetime);
 extern
GDateTime * g_date_time_ref (GDateTime *datetime);

 extern
GDateTime * g_date_time_new_now (GTimeZone *tz);
 extern
GDateTime * g_date_time_new_now_local (void);
 extern
GDateTime * g_date_time_new_now_utc (void);

 extern
GDateTime * g_date_time_new_from_unix_local (gint64 t);
 extern
GDateTime * g_date_time_new_from_unix_utc (gint64 t);

 extern
GDateTime * g_date_time_new_from_unix_local_usec (gint64 usecs);
 extern
GDateTime * g_date_time_new_from_unix_utc_usec (gint64 usecs);

#pragma clang diagnostic push
# 146 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_date_time_new_from_unix_local" "' instead"))) extern
GDateTime * g_date_time_new_from_timeval_local (const GTimeVal *tv);
__attribute__((__deprecated__("Use '" "g_date_time_new_from_unix_utc" "' instead"))) extern
GDateTime * g_date_time_new_from_timeval_utc (const GTimeVal *tv);
#pragma clang diagnostic pop

 extern
GDateTime * g_date_time_new_from_iso8601 (const gchar *text,
                                                                         GTimeZone *default_tz);

 extern
GDateTime * g_date_time_new (GTimeZone *tz,
                                                                         gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
 extern
GDateTime * g_date_time_new_local (gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);
 extern
GDateTime * g_date_time_new_utc (gint year,
                                                                         gint month,
                                                                         gint day,
                                                                         gint hour,
                                                                         gint minute,
                                                                         gdouble seconds);

 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add (GDateTime *datetime,
                                                                         GTimeSpan timespan);

 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_years (GDateTime *datetime,
                                                                         gint years);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_months (GDateTime *datetime,
                                                                         gint months);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_weeks (GDateTime *datetime,
                                                                         gint weeks);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_days (GDateTime *datetime,
                                                                         gint days);

 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_hours (GDateTime *datetime,
                                                                         gint hours);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_minutes (GDateTime *datetime,
                                                                         gint minutes);
 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_seconds (GDateTime *datetime,
                                                                         gdouble seconds);

 extern
__attribute__((warn_unused_result))
GDateTime * g_date_time_add_full (GDateTime *datetime,
                                                                         gint years,
                                                                         gint months,
                                                                         gint days,
                                                                         gint hours,
                                                                         gint minutes,
                                                                         gdouble seconds);

 extern
gint g_date_time_compare (gconstpointer dt1,
                                                                         gconstpointer dt2);
 extern
GTimeSpan g_date_time_difference (GDateTime *end,
                                                                         GDateTime *begin);
 extern
guint g_date_time_hash (gconstpointer datetime);
 extern
gboolean g_date_time_equal (gconstpointer dt1,
                                                                         gconstpointer dt2);

 extern
void g_date_time_get_ymd (GDateTime *datetime,
                                                                         gint *year,
                                                                         gint *month,
                                                                         gint *day);

 extern
gint g_date_time_get_year (GDateTime *datetime);
 extern
gint g_date_time_get_month (GDateTime *datetime);
 extern
gint g_date_time_get_day_of_month (GDateTime *datetime);

 extern
gint g_date_time_get_week_numbering_year (GDateTime *datetime);
 extern
gint g_date_time_get_week_of_year (GDateTime *datetime);
 extern
gint g_date_time_get_day_of_week (GDateTime *datetime);

 extern
gint g_date_time_get_day_of_year (GDateTime *datetime);

 extern
gint g_date_time_get_hour (GDateTime *datetime);
 extern
gint g_date_time_get_minute (GDateTime *datetime);
 extern
gint g_date_time_get_second (GDateTime *datetime);
 extern
gint g_date_time_get_microsecond (GDateTime *datetime);
 extern
gdouble g_date_time_get_seconds (GDateTime *datetime);

 extern
gint64 g_date_time_to_unix (GDateTime *datetime);
 extern
gint64 g_date_time_to_unix_usec (GDateTime *datetime);

#pragma clang diagnostic push
# 276 "/usr/include/glib-2.0/glib/gdatetime.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_date_time_to_unix" "' instead"))) extern
gboolean g_date_time_to_timeval (GDateTime *datetime,
                                                                         GTimeVal *tv);
#pragma clang diagnostic pop

 extern
GTimeSpan g_date_time_get_utc_offset (GDateTime *datetime);
 extern
GTimeZone * g_date_time_get_timezone (GDateTime *datetime);
 extern
const gchar * g_date_time_get_timezone_abbreviation (GDateTime *datetime);
 extern
gboolean g_date_time_is_daylight_savings (GDateTime *datetime);

 extern
GDateTime * g_date_time_to_timezone (GDateTime *datetime,
                                                                         GTimeZone *tz);
 extern
GDateTime * g_date_time_to_local (GDateTime *datetime);
 extern
GDateTime * g_date_time_to_utc (GDateTime *datetime);

 extern
gchar * g_date_time_format (GDateTime *datetime,
                                                                         const gchar *format) __attribute__ ((__malloc__));
 extern
gchar * g_date_time_format_iso8601 (GDateTime *datetime) __attribute__ ((__malloc__));
# 29 "/usr/include/glib-2.0/glib/gbookmarkfile.h" 2
# 60 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
typedef enum
{
  G_BOOKMARK_FILE_ERROR_INVALID_URI,
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
  G_BOOKMARK_FILE_ERROR_READ,
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
  G_BOOKMARK_FILE_ERROR_WRITE,
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
} GBookmarkFileError;

 extern
GQuark g_bookmark_file_error_quark (void);
# 118 "/usr/include/glib-2.0/glib/gbookmarkfile.h"
typedef struct _GBookmarkFile GBookmarkFile;

 extern
GBookmarkFile *g_bookmark_file_new (void);
 extern
void g_bookmark_file_free (GBookmarkFile *bookmark);

 extern
GBookmarkFile *g_bookmark_file_copy (GBookmarkFile *bookmark);

 extern
gboolean g_bookmark_file_load_from_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);
 extern
gboolean g_bookmark_file_load_from_data (GBookmarkFile *bookmark,
          const gchar *data,
          gsize length,
          GError **error);
 extern
gboolean g_bookmark_file_load_from_data_dirs (GBookmarkFile *bookmark,
          const gchar *file,
          gchar **full_path,
          GError **error);
 extern
gchar * g_bookmark_file_to_data (GBookmarkFile *bookmark,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
 extern
gboolean g_bookmark_file_to_file (GBookmarkFile *bookmark,
          const gchar *filename,
          GError **error);

 extern
void g_bookmark_file_set_title (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *title);
 extern
gchar * g_bookmark_file_get_title (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_bookmark_file_set_description (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *description);
 extern
gchar * g_bookmark_file_get_description (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_bookmark_file_set_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *mime_type);
 extern
gchar * g_bookmark_file_get_mime_type (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_bookmark_file_set_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar **groups,
          gsize length);
 extern
void g_bookmark_file_add_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group);
 extern
gboolean g_bookmark_file_has_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
 extern
gchar ** g_bookmark_file_get_groups (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error);
 extern
void g_bookmark_file_add_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec);
 extern
gboolean g_bookmark_file_has_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
 extern
gchar ** g_bookmark_file_get_applications (GBookmarkFile *bookmark,
          const gchar *uri,
          gsize *length,
          GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_application_info" "' instead"))) extern
gboolean g_bookmark_file_set_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          const gchar *exec,
          gint count,
          time_t stamp,
          GError **error);
 extern
gboolean g_bookmark_file_set_application_info (GBookmarkFile *bookmark,
                                                     const char *uri,
                                                     const char *name,
                                                     const char *exec,
                                                     int count,
                                                     GDateTime *stamp,
                                                     GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_application_info" "' instead"))) extern
gboolean g_bookmark_file_get_app_info (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          gchar **exec,
          guint *count,
          time_t *stamp,
          GError **error);
 extern
gboolean g_bookmark_file_get_application_info (GBookmarkFile *bookmark,
                                                     const char *uri,
                                                     const char *name,
                                                     char **exec,
                                                     unsigned int *count,
                                                     GDateTime **stamp,
                                                     GError **error);
 extern
void g_bookmark_file_set_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          gboolean is_private);
 extern
gboolean g_bookmark_file_get_is_private (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
void g_bookmark_file_set_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *href,
          const gchar *mime_type);
 extern
gboolean g_bookmark_file_get_icon (GBookmarkFile *bookmark,
          const gchar *uri,
          gchar **href,
          gchar **mime_type,
          GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_added_date_time" "' instead"))) extern
void g_bookmark_file_set_added (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t added);
 extern
void g_bookmark_file_set_added_date_time (GBookmarkFile *bookmark,
                                                    const char *uri,
                                                    GDateTime *added);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_added_date_time" "' instead"))) extern
time_t g_bookmark_file_get_added (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
GDateTime *g_bookmark_file_get_added_date_time (GBookmarkFile *bookmark,
                                                    const char *uri,
                                                    GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_modified_date_time" "' instead"))) extern
void g_bookmark_file_set_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t modified);
 extern
void g_bookmark_file_set_modified_date_time (GBookmarkFile *bookmark,
                                                       const char *uri,
                                                       GDateTime *modified);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_modified_date_time" "' instead"))) extern
time_t g_bookmark_file_get_modified (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
GDateTime *g_bookmark_file_get_modified_date_time (GBookmarkFile *bookmark,
                                                       const char *uri,
                                                       GError **error);
__attribute__((__deprecated__("Use '" "g_bookmark_file_set_visited_date_time" "' instead"))) extern
void g_bookmark_file_set_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          time_t visited);
 extern
void g_bookmark_file_set_visited_date_time (GBookmarkFile *bookmark,
                                                      const char *uri,
                                                      GDateTime *visited);
__attribute__((__deprecated__("Use '" "g_bookmark_file_get_visited_date_time" "' instead"))) extern
time_t g_bookmark_file_get_visited (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
GDateTime *g_bookmark_file_get_visited_date_time (GBookmarkFile *bookmark,
                                                      const char *uri,
                                                      GError **error);
 extern
gboolean g_bookmark_file_has_item (GBookmarkFile *bookmark,
          const gchar *uri);
 extern
gint g_bookmark_file_get_size (GBookmarkFile *bookmark);
 extern
gchar ** g_bookmark_file_get_uris (GBookmarkFile *bookmark,
          gsize *length);
 extern
gboolean g_bookmark_file_remove_group (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *group,
          GError **error);
 extern
gboolean g_bookmark_file_remove_application (GBookmarkFile *bookmark,
          const gchar *uri,
          const gchar *name,
          GError **error);
 extern
gboolean g_bookmark_file_remove_item (GBookmarkFile *bookmark,
          const gchar *uri,
          GError **error);
 extern
gboolean g_bookmark_file_move_item (GBookmarkFile *bookmark,
          const gchar *old_uri,
          const gchar *new_uri,
          GError **error);
# 40 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbytes.h" 1
# 36 "/usr/include/glib-2.0/glib/gbytes.h"
 extern
GBytes * g_bytes_new (gconstpointer data,
                                                 gsize size);

 extern
GBytes * g_bytes_new_take (gpointer data,
                                                 gsize size);

 extern
GBytes * g_bytes_new_static (gconstpointer data,
                                                 gsize size);

 extern
GBytes * g_bytes_new_with_free_func (gconstpointer data,
                                                 gsize size,
                                                 GDestroyNotify free_func,
                                                 gpointer user_data);

 extern
GBytes * g_bytes_new_from_bytes (GBytes *bytes,
                                                 gsize offset,
                                                 gsize length);

 extern
gconstpointer g_bytes_get_data (GBytes *bytes,
                                                 gsize *size);

 extern
gsize g_bytes_get_size (GBytes *bytes);

 extern
GBytes * g_bytes_ref (GBytes *bytes);

 extern
void g_bytes_unref (GBytes *bytes);

 extern
gpointer g_bytes_unref_to_data (GBytes *bytes,
                                                 gsize *size);

 extern
GByteArray * g_bytes_unref_to_array (GBytes *bytes);

 extern
guint g_bytes_hash (gconstpointer bytes);

 extern
gboolean g_bytes_equal (gconstpointer bytes1,
                                                 gconstpointer bytes2);

 extern
gint g_bytes_compare (gconstpointer bytes1,
                                                 gconstpointer bytes2);

 extern
gconstpointer g_bytes_get_region (GBytes *bytes,
                                                 gsize element_size,
                                                 gsize offset,
                                                 gsize n_elements);
# 41 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gcharset.h" 1
# 32 "/usr/include/glib-2.0/glib/gcharset.h"
 extern
gboolean g_get_charset (const char **charset);
 extern
gchar * g_get_codeset (void);
 extern
gboolean g_get_console_charset (const char **charset);

 extern
const gchar * const * g_get_language_names (void);
 extern
const gchar * const * g_get_language_names_with_category
                                            (const gchar *category_name);
 extern
gchar ** g_get_locale_variants (const gchar *locale);
# 42 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gchecksum.h" 1
# 49 "/usr/include/glib-2.0/glib/gchecksum.h"
typedef enum {
  G_CHECKSUM_MD5,
  G_CHECKSUM_SHA1,
  G_CHECKSUM_SHA256,
  G_CHECKSUM_SHA512,
  G_CHECKSUM_SHA384
} GChecksumType;

typedef struct _GChecksum GChecksum;

 extern
gssize g_checksum_type_get_length (GChecksumType checksum_type);

 extern
GChecksum * g_checksum_new (GChecksumType checksum_type);
 extern
void g_checksum_reset (GChecksum *checksum);
 extern
GChecksum * g_checksum_copy (const GChecksum *checksum);
 extern
void g_checksum_free (GChecksum *checksum);
 extern
void g_checksum_update (GChecksum *checksum,
                                                     const guchar *data,
                                                     gssize length);
 extern
const gchar * g_checksum_get_string (GChecksum *checksum);
 extern
void g_checksum_get_digest (GChecksum *checksum,
                                                     guint8 *buffer,
                                                     gsize *digest_len);

 extern
gchar *g_compute_checksum_for_data (GChecksumType checksum_type,
                                                     const guchar *data,
                                                     gsize length);
 extern
gchar *g_compute_checksum_for_string (GChecksumType checksum_type,
                                                     const gchar *str,
                                                     gssize length);

 extern
gchar *g_compute_checksum_for_bytes (GChecksumType checksum_type,
                                                     GBytes *data);
# 43 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gconvert.h" 1
# 56 "/usr/include/glib-2.0/glib/gconvert.h"
typedef enum
{
  G_CONVERT_ERROR_NO_CONVERSION,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
  G_CONVERT_ERROR_FAILED,
  G_CONVERT_ERROR_PARTIAL_INPUT,
  G_CONVERT_ERROR_BAD_URI,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH,
  G_CONVERT_ERROR_NO_MEMORY,
  G_CONVERT_ERROR_EMBEDDED_NUL
} GConvertError;
# 76 "/usr/include/glib-2.0/glib/gconvert.h"
 extern
GQuark g_convert_error_quark (void);







typedef struct _GIConv *GIConv;

 extern
GIConv g_iconv_open (const gchar *to_codeset,
         const gchar *from_codeset);
 extern
gsize g_iconv (GIConv converter,
         gchar **inbuf,
         gsize *inbytes_left,
         gchar **outbuf,
         gsize *outbytes_left);
 extern
gint g_iconv_close (GIConv converter);


 extern
gchar* g_convert (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_convert_with_iconv (const gchar *str,
    gssize len,
    GIConv converter,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_convert_with_fallback (const gchar *str,
    gssize len,
    const gchar *to_codeset,
    const gchar *from_codeset,
    const gchar *fallback,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error) __attribute__ ((__malloc__));




 extern
gchar* g_locale_to_utf8 (const gchar *opsysstring,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_locale_from_utf8 (const gchar *utf8string,
      gssize len,
      gsize *bytes_read,
      gsize *bytes_written,
      GError **error) __attribute__ ((__malloc__));




 extern
gchar* g_filename_to_utf8 (const gchar *opsysstring,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_filename_from_utf8 (const gchar *utf8string,
        gssize len,
        gsize *bytes_read,
        gsize *bytes_written,
        GError **error) __attribute__ ((__malloc__));

 extern
gchar *g_filename_from_uri (const gchar *uri,
       gchar **hostname,
       GError **error) __attribute__ ((__malloc__));

 extern
gchar *g_filename_to_uri (const gchar *filename,
       const gchar *hostname,
       GError **error) __attribute__ ((__malloc__));
 extern
gchar *g_filename_display_name (const gchar *filename) __attribute__ ((__malloc__));
 extern
gboolean g_get_filename_charsets (const gchar ***filename_charsets);

 extern
gchar *g_filename_display_basename (const gchar *filename) __attribute__ ((__malloc__));

 extern
gchar **g_uri_list_extract_uris (const gchar *uri_list);
# 44 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdataset.h" 1
# 38 "/usr/include/glib-2.0/glib/gdataset.h"
typedef struct _GData GData;

typedef void (*GDataForeachFunc) (GQuark key_id,
                                                 gpointer data,
                                                 gpointer user_data);



 extern
void g_datalist_init (GData **datalist);
 extern
void g_datalist_clear (GData **datalist);
 extern
gpointer g_datalist_id_get_data (GData **datalist,
      GQuark key_id);
 extern
void g_datalist_id_set_data_full (GData **datalist,
      GQuark key_id,
      gpointer data,
      GDestroyNotify destroy_func);
 extern
void g_datalist_id_remove_multiple (GData **datalist,
                                         GQuark *keys,
                                         gsize n_keys);

typedef gpointer (*GDuplicateFunc) (gpointer data, gpointer user_data);

 extern
gpointer g_datalist_id_dup_data (GData **datalist,
                                         GQuark key_id,
                                         GDuplicateFunc dup_func,
      gpointer user_data);
 extern
gboolean g_datalist_id_replace_data (GData **datalist,
                                         GQuark key_id,
                                         gpointer oldval,
                                         gpointer newval,
                                         GDestroyNotify destroy,
      GDestroyNotify *old_destroy);

 extern
gpointer g_datalist_id_remove_no_notify (GData **datalist,
      GQuark key_id);
 extern
void g_datalist_foreach (GData **datalist,
      GDataForeachFunc func,
      gpointer user_data);
# 95 "/usr/include/glib-2.0/glib/gdataset.h"
 extern
void g_datalist_set_flags (GData **datalist,
      guint flags);
 extern
void g_datalist_unset_flags (GData **datalist,
      guint flags);
 extern
guint g_datalist_get_flags (GData **datalist);
# 119 "/usr/include/glib-2.0/glib/gdataset.h"
 extern
void g_dataset_destroy (gconstpointer dataset_location);
 extern
gpointer g_dataset_id_get_data (gconstpointer dataset_location,
                                         GQuark key_id);
 extern
gpointer g_datalist_get_data (GData **datalist,
       const gchar *key);
 extern
void g_dataset_id_set_data_full (gconstpointer dataset_location,
                                         GQuark key_id,
                                         gpointer data,
                                         GDestroyNotify destroy_func);
 extern
gpointer g_dataset_id_remove_no_notify (gconstpointer dataset_location,
                                         GQuark key_id);
 extern
void g_dataset_foreach (gconstpointer dataset_location,
                                         GDataForeachFunc func,
                                         gpointer user_data);
# 45 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdate.h" 1
# 41 "/usr/include/glib-2.0/glib/gdate.h"
typedef gint32 GTime __attribute__((__deprecated__("Use '" "GDateTime" "' instead")));
typedef guint16 GDateYear;
typedef guint8 GDateDay;
typedef struct _GDate GDate;


typedef enum
{
  G_DATE_DAY = 0,
  G_DATE_MONTH = 1,
  G_DATE_YEAR = 2
} GDateDMY;


typedef enum
{
  G_DATE_BAD_WEEKDAY = 0,
  G_DATE_MONDAY = 1,
  G_DATE_TUESDAY = 2,
  G_DATE_WEDNESDAY = 3,
  G_DATE_THURSDAY = 4,
  G_DATE_FRIDAY = 5,
  G_DATE_SATURDAY = 6,
  G_DATE_SUNDAY = 7
} GDateWeekday;
typedef enum
{
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY = 1,
  G_DATE_FEBRUARY = 2,
  G_DATE_MARCH = 3,
  G_DATE_APRIL = 4,
  G_DATE_MAY = 5,
  G_DATE_JUNE = 6,
  G_DATE_JULY = 7,
  G_DATE_AUGUST = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER = 10,
  G_DATE_NOVEMBER = 11,
  G_DATE_DECEMBER = 12
} GDateMonth;
# 92 "/usr/include/glib-2.0/glib/gdate.h"
struct _GDate
{
  guint julian_days : 32;





  guint julian : 1;
  guint dmy : 1;


  guint day : 6;
  guint month : 4;
  guint year : 16;
};





 extern
GDate* g_date_new (void);
 extern
GDate* g_date_new_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year);
 extern
GDate* g_date_new_julian (guint32 julian_day);
 extern
void g_date_free (GDate *date);
 extern
GDate* g_date_copy (const GDate *date);






 extern
gboolean g_date_valid (const GDate *date);
 extern
gboolean g_date_valid_day (GDateDay day) __attribute__ ((__const__));
 extern
gboolean g_date_valid_month (GDateMonth month) __attribute__ ((__const__));
 extern
gboolean g_date_valid_year (GDateYear year) __attribute__ ((__const__));
 extern
gboolean g_date_valid_weekday (GDateWeekday weekday) __attribute__ ((__const__));
 extern
gboolean g_date_valid_julian (guint32 julian_date) __attribute__ ((__const__));
 extern
gboolean g_date_valid_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year) __attribute__ ((__const__));

 extern
GDateWeekday g_date_get_weekday (const GDate *date);
 extern
GDateMonth g_date_get_month (const GDate *date);
 extern
GDateYear g_date_get_year (const GDate *date);
 extern
GDateDay g_date_get_day (const GDate *date);
 extern
guint32 g_date_get_julian (const GDate *date);
 extern
guint g_date_get_day_of_year (const GDate *date);






 extern
guint g_date_get_monday_week_of_year (const GDate *date);
 extern
guint g_date_get_sunday_week_of_year (const GDate *date);
 extern
guint g_date_get_iso8601_week_of_year (const GDate *date);





 extern
void g_date_clear (GDate *date,
                                           guint n_dates);





 extern
void g_date_set_parse (GDate *date,
                                           const gchar *str);
 extern
void g_date_set_time_t (GDate *date,
        time_t timet);
#pragma clang diagnostic push
# 191 "/usr/include/glib-2.0/glib/gdate.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_date_set_time_t" "' instead"))) extern
void g_date_set_time_val (GDate *date,
        GTimeVal *timeval);
__attribute__((__deprecated__("Use '" "g_date_set_time_t" "' instead"))) extern
void g_date_set_time (GDate *date,
                                           GTime time_);
#pragma clang diagnostic pop
 extern
void g_date_set_month (GDate *date,
                                           GDateMonth month);
 extern
void g_date_set_day (GDate *date,
                                           GDateDay day);
 extern
void g_date_set_year (GDate *date,
                                           GDateYear year);
 extern
void g_date_set_dmy (GDate *date,
                                           GDateDay day,
                                           GDateMonth month,
                                           GDateYear y);
 extern
void g_date_set_julian (GDate *date,
                                           guint32 julian_date);
 extern
gboolean g_date_is_first_of_month (const GDate *date);
 extern
gboolean g_date_is_last_of_month (const GDate *date);


 extern
void g_date_add_days (GDate *date,
                                           guint n_days);
 extern
void g_date_subtract_days (GDate *date,
                                           guint n_days);


 extern
void g_date_add_months (GDate *date,
                                           guint n_months);
 extern
void g_date_subtract_months (GDate *date,
                                           guint n_months);


 extern
void g_date_add_years (GDate *date,
                                           guint n_years);
 extern
void g_date_subtract_years (GDate *date,
                                           guint n_years);
 extern
gboolean g_date_is_leap_year (GDateYear year) __attribute__ ((__const__));
 extern
guint8 g_date_get_days_in_month (GDateMonth month,
                                           GDateYear year) __attribute__ ((__const__));
 extern
guint8 g_date_get_monday_weeks_in_year (GDateYear year) __attribute__ ((__const__));
 extern
guint8 g_date_get_sunday_weeks_in_year (GDateYear year) __attribute__ ((__const__));



 extern
gint g_date_days_between (const GDate *date1,
        const GDate *date2);


 extern
gint g_date_compare (const GDate *lhs,
                                           const GDate *rhs);
 extern
void g_date_to_struct_tm (const GDate *date,
                                           struct tm *tm);

 extern
void g_date_clamp (GDate *date,
        const GDate *min_date,
        const GDate *max_date);


 extern
void g_date_order (GDate *date1, GDate *date2);




 extern
gsize g_date_strftime (gchar *s,
                                           gsize slen,
                                           const gchar *format,
                                           const GDate *date);
# 46 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gdir.h" 1
# 34 "/usr/include/glib-2.0/glib/gdir.h"
# 1 "/usr/include/dirent.h" 1 3 4
# 61 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/bits/dirent.h" 1 3 4
# 22 "/usr/include/bits/dirent.h" 3 4
struct dirent
  {

    __ino_t d_ino;
    __off_t d_off;




    unsigned short int d_reclen;
    unsigned char d_type;
    char d_name[256];
  };
# 62 "/usr/include/dirent.h" 2 3 4
# 97 "/usr/include/dirent.h" 3 4
enum
  {
    DT_UNKNOWN = 0,

    DT_FIFO = 1,

    DT_CHR = 2,

    DT_DIR = 4,

    DT_BLK = 6,

    DT_REG = 8,

    DT_LNK = 10,

    DT_SOCK = 12,

    DT_WHT = 14

  };
# 127 "/usr/include/dirent.h" 3 4
typedef struct __dirstream DIR;






extern int closedir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));






extern DIR *opendir (const char *__name) __attribute__ ((__nonnull__ (1)))
 __attribute__ ((__malloc__)) ;






extern DIR *fdopendir (int __fd)
 __attribute__ ((__malloc__)) ;
# 164 "/usr/include/dirent.h" 3 4
extern struct dirent *readdir (DIR *__dirp) __attribute__ ((__nonnull__ (1)));
# 185 "/usr/include/dirent.h" 3 4
extern int readdir_r (DIR *__restrict __dirp,
        struct dirent *__restrict __entry,
        struct dirent **__restrict __result)
     __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__deprecated__));
# 211 "/usr/include/dirent.h" 3 4
extern void rewinddir (DIR *__dirp) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));





extern void seekdir (DIR *__dirp, long int __pos) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern long int telldir (DIR *__dirp) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));





extern int dirfd (DIR *__dirp) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 247 "/usr/include/dirent.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 248 "/usr/include/dirent.h" 2 3 4
# 257 "/usr/include/dirent.h" 3 4
extern int scandir (const char *__restrict __dir,
      struct dirent ***__restrict __namelist,
      int (*__selector) (const struct dirent *),
      int (*__cmp) (const struct dirent **,
      const struct dirent **))
     __attribute__ ((__nonnull__ (1, 2)));
# 327 "/usr/include/dirent.h" 3 4
extern int alphasort (const struct dirent **__e1,
        const struct dirent **__e2)
     __attribute__ ((__nothrow__ )) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 355 "/usr/include/dirent.h" 3 4
extern __ssize_t getdirentries (int __fd, char *__restrict __buf,
    size_t __nbytes,
    __off_t *__restrict __basep)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 4)));
# 406 "/usr/include/dirent.h" 3 4
# 1 "/usr/include/bits/dirent_ext.h" 1 3 4
# 407 "/usr/include/dirent.h" 2 3 4
# 35 "/usr/include/glib-2.0/glib/gdir.h" 2




typedef struct _GDir GDir;

 extern
GDir * g_dir_open (const gchar *path,
            guint flags,
            GError **error);
 extern
const gchar * g_dir_read_name (GDir *dir);
 extern
void g_dir_rewind (GDir *dir);
 extern
void g_dir_close (GDir *dir);

 extern
GDir * g_dir_ref (GDir *dir);
 extern
void g_dir_unref (GDir *dir);
# 48 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/genviron.h" 1
# 38 "/usr/include/glib-2.0/glib/genviron.h"
 extern
const gchar * g_getenv (const gchar *variable);
 extern
gboolean g_setenv (const gchar *variable,
                                  const gchar *value,
                                  gboolean overwrite);
 extern
void g_unsetenv (const gchar *variable);
 extern
gchar ** g_listenv (void);

 extern
gchar ** g_get_environ (void);
 extern
const gchar * g_environ_getenv (gchar **envp,
                                  const gchar *variable);
 extern
gchar ** g_environ_setenv (gchar **envp,
                                  const gchar *variable,
                                  const gchar *value,
                                  gboolean overwrite) __attribute__((warn_unused_result));
 extern
gchar ** g_environ_unsetenv (gchar **envp,
                                  const gchar *variable) __attribute__((warn_unused_result));
# 49 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gfileutils.h" 1
# 35 "/usr/include/glib-2.0/glib/gfileutils.h"
typedef enum
{
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_NOSYS,
  G_FILE_ERROR_FAILED
} GFileError;





typedef enum
{
  G_FILE_TEST_IS_REGULAR = 1 << 0,
  G_FILE_TEST_IS_SYMLINK = 1 << 1,
  G_FILE_TEST_IS_DIR = 1 << 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 << 3,
  G_FILE_TEST_EXISTS = 1 << 4
} GFileTest;
# 101 "/usr/include/glib-2.0/glib/gfileutils.h"
typedef enum
{
  G_FILE_SET_CONTENTS_NONE = 0,
  G_FILE_SET_CONTENTS_CONSISTENT = 1 << 0,
  G_FILE_SET_CONTENTS_DURABLE = 1 << 1,
  G_FILE_SET_CONTENTS_ONLY_EXISTING = 1 << 2
} GFileSetContentsFlags
                                 ;

 extern
GQuark g_file_error_quark (void);

 extern
GFileError g_file_error_from_errno (gint err_no);

 extern
gboolean g_file_test (const gchar *filename,
                              GFileTest test);
 extern
gboolean g_file_get_contents (const gchar *filename,
                              gchar **contents,
                              gsize *length,
                              GError **error);
 extern
gboolean g_file_set_contents (const gchar *filename,
                              const gchar *contents,
                              gssize length,
                              GError **error);
#pragma clang diagnostic push
# 129 "/usr/include/glib-2.0/glib/gfileutils.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
gboolean g_file_set_contents_full (const gchar *filename,
                                   const gchar *contents,
                                   gssize length,
                                   GFileSetContentsFlags flags,
                                   int mode,
                                   GError **error);
#pragma clang diagnostic pop
 extern
gchar *g_file_read_link (const gchar *filename,
                              GError **error);


 extern
gchar *g_mkdtemp (gchar *tmpl);
 extern
gchar *g_mkdtemp_full (gchar *tmpl,
                               gint mode);


 extern
gint g_mkstemp (gchar *tmpl);
 extern
gint g_mkstemp_full (gchar *tmpl,
                               gint flags,
                               gint mode);


 extern
gint g_file_open_tmp (const gchar *tmpl,
                               gchar **name_used,
                               GError **error);
 extern
gchar *g_dir_make_tmp (const gchar *tmpl,
                               GError **error);

 extern
gchar *g_build_path (const gchar *separator,
                               const gchar *first_element,
                               ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
 extern
gchar *g_build_pathv (const gchar *separator,
                               gchar **args) __attribute__ ((__malloc__));

 extern
gchar *g_build_filename (const gchar *first_element,
                               ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
 extern
gchar *g_build_filenamev (gchar **args) __attribute__ ((__malloc__));
 extern
gchar *g_build_filename_valist (const gchar *first_element,
                                  va_list *args) __attribute__ ((__malloc__));

 extern
gint g_mkdir_with_parents (const gchar *pathname,
                               gint mode);
# 201 "/usr/include/glib-2.0/glib/gfileutils.h"
 extern
gboolean g_path_is_absolute (const gchar *file_name);
 extern
const gchar *g_path_skip_root (const gchar *file_name);

__attribute__((__deprecated__("Use '" "g_path_get_basename" "' instead"))) extern
const gchar *g_basename (const gchar *file_name);


 extern
gchar *g_get_current_dir (void);
 extern
gchar *g_path_get_basename (const gchar *file_name) __attribute__ ((__malloc__));
 extern
gchar *g_path_get_dirname (const gchar *file_name) __attribute__ ((__malloc__));

 extern
gchar *g_canonicalize_filename (const gchar *filename,
                                const gchar *relative_to) __attribute__ ((__malloc__));
# 51 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ggettext.h" 1
# 38 "/usr/include/glib-2.0/glib/ggettext.h"
 extern
const gchar *g_strip_context (const gchar *msgid,
                              const gchar *msgval) __attribute__ ((__format_arg__ (1)));

 extern
const gchar *g_dgettext (const gchar *domain,
                              const gchar *msgid) __attribute__ ((__format_arg__ (2)));
 extern
const gchar *g_dcgettext (const gchar *domain,
                              const gchar *msgid,
                              gint category) __attribute__ ((__format_arg__ (2)));
 extern
const gchar *g_dngettext (const gchar *domain,
                              const gchar *msgid,
                              const gchar *msgid_plural,
                              gulong n) __attribute__ ((__format_arg__ (3)));
 extern
const gchar *g_dpgettext (const gchar *domain,
                              const gchar *msgctxtid,
                              gsize msgidoffset) __attribute__ ((__format_arg__ (2)));
 extern
const gchar *g_dpgettext2 (const gchar *domain,
                              const gchar *context,
                              const gchar *msgid) __attribute__ ((__format_arg__ (3)));
# 52 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghash.h" 1
# 36 "/usr/include/glib-2.0/glib/ghash.h"
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 34 "/usr/include/glib-2.0/glib/glist.h"
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 54 "/usr/include/glib-2.0/glib/gmem.h"
typedef struct _GMemVTable GMemVTable;
# 73 "/usr/include/glib-2.0/glib/gmem.h"
 extern
void (g_free) (gpointer mem);
 extern
void g_free_sized (gpointer mem,
                           size_t size);

 extern
void g_clear_pointer (gpointer *pp,
                           GDestroyNotify destroy);

 extern
gpointer g_malloc (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_malloc0 (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));
 extern
gpointer g_try_malloc (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_try_malloc0 (gsize n_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_try_realloc (gpointer mem,
      gsize n_bytes) __attribute__((warn_unused_result));

 extern
gpointer g_malloc_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_malloc0_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_realloc_n (gpointer mem,
      gsize n_blocks,
      gsize n_block_bytes) __attribute__((warn_unused_result));
 extern
gpointer g_try_malloc_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_try_malloc0_n (gsize n_blocks,
      gsize n_block_bytes) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_try_realloc_n (gpointer mem,
      gsize n_blocks,
      gsize n_block_bytes) __attribute__((warn_unused_result));

 extern
gpointer g_aligned_alloc (gsize n_blocks,
                           gsize n_block_bytes,
                           gsize alignment) __attribute__((warn_unused_result)) __attribute__((__alloc_size__(1,2)));
 extern
gpointer g_aligned_alloc0 (gsize n_blocks,
                           gsize n_block_bytes,
                           gsize alignment) __attribute__((warn_unused_result)) __attribute__((__alloc_size__(1,2)));
 extern
void g_aligned_free (gpointer mem);
 extern
void g_aligned_free_sized (gpointer mem,
                               size_t alignment,
                               size_t size);
# 233 "/usr/include/glib-2.0/glib/gmem.h"
static inline gpointer
g_steal_pointer (gpointer pp)
{
  gpointer *ptr = (gpointer *) pp;
  gpointer ref;

  ref = *ptr;
  *ptr = ((void*)0);

  return ref;
}
# 398 "/usr/include/glib-2.0/glib/gmem.h"
struct _GMemVTable {
  gpointer (*malloc) (gsize n_bytes);
  gpointer (*realloc) (gpointer mem,
      gsize n_bytes);
  void (*free) (gpointer mem);

  gpointer (*calloc) (gsize n_blocks,
      gsize n_block_bytes);
  gpointer (*try_malloc) (gsize n_bytes);
  gpointer (*try_realloc) (gpointer mem,
      gsize n_bytes);
};
__attribute__((__deprecated__)) extern
void g_mem_set_vtable (GMemVTable *vtable);
__attribute__((__deprecated__)) extern
gboolean g_mem_is_system_malloc (void);

 extern gboolean g_mem_gc_friendly;



 extern GMemVTable *glib_mem_profiler_table;
__attribute__((__deprecated__)) extern
void g_mem_profile (void);
# 35 "/usr/include/glib-2.0/glib/glist.h" 2
# 1 "/usr/include/glib-2.0/glib/gnode.h" 1
# 38 "/usr/include/glib-2.0/glib/gnode.h"
typedef struct _GNode GNode;


typedef enum
{
  G_TRAVERSE_LEAVES = 1 << 0,
  G_TRAVERSE_NON_LEAVES = 1 << 1,
  G_TRAVERSE_ALL = G_TRAVERSE_LEAVES | G_TRAVERSE_NON_LEAVES,
  G_TRAVERSE_MASK = 0x03,
  G_TRAVERSE_LEAFS = G_TRAVERSE_LEAVES,
  G_TRAVERSE_NON_LEAFS = G_TRAVERSE_NON_LEAVES
} GTraverseFlags;


typedef enum
{
  G_IN_ORDER,
  G_PRE_ORDER,
  G_POST_ORDER,
  G_LEVEL_ORDER
} GTraverseType;

typedef gboolean (*GNodeTraverseFunc) (GNode *node,
       gpointer data);
typedef void (*GNodeForeachFunc) (GNode *node,
       gpointer data);



struct _GNode
{
  gpointer data;
  GNode *next;
  GNode *prev;
  GNode *parent;
  GNode *children;
};
# 100 "/usr/include/glib-2.0/glib/gnode.h"
 extern
GNode* g_node_new (gpointer data);
 extern
void g_node_destroy (GNode *root);
 extern
void g_node_unlink (GNode *node);
 extern
GNode* g_node_copy_deep (GNode *node,
     GCopyFunc copy_func,
     gpointer data);
 extern
GNode* g_node_copy (GNode *node);
 extern
GNode* g_node_insert (GNode *parent,
     gint position,
     GNode *node);
 extern
GNode* g_node_insert_before (GNode *parent,
     GNode *sibling,
     GNode *node);
 extern
GNode* g_node_insert_after (GNode *parent,
     GNode *sibling,
     GNode *node);
 extern
GNode* g_node_prepend (GNode *parent,
     GNode *node);
 extern
guint g_node_n_nodes (GNode *root,
     GTraverseFlags flags);
 extern
GNode* g_node_get_root (GNode *node);
 extern
gboolean g_node_is_ancestor (GNode *node,
     GNode *descendant);
 extern
guint g_node_depth (GNode *node);
 extern
GNode* g_node_find (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gpointer data);
# 225 "/usr/include/glib-2.0/glib/gnode.h"
 extern
void g_node_traverse (GNode *root,
     GTraverseType order,
     GTraverseFlags flags,
     gint max_depth,
     GNodeTraverseFunc func,
     gpointer data);






 extern
guint g_node_max_height (GNode *root);

 extern
void g_node_children_foreach (GNode *node,
      GTraverseFlags flags,
      GNodeForeachFunc func,
      gpointer data);
 extern
void g_node_reverse_children (GNode *node);
 extern
guint g_node_n_children (GNode *node);
 extern
GNode* g_node_nth_child (GNode *node,
      guint n);
 extern
GNode* g_node_last_child (GNode *node);
 extern
GNode* g_node_find_child (GNode *node,
      GTraverseFlags flags,
      gpointer data);
 extern
gint g_node_child_position (GNode *node,
      GNode *child);
 extern
gint g_node_child_index (GNode *node,
      gpointer data);

 extern
GNode* g_node_first_sibling (GNode *node);
 extern
GNode* g_node_last_sibling (GNode *node);
# 36 "/usr/include/glib-2.0/glib/glist.h" 2



typedef struct _GList GList;

struct _GList
{
  gpointer data;
  GList *next;
  GList *prev;
};



 extern
GList* g_list_alloc (void) __attribute__((warn_unused_result));
 extern
void g_list_free (GList *list);
 extern
void g_list_free_1 (GList *list);

 extern
void g_list_free_full (GList *list,
      GDestroyNotify free_func);
 extern
GList* g_list_append (GList *list,
      gpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_prepend (GList *list,
      gpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_insert (GList *list,
      gpointer data,
      gint position) __attribute__((warn_unused_result));
 extern
GList* g_list_insert_sorted (GList *list,
      gpointer data,
      GCompareFunc func) __attribute__((warn_unused_result));
 extern
GList* g_list_insert_sorted_with_data (GList *list,
      gpointer data,
      GCompareDataFunc func,
      gpointer user_data) __attribute__((warn_unused_result));
 extern
GList* g_list_insert_before (GList *list,
      GList *sibling,
      gpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_insert_before_link (GList *list,
      GList *sibling,
      GList *link_) __attribute__((warn_unused_result));
 extern
GList* g_list_concat (GList *list1,
      GList *list2) __attribute__((warn_unused_result));
 extern
GList* g_list_remove (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_remove_all (GList *list,
      gconstpointer data) __attribute__((warn_unused_result));
 extern
GList* g_list_remove_link (GList *list,
      GList *llink) __attribute__((warn_unused_result));
 extern
GList* g_list_delete_link (GList *list,
      GList *link_) __attribute__((warn_unused_result));
 extern
GList* g_list_reverse (GList *list) __attribute__((warn_unused_result));
 extern
GList* g_list_copy (GList *list) __attribute__((warn_unused_result));

 extern
GList* g_list_copy_deep (GList *list,
      GCopyFunc func,
      gpointer user_data) __attribute__((warn_unused_result));

 extern
GList* g_list_nth (GList *list,
      guint n);
 extern
GList* g_list_nth_prev (GList *list,
      guint n);
 extern
GList* g_list_find (GList *list,
      gconstpointer data);
 extern
GList* g_list_find_custom (GList *list,
      gconstpointer data,
      GCompareFunc func);
 extern
gint g_list_position (GList *list,
      GList *llink);
 extern
gint g_list_index (GList *list,
      gconstpointer data);
 extern
GList* g_list_last (GList *list);
 extern
GList* g_list_first (GList *list);
 extern
guint g_list_length (GList *list);
 extern
void g_list_foreach (GList *list,
      GFunc func,
      gpointer user_data);
 extern
GList* g_list_sort (GList *list,
      GCompareFunc compare_func) __attribute__((warn_unused_result));
 extern
GList* g_list_sort_with_data (GList *list,
      GCompareDataFunc compare_func,
      gpointer user_data) __attribute__((warn_unused_result));
 extern
gpointer g_list_nth_data (GList *list,
      guint n);

 extern
void g_clear_list (GList **list_ptr,
                                         GDestroyNotify destroy);
# 37 "/usr/include/glib-2.0/glib/ghash.h" 2



typedef struct _GHashTable GHashTable;

typedef gboolean (*GHRFunc) (gpointer key,
                               gpointer value,
                               gpointer user_data);

typedef struct _GHashTableIter GHashTableIter;

struct _GHashTableIter
{

  gpointer dummy1;
  gpointer dummy2;
  gpointer dummy3;
  int dummy4;
  gboolean dummy5;
  gpointer dummy6;
};

 extern
GHashTable* g_hash_table_new (GHashFunc hash_func,
                                            GEqualFunc key_equal_func);
 extern
GHashTable* g_hash_table_new_full (GHashFunc hash_func,
                                            GEqualFunc key_equal_func,
                                            GDestroyNotify key_destroy_func,
                                            GDestroyNotify value_destroy_func);
 extern
GHashTable *g_hash_table_new_similar (GHashTable *other_hash_table);
 extern
void g_hash_table_destroy (GHashTable *hash_table);
 extern
gboolean g_hash_table_insert (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
 extern
gboolean g_hash_table_replace (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
 extern
gboolean g_hash_table_add (GHashTable *hash_table,
                                            gpointer key);
 extern
gboolean g_hash_table_remove (GHashTable *hash_table,
                                            gconstpointer key);
 extern
void g_hash_table_remove_all (GHashTable *hash_table);
 extern
gboolean g_hash_table_steal (GHashTable *hash_table,
                                            gconstpointer key);
 extern
gboolean g_hash_table_steal_extended (GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *stolen_key,
                                            gpointer *stolen_value);
 extern
void g_hash_table_steal_all (GHashTable *hash_table);
 extern
GPtrArray * g_hash_table_steal_all_keys (GHashTable *hash_table);
 extern
GPtrArray * g_hash_table_steal_all_values (GHashTable *hash_table);
 extern
gpointer g_hash_table_lookup (GHashTable *hash_table,
                                            gconstpointer key);
 extern
gboolean g_hash_table_contains (GHashTable *hash_table,
                                            gconstpointer key);
 extern
gboolean g_hash_table_lookup_extended (GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *orig_key,
                                            gpointer *value);
 extern
void g_hash_table_foreach (GHashTable *hash_table,
                                            GHFunc func,
                                            gpointer user_data);
 extern
gpointer g_hash_table_find (GHashTable *hash_table,
                                            GHRFunc predicate,
                                            gpointer user_data);
 extern
guint g_hash_table_foreach_remove (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
 extern
guint g_hash_table_foreach_steal (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
 extern
guint g_hash_table_size (GHashTable *hash_table);
 extern
GList * g_hash_table_get_keys (GHashTable *hash_table);
 extern
GList * g_hash_table_get_values (GHashTable *hash_table);
 extern
gpointer * g_hash_table_get_keys_as_array (GHashTable *hash_table,
                                            guint *length);
 extern
GPtrArray * g_hash_table_get_keys_as_ptr_array (GHashTable *hash_table);

 extern
GPtrArray * g_hash_table_get_values_as_ptr_array (GHashTable *hash_table);

 extern
void g_hash_table_iter_init (GHashTableIter *iter,
                                            GHashTable *hash_table);
 extern
gboolean g_hash_table_iter_next (GHashTableIter *iter,
                                            gpointer *key,
                                            gpointer *value);
 extern
GHashTable* g_hash_table_iter_get_hash_table (GHashTableIter *iter);
 extern
void g_hash_table_iter_remove (GHashTableIter *iter);
 extern
void g_hash_table_iter_replace (GHashTableIter *iter,
                                            gpointer value);
 extern
void g_hash_table_iter_steal (GHashTableIter *iter);

 extern
GHashTable* g_hash_table_ref (GHashTable *hash_table);
 extern
void g_hash_table_unref (GHashTable *hash_table);






 extern
gboolean g_str_equal (gconstpointer v1,
                         gconstpointer v2);




 extern
guint g_str_hash (gconstpointer v);

 extern
gboolean g_int_equal (gconstpointer v1,
                         gconstpointer v2);
 extern
guint g_int_hash (gconstpointer v);

 extern
gboolean g_int64_equal (gconstpointer v1,
                         gconstpointer v2);
 extern
guint g_int64_hash (gconstpointer v);

 extern
gboolean g_double_equal (gconstpointer v1,
                         gconstpointer v2);
 extern
guint g_double_hash (gconstpointer v);

 extern
guint g_direct_hash (gconstpointer v) __attribute__ ((__const__));
 extern
gboolean g_direct_equal (gconstpointer v1,
                         gconstpointer v2) __attribute__ ((__const__));
# 53 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghmac.h" 1
# 33 "/usr/include/glib-2.0/glib/ghmac.h"
typedef struct _GHmac GHmac;

 extern
GHmac * g_hmac_new (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len);
 extern
GHmac * g_hmac_copy (const GHmac *hmac);
 extern
GHmac * g_hmac_ref (GHmac *hmac);
 extern
void g_hmac_unref (GHmac *hmac);
 extern
void g_hmac_update (GHmac *hmac,
                                                     const guchar *data,
                                                     gssize length);
 extern
const gchar * g_hmac_get_string (GHmac *hmac);
 extern
void g_hmac_get_digest (GHmac *hmac,
                                                     guint8 *buffer,
                                                     gsize *digest_len);

 extern
gchar *g_compute_hmac_for_data (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len,
                                                     const guchar *data,
                                                     gsize length);
 extern
gchar *g_compute_hmac_for_string (GChecksumType digest_type,
                                                     const guchar *key,
                                                     gsize key_len,
                                                     const gchar *str,
                                                     gssize length);
 extern
gchar *g_compute_hmac_for_bytes (GChecksumType digest_type,
                                                     GBytes *key,
                                                     GBytes *data);
# 54 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghook.h" 1
# 40 "/usr/include/glib-2.0/glib/ghook.h"
typedef struct _GHook GHook;
typedef struct _GHookList GHookList;

typedef gint (*GHookCompareFunc) (GHook *new_hook,
       GHook *sibling);
typedef gboolean (*GHookFindFunc) (GHook *hook,
       gpointer data);
typedef void (*GHookMarshaller) (GHook *hook,
       gpointer marshal_data);
typedef gboolean (*GHookCheckMarshaller) (GHook *hook,
       gpointer marshal_data);
typedef void (*GHookFunc) (gpointer data);
typedef gboolean (*GHookCheckFunc) (gpointer data);
typedef void (*GHookFinalizeFunc) (GHookList *hook_list,
       GHook *hook);
typedef enum
{
  G_HOOK_FLAG_ACTIVE = 1 << 0,
  G_HOOK_FLAG_IN_CALL = 1 << 1,
  G_HOOK_FLAG_MASK = 0x0f
} GHookFlagMask;




struct _GHookList
{
  gulong seq_id;
  guint hook_size : 16;
  guint is_setup : 1;
  GHook *hooks;
  gpointer dummy3;
  GHookFinalizeFunc finalize_hook;
  gpointer dummy[2];
};
struct _GHook
{
  gpointer data;
  GHook *next;
  GHook *prev;
  guint ref_count;
  gulong hook_id;
  guint flags;
  gpointer func;
  GDestroyNotify destroy;
};
# 106 "/usr/include/glib-2.0/glib/ghook.h"
 extern
void g_hook_list_init (GHookList *hook_list,
      guint hook_size);
 extern
void g_hook_list_clear (GHookList *hook_list);
 extern
GHook* g_hook_alloc (GHookList *hook_list);
 extern
void g_hook_free (GHookList *hook_list,
      GHook *hook);
 extern
GHook * g_hook_ref (GHookList *hook_list,
      GHook *hook);
 extern
void g_hook_unref (GHookList *hook_list,
      GHook *hook);
 extern
gboolean g_hook_destroy (GHookList *hook_list,
      gulong hook_id);
 extern
void g_hook_destroy_link (GHookList *hook_list,
      GHook *hook);
 extern
void g_hook_prepend (GHookList *hook_list,
      GHook *hook);
 extern
void g_hook_insert_before (GHookList *hook_list,
      GHook *sibling,
      GHook *hook);
 extern
void g_hook_insert_sorted (GHookList *hook_list,
      GHook *hook,
      GHookCompareFunc func);
 extern
GHook* g_hook_get (GHookList *hook_list,
      gulong hook_id);
 extern
GHook* g_hook_find (GHookList *hook_list,
      gboolean need_valids,
      GHookFindFunc func,
      gpointer data);
 extern
GHook* g_hook_find_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer data);
 extern
GHook* g_hook_find_func (GHookList *hook_list,
      gboolean need_valids,
      gpointer func);
 extern
GHook* g_hook_find_func_data (GHookList *hook_list,
      gboolean need_valids,
      gpointer func,
      gpointer data);

 extern
GHook* g_hook_first_valid (GHookList *hook_list,
      gboolean may_be_in_call);



 extern
GHook* g_hook_next_valid (GHookList *hook_list,
      GHook *hook,
      gboolean may_be_in_call);

 extern
gint g_hook_compare_ids (GHook *new_hook,
      GHook *sibling);





 extern
void g_hook_list_invoke (GHookList *hook_list,
      gboolean may_recurse);



 extern
void g_hook_list_invoke_check (GHookList *hook_list,
      gboolean may_recurse);


 extern
void g_hook_list_marshal (GHookList *hook_list,
      gboolean may_recurse,
      GHookMarshaller marshaller,
      gpointer marshal_data);
 extern
void g_hook_list_marshal_check (GHookList *hook_list,
      gboolean may_recurse,
      GHookCheckMarshaller marshaller,
      gpointer marshal_data);
# 55 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghostutils.h" 1
# 31 "/usr/include/glib-2.0/glib/ghostutils.h"
 extern
gboolean g_hostname_is_non_ascii (const gchar *hostname);
 extern
gboolean g_hostname_is_ascii_encoded (const gchar *hostname);
 extern
gboolean g_hostname_is_ip_address (const gchar *hostname);

 extern
gchar *g_hostname_to_ascii (const gchar *hostname);
 extern
gchar *g_hostname_to_unicode (const gchar *hostname);
# 56 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/giochannel.h" 1
# 35 "/usr/include/glib-2.0/glib/giochannel.h"
# 1 "/usr/include/glib-2.0/glib/gmain.h" 1
# 27 "/usr/include/glib-2.0/glib/gmain.h"
# 1 "/usr/include/glib-2.0/glib/gpoll.h" 1
# 61 "/usr/include/glib-2.0/glib/gpoll.h"
typedef struct _GPollFD GPollFD;
# 76 "/usr/include/glib-2.0/glib/gpoll.h"
typedef gint (*GPollFunc) (GPollFD *ufds,
                                 guint nfsd,
                                 gint timeout_);
# 93 "/usr/include/glib-2.0/glib/gpoll.h"
struct _GPollFD
{





  gint fd;

  gushort events;
  gushort revents;
};
# 114 "/usr/include/glib-2.0/glib/gpoll.h"
 extern
gint
g_poll (GPollFD *fds,
 guint nfds,
 gint timeout);
# 28 "/usr/include/glib-2.0/glib/gmain.h" 2
# 1 "/usr/include/glib-2.0/glib/gslist.h" 1
# 39 "/usr/include/glib-2.0/glib/gslist.h"
typedef struct _GSList GSList;

struct _GSList
{
  gpointer data;
  GSList *next;
};



 extern
GSList* g_slist_alloc (void) __attribute__((warn_unused_result));
 extern
void g_slist_free (GSList *list);
 extern
void g_slist_free_1 (GSList *list);

 extern
void g_slist_free_full (GSList *list,
       GDestroyNotify free_func);
 extern
GSList* g_slist_append (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_prepend (GSList *list,
       gpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_insert (GSList *list,
       gpointer data,
       gint position) __attribute__((warn_unused_result));
 extern
GSList* g_slist_insert_sorted (GSList *list,
       gpointer data,
       GCompareFunc func) __attribute__((warn_unused_result));
 extern
GSList* g_slist_insert_sorted_with_data (GSList *list,
       gpointer data,
       GCompareDataFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_insert_before (GSList *slist,
       GSList *sibling,
       gpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_concat (GSList *list1,
       GSList *list2) __attribute__((warn_unused_result));
 extern
GSList* g_slist_remove (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_remove_all (GSList *list,
       gconstpointer data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_remove_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
 extern
GSList* g_slist_delete_link (GSList *list,
       GSList *link_) __attribute__((warn_unused_result));
 extern
GSList* g_slist_reverse (GSList *list) __attribute__((warn_unused_result));
 extern
GSList* g_slist_copy (GSList *list) __attribute__((warn_unused_result));

 extern
GSList* g_slist_copy_deep (GSList *list,
       GCopyFunc func,
       gpointer user_data) __attribute__((warn_unused_result));
 extern
GSList* g_slist_nth (GSList *list,
       guint n);
 extern
GSList* g_slist_find (GSList *list,
       gconstpointer data);
 extern
GSList* g_slist_find_custom (GSList *list,
       gconstpointer data,
       GCompareFunc func);
 extern
gint g_slist_position (GSList *list,
       GSList *llink);
 extern
gint g_slist_index (GSList *list,
       gconstpointer data);
 extern
GSList* g_slist_last (GSList *list);
 extern
guint g_slist_length (GSList *list);
 extern
void g_slist_foreach (GSList *list,
       GFunc func,
       gpointer user_data);
 extern
GSList* g_slist_sort (GSList *list,
       GCompareFunc compare_func) __attribute__((warn_unused_result));
 extern
GSList* g_slist_sort_with_data (GSList *list,
       GCompareDataFunc compare_func,
       gpointer user_data) __attribute__((warn_unused_result));
 extern
gpointer g_slist_nth_data (GSList *list,
       guint n);

 extern
void g_clear_slist (GSList **slist_ptr,
                                          GDestroyNotify destroy);
# 29 "/usr/include/glib-2.0/glib/gmain.h" 2




typedef enum
{
  G_IO_IN =1,
  G_IO_OUT =4,
  G_IO_PRI =2,
  G_IO_ERR =8,
  G_IO_HUP =16,
  G_IO_NVAL =32
} GIOCondition;
# 57 "/usr/include/glib-2.0/glib/gmain.h"
typedef enum
{
  G_MAIN_CONTEXT_FLAGS_NONE = 0,
  G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING = 1
} GMainContextFlags;
# 70 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GMainContext GMainContext;







typedef struct _GMainLoop GMainLoop;







typedef struct _GSource GSource;
typedef struct _GSourcePrivate GSourcePrivate;
# 99 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
# 157 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GSourceFuncs GSourceFuncs;
# 199 "/usr/include/glib-2.0/glib/gmain.h"
typedef gboolean (*GSourceFunc) (gpointer user_data);
# 213 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (* GSourceOnceFunc) (gpointer user_data);
# 249 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (*GChildWatchFunc) (GPid pid,
                                       gint wait_status,
                                       gpointer user_data);
# 264 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (*GSourceDisposeFunc) (GSource *source);

struct _GSource
{

  gpointer callback_data;
  GSourceCallbackFuncs *callback_funcs;

  const GSourceFuncs *source_funcs;
  guint ref_count;

  GMainContext *context;

  gint priority;
  guint flags;
  guint source_id;

  GSList *poll_fds;

  GSource *prev;
  GSource *next;

  char *name;

  GSourcePrivate *priv;
};

struct _GSourceCallbackFuncs
{
  void (*ref) (gpointer cb_data);
  void (*unref) (gpointer cb_data);
  void (*get) (gpointer cb_data,
                 GSource *source,
                 GSourceFunc *func,
                 gpointer *data);
};







typedef void (*GSourceDummyMarshal) (void);
# 333 "/usr/include/glib-2.0/glib/gmain.h"
typedef gboolean (*GSourceFuncsPrepareFunc) (GSource *source,
                                             gint *timeout_);
# 354 "/usr/include/glib-2.0/glib/gmain.h"
typedef gboolean (*GSourceFuncsCheckFunc) (GSource *source);
# 379 "/usr/include/glib-2.0/glib/gmain.h"
typedef gboolean (*GSourceFuncsDispatchFunc) (GSource *source,
                                              GSourceFunc callback,
                                              gpointer user_data);
# 396 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (*GSourceFuncsFinalizeFunc) (GSource *source);

struct _GSourceFuncs
{
  GSourceFuncsPrepareFunc prepare;
  GSourceFuncsCheckFunc check;
  GSourceFuncsDispatchFunc dispatch;
  GSourceFuncsFinalizeFunc finalize;



  GSourceFunc closure_callback;
  GSourceDummyMarshal closure_marshal;
};
# 486 "/usr/include/glib-2.0/glib/gmain.h"
 extern
GMainContext *g_main_context_new (void);
#pragma clang diagnostic push
# 488 "/usr/include/glib-2.0/glib/gmain.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
GMainContext *g_main_context_new_with_flags (GMainContextFlags flags);
#pragma clang diagnostic pop
 extern
GMainContext *g_main_context_ref (GMainContext *context);
 extern
void g_main_context_unref (GMainContext *context);
 extern
GMainContext *g_main_context_default (void);

 extern
gboolean g_main_context_iteration (GMainContext *context,
                                        gboolean may_block);
 extern
gboolean g_main_context_pending (GMainContext *context);



 extern
GSource *g_main_context_find_source_by_id (GMainContext *context,
                                                             guint source_id);
 extern
GSource *g_main_context_find_source_by_user_data (GMainContext *context,
                                                             gpointer user_data);
 extern
GSource *g_main_context_find_source_by_funcs_user_data (GMainContext *context,
                                                             GSourceFuncs *funcs,
                                                             gpointer user_data);



 extern
void g_main_context_wakeup (GMainContext *context);
 extern
gboolean g_main_context_acquire (GMainContext *context);
 extern
void g_main_context_release (GMainContext *context);
 extern
gboolean g_main_context_is_owner (GMainContext *context);
__attribute__((__deprecated__("Use '" "g_main_context_is_owner" "' instead"))) extern
gboolean g_main_context_wait (GMainContext *context,
                                 GCond *cond,
                                 GMutex *mutex);

 extern
gboolean g_main_context_prepare (GMainContext *context,
                                  gint *priority);
 extern
gint g_main_context_query (GMainContext *context,
                                  gint max_priority,
                                  gint *timeout_,
                                  GPollFD *fds,
                                  gint n_fds);
 extern
gboolean g_main_context_check (GMainContext *context,
                                      gint max_priority,
                                      GPollFD *fds,
                                      gint n_fds);
 extern
void g_main_context_dispatch (GMainContext *context);

 extern
void g_main_context_set_poll_func (GMainContext *context,
                                       GPollFunc func);
 extern
GPollFunc g_main_context_get_poll_func (GMainContext *context);



 extern
void g_main_context_add_poll (GMainContext *context,
                                     GPollFD *fd,
                                     gint priority);
 extern
void g_main_context_remove_poll (GMainContext *context,
                                     GPollFD *fd);

 extern
gint g_main_depth (void);
 extern
GSource *g_main_current_source (void);



 extern
void g_main_context_push_thread_default (GMainContext *context);
 extern
void g_main_context_pop_thread_default (GMainContext *context);
 extern
GMainContext *g_main_context_get_thread_default (void);
 extern
GMainContext *g_main_context_ref_thread_default (void);
# 589 "/usr/include/glib-2.0/glib/gmain.h"
typedef void GMainContextPusher ;
# 636 "/usr/include/glib-2.0/glib/gmain.h"
#pragma clang diagnostic push
# 636 "/usr/include/glib-2.0/glib/gmain.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline GMainContextPusher *
g_main_context_pusher_new (GMainContext *main_context)
{
  g_main_context_push_thread_default (main_context);
  return (GMainContextPusher *) main_context;
}
#pragma clang diagnostic pop
# 658 "/usr/include/glib-2.0/glib/gmain.h"
#pragma clang diagnostic push
# 658 "/usr/include/glib-2.0/glib/gmain.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

static inline void
g_main_context_pusher_free (GMainContextPusher *pusher)
{
  g_main_context_pop_thread_default ((GMainContext *) pusher);
}
#pragma clang diagnostic pop



 extern
GMainLoop *g_main_loop_new (GMainContext *context,
                                   gboolean is_running);
 extern
void g_main_loop_run (GMainLoop *loop);
 extern
void g_main_loop_quit (GMainLoop *loop);
 extern
GMainLoop *g_main_loop_ref (GMainLoop *loop);
 extern
void g_main_loop_unref (GMainLoop *loop);
 extern
gboolean g_main_loop_is_running (GMainLoop *loop);
 extern
GMainContext *g_main_loop_get_context (GMainLoop *loop);



 extern
GSource *g_source_new (GSourceFuncs *source_funcs,
                                   guint struct_size);

#pragma clang diagnostic push
# 691 "/usr/include/glib-2.0/glib/gmain.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
void g_source_set_dispose_function (GSource *source,
                                        GSourceDisposeFunc dispose);
#pragma clang diagnostic pop

 extern
GSource *g_source_ref (GSource *source);
 extern
void g_source_unref (GSource *source);

 extern
guint g_source_attach (GSource *source,
                                   GMainContext *context);
 extern
void g_source_destroy (GSource *source);

 extern
void g_source_set_priority (GSource *source,
                                   gint priority);
 extern
gint g_source_get_priority (GSource *source);
 extern
void g_source_set_can_recurse (GSource *source,
                                   gboolean can_recurse);
 extern
gboolean g_source_get_can_recurse (GSource *source);
 extern
guint g_source_get_id (GSource *source);

 extern
GMainContext *g_source_get_context (GSource *source);

 extern
void g_source_set_callback (GSource *source,
                                   GSourceFunc func,
                                   gpointer data,
                                   GDestroyNotify notify);

 extern
void g_source_set_funcs (GSource *source,
                                   GSourceFuncs *funcs);
 extern
gboolean g_source_is_destroyed (GSource *source);

 extern
void g_source_set_name (GSource *source,
                                              const char *name);
 extern
void g_source_set_static_name (GSource *source,
                                               const char *name);
 extern
const char * g_source_get_name (GSource *source);
 extern
void g_source_set_name_by_id (guint tag,
                                              const char *name);

 extern
void g_source_set_ready_time (GSource *source,
                                              gint64 ready_time);
 extern
gint64 g_source_get_ready_time (GSource *source);


 extern
gpointer g_source_add_unix_fd (GSource *source,
                                              gint fd,
                                              GIOCondition events);
 extern
void g_source_modify_unix_fd (GSource *source,
                                              gpointer tag,
                                              GIOCondition new_events);
 extern
void g_source_remove_unix_fd (GSource *source,
                                              gpointer tag);
 extern
GIOCondition g_source_query_unix_fd (GSource *source,
                                              gpointer tag);



 extern
void g_source_set_callback_indirect (GSource *source,
                                     gpointer callback_data,
                                     GSourceCallbackFuncs *callback_funcs);

 extern
void g_source_add_poll (GSource *source,
           GPollFD *fd);
 extern
void g_source_remove_poll (GSource *source,
           GPollFD *fd);

 extern
void g_source_add_child_source (GSource *source,
           GSource *child_source);
 extern
void g_source_remove_child_source (GSource *source,
           GSource *child_source);

#pragma clang diagnostic push
# 791 "/usr/include/glib-2.0/glib/gmain.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_source_get_time" "' instead"))) extern
void g_source_get_current_time (GSource *source,
                                    GTimeVal *timeval);
#pragma clang diagnostic pop

 extern
gint64 g_source_get_time (GSource *source);







 extern
GSource *g_idle_source_new (void);
 extern
GSource *g_child_watch_source_new (GPid pid);
 extern
GSource *g_timeout_source_new (guint interval);
 extern
GSource *g_timeout_source_new_seconds (guint interval);



#pragma clang diagnostic push
# 817 "/usr/include/glib-2.0/glib/gmain.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_get_real_time" "' instead"))) extern
void g_get_current_time (GTimeVal *result);
#pragma clang diagnostic pop

 extern
gint64 g_get_monotonic_time (void);
 extern
gint64 g_get_real_time (void);



 extern
gboolean g_source_remove (guint tag);
 extern
gboolean g_source_remove_by_user_data (gpointer user_data);
 extern
gboolean g_source_remove_by_funcs_user_data (GSourceFuncs *funcs,
                                              gpointer user_data);
# 848 "/usr/include/glib-2.0/glib/gmain.h"
typedef void (* GClearHandleFunc) (guint handle_id);

 extern
void g_clear_handle_id (guint *tag_ptr,
                           GClearHandleFunc clear_func);
# 870 "/usr/include/glib-2.0/glib/gmain.h"
 extern
guint g_timeout_add_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
guint g_timeout_add (guint interval,
                                     GSourceFunc function,
                                     gpointer data);
 extern
guint g_timeout_add_once (guint interval,
                                     GSourceOnceFunc function,
                                     gpointer data);
 extern
guint g_timeout_add_seconds_full (gint priority,
                                     guint interval,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
guint g_timeout_add_seconds (guint interval,
                                     GSourceFunc function,
                                     gpointer data);
 extern
guint g_timeout_add_seconds_once (guint interval,
                                     GSourceOnceFunc function,
                                     gpointer data);
 extern
guint g_child_watch_add_full (gint priority,
                                     GPid pid,
                                     GChildWatchFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
guint g_child_watch_add (GPid pid,
                                     GChildWatchFunc function,
                                     gpointer data);
 extern
guint g_idle_add (GSourceFunc function,
                                     gpointer data);
 extern
guint g_idle_add_full (gint priority,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
guint g_idle_add_once (GSourceOnceFunc function,
                                     gpointer data);
 extern
gboolean g_idle_remove_by_data (gpointer data);

 extern
void g_main_context_invoke_full (GMainContext *context,
                                     gint priority,
                                     GSourceFunc function,
                                     gpointer data,
                                     GDestroyNotify notify);
 extern
void g_main_context_invoke (GMainContext *context,
                                     GSourceFunc function,
                                     gpointer data);


static inline int
g_steal_fd (int *fd_ptr)
{
  int fd = *fd_ptr;
  *fd_ptr = -1;
  return fd;
}


 extern GSourceFuncs g_timeout_funcs;
 extern GSourceFuncs g_child_watch_funcs;
 extern GSourceFuncs g_idle_funcs;

 extern GSourceFuncs g_unix_signal_funcs;
 extern GSourceFuncs g_unix_fd_source_funcs;
# 36 "/usr/include/glib-2.0/glib/giochannel.h" 2
# 1 "/usr/include/glib-2.0/glib/gstring.h" 1
# 35 "/usr/include/glib-2.0/glib/gstring.h"
# 1 "/usr/include/glib-2.0/glib/gunicode.h" 1
# 61 "/usr/include/glib-2.0/glib/gunicode.h"
typedef guint32 gunichar;
# 79 "/usr/include/glib-2.0/glib/gunicode.h"
typedef guint16 gunichar2;
# 118 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum
{
  G_UNICODE_CONTROL,
  G_UNICODE_FORMAT,
  G_UNICODE_UNASSIGNED,
  G_UNICODE_PRIVATE_USE,
  G_UNICODE_SURROGATE,
  G_UNICODE_LOWERCASE_LETTER,
  G_UNICODE_MODIFIER_LETTER,
  G_UNICODE_OTHER_LETTER,
  G_UNICODE_TITLECASE_LETTER,
  G_UNICODE_UPPERCASE_LETTER,
  G_UNICODE_SPACING_MARK,
  G_UNICODE_ENCLOSING_MARK,
  G_UNICODE_NON_SPACING_MARK,
  G_UNICODE_DECIMAL_NUMBER,
  G_UNICODE_LETTER_NUMBER,
  G_UNICODE_OTHER_NUMBER,
  G_UNICODE_CONNECT_PUNCTUATION,
  G_UNICODE_DASH_PUNCTUATION,
  G_UNICODE_CLOSE_PUNCTUATION,
  G_UNICODE_FINAL_PUNCTUATION,
  G_UNICODE_INITIAL_PUNCTUATION,
  G_UNICODE_OTHER_PUNCTUATION,
  G_UNICODE_OPEN_PUNCTUATION,
  G_UNICODE_CURRENCY_SYMBOL,
  G_UNICODE_MODIFIER_SYMBOL,
  G_UNICODE_MATH_SYMBOL,
  G_UNICODE_OTHER_SYMBOL,
  G_UNICODE_LINE_SEPARATOR,
  G_UNICODE_PARAGRAPH_SEPARATOR,
  G_UNICODE_SPACE_SEPARATOR
} GUnicodeType;
# 220 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum
{
  G_UNICODE_BREAK_MANDATORY,
  G_UNICODE_BREAK_CARRIAGE_RETURN,
  G_UNICODE_BREAK_LINE_FEED,
  G_UNICODE_BREAK_COMBINING_MARK,
  G_UNICODE_BREAK_SURROGATE,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
  G_UNICODE_BREAK_INSEPARABLE,
  G_UNICODE_BREAK_NON_BREAKING_GLUE,
  G_UNICODE_BREAK_CONTINGENT,
  G_UNICODE_BREAK_SPACE,
  G_UNICODE_BREAK_AFTER,
  G_UNICODE_BREAK_BEFORE,
  G_UNICODE_BREAK_BEFORE_AND_AFTER,
  G_UNICODE_BREAK_HYPHEN,
  G_UNICODE_BREAK_NON_STARTER,
  G_UNICODE_BREAK_OPEN_PUNCTUATION,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION,
  G_UNICODE_BREAK_QUOTATION,
  G_UNICODE_BREAK_EXCLAMATION,
  G_UNICODE_BREAK_IDEOGRAPHIC,
  G_UNICODE_BREAK_NUMERIC,
  G_UNICODE_BREAK_INFIX_SEPARATOR,
  G_UNICODE_BREAK_SYMBOL,
  G_UNICODE_BREAK_ALPHABETIC,
  G_UNICODE_BREAK_PREFIX,
  G_UNICODE_BREAK_POSTFIX,
  G_UNICODE_BREAK_COMPLEX_CONTEXT,
  G_UNICODE_BREAK_AMBIGUOUS,
  G_UNICODE_BREAK_UNKNOWN,
  G_UNICODE_BREAK_NEXT_LINE,
  G_UNICODE_BREAK_WORD_JOINER,
  G_UNICODE_BREAK_HANGUL_L_JAMO,
  G_UNICODE_BREAK_HANGUL_V_JAMO,
  G_UNICODE_BREAK_HANGUL_T_JAMO,
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE,
  G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CLOSE_PARENTHESIS = G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER,
  G_UNICODE_BREAK_HEBREW_LETTER,
  G_UNICODE_BREAK_REGIONAL_INDICATOR,
  G_UNICODE_BREAK_EMOJI_BASE,
  G_UNICODE_BREAK_EMOJI_MODIFIER,
  G_UNICODE_BREAK_ZERO_WIDTH_JOINER,
  G_UNICODE_BREAK_AKSARA,
  G_UNICODE_BREAK_AKSARA_PRE_BASE,
  G_UNICODE_BREAK_AKSARA_START,
  G_UNICODE_BREAK_VIRAMA_FINAL,
  G_UNICODE_BREAK_VIRAMA
} GUnicodeBreakType;
# 463 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum
{
  G_UNICODE_SCRIPT_INVALID_CODE = -1,
  G_UNICODE_SCRIPT_COMMON = 0,
  G_UNICODE_SCRIPT_INHERITED,
  G_UNICODE_SCRIPT_ARABIC,
  G_UNICODE_SCRIPT_ARMENIAN,
  G_UNICODE_SCRIPT_BENGALI,
  G_UNICODE_SCRIPT_BOPOMOFO,
  G_UNICODE_SCRIPT_CHEROKEE,
  G_UNICODE_SCRIPT_COPTIC,
  G_UNICODE_SCRIPT_CYRILLIC,
  G_UNICODE_SCRIPT_DESERET,
  G_UNICODE_SCRIPT_DEVANAGARI,
  G_UNICODE_SCRIPT_ETHIOPIC,
  G_UNICODE_SCRIPT_GEORGIAN,
  G_UNICODE_SCRIPT_GOTHIC,
  G_UNICODE_SCRIPT_GREEK,
  G_UNICODE_SCRIPT_GUJARATI,
  G_UNICODE_SCRIPT_GURMUKHI,
  G_UNICODE_SCRIPT_HAN,
  G_UNICODE_SCRIPT_HANGUL,
  G_UNICODE_SCRIPT_HEBREW,
  G_UNICODE_SCRIPT_HIRAGANA,
  G_UNICODE_SCRIPT_KANNADA,
  G_UNICODE_SCRIPT_KATAKANA,
  G_UNICODE_SCRIPT_KHMER,
  G_UNICODE_SCRIPT_LAO,
  G_UNICODE_SCRIPT_LATIN,
  G_UNICODE_SCRIPT_MALAYALAM,
  G_UNICODE_SCRIPT_MONGOLIAN,
  G_UNICODE_SCRIPT_MYANMAR,
  G_UNICODE_SCRIPT_OGHAM,
  G_UNICODE_SCRIPT_OLD_ITALIC,
  G_UNICODE_SCRIPT_ORIYA,
  G_UNICODE_SCRIPT_RUNIC,
  G_UNICODE_SCRIPT_SINHALA,
  G_UNICODE_SCRIPT_SYRIAC,
  G_UNICODE_SCRIPT_TAMIL,
  G_UNICODE_SCRIPT_TELUGU,
  G_UNICODE_SCRIPT_THAANA,
  G_UNICODE_SCRIPT_THAI,
  G_UNICODE_SCRIPT_TIBETAN,
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL,
  G_UNICODE_SCRIPT_YI,
  G_UNICODE_SCRIPT_TAGALOG,
  G_UNICODE_SCRIPT_HANUNOO,
  G_UNICODE_SCRIPT_BUHID,
  G_UNICODE_SCRIPT_TAGBANWA,


  G_UNICODE_SCRIPT_BRAILLE,
  G_UNICODE_SCRIPT_CYPRIOT,
  G_UNICODE_SCRIPT_LIMBU,
  G_UNICODE_SCRIPT_OSMANYA,
  G_UNICODE_SCRIPT_SHAVIAN,
  G_UNICODE_SCRIPT_LINEAR_B,
  G_UNICODE_SCRIPT_TAI_LE,
  G_UNICODE_SCRIPT_UGARITIC,


  G_UNICODE_SCRIPT_NEW_TAI_LUE,
  G_UNICODE_SCRIPT_BUGINESE,
  G_UNICODE_SCRIPT_GLAGOLITIC,
  G_UNICODE_SCRIPT_TIFINAGH,
  G_UNICODE_SCRIPT_SYLOTI_NAGRI,
  G_UNICODE_SCRIPT_OLD_PERSIAN,
  G_UNICODE_SCRIPT_KHAROSHTHI,


  G_UNICODE_SCRIPT_UNKNOWN,
  G_UNICODE_SCRIPT_BALINESE,
  G_UNICODE_SCRIPT_CUNEIFORM,
  G_UNICODE_SCRIPT_PHOENICIAN,
  G_UNICODE_SCRIPT_PHAGS_PA,
  G_UNICODE_SCRIPT_NKO,


  G_UNICODE_SCRIPT_KAYAH_LI,
  G_UNICODE_SCRIPT_LEPCHA,
  G_UNICODE_SCRIPT_REJANG,
  G_UNICODE_SCRIPT_SUNDANESE,
  G_UNICODE_SCRIPT_SAURASHTRA,
  G_UNICODE_SCRIPT_CHAM,
  G_UNICODE_SCRIPT_OL_CHIKI,
  G_UNICODE_SCRIPT_VAI,
  G_UNICODE_SCRIPT_CARIAN,
  G_UNICODE_SCRIPT_LYCIAN,
  G_UNICODE_SCRIPT_LYDIAN,


  G_UNICODE_SCRIPT_AVESTAN,
  G_UNICODE_SCRIPT_BAMUM,
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI,
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN,
  G_UNICODE_SCRIPT_JAVANESE,
  G_UNICODE_SCRIPT_KAITHI,
  G_UNICODE_SCRIPT_LISU,
  G_UNICODE_SCRIPT_MEETEI_MAYEK,
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_TURKIC,
  G_UNICODE_SCRIPT_SAMARITAN,
  G_UNICODE_SCRIPT_TAI_THAM,
  G_UNICODE_SCRIPT_TAI_VIET,


  G_UNICODE_SCRIPT_BATAK,
  G_UNICODE_SCRIPT_BRAHMI,
  G_UNICODE_SCRIPT_MANDAIC,


  G_UNICODE_SCRIPT_CHAKMA,
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE,
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS,
  G_UNICODE_SCRIPT_MIAO,
  G_UNICODE_SCRIPT_SHARADA,
  G_UNICODE_SCRIPT_SORA_SOMPENG,
  G_UNICODE_SCRIPT_TAKRI,


  G_UNICODE_SCRIPT_BASSA_VAH,
  G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN,
  G_UNICODE_SCRIPT_DUPLOYAN,
  G_UNICODE_SCRIPT_ELBASAN,
  G_UNICODE_SCRIPT_GRANTHA,
  G_UNICODE_SCRIPT_KHOJKI,
  G_UNICODE_SCRIPT_KHUDAWADI,
  G_UNICODE_SCRIPT_LINEAR_A,
  G_UNICODE_SCRIPT_MAHAJANI,
  G_UNICODE_SCRIPT_MANICHAEAN,
  G_UNICODE_SCRIPT_MENDE_KIKAKUI,
  G_UNICODE_SCRIPT_MODI,
  G_UNICODE_SCRIPT_MRO,
  G_UNICODE_SCRIPT_NABATAEAN,
  G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN,
  G_UNICODE_SCRIPT_OLD_PERMIC,
  G_UNICODE_SCRIPT_PAHAWH_HMONG,
  G_UNICODE_SCRIPT_PALMYRENE,
  G_UNICODE_SCRIPT_PAU_CIN_HAU,
  G_UNICODE_SCRIPT_PSALTER_PAHLAVI,
  G_UNICODE_SCRIPT_SIDDHAM,
  G_UNICODE_SCRIPT_TIRHUTA,
  G_UNICODE_SCRIPT_WARANG_CITI,


  G_UNICODE_SCRIPT_AHOM,
  G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS,
  G_UNICODE_SCRIPT_HATRAN,
  G_UNICODE_SCRIPT_MULTANI,
  G_UNICODE_SCRIPT_OLD_HUNGARIAN,
  G_UNICODE_SCRIPT_SIGNWRITING,


  G_UNICODE_SCRIPT_ADLAM,
  G_UNICODE_SCRIPT_BHAIKSUKI,
  G_UNICODE_SCRIPT_MARCHEN,
  G_UNICODE_SCRIPT_NEWA,
  G_UNICODE_SCRIPT_OSAGE,
  G_UNICODE_SCRIPT_TANGUT,


  G_UNICODE_SCRIPT_MASARAM_GONDI,
  G_UNICODE_SCRIPT_NUSHU,
  G_UNICODE_SCRIPT_SOYOMBO,
  G_UNICODE_SCRIPT_ZANABAZAR_SQUARE,


  G_UNICODE_SCRIPT_DOGRA,
  G_UNICODE_SCRIPT_GUNJALA_GONDI,
  G_UNICODE_SCRIPT_HANIFI_ROHINGYA,
  G_UNICODE_SCRIPT_MAKASAR,
  G_UNICODE_SCRIPT_MEDEFAIDRIN,
  G_UNICODE_SCRIPT_OLD_SOGDIAN,
  G_UNICODE_SCRIPT_SOGDIAN,


  G_UNICODE_SCRIPT_ELYMAIC,
  G_UNICODE_SCRIPT_NANDINAGARI,
  G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG,
  G_UNICODE_SCRIPT_WANCHO,


  G_UNICODE_SCRIPT_CHORASMIAN,
  G_UNICODE_SCRIPT_DIVES_AKURU,
  G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT,
  G_UNICODE_SCRIPT_YEZIDI,


  G_UNICODE_SCRIPT_CYPRO_MINOAN,
  G_UNICODE_SCRIPT_OLD_UYGHUR,
  G_UNICODE_SCRIPT_TANGSA,
  G_UNICODE_SCRIPT_TOTO,
  G_UNICODE_SCRIPT_VITHKUQI,


  G_UNICODE_SCRIPT_MATH,


  G_UNICODE_SCRIPT_KAWI ,
  G_UNICODE_SCRIPT_NAG_MUNDARI ,
} GUnicodeScript;

 extern
guint32 g_unicode_script_to_iso15924 (GUnicodeScript script);
 extern
GUnicodeScript g_unicode_script_from_iso15924 (guint32 iso15924);



 extern
gboolean g_unichar_isalnum (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isalpha (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_iscntrl (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isdigit (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isgraph (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_islower (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isprint (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_ispunct (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isspace (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isupper (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isxdigit (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_istitle (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_isdefined (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_iswide (gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_iswide_cjk(gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_iszerowidth(gunichar c) __attribute__ ((__const__));
 extern
gboolean g_unichar_ismark (gunichar c) __attribute__ ((__const__));



 extern
gunichar g_unichar_toupper (gunichar c) __attribute__ ((__const__));
 extern
gunichar g_unichar_tolower (gunichar c) __attribute__ ((__const__));
 extern
gunichar g_unichar_totitle (gunichar c) __attribute__ ((__const__));



 extern
gint g_unichar_digit_value (gunichar c) __attribute__ ((__const__));

 extern
gint g_unichar_xdigit_value (gunichar c) __attribute__ ((__const__));


 extern
GUnicodeType g_unichar_type (gunichar c) __attribute__ ((__const__));


 extern
GUnicodeBreakType g_unichar_break_type (gunichar c) __attribute__ ((__const__));


 extern
gint g_unichar_combining_class (gunichar uc) __attribute__ ((__const__));

 extern
gboolean g_unichar_get_mirror_char (gunichar ch,
                                    gunichar *mirrored_ch);

 extern
GUnicodeScript g_unichar_get_script (gunichar ch) __attribute__ ((__const__));


 extern
gboolean g_unichar_validate (gunichar ch) __attribute__ ((__const__));


 extern
gboolean g_unichar_compose (gunichar a,
                            gunichar b,
                            gunichar *ch);
 extern
gboolean g_unichar_decompose (gunichar ch,
                              gunichar *a,
                              gunichar *b);

 extern
gsize g_unichar_fully_decompose (gunichar ch,
                                 gboolean compat,
                                 gunichar *result,
                                 gsize result_len);
# 780 "/usr/include/glib-2.0/glib/gunicode.h"
 extern
void g_unicode_canonical_ordering (gunichar *string,
                                   gsize len);


__attribute__((__deprecated__)) extern
gunichar *g_unicode_canonical_decomposition (gunichar ch,
                                             gsize *result_len) __attribute__ ((__malloc__));



 extern const gchar * const g_utf8_skip;
# 811 "/usr/include/glib-2.0/glib/gunicode.h"
 extern
gunichar g_utf8_get_char (const gchar *p) __attribute__((__pure__));
 extern
gunichar g_utf8_get_char_validated (const gchar *p,
                                    gssize max_len) __attribute__((__pure__));

 extern
gchar* g_utf8_offset_to_pointer (const gchar *str,
                                   glong offset) __attribute__((__pure__));
 extern
glong g_utf8_pointer_to_offset (const gchar *str,
                                   const gchar *pos) __attribute__((__pure__));
 extern
gchar* g_utf8_prev_char (const gchar *p) __attribute__((__pure__));
 extern
gchar* g_utf8_find_next_char (const gchar *p,
                                   const gchar *end) __attribute__((__pure__));
 extern
gchar* g_utf8_find_prev_char (const gchar *str,
                                   const gchar *p) __attribute__((__pure__));

 extern
glong g_utf8_strlen (const gchar *p,
                                   gssize max) __attribute__((__pure__));

 extern
gchar *g_utf8_substring (const gchar *str,
                                   glong start_pos,
                                   glong end_pos) __attribute__ ((__malloc__));

 extern
gchar *g_utf8_strncpy (gchar *dest,
                                   const gchar *src,
                                   gsize n);

 extern
gchar *g_utf8_truncate_middle (const gchar *string,
                                   gsize truncate_length);



 extern
gchar* g_utf8_strchr (const gchar *p,
                       gssize len,
                       gunichar c);
 extern
gchar* g_utf8_strrchr (const gchar *p,
                       gssize len,
                       gunichar c);
 extern
gchar* g_utf8_strreverse (const gchar *str,
                          gssize len);

 extern
gunichar2 *g_utf8_to_utf16 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gunichar * g_utf8_to_ucs4 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gunichar * g_utf8_to_ucs4_fast (const gchar *str,
                                glong len,
                                glong *items_written) __attribute__ ((__malloc__));
 extern
gunichar * g_utf16_to_ucs4 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_utf16_to_utf8 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gunichar2 *g_ucs4_to_utf16 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));
 extern
gchar* g_ucs4_to_utf8 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error) __attribute__ ((__malloc__));

 extern
gint g_unichar_to_utf8 (gunichar c,
                             gchar *outbuf);

 extern
gboolean g_utf8_validate (const gchar *str,
                          gssize max_len,
                          const gchar **end);
 extern
gboolean g_utf8_validate_len (const gchar *str,
                              gsize max_len,
                              const gchar **end);

 extern
gchar *g_utf8_strup (const gchar *str,
                       gssize len) __attribute__ ((__malloc__));
 extern
gchar *g_utf8_strdown (const gchar *str,
                       gssize len) __attribute__ ((__malloc__));
 extern
gchar *g_utf8_casefold (const gchar *str,
                        gssize len) __attribute__ ((__malloc__));
# 952 "/usr/include/glib-2.0/glib/gunicode.h"
typedef enum {
  G_NORMALIZE_DEFAULT,
  G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
  G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_ALL,
  G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
  G_NORMALIZE_ALL_COMPOSE,
  G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE
} GNormalizeMode;

 extern
gchar *g_utf8_normalize (const gchar *str,
                         gssize len,
                         GNormalizeMode mode) __attribute__ ((__malloc__));

 extern
gint g_utf8_collate (const gchar *str1,
                           const gchar *str2) __attribute__((__pure__));
 extern
gchar *g_utf8_collate_key (const gchar *str,
                           gssize len) __attribute__ ((__malloc__));
 extern
gchar *g_utf8_collate_key_for_filename (const gchar *str,
                                        gssize len) __attribute__ ((__malloc__));

 extern
gchar *g_utf8_make_valid (const gchar *str,
                          gssize len) __attribute__ ((__malloc__));
# 36 "/usr/include/glib-2.0/glib/gstring.h" 2

# 1 "/usr/include/glib-2.0/glib/gstrfuncs.h" 1
# 34 "/usr/include/glib-2.0/glib/gstrfuncs.h"
# 1 "/usr/bin/../lib/clang/19/include/stdarg.h" 1 3
# 35 "/usr/include/glib-2.0/glib/gstrfuncs.h" 2
# 45 "/usr/include/glib-2.0/glib/gstrfuncs.h"
typedef enum {
  G_ASCII_ALNUM = 1 << 0,
  G_ASCII_ALPHA = 1 << 1,
  G_ASCII_CNTRL = 1 << 2,
  G_ASCII_DIGIT = 1 << 3,
  G_ASCII_GRAPH = 1 << 4,
  G_ASCII_LOWER = 1 << 5,
  G_ASCII_PRINT = 1 << 6,
  G_ASCII_PUNCT = 1 << 7,
  G_ASCII_SPACE = 1 << 8,
  G_ASCII_UPPER = 1 << 9,
  G_ASCII_XDIGIT = 1 << 10
} GAsciiType;

 extern const guint16 * const g_ascii_table;
# 94 "/usr/include/glib-2.0/glib/gstrfuncs.h"
 extern
gchar g_ascii_tolower (gchar c) __attribute__ ((__const__));
 extern
gchar g_ascii_toupper (gchar c) __attribute__ ((__const__));

 extern
gint g_ascii_digit_value (gchar c) __attribute__ ((__const__));
 extern
gint g_ascii_xdigit_value (gchar c) __attribute__ ((__const__));





 extern
gchar* g_strdelimit (gchar *string,
     const gchar *delimiters,
     gchar new_delimiter);
 extern
gchar* g_strcanon (gchar *string,
     const gchar *valid_chars,
     gchar substitutor);
 extern
const gchar * g_strerror (gint errnum) __attribute__ ((__const__));
 extern
const gchar * g_strsignal (gint signum) __attribute__ ((__const__));
 extern
gchar * g_strreverse (gchar *string);
 extern
gsize g_strlcpy (gchar *dest,
     const gchar *src,
     gsize dest_size);
 extern
gsize g_strlcat (gchar *dest,
     const gchar *src,
     gsize dest_size);
 extern
gchar * g_strstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);
 extern
gchar * g_strrstr (const gchar *haystack,
     const gchar *needle);
 extern
gchar * g_strrstr_len (const gchar *haystack,
     gssize haystack_len,
     const gchar *needle);

 extern
gboolean (g_str_has_suffix) (const gchar *str,
                                         const gchar *suffix);
 extern
gboolean (g_str_has_prefix) (const gchar *str,
                                         const gchar *prefix);
# 213 "/usr/include/glib-2.0/glib/gstrfuncs.h"
 extern
gdouble g_strtod (const gchar *nptr,
     gchar **endptr);
 extern
gdouble g_ascii_strtod (const gchar *nptr,
     gchar **endptr);
 extern
guint64 g_ascii_strtoull (const gchar *nptr,
     gchar **endptr,
     guint base);
 extern
gint64 g_ascii_strtoll (const gchar *nptr,
     gchar **endptr,
     guint base);




 extern
gchar * g_ascii_dtostr (gchar *buffer,
     gint buf_len,
     gdouble d);
 extern
gchar * g_ascii_formatd (gchar *buffer,
     gint buf_len,
     const gchar *format,
     gdouble d);


 extern
gchar* g_strchug (gchar *string);

 extern
gchar* g_strchomp (gchar *string);



 extern
gint g_ascii_strcasecmp (const gchar *s1,
        const gchar *s2);
 extern
gint g_ascii_strncasecmp (const gchar *s1,
        const gchar *s2,
        gsize n);
 extern
gchar* g_ascii_strdown (const gchar *str,
        gssize len) __attribute__ ((__malloc__));
 extern
gchar* g_ascii_strup (const gchar *str,
        gssize len) __attribute__ ((__malloc__));

 extern
gboolean g_str_is_ascii (const gchar *str);

__attribute__((__deprecated__)) extern
gint g_strcasecmp (const gchar *s1,
                                        const gchar *s2);
__attribute__((__deprecated__)) extern
gint g_strncasecmp (const gchar *s1,
                                        const gchar *s2,
                                        guint n);
__attribute__((__deprecated__)) extern
gchar* g_strdown (gchar *string);
__attribute__((__deprecated__)) extern
gchar* g_strup (gchar *string);





 extern
gchar* (g_strdup) (const gchar *str) __attribute__ ((__malloc__));
 extern
gchar* g_strdup_printf (const gchar *format,
     ...) __attribute__((__format__ (__printf__, 1, 2))) __attribute__ ((__malloc__));
 extern
gchar* g_strdup_vprintf (const gchar *format,
     va_list args) __attribute__((__format__ (__printf__, 1, 0))) __attribute__ ((__malloc__));
 extern
gchar* g_strndup (const gchar *str,
     gsize n) __attribute__ ((__malloc__));
 extern
gchar* g_strnfill (gsize length,
     gchar fill_char) __attribute__ ((__malloc__));
 extern
gchar* g_strconcat (const gchar *string1,
     ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));
 extern
gchar* g_strjoin (const gchar *separator,
     ...) __attribute__ ((__malloc__)) __attribute__((__sentinel__));





__attribute__ ((__always_inline__)) static inline char *
g_strdup_inline (const char *str)
{
  if (__builtin_constant_p (!str) && !str)
    return ((void*)0);

  if (__builtin_constant_p (!!str) && !!str && __builtin_constant_p (strlen (str)))
    {
      const size_t len = strlen (str) + 1;
      char *dup_str = (char *) g_malloc (len);
      return (char *) memcpy (dup_str, str, len);
    }

  return g_strdup (str);
}







 extern
gchar* g_strcompress (const gchar *source) __attribute__ ((__malloc__));

 extern
gchar* g_strescape (const gchar *source,
     const gchar *exceptions) __attribute__ ((__malloc__));

__attribute__((__deprecated__("Use '" "g_memdup2" "' instead"))) extern
gpointer g_memdup (gconstpointer mem,
                                        guint byte_size) __attribute__((__alloc_size__(2)));

 extern
gpointer g_memdup2 (gconstpointer mem,
                                        gsize byte_size) __attribute__((__alloc_size__(2)));
# 354 "/usr/include/glib-2.0/glib/gstrfuncs.h"
typedef gchar** GStrv;
 extern
gchar** g_strsplit (const gchar *string,
     const gchar *delimiter,
     gint max_tokens);
 extern
gchar ** g_strsplit_set (const gchar *string,
     const gchar *delimiters,
     gint max_tokens);
 extern
gchar* g_strjoinv (const gchar *separator,
     gchar **str_array) __attribute__ ((__malloc__));
 extern
void g_strfreev (gchar **str_array);
 extern
gchar** g_strdupv (gchar **str_array);
 extern
guint g_strv_length (gchar **str_array);

 extern
gchar* g_stpcpy (gchar *dest,
                                        const char *src);

 extern
gchar * g_str_to_ascii (const gchar *str,
                                                                         const gchar *from_locale);

 extern
gchar ** g_str_tokenize_and_fold (const gchar *string,
                                                                         const gchar *translit_locale,
                                                                         gchar ***ascii_alternates);

 extern
gboolean g_str_match_string (const gchar *search_term,
                                                                         const gchar *potential_hit,
                                                                         gboolean accept_alternates);

 extern
gboolean g_strv_contains (const gchar * const *strv,
                                        const gchar *str);

 extern
gboolean g_strv_equal (const gchar * const *strv1,
                                        const gchar * const *strv2);
# 410 "/usr/include/glib-2.0/glib/gstrfuncs.h"
typedef enum
  {
    G_NUMBER_PARSER_ERROR_INVALID,
    G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS,
  } GNumberParserError;
# 426 "/usr/include/glib-2.0/glib/gstrfuncs.h"
 extern
GQuark g_number_parser_error_quark (void);

 extern
gboolean g_ascii_string_to_signed (const gchar *str,
                                                    guint base,
                                                    gint64 min,
                                                    gint64 max,
                                                    gint64 *out_num,
                                                    GError **error);

 extern
gboolean g_ascii_string_to_unsigned (const gchar *str,
                                                    guint base,
                                                    guint64 min,
                                                    guint64 max,
                                                    guint64 *out_num,
                                                    GError **error);
# 479 "/usr/include/glib-2.0/glib/gstrfuncs.h"
static inline gboolean
g_set_str (char **str_pointer,
           const char *new_str)
{
  char *copy;

  if (*str_pointer == new_str ||
      (*str_pointer && new_str && strcmp (*str_pointer, new_str) == 0))
    return (0);

  copy = g_strdup_inline (new_str);
  g_free (*str_pointer);
  *str_pointer = copy;

  return (!(0));
}
# 38 "/usr/include/glib-2.0/glib/gstring.h" 2





typedef struct _GString GString;

struct _GString
{
  gchar *str;
  gsize len;
  gsize allocated_len;
};

 extern
GString* g_string_new (const gchar *init);
 extern
GString* g_string_new_take (gchar *init);
 extern
GString* g_string_new_len (const gchar *init,
                                         gssize len);
 extern
GString* g_string_sized_new (gsize dfl_size);
 extern
gchar* (g_string_free) (GString *string,
                                         gboolean free_segment);
 extern
gchar* g_string_free_and_steal (GString *string) __attribute__((warn_unused_result));
# 83 "/usr/include/glib-2.0/glib/gstring.h"
 extern
GBytes* g_string_free_to_bytes (GString *string);
 extern
gboolean g_string_equal (const GString *v,
                                         const GString *v2);
 extern
guint g_string_hash (const GString *str);
 extern
GString* g_string_assign (GString *string,
                                         const gchar *rval);
 extern
GString* g_string_truncate (GString *string,
                                         gsize len);
 extern
GString* g_string_set_size (GString *string,
                                         gsize len);
 extern
GString* g_string_insert_len (GString *string,
                                         gssize pos,
                                         const gchar *val,
                                         gssize len);
 extern
GString* g_string_append (GString *string,
                                         const gchar *val);
 extern
GString* g_string_append_len (GString *string,
                                         const gchar *val,
                                         gssize len);
 extern
GString* g_string_append_c (GString *string,
                                         gchar c);
 extern
GString* g_string_append_unichar (GString *string,
                                         gunichar wc);
 extern
GString* g_string_prepend (GString *string,
                                         const gchar *val);
 extern
GString* g_string_prepend_c (GString *string,
                                         gchar c);
 extern
GString* g_string_prepend_unichar (GString *string,
                                         gunichar wc);
 extern
GString* g_string_prepend_len (GString *string,
                                         const gchar *val,
                                         gssize len);
 extern
GString* g_string_insert (GString *string,
                                         gssize pos,
                                         const gchar *val);
 extern
GString* g_string_insert_c (GString *string,
                                         gssize pos,
                                         gchar c);
 extern
GString* g_string_insert_unichar (GString *string,
                                         gssize pos,
                                         gunichar wc);
 extern
GString* g_string_overwrite (GString *string,
                                         gsize pos,
                                         const gchar *val);
 extern
GString* g_string_overwrite_len (GString *string,
                                         gsize pos,
                                         const gchar *val,
                                         gssize len);
 extern
GString* g_string_erase (GString *string,
                                         gssize pos,
                                         gssize len);
 extern
guint g_string_replace (GString *string,
                                         const gchar *find,
                                         const gchar *replace,
                                         guint limit);
 extern
GString* g_string_ascii_down (GString *string);
 extern
GString* g_string_ascii_up (GString *string);
 extern
void g_string_vprintf (GString *string,
                                         const gchar *format,
                                         va_list args)
                                         __attribute__((__format__ (__printf__, 2, 0)));
 extern
void g_string_printf (GString *string,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_string_append_vprintf (GString *string,
                                         const gchar *format,
                                         va_list args)
                                         __attribute__((__format__ (__printf__, 2, 0)));
 extern
void g_string_append_printf (GString *string,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
GString* g_string_append_uri_escaped (GString *string,
                                          const gchar *unescaped,
                                          const gchar *reserved_chars_allowed,
                                          gboolean allow_utf8);
# 197 "/usr/include/glib-2.0/glib/gstring.h"
__attribute__ ((__always_inline__))
static inline GString*
g_string_append_c_inline (GString *gstring,
                          gchar c)
{
  if ((__builtin_expect (__extension__ ({ int _g_boolean_var_3; if (gstring != ((void*)0) && gstring->len + 1 < gstring->allocated_len) _g_boolean_var_3 = 1; else _g_boolean_var_3 = 0; _g_boolean_var_3; }), 1)))

    {
      gstring->str[gstring->len++] = c;
      gstring->str[gstring->len] = 0;
    }
  else
    g_string_insert_c (gstring, -1, c);
  return gstring;
}




__attribute__ ((__always_inline__))
static inline GString *
g_string_append_len_inline (GString *gstring,
                            const char *val,
                            gssize len)
{
  gsize len_unsigned;

  if (__builtin_expect (__extension__ ({ int _g_boolean_var_4; if (gstring == ((void*)0)) _g_boolean_var_4 = 1; else _g_boolean_var_4 = 0; _g_boolean_var_4; }), 0))
    return g_string_append_len (gstring, val, len);

  if (__builtin_expect (__extension__ ({ int _g_boolean_var_5; if (val == ((void*)0)) _g_boolean_var_5 = 1; else _g_boolean_var_5 = 0; _g_boolean_var_5; }), 0))
    return (len != 0) ? g_string_append_len (gstring, val, len) : gstring;

  if (len < 0)
    len_unsigned = strlen (val);
  else
    len_unsigned = (gsize) len;

  if ((__builtin_expect (__extension__ ({ int _g_boolean_var_6; if (gstring->len + len_unsigned < gstring->allocated_len) _g_boolean_var_6 = 1; else _g_boolean_var_6 = 0; _g_boolean_var_6; }), 1)))
    {
      char *end = gstring->str + gstring->len;
      if ((__builtin_expect (__extension__ ({ int _g_boolean_var_7; if (val + len_unsigned <= end || val > end + len_unsigned) _g_boolean_var_7 = 1; else _g_boolean_var_7 = 0; _g_boolean_var_7; }), 1)))
        memcpy (end, val, len_unsigned);
      else
        memmove (end, val, len_unsigned);
      gstring->len += len_unsigned;
      gstring->str[gstring->len] = 0;
      return gstring;
    }
  else
    return g_string_insert_len (gstring, -1, val, len);
}




__attribute__ ((__always_inline__))
static inline GString *
g_string_truncate_inline (GString *gstring,
                          gsize len)
{
  gstring->len = (((len) < (gstring->len)) ? (len) : (gstring->len));
  gstring->str[gstring->len] = '\0';
  return gstring;
}
# 290 "/usr/include/glib-2.0/glib/gstring.h"
__attribute__((__deprecated__)) extern
GString *g_string_down (GString *string);
__attribute__((__deprecated__)) extern
GString *g_string_up (GString *string);
# 37 "/usr/include/glib-2.0/glib/giochannel.h" 2






typedef struct _GIOChannel GIOChannel;
typedef struct _GIOFuncs GIOFuncs;

typedef enum
{
  G_IO_ERROR_NONE,
  G_IO_ERROR_AGAIN,
  G_IO_ERROR_INVAL,
  G_IO_ERROR_UNKNOWN
} GIOError;



typedef enum
{

  G_IO_CHANNEL_ERROR_FBIG,
  G_IO_CHANNEL_ERROR_INVAL,
  G_IO_CHANNEL_ERROR_IO,
  G_IO_CHANNEL_ERROR_ISDIR,
  G_IO_CHANNEL_ERROR_NOSPC,
  G_IO_CHANNEL_ERROR_NXIO,
  G_IO_CHANNEL_ERROR_OVERFLOW,
  G_IO_CHANNEL_ERROR_PIPE,

  G_IO_CHANNEL_ERROR_FAILED
} GIOChannelError;

typedef enum
{
  G_IO_STATUS_ERROR,
  G_IO_STATUS_NORMAL,
  G_IO_STATUS_EOF,
  G_IO_STATUS_AGAIN
} GIOStatus;

typedef enum
{
  G_SEEK_CUR,
  G_SEEK_SET,
  G_SEEK_END
} GSeekType;

typedef enum
{
  G_IO_FLAG_NONE = 0,
  G_IO_FLAG_APPEND = 1 << 0,
  G_IO_FLAG_NONBLOCK = 1 << 1,
  G_IO_FLAG_IS_READABLE = 1 << 2,
  G_IO_FLAG_IS_WRITABLE = 1 << 3,
  G_IO_FLAG_IS_WRITEABLE = 1 << 3,
  G_IO_FLAG_IS_SEEKABLE = 1 << 4,
  G_IO_FLAG_MASK = (1 << 5) - 1,
  G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
  G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
} GIOFlags;

struct _GIOChannel
{

  gint ref_count;
  GIOFuncs *funcs;

  gchar *encoding;
  GIConv read_cd;
  GIConv write_cd;
  gchar *line_term;
  guint line_term_len;

  gsize buf_size;
  GString *read_buf;
  GString *encoded_read_buf;
  GString *write_buf;
  gchar partial_write_buf[6];



  guint use_buffer : 1;
  guint do_encode : 1;
  guint close_on_unref : 1;
  guint is_readable : 1;
  guint is_writeable : 1;
  guint is_seekable : 1;

  gpointer reserved1;
  gpointer reserved2;
};

typedef gboolean (*GIOFunc) (GIOChannel *source,
        GIOCondition condition,
        gpointer data);
struct _GIOFuncs
{
  GIOStatus (*io_read) (GIOChannel *channel,
             gchar *buf,
      gsize count,
      gsize *bytes_read,
      GError **err);
  GIOStatus (*io_write) (GIOChannel *channel,
      const gchar *buf,
      gsize count,
      gsize *bytes_written,
      GError **err);
  GIOStatus (*io_seek) (GIOChannel *channel,
      gint64 offset,
      GSeekType type,
      GError **err);
  GIOStatus (*io_close) (GIOChannel *channel,
      GError **err);
  GSource* (*io_create_watch) (GIOChannel *channel,
      GIOCondition condition);
  void (*io_free) (GIOChannel *channel);
  GIOStatus (*io_set_flags) (GIOChannel *channel,
                                  GIOFlags flags,
      GError **err);
  GIOFlags (*io_get_flags) (GIOChannel *channel);
};

 extern
void g_io_channel_init (GIOChannel *channel);
 extern
GIOChannel *g_io_channel_ref (GIOChannel *channel);
 extern
void g_io_channel_unref (GIOChannel *channel);

__attribute__((__deprecated__("Use '" "g_io_channel_read_chars" "' instead"))) extern
GIOError g_io_channel_read (GIOChannel *channel,
                                 gchar *buf,
                                 gsize count,
                                 gsize *bytes_read);

__attribute__((__deprecated__("Use '" "g_io_channel_write_chars" "' instead"))) extern
GIOError g_io_channel_write (GIOChannel *channel,
                                 const gchar *buf,
                                 gsize count,
                                 gsize *bytes_written);

__attribute__((__deprecated__("Use '" "g_io_channel_seek_position" "' instead"))) extern
GIOError g_io_channel_seek (GIOChannel *channel,
                                 gint64 offset,
                                 GSeekType type);

__attribute__((__deprecated__("Use '" "g_io_channel_shutdown" "' instead"))) extern
void g_io_channel_close (GIOChannel *channel);

 extern
GIOStatus g_io_channel_shutdown (GIOChannel *channel,
     gboolean flush,
     GError **err);
 extern
guint g_io_add_watch_full (GIOChannel *channel,
     gint priority,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data,
     GDestroyNotify notify);
 extern
GSource * g_io_create_watch (GIOChannel *channel,
     GIOCondition condition);
 extern
guint g_io_add_watch (GIOChannel *channel,
     GIOCondition condition,
     GIOFunc func,
     gpointer user_data);




 extern
void g_io_channel_set_buffer_size (GIOChannel *channel,
        gsize size);
 extern
gsize g_io_channel_get_buffer_size (GIOChannel *channel);
 extern
GIOCondition g_io_channel_get_buffer_condition (GIOChannel *channel);
 extern
GIOStatus g_io_channel_set_flags (GIOChannel *channel,
        GIOFlags flags,
        GError **error);
 extern
GIOFlags g_io_channel_get_flags (GIOChannel *channel);
 extern
void g_io_channel_set_line_term (GIOChannel *channel,
        const gchar *line_term,
        gint length);
 extern
const gchar * g_io_channel_get_line_term (GIOChannel *channel,
        gint *length);
 extern
void g_io_channel_set_buffered (GIOChannel *channel,
        gboolean buffered);
 extern
gboolean g_io_channel_get_buffered (GIOChannel *channel);
 extern
GIOStatus g_io_channel_set_encoding (GIOChannel *channel,
        const gchar *encoding,
        GError **error);
 extern
const gchar * g_io_channel_get_encoding (GIOChannel *channel);
 extern
void g_io_channel_set_close_on_unref (GIOChannel *channel,
        gboolean do_close);
 extern
gboolean g_io_channel_get_close_on_unref (GIOChannel *channel);


 extern
GIOStatus g_io_channel_flush (GIOChannel *channel,
        GError **error);
 extern
GIOStatus g_io_channel_read_line (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        gsize *terminator_pos,
        GError **error);
 extern
GIOStatus g_io_channel_read_line_string (GIOChannel *channel,
        GString *buffer,
        gsize *terminator_pos,
        GError **error);
 extern
GIOStatus g_io_channel_read_to_end (GIOChannel *channel,
        gchar **str_return,
        gsize *length,
        GError **error);
 extern
GIOStatus g_io_channel_read_chars (GIOChannel *channel,
        gchar *buf,
        gsize count,
        gsize *bytes_read,
        GError **error);
 extern
GIOStatus g_io_channel_read_unichar (GIOChannel *channel,
        gunichar *thechar,
        GError **error);
 extern
GIOStatus g_io_channel_write_chars (GIOChannel *channel,
        const gchar *buf,
        gssize count,
        gsize *bytes_written,
        GError **error);
 extern
GIOStatus g_io_channel_write_unichar (GIOChannel *channel,
        gunichar thechar,
        GError **error);
 extern
GIOStatus g_io_channel_seek_position (GIOChannel *channel,
        gint64 offset,
        GSeekType type,
        GError **error);
 extern
GIOChannel* g_io_channel_new_file (const gchar *filename,
        const gchar *mode,
        GError **error);



 extern
GQuark g_io_channel_error_quark (void);
 extern
GIOChannelError g_io_channel_error_from_errno (gint en);
# 323 "/usr/include/glib-2.0/glib/giochannel.h"
 extern
GIOChannel* g_io_channel_unix_new (int fd);
 extern
gint g_io_channel_unix_get_fd (GIOChannel *channel);



 extern GSourceFuncs g_io_watch_funcs;
# 57 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gkeyfile.h" 1
# 35 "/usr/include/glib-2.0/glib/gkeyfile.h"
typedef enum
{
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
  G_KEY_FILE_ERROR_PARSE,
  G_KEY_FILE_ERROR_NOT_FOUND,
  G_KEY_FILE_ERROR_KEY_NOT_FOUND,
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
  G_KEY_FILE_ERROR_INVALID_VALUE
} GKeyFileError;



 extern
GQuark g_key_file_error_quark (void);

typedef struct _GKeyFile GKeyFile;

typedef enum
{
  G_KEY_FILE_NONE = 0,
  G_KEY_FILE_KEEP_COMMENTS = 1 << 0,
  G_KEY_FILE_KEEP_TRANSLATIONS = 1 << 1
} GKeyFileFlags;

 extern
GKeyFile *g_key_file_new (void);
 extern
GKeyFile *g_key_file_ref (GKeyFile *key_file);
 extern
void g_key_file_unref (GKeyFile *key_file);
 extern
void g_key_file_free (GKeyFile *key_file);
 extern
void g_key_file_set_list_separator (GKeyFile *key_file,
          gchar separator);
 extern
gboolean g_key_file_load_from_file (GKeyFile *key_file,
          const gchar *file,
          GKeyFileFlags flags,
          GError **error);
 extern
gboolean g_key_file_load_from_data (GKeyFile *key_file,
          const gchar *data,
          gsize length,
          GKeyFileFlags flags,
          GError **error);
 extern
gboolean g_key_file_load_from_bytes (GKeyFile *key_file,
                                             GBytes *bytes,
                                             GKeyFileFlags flags,
                                             GError **error);
 extern
gboolean g_key_file_load_from_dirs (GKeyFile *key_file,
          const gchar *file,
          const gchar **search_dirs,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
 extern
gboolean g_key_file_load_from_data_dirs (GKeyFile *key_file,
          const gchar *file,
          gchar **full_path,
          GKeyFileFlags flags,
          GError **error);
 extern
gchar *g_key_file_to_data (GKeyFile *key_file,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
 extern
gboolean g_key_file_save_to_file (GKeyFile *key_file,
                                             const gchar *filename,
                                             GError **error);
 extern
gchar *g_key_file_get_start_group (GKeyFile *key_file) __attribute__ ((__malloc__));
 extern
gchar **g_key_file_get_groups (GKeyFile *key_file,
          gsize *length);
 extern
gchar **g_key_file_get_keys (GKeyFile *key_file,
          const gchar *group_name,
          gsize *length,
          GError **error);
 extern
gboolean g_key_file_has_group (GKeyFile *key_file,
          const gchar *group_name);
 extern
gboolean g_key_file_has_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
gchar *g_key_file_get_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_value (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *value);
 extern
gchar *g_key_file_get_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *string);
 extern
gchar *g_key_file_get_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          GError **error) __attribute__ ((__malloc__));
 extern
gchar *g_key_file_get_locale_for_key (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             const gchar *locale) __attribute__ ((__malloc__));
 extern
void g_key_file_set_locale_string (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar *string);
 extern
gboolean g_key_file_get_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
void g_key_file_set_boolean (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean value);
 extern
gint g_key_file_get_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
void g_key_file_set_integer (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint value);
 extern
gint64 g_key_file_get_int64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
void g_key_file_set_int64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint64 value);
 extern
guint64 g_key_file_get_uint64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
void g_key_file_set_uint64 (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          guint64 value);
 extern
gdouble g_key_file_get_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error);
 extern
void g_key_file_set_double (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble value);
 extern
gchar **g_key_file_get_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error);
 extern
void g_key_file_set_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar * const list[],
          gsize length);
 extern
gchar **g_key_file_get_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          gsize *length,
          GError **error);
 extern
void g_key_file_set_locale_string_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          const gchar *locale,
          const gchar * const list[],
          gsize length);
 extern
gboolean *g_key_file_get_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_boolean_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gboolean list[],
          gsize length);
 extern
gint *g_key_file_get_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gsize *length,
          GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gdouble list[],
                                             gsize length);
 extern
gdouble *g_key_file_get_double_list (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             gsize *length,
                                             GError **error) __attribute__ ((__malloc__));
 extern
void g_key_file_set_integer_list (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          gint list[],
          gsize length);
 extern
gboolean g_key_file_set_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             const gchar *comment,
                                             GError **error);
 extern
gchar *g_key_file_get_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
                                             GError **error) __attribute__ ((__malloc__));

 extern
gboolean g_key_file_remove_comment (GKeyFile *key_file,
                                             const gchar *group_name,
                                             const gchar *key,
          GError **error);
 extern
gboolean g_key_file_remove_key (GKeyFile *key_file,
          const gchar *group_name,
          const gchar *key,
          GError **error);
 extern
gboolean g_key_file_remove_group (GKeyFile *key_file,
          const gchar *group_name,
          GError **error);
# 58 "/usr/include/glib-2.0/glib.h" 2



# 1 "/usr/include/glib-2.0/glib/gmappedfile.h" 1
# 34 "/usr/include/glib-2.0/glib/gmappedfile.h"
typedef struct _GMappedFile GMappedFile;

 extern
GMappedFile *g_mapped_file_new (const gchar *filename,
             gboolean writable,
             GError **error);
 extern
GMappedFile *g_mapped_file_new_from_fd (gint fd,
      gboolean writable,
      GError **error);
 extern
gsize g_mapped_file_get_length (GMappedFile *file);
 extern
gchar *g_mapped_file_get_contents (GMappedFile *file);
 extern
GBytes * g_mapped_file_get_bytes (GMappedFile *file);
 extern
GMappedFile *g_mapped_file_ref (GMappedFile *file);
 extern
void g_mapped_file_unref (GMappedFile *file);

__attribute__((__deprecated__("Use '" "g_mapped_file_unref" "' instead"))) extern
void g_mapped_file_free (GMappedFile *file);
# 62 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gmarkup.h" 1
# 28 "/usr/include/glib-2.0/glib/gmarkup.h"
# 1 "/usr/bin/../lib/clang/19/include/stdarg.h" 1 3
# 29 "/usr/include/glib-2.0/glib/gmarkup.h" 2
# 51 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef enum
{
  G_MARKUP_ERROR_BAD_UTF8,
  G_MARKUP_ERROR_EMPTY,
  G_MARKUP_ERROR_PARSE,



  G_MARKUP_ERROR_UNKNOWN_ELEMENT,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
  G_MARKUP_ERROR_INVALID_CONTENT,
  G_MARKUP_ERROR_MISSING_ATTRIBUTE
} GMarkupError;
# 74 "/usr/include/glib-2.0/glib/gmarkup.h"
 extern
GQuark g_markup_error_quark (void);
# 98 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef enum
{
  G_MARKUP_DEFAULT_FLAGS = 0,
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 << 0,
  G_MARKUP_TREAT_CDATA_AS_TEXT = 1 << 1,
  G_MARKUP_PREFIX_ERROR_POSITION = 1 << 2,
  G_MARKUP_IGNORE_QUALIFIED = 1 << 3
} GMarkupParseFlags;
# 116 "/usr/include/glib-2.0/glib/gmarkup.h"
typedef struct _GMarkupParseContext GMarkupParseContext;
typedef struct _GMarkupParser GMarkupParser;
# 147 "/usr/include/glib-2.0/glib/gmarkup.h"
struct _GMarkupParser
{

  void (*start_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          const gchar **attribute_names,
                          const gchar **attribute_values,
                          gpointer user_data,
                          GError **error);


  void (*end_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          gpointer user_data,
                          GError **error);



  void (*text) (GMarkupParseContext *context,
                          const gchar *text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);






  void (*passthrough) (GMarkupParseContext *context,
                          const gchar *passthrough_text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);




  void (*error) (GMarkupParseContext *context,
                          GError *error,
                          gpointer user_data);
};

 extern
GMarkupParseContext *g_markup_parse_context_new (const GMarkupParser *parser,
                                                   GMarkupParseFlags flags,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_dnotify);
 extern
GMarkupParseContext *g_markup_parse_context_ref (GMarkupParseContext *context);
 extern
void g_markup_parse_context_unref (GMarkupParseContext *context);
 extern
void g_markup_parse_context_free (GMarkupParseContext *context);
 extern
gboolean g_markup_parse_context_parse (GMarkupParseContext *context,
                                                   const gchar *text,
                                                   gssize text_len,
                                                   GError **error);
 extern
void g_markup_parse_context_push (GMarkupParseContext *context,
                                                   const GMarkupParser *parser,
                                                   gpointer user_data);
 extern
gpointer g_markup_parse_context_pop (GMarkupParseContext *context);

 extern
gboolean g_markup_parse_context_end_parse (GMarkupParseContext *context,
                                                       GError **error);
 extern
const gchar * g_markup_parse_context_get_element (GMarkupParseContext *context);
 extern
const GSList * g_markup_parse_context_get_element_stack (GMarkupParseContext *context);


 extern
void g_markup_parse_context_get_position (GMarkupParseContext *context,
                                                          gint *line_number,
                                                          gint *char_number);
 extern
gpointer g_markup_parse_context_get_user_data (GMarkupParseContext *context);


 extern
gchar* g_markup_escape_text (const gchar *text,
                             gssize length);

 extern
gchar *g_markup_printf_escaped (const char *format,
    ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
gchar *g_markup_vprintf_escaped (const char *format,
     va_list args) __attribute__((__format__ (__printf__, 1, 0)));

typedef enum
{
  G_MARKUP_COLLECT_INVALID,
  G_MARKUP_COLLECT_STRING,
  G_MARKUP_COLLECT_STRDUP,
  G_MARKUP_COLLECT_BOOLEAN,
  G_MARKUP_COLLECT_TRISTATE,

  G_MARKUP_COLLECT_OPTIONAL = (1 << 16)
} GMarkupCollectType;



 extern
gboolean g_markup_collect_attributes (const gchar *element_name,
                                        const gchar **attribute_names,
                                        const gchar **attribute_values,
                                        GError **error,
                                        GMarkupCollectType first_type,
                                        const gchar *first_attr,
                                        ...);
# 63 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gmessages.h" 1
# 34 "/usr/include/glib-2.0/glib/gmessages.h"
# 1 "/usr/bin/../lib/clang/19/include/stdarg.h" 1 3
# 35 "/usr/include/glib-2.0/glib/gmessages.h" 2



# 1 "/usr/include/glib-2.0/glib/gvariant.h" 1
# 30 "/usr/include/glib-2.0/glib/gvariant.h"
# 1 "/usr/include/glib-2.0/glib/gvarianttype.h" 1
# 34 "/usr/include/glib-2.0/glib/gvarianttype.h"
typedef struct _GVariantType GVariantType;
# 288 "/usr/include/glib-2.0/glib/gvarianttype.h"
 extern
gboolean g_variant_type_string_is_valid (const gchar *type_string);
 extern
gboolean g_variant_type_string_scan (const gchar *string,
                                                                         const gchar *limit,
                                                                         const gchar **endptr);


 extern
void g_variant_type_free (GVariantType *type);
 extern
GVariantType * g_variant_type_copy (const GVariantType *type);
 extern
GVariantType * g_variant_type_new (const gchar *type_string);


 extern
gsize g_variant_type_get_string_length (const GVariantType *type);
 extern
const gchar * g_variant_type_peek_string (const GVariantType *type);
 extern
gchar * g_variant_type_dup_string (const GVariantType *type);


 extern
gboolean g_variant_type_is_definite (const GVariantType *type);
 extern
gboolean g_variant_type_is_container (const GVariantType *type);
 extern
gboolean g_variant_type_is_basic (const GVariantType *type);
 extern
gboolean g_variant_type_is_maybe (const GVariantType *type);
 extern
gboolean g_variant_type_is_array (const GVariantType *type);
 extern
gboolean g_variant_type_is_tuple (const GVariantType *type);
 extern
gboolean g_variant_type_is_dict_entry (const GVariantType *type);
 extern
gboolean g_variant_type_is_variant (const GVariantType *type);


 extern
guint g_variant_type_hash (gconstpointer type);
 extern
gboolean g_variant_type_equal (gconstpointer type1,
                                                                         gconstpointer type2);


 extern
gboolean g_variant_type_is_subtype_of (const GVariantType *type,
                                                                         const GVariantType *supertype);


 extern
const GVariantType * g_variant_type_element (const GVariantType *type);
 extern
const GVariantType * g_variant_type_first (const GVariantType *type);
 extern
const GVariantType * g_variant_type_next (const GVariantType *type);
 extern
gsize g_variant_type_n_items (const GVariantType *type);
 extern
const GVariantType * g_variant_type_key (const GVariantType *type);
 extern
const GVariantType * g_variant_type_value (const GVariantType *type);


 extern
GVariantType * g_variant_type_new_array (const GVariantType *element);
 extern
GVariantType * g_variant_type_new_maybe (const GVariantType *element);
 extern
GVariantType * g_variant_type_new_tuple (const GVariantType * const *items,
                                                                         gint length);
 extern
GVariantType * g_variant_type_new_dict_entry (const GVariantType *key,
                                                                         const GVariantType *value);


 extern
const GVariantType * g_variant_type_checked_ (const gchar *type_string);
 extern
gsize g_variant_type_string_get_depth_ (const gchar *type_string);
# 31 "/usr/include/glib-2.0/glib/gvariant.h" 2





typedef struct _GVariant GVariant;

typedef enum
{
  G_VARIANT_CLASS_BOOLEAN = 'b',
  G_VARIANT_CLASS_BYTE = 'y',
  G_VARIANT_CLASS_INT16 = 'n',
  G_VARIANT_CLASS_UINT16 = 'q',
  G_VARIANT_CLASS_INT32 = 'i',
  G_VARIANT_CLASS_UINT32 = 'u',
  G_VARIANT_CLASS_INT64 = 'x',
  G_VARIANT_CLASS_UINT64 = 't',
  G_VARIANT_CLASS_HANDLE = 'h',
  G_VARIANT_CLASS_DOUBLE = 'd',
  G_VARIANT_CLASS_STRING = 's',
  G_VARIANT_CLASS_OBJECT_PATH = 'o',
  G_VARIANT_CLASS_SIGNATURE = 'g',
  G_VARIANT_CLASS_VARIANT = 'v',
  G_VARIANT_CLASS_MAYBE = 'm',
  G_VARIANT_CLASS_ARRAY = 'a',
  G_VARIANT_CLASS_TUPLE = '(',
  G_VARIANT_CLASS_DICT_ENTRY = '{'
} GVariantClass;

 extern
void g_variant_unref (GVariant *value);
 extern
GVariant * g_variant_ref (GVariant *value);
 extern
GVariant * g_variant_ref_sink (GVariant *value);
 extern
gboolean g_variant_is_floating (GVariant *value);
 extern
GVariant * g_variant_take_ref (GVariant *value);

 extern
const GVariantType * g_variant_get_type (GVariant *value);
 extern
const gchar * g_variant_get_type_string (GVariant *value);
 extern
gboolean g_variant_is_of_type (GVariant *value,
                                                                         const GVariantType *type);
 extern
gboolean g_variant_is_container (GVariant *value);
 extern
GVariantClass g_variant_classify (GVariant *value);
 extern
GVariant * g_variant_new_boolean (gboolean value);
 extern
GVariant * g_variant_new_byte (guint8 value);
 extern
GVariant * g_variant_new_int16 (gint16 value);
 extern
GVariant * g_variant_new_uint16 (guint16 value);
 extern
GVariant * g_variant_new_int32 (gint32 value);
 extern
GVariant * g_variant_new_uint32 (guint32 value);
 extern
GVariant * g_variant_new_int64 (gint64 value);
 extern
GVariant * g_variant_new_uint64 (guint64 value);
 extern
GVariant * g_variant_new_handle (gint32 value);
 extern
GVariant * g_variant_new_double (gdouble value);
 extern
GVariant * g_variant_new_string (const gchar *string);
 extern
GVariant * g_variant_new_take_string (gchar *string);
 extern
GVariant * g_variant_new_printf (const gchar *format_string,
                                                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
GVariant * g_variant_new_object_path (const gchar *object_path);
 extern
gboolean g_variant_is_object_path (const gchar *string);
 extern
GVariant * g_variant_new_signature (const gchar *signature);
 extern
gboolean g_variant_is_signature (const gchar *string);
 extern
GVariant * g_variant_new_variant (GVariant *value);
 extern
GVariant * g_variant_new_strv (const gchar * const *strv,
                                                                         gssize length);
 extern
GVariant * g_variant_new_objv (const gchar * const *strv,
                                                                         gssize length);
 extern
GVariant * g_variant_new_bytestring (const gchar *string);
 extern
GVariant * g_variant_new_bytestring_array (const gchar * const *strv,
                                                                         gssize length);
 extern
GVariant * g_variant_new_fixed_array (const GVariantType *element_type,
                                                                         gconstpointer elements,
                                                                         gsize n_elements,
                                                                         gsize element_size);
 extern
gboolean g_variant_get_boolean (GVariant *value);
 extern
guint8 g_variant_get_byte (GVariant *value);
 extern
gint16 g_variant_get_int16 (GVariant *value);
 extern
guint16 g_variant_get_uint16 (GVariant *value);
 extern
gint32 g_variant_get_int32 (GVariant *value);
 extern
guint32 g_variant_get_uint32 (GVariant *value);
 extern
gint64 g_variant_get_int64 (GVariant *value);
 extern
guint64 g_variant_get_uint64 (GVariant *value);
 extern
gint32 g_variant_get_handle (GVariant *value);
 extern
gdouble g_variant_get_double (GVariant *value);
 extern
GVariant * g_variant_get_variant (GVariant *value);
 extern
const gchar * g_variant_get_string (GVariant *value,
                                                                         gsize *length);
 extern
gchar * g_variant_dup_string (GVariant *value,
                                                                         gsize *length);
 extern
const gchar ** g_variant_get_strv (GVariant *value,
                                                                         gsize *length);
 extern
gchar ** g_variant_dup_strv (GVariant *value,
                                                                         gsize *length);
 extern
const gchar ** g_variant_get_objv (GVariant *value,
                                                                         gsize *length);
 extern
gchar ** g_variant_dup_objv (GVariant *value,
                                                                         gsize *length);
 extern
const gchar * g_variant_get_bytestring (GVariant *value);
 extern
gchar * g_variant_dup_bytestring (GVariant *value,
                                                                         gsize *length);
 extern
const gchar ** g_variant_get_bytestring_array (GVariant *value,
                                                                         gsize *length);
 extern
gchar ** g_variant_dup_bytestring_array (GVariant *value,
                                                                         gsize *length);

 extern
GVariant * g_variant_new_maybe (const GVariantType *child_type,
                                                                         GVariant *child);
 extern
GVariant * g_variant_new_array (const GVariantType *child_type,
                                                                         GVariant * const *children,
                                                                         gsize n_children);
 extern
GVariant * g_variant_new_tuple (GVariant * const *children,
                                                                         gsize n_children);
 extern
GVariant * g_variant_new_dict_entry (GVariant *key,
                                                                         GVariant *value);

 extern
GVariant * g_variant_get_maybe (GVariant *value);
 extern
gsize g_variant_n_children (GVariant *value);
 extern
void g_variant_get_child (GVariant *value,
                                                                         gsize index_,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GVariant * g_variant_get_child_value (GVariant *value,
                                                                         gsize index_);
 extern
gboolean g_variant_lookup (GVariant *dictionary,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GVariant * g_variant_lookup_value (GVariant *dictionary,
                                                                         const gchar *key,
                                                                         const GVariantType *expected_type);
 extern
gconstpointer g_variant_get_fixed_array (GVariant *value,
                                                                         gsize *n_elements,
                                                                         gsize element_size);

 extern
gsize g_variant_get_size (GVariant *value);
 extern
gconstpointer g_variant_get_data (GVariant *value);
 extern
GBytes * g_variant_get_data_as_bytes (GVariant *value);
 extern
void g_variant_store (GVariant *value,
                                                                         gpointer data);

 extern
gchar * g_variant_print (GVariant *value,
                                                                         gboolean type_annotate);
 extern
GString * g_variant_print_string (GVariant *value,
                                                                         GString *string,
                                                                         gboolean type_annotate);

 extern
guint g_variant_hash (gconstpointer value);
 extern
gboolean g_variant_equal (gconstpointer one,
                                                                         gconstpointer two);

 extern
GVariant * g_variant_get_normal_form (GVariant *value);
 extern
gboolean g_variant_is_normal_form (GVariant *value);
 extern
GVariant * g_variant_byteswap (GVariant *value);

 extern
GVariant * g_variant_new_from_bytes (const GVariantType *type,
                                                                         GBytes *bytes,
                                                                         gboolean trusted);
 extern
GVariant * g_variant_new_from_data (const GVariantType *type,
                                                                         gconstpointer data,
                                                                         gsize size,
                                                                         gboolean trusted,
                                                                         GDestroyNotify notify,
                                                                         gpointer user_data);

typedef struct _GVariantIter GVariantIter;
struct _GVariantIter {

  guintptr x[16];
};

 extern
GVariantIter * g_variant_iter_new (GVariant *value);
 extern
gsize g_variant_iter_init (GVariantIter *iter,
                                                                         GVariant *value);
 extern
GVariantIter * g_variant_iter_copy (GVariantIter *iter);
 extern
gsize g_variant_iter_n_children (GVariantIter *iter);
 extern
void g_variant_iter_free (GVariantIter *iter);
 extern
GVariant * g_variant_iter_next_value (GVariantIter *iter);
 extern
gboolean g_variant_iter_next (GVariantIter *iter,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
gboolean g_variant_iter_loop (GVariantIter *iter,
                                                                         const gchar *format_string,
                                                                         ...);


typedef struct _GVariantBuilder GVariantBuilder;
struct _GVariantBuilder {

  union
  {
    struct {
      gsize partial_magic;
      const GVariantType *type;
      guintptr y[14];
    } s;
    guintptr x[16];
  } u;
};

typedef enum
{
  G_VARIANT_PARSE_ERROR_FAILED,
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE,
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END,
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER,
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING,
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH,
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE,
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING,
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE,
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE,
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG,
  G_VARIANT_PARSE_ERROR_TYPE_ERROR,
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN,
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD,
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT,
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED,
  G_VARIANT_PARSE_ERROR_RECURSION
} GVariantParseError;


__attribute__((__deprecated__("Use '" "g_variant_parse_error_quark" "' instead"))) extern
GQuark g_variant_parser_get_error_quark (void);

 extern
GQuark g_variant_parse_error_quark (void);
# 376 "/usr/include/glib-2.0/glib/gvariant.h"
 extern
GVariantBuilder * g_variant_builder_new (const GVariantType *type);
 extern
void g_variant_builder_unref (GVariantBuilder *builder);
 extern
GVariantBuilder * g_variant_builder_ref (GVariantBuilder *builder);
 extern
void g_variant_builder_init (GVariantBuilder *builder,
                                                                         const GVariantType *type);
 extern
GVariant * g_variant_builder_end (GVariantBuilder *builder);
 extern
void g_variant_builder_clear (GVariantBuilder *builder);
 extern
void g_variant_builder_open (GVariantBuilder *builder,
                                                                         const GVariantType *type);
 extern
void g_variant_builder_close (GVariantBuilder *builder);
 extern
void g_variant_builder_add_value (GVariantBuilder *builder,
                                                                         GVariant *value);
 extern
void g_variant_builder_add (GVariantBuilder *builder,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
void g_variant_builder_add_parsed (GVariantBuilder *builder,
                                                                         const gchar *format,
                                                                         ...);

 extern
GVariant * g_variant_new (const gchar *format_string,
                                                                         ...);
 extern
void g_variant_get (GVariant *value,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GVariant * g_variant_new_va (const gchar *format_string,
                                                                         const gchar **endptr,
                                                                         va_list *app);
 extern
void g_variant_get_va (GVariant *value,
                                                                         const gchar *format_string,
                                                                         const gchar **endptr,
                                                                         va_list *app);
 extern
gboolean g_variant_check_format_string (GVariant *value,
                                                                         const gchar *format_string,
                                                                         gboolean copy_only);

 extern
GVariant * g_variant_parse (const GVariantType *type,
                                                                         const gchar *text,
                                                                         const gchar *limit,
                                                                         const gchar **endptr,
                                                                         GError **error);
 extern
GVariant * g_variant_new_parsed (const gchar *format,
                                                                         ...);
 extern
GVariant * g_variant_new_parsed_va (const gchar *format,
                                                                         va_list *app);

 extern
gchar * g_variant_parse_error_print_context (GError *error,
                                                                         const gchar *source_str);

 extern
gint g_variant_compare (gconstpointer one,
                                                                         gconstpointer two);

typedef struct _GVariantDict GVariantDict;
struct _GVariantDict {

  union
  {
    struct {
      GVariant *asv;
      gsize partial_magic;
      guintptr y[14];
    } s;
    guintptr x[16];
  } u;
};
# 499 "/usr/include/glib-2.0/glib/gvariant.h"
 extern
GVariantDict * g_variant_dict_new (GVariant *from_asv);

 extern
void g_variant_dict_init (GVariantDict *dict,
                                                                         GVariant *from_asv);

 extern
gboolean g_variant_dict_lookup (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GVariant * g_variant_dict_lookup_value (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const GVariantType *expected_type);
 extern
gboolean g_variant_dict_contains (GVariantDict *dict,
                                                                         const gchar *key);
 extern
void g_variant_dict_insert (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
void g_variant_dict_insert_value (GVariantDict *dict,
                                                                         const gchar *key,
                                                                         GVariant *value);
 extern
gboolean g_variant_dict_remove (GVariantDict *dict,
                                                                         const gchar *key);
 extern
void g_variant_dict_clear (GVariantDict *dict);
 extern
GVariant * g_variant_dict_end (GVariantDict *dict);
 extern
GVariantDict * g_variant_dict_ref (GVariantDict *dict);
 extern
void g_variant_dict_unref (GVariantDict *dict);
# 39 "/usr/include/glib-2.0/glib/gmessages.h" 2





 extern
gsize g_printf_string_upper_bound (const gchar* format,
         va_list args) __attribute__((__format__ (__printf__, 1, 0)));
# 55 "/usr/include/glib-2.0/glib/gmessages.h"
typedef enum
{

  G_LOG_FLAG_RECURSION = 1 << 0,
  G_LOG_FLAG_FATAL = 1 << 1,


  G_LOG_LEVEL_ERROR = 1 << 2,
  G_LOG_LEVEL_CRITICAL = 1 << 3,
  G_LOG_LEVEL_WARNING = 1 << 4,
  G_LOG_LEVEL_MESSAGE = 1 << 5,
  G_LOG_LEVEL_INFO = 1 << 6,
  G_LOG_LEVEL_DEBUG = 1 << 7,

  G_LOG_LEVEL_MASK = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
} GLogLevelFlags;




typedef void (*GLogFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);



 extern
guint g_log_set_handler (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data);
 extern
guint g_log_set_handler_full (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data,
                                         GDestroyNotify destroy);
 extern
void g_log_remove_handler (const gchar *log_domain,
                                         guint handler_id);
 extern
void g_log_default_handler (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *message,
                                         gpointer unused_data);
 extern
GLogFunc g_log_set_default_handler (GLogFunc log_func,
        gpointer user_data);
 extern
void g_log (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 3, 4)));
 extern
void g_logv (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         va_list args) __attribute__((__format__ (__printf__, 3, 0)));
 extern
GLogLevelFlags g_log_set_fatal_mask (const gchar *log_domain,
                                         GLogLevelFlags fatal_mask);
 extern
GLogLevelFlags g_log_set_always_fatal (GLogLevelFlags fatal_mask);
# 136 "/usr/include/glib-2.0/glib/gmessages.h"
typedef enum
{
  G_LOG_WRITER_HANDLED = 1,
  G_LOG_WRITER_UNHANDLED = 0,
} GLogWriterOutput;
# 158 "/usr/include/glib-2.0/glib/gmessages.h"
typedef struct _GLogField GLogField;
struct _GLogField
{
  const gchar *key;
  gconstpointer value;
  gssize length;
};
# 197 "/usr/include/glib-2.0/glib/gmessages.h"
typedef GLogWriterOutput (*GLogWriterFunc) (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);

 extern
void g_log_structured (const gchar *log_domain,
                                                GLogLevelFlags log_level,
                                                ...);
 extern
void g_log_structured_array (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields);

 extern
void g_log_variant (const gchar *log_domain,
                                                GLogLevelFlags log_level,
                                                GVariant *fields);

 extern
void g_log_set_writer_func (GLogWriterFunc func,
                                                gpointer user_data,
                                                GDestroyNotify user_data_free);

 extern
gboolean g_log_writer_supports_color (gint output_fd);
 extern
gboolean g_log_writer_is_journald (gint output_fd);

 extern
gchar *g_log_writer_format_fields (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gboolean use_color);

 extern
GLogWriterOutput g_log_writer_syslog (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
 extern
GLogWriterOutput g_log_writer_journald (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
 extern
GLogWriterOutput g_log_writer_standard_streams (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);
 extern
GLogWriterOutput g_log_writer_default (GLogLevelFlags log_level,
                                                const GLogField *fields,
                                                gsize n_fields,
                                                gpointer user_data);

 extern
void g_log_writer_default_set_use_stderr (gboolean use_stderr);
 extern
gboolean g_log_writer_default_would_drop (GLogLevelFlags log_level,
                                                 const char *log_domain);
 extern
void g_log_writer_default_set_debug_domains (const gchar * const *domains);



 extern
gboolean g_log_get_debug_enabled (void);
 extern
void g_log_set_debug_enabled (gboolean enabled);
# 286 "/usr/include/glib-2.0/glib/gmessages.h"
void _g_log_fallback_handler (const gchar *log_domain,
       GLogLevelFlags log_level,
       const gchar *message,
       gpointer unused_data);


 extern
void g_return_if_fail_warning (const char *log_domain,
          const char *pretty_function,
          const char *expression) ;
 extern
void g_warn_message (const char *domain,
                               const char *file,
                               int line,
                               const char *func,
                               const char *warnexpr) ;
__attribute__ ((__noreturn__))
__attribute__((__deprecated__)) extern
void g_assert_warning (const char *log_domain,
          const char *file,
          const int line,
                 const char *pretty_function,
                 const char *expression);

 extern
void g_log_structured_standard (const gchar *log_domain,
                                GLogLevelFlags log_level,
                                const gchar *file,
                                const gchar *line,
                                const gchar *func,
                                const gchar *message_format,
                                ...) __attribute__((__format__ (__printf__, 6, 7)));
# 525 "/usr/include/glib-2.0/glib/gmessages.h"
typedef void (*GPrintFunc) (const gchar *string);
 extern
void g_print (const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
GPrintFunc g_set_print_handler (GPrintFunc func);
 extern
void g_printerr (const gchar *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
GPrintFunc g_set_printerr_handler (GPrintFunc func);
# 65 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/goption.h" 1
# 40 "/usr/include/glib-2.0/glib/goption.h"
typedef struct _GOptionContext GOptionContext;
# 53 "/usr/include/glib-2.0/glib/goption.h"
typedef struct _GOptionGroup GOptionGroup;
typedef struct _GOptionEntry GOptionEntry;
# 84 "/usr/include/glib-2.0/glib/goption.h"
typedef enum
{
  G_OPTION_FLAG_NONE = 0,
  G_OPTION_FLAG_HIDDEN = 1 << 0,
  G_OPTION_FLAG_IN_MAIN = 1 << 1,
  G_OPTION_FLAG_REVERSE = 1 << 2,
  G_OPTION_FLAG_NO_ARG = 1 << 3,
  G_OPTION_FLAG_FILENAME = 1 << 4,
  G_OPTION_FLAG_OPTIONAL_ARG = 1 << 5,
  G_OPTION_FLAG_NOALIAS = 1 << 6
} GOptionFlags;
# 122 "/usr/include/glib-2.0/glib/goption.h"
typedef enum
{
  G_OPTION_ARG_NONE,
  G_OPTION_ARG_STRING,
  G_OPTION_ARG_INT,
  G_OPTION_ARG_CALLBACK,
  G_OPTION_ARG_FILENAME,
  G_OPTION_ARG_STRING_ARRAY,
  G_OPTION_ARG_FILENAME_ARRAY,
  G_OPTION_ARG_DOUBLE,
  G_OPTION_ARG_INT64
} GOptionArg;
# 152 "/usr/include/glib-2.0/glib/goption.h"
typedef gboolean (*GOptionArgFunc) (const gchar *option_name,
        const gchar *value,
        gpointer data,
        GError **error);
# 170 "/usr/include/glib-2.0/glib/goption.h"
typedef gboolean (*GOptionParseFunc) (GOptionContext *context,
          GOptionGroup *group,
          gpointer data,
          GError **error);
# 185 "/usr/include/glib-2.0/glib/goption.h"
typedef void (*GOptionErrorFunc) (GOptionContext *context,
      GOptionGroup *group,
      gpointer data,
      GError **error);
# 209 "/usr/include/glib-2.0/glib/goption.h"
typedef enum
{
  G_OPTION_ERROR_UNKNOWN_OPTION,
  G_OPTION_ERROR_BAD_VALUE,
  G_OPTION_ERROR_FAILED
} GOptionError;

 extern
GQuark g_option_error_quark (void);
# 261 "/usr/include/glib-2.0/glib/goption.h"
struct _GOptionEntry
{
  const gchar *long_name;
  gchar short_name;
  gint flags;

  GOptionArg arg;
  gpointer arg_data;

  const gchar *description;
  const gchar *arg_description;
};
# 310 "/usr/include/glib-2.0/glib/goption.h"
 extern
GOptionContext *g_option_context_new (const gchar *parameter_string);
 extern
void g_option_context_set_summary (GOptionContext *context,
                                                   const gchar *summary);
 extern
const gchar * g_option_context_get_summary (GOptionContext *context);
 extern
void g_option_context_set_description (GOptionContext *context,
                                                   const gchar *description);
 extern
const gchar * g_option_context_get_description (GOptionContext *context);
 extern
void g_option_context_free (GOptionContext *context);
 extern
void g_option_context_set_help_enabled (GOptionContext *context,
         gboolean help_enabled);
 extern
gboolean g_option_context_get_help_enabled (GOptionContext *context);
 extern
void g_option_context_set_ignore_unknown_options (GOptionContext *context,
            gboolean ignore_unknown);
 extern
gboolean g_option_context_get_ignore_unknown_options (GOptionContext *context);

 extern
void g_option_context_set_strict_posix (GOptionContext *context,
                                                             gboolean strict_posix);
 extern
gboolean g_option_context_get_strict_posix (GOptionContext *context);

 extern
void g_option_context_add_main_entries (GOptionContext *context,
         const GOptionEntry *entries,
         const gchar *translation_domain);
 extern
gboolean g_option_context_parse (GOptionContext *context,
         gint *argc,
         gchar ***argv,
         GError **error);
 extern
gboolean g_option_context_parse_strv (GOptionContext *context,
                                                   gchar ***arguments,
                                                   GError **error);
 extern
void g_option_context_set_translate_func (GOptionContext *context,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
 extern
void g_option_context_set_translation_domain (GOptionContext *context,
        const gchar *domain);

 extern
void g_option_context_add_group (GOptionContext *context,
       GOptionGroup *group);
 extern
void g_option_context_set_main_group (GOptionContext *context,
            GOptionGroup *group);
 extern
GOptionGroup *g_option_context_get_main_group (GOptionContext *context);
 extern
gchar *g_option_context_get_help (GOptionContext *context,
                                               gboolean main_help,
                                               GOptionGroup *group);

 extern
GOptionGroup *g_option_group_new (const gchar *name,
           const gchar *description,
           const gchar *help_description,
           gpointer user_data,
           GDestroyNotify destroy);
 extern
void g_option_group_set_parse_hooks (GOptionGroup *group,
           GOptionParseFunc pre_parse_func,
           GOptionParseFunc post_parse_func);
 extern
void g_option_group_set_error_hook (GOptionGroup *group,
           GOptionErrorFunc error_func);
__attribute__((__deprecated__)) extern
void g_option_group_free (GOptionGroup *group);
 extern
GOptionGroup *g_option_group_ref (GOptionGroup *group);
 extern
void g_option_group_unref (GOptionGroup *group);
 extern
void g_option_group_add_entries (GOptionGroup *group,
           const GOptionEntry *entries);
 extern
void g_option_group_set_translate_func (GOptionGroup *group,
           GTranslateFunc func,
           gpointer data,
           GDestroyNotify destroy_notify);
 extern
void g_option_group_set_translation_domain (GOptionGroup *group,
           const gchar *domain);
# 67 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gpathbuf.h" 1
# 17 "/usr/include/glib-2.0/glib/gpathbuf.h"
typedef struct _GPathBuf GPathBuf;

struct _GPathBuf
{

  gpointer dummy[8];
};
# 43 "/usr/include/glib-2.0/glib/gpathbuf.h"
 extern
GPathBuf * g_path_buf_new (void);
 extern
GPathBuf * g_path_buf_new_from_path (const char *path);
 extern
GPathBuf * g_path_buf_init (GPathBuf *buf);
 extern
GPathBuf * g_path_buf_init_from_path (GPathBuf *buf,
                                         const char *path);
 extern
void g_path_buf_clear (GPathBuf *buf);
 extern
char * g_path_buf_clear_to_path (GPathBuf *buf) __attribute__((warn_unused_result));
 extern
void g_path_buf_free (GPathBuf *buf);
 extern
char * g_path_buf_free_to_path (GPathBuf *buf) __attribute__((warn_unused_result));
 extern
GPathBuf * g_path_buf_copy (GPathBuf *buf);

 extern
GPathBuf * g_path_buf_push (GPathBuf *buf,
                                         const char *path);
 extern
gboolean g_path_buf_pop (GPathBuf *buf);

 extern
gboolean g_path_buf_set_filename (GPathBuf *buf,
                                         const char *file_name);
 extern
gboolean g_path_buf_set_extension (GPathBuf *buf,
                                         const char *extension);

 extern
char * g_path_buf_to_path (GPathBuf *buf) __attribute__((warn_unused_result));

 extern
gboolean g_path_buf_equal (gconstpointer v1,
                                         gconstpointer v2);
# 68 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gpattern.h" 1
# 32 "/usr/include/glib-2.0/glib/gpattern.h"
typedef struct _GPatternSpec GPatternSpec;

 extern
GPatternSpec* g_pattern_spec_new (const gchar *pattern);
 extern
void g_pattern_spec_free (GPatternSpec *pspec);
 extern
GPatternSpec *g_pattern_spec_copy (GPatternSpec *pspec);
 extern
gboolean g_pattern_spec_equal (GPatternSpec *pspec1,
     GPatternSpec *pspec2);
 extern
gboolean g_pattern_spec_match (GPatternSpec *pspec,
                               gsize string_length,
                               const gchar *string,
                               const gchar *string_reversed);
 extern
gboolean g_pattern_spec_match_string (GPatternSpec *pspec,
                                      const gchar *string);
__attribute__((__deprecated__("Use '" "g_pattern_spec_match" "' instead"))) extern
gboolean g_pattern_match (GPatternSpec *pspec,
     guint string_length,
     const gchar *string,
     const gchar *string_reversed);
__attribute__((__deprecated__("Use '" "g_pattern_spec_match_string" "' instead"))) extern
gboolean g_pattern_match_string (GPatternSpec *pspec,
     const gchar *string);
 extern
gboolean g_pattern_match_simple (const gchar *pattern,
     const gchar *string);
# 69 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gprimes.h" 1
# 47 "/usr/include/glib-2.0/glib/gprimes.h"
 extern
guint g_spaced_primes_closest (guint num) __attribute__ ((__const__));
# 71 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gqsort.h" 1
# 38 "/usr/include/glib-2.0/glib/gqsort.h"
__attribute__((__deprecated__("Use '" "g_sort_array" "' instead"))) extern
void g_qsort_with_data (gconstpointer pbase,
   gint total_elems,
   gsize size,
   GCompareDataFunc compare_func,
   gpointer user_data);

 extern
void g_sort_array (const void *array,
                   size_t n_elements,
                   size_t element_size,
                   GCompareDataFunc compare_func,
                   void *user_data);
# 72 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gqueue.h" 1
# 38 "/usr/include/glib-2.0/glib/gqueue.h"
typedef struct _GQueue GQueue;
# 49 "/usr/include/glib-2.0/glib/gqueue.h"
struct _GQueue
{
  GList *head;
  GList *tail;
  guint length;
};
# 74 "/usr/include/glib-2.0/glib/gqueue.h"
 extern
GQueue* g_queue_new (void);
 extern
void g_queue_free (GQueue *queue);
 extern
void g_queue_free_full (GQueue *queue,
    GDestroyNotify free_func);
 extern
void g_queue_init (GQueue *queue);
 extern
void g_queue_clear (GQueue *queue);
 extern
gboolean g_queue_is_empty (GQueue *queue);
 extern
void g_queue_clear_full (GQueue *queue,
                                 GDestroyNotify free_func);
 extern
guint g_queue_get_length (GQueue *queue);
 extern
void g_queue_reverse (GQueue *queue);
 extern
GQueue * g_queue_copy (GQueue *queue);
 extern
void g_queue_foreach (GQueue *queue,
                                 GFunc func,
                                 gpointer user_data);
 extern
GList * g_queue_find (GQueue *queue,
                                 gconstpointer data);
 extern
GList * g_queue_find_custom (GQueue *queue,
                                 gconstpointer data,
                                 GCompareFunc func);
 extern
void g_queue_sort (GQueue *queue,
                                 GCompareDataFunc compare_func,
                                 gpointer user_data);

 extern
void g_queue_push_head (GQueue *queue,
                                 gpointer data);
 extern
void g_queue_push_tail (GQueue *queue,
                                 gpointer data);
 extern
void g_queue_push_nth (GQueue *queue,
                                 gpointer data,
                                 gint n);
 extern
gpointer g_queue_pop_head (GQueue *queue);
 extern
gpointer g_queue_pop_tail (GQueue *queue);
 extern
gpointer g_queue_pop_nth (GQueue *queue,
                                 guint n);
 extern
gpointer g_queue_peek_head (GQueue *queue);
 extern
gpointer g_queue_peek_tail (GQueue *queue);
 extern
gpointer g_queue_peek_nth (GQueue *queue,
                                 guint n);
 extern
gint g_queue_index (GQueue *queue,
                                 gconstpointer data);
 extern
gboolean g_queue_remove (GQueue *queue,
                                 gconstpointer data);
 extern
guint g_queue_remove_all (GQueue *queue,
                                 gconstpointer data);
 extern
void g_queue_insert_before (GQueue *queue,
                                 GList *sibling,
                                 gpointer data);
 extern
void g_queue_insert_before_link
                                (GQueue *queue,
                                 GList *sibling,
                                 GList *link_);
 extern
void g_queue_insert_after (GQueue *queue,
                                 GList *sibling,
                                 gpointer data);
 extern
void g_queue_insert_after_link
                                (GQueue *queue,
                                 GList *sibling,
                                 GList *link_);
 extern
void g_queue_insert_sorted (GQueue *queue,
                                 gpointer data,
                                 GCompareDataFunc func,
                                 gpointer user_data);

 extern
void g_queue_push_head_link (GQueue *queue,
                                 GList *link_);
 extern
void g_queue_push_tail_link (GQueue *queue,
                                 GList *link_);
 extern
void g_queue_push_nth_link (GQueue *queue,
                                 gint n,
                                 GList *link_);
 extern
GList* g_queue_pop_head_link (GQueue *queue);
 extern
GList* g_queue_pop_tail_link (GQueue *queue);
 extern
GList* g_queue_pop_nth_link (GQueue *queue,
                                 guint n);
 extern
GList* g_queue_peek_head_link (GQueue *queue);
 extern
GList* g_queue_peek_tail_link (GQueue *queue);
 extern
GList* g_queue_peek_nth_link (GQueue *queue,
                                 guint n);
 extern
gint g_queue_link_index (GQueue *queue,
                                 GList *link_);
 extern
void g_queue_unlink (GQueue *queue,
                                 GList *link_);
 extern
void g_queue_delete_link (GQueue *queue,
                                 GList *link_);
# 74 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grand.h" 1
# 38 "/usr/include/glib-2.0/glib/grand.h"
typedef struct _GRand GRand;
# 49 "/usr/include/glib-2.0/glib/grand.h"
 extern
GRand* g_rand_new_with_seed (guint32 seed);
 extern
GRand* g_rand_new_with_seed_array (const guint32 *seed,
        guint seed_length);
 extern
GRand* g_rand_new (void);
 extern
void g_rand_free (GRand *rand_);
 extern
GRand* g_rand_copy (GRand *rand_);
 extern
void g_rand_set_seed (GRand *rand_,
          guint32 seed);
 extern
void g_rand_set_seed_array (GRand *rand_,
          const guint32 *seed,
          guint seed_length);



 extern
guint32 g_rand_int (GRand *rand_);
 extern
gint32 g_rand_int_range (GRand *rand_,
          gint32 begin,
          gint32 end);
 extern
gdouble g_rand_double (GRand *rand_);
 extern
gdouble g_rand_double_range (GRand *rand_,
          gdouble begin,
          gdouble end);
 extern
void g_random_set_seed (guint32 seed);



 extern
guint32 g_random_int (void);
 extern
gint32 g_random_int_range (gint32 begin,
          gint32 end);
 extern
gdouble g_random_double (void);
 extern
gdouble g_random_double_range (gdouble begin,
          gdouble end);
# 75 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grcbox.h" 1
# 32 "/usr/include/glib-2.0/glib/grcbox.h"
 extern
gpointer g_rc_box_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_rc_box_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_rc_box_dup (gsize block_size,
                                                 gconstpointer mem_block) __attribute__((__alloc_size__(1)));
 extern
gpointer g_rc_box_acquire (gpointer mem_block);
 extern
void g_rc_box_release (gpointer mem_block);
 extern
void g_rc_box_release_full (gpointer mem_block,
                                                 GDestroyNotify clear_func);

 extern
gsize g_rc_box_get_size (gpointer mem_block);

 extern
gpointer g_atomic_rc_box_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_atomic_rc_box_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_atomic_rc_box_dup (gsize block_size,
                                                 gconstpointer mem_block) __attribute__((__alloc_size__(1)));
 extern
gpointer g_atomic_rc_box_acquire (gpointer mem_block);
 extern
void g_atomic_rc_box_release (gpointer mem_block);
 extern
void g_atomic_rc_box_release_full (gpointer mem_block,
                                                 GDestroyNotify clear_func);

 extern
gsize g_atomic_rc_box_get_size (gpointer mem_block);
# 76 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grefcount.h" 1
# 33 "/usr/include/glib-2.0/glib/grefcount.h"
 extern
void g_ref_count_init (grefcount *rc);
 extern
void g_ref_count_inc (grefcount *rc);
 extern
gboolean g_ref_count_dec (grefcount *rc);
 extern
gboolean g_ref_count_compare (grefcount *rc,
                                                 gint val);

 extern
void g_atomic_ref_count_init (gatomicrefcount *arc);
 extern
void g_atomic_ref_count_inc (gatomicrefcount *arc);
 extern
gboolean g_atomic_ref_count_dec (gatomicrefcount *arc);
 extern
gboolean g_atomic_ref_count_compare (gatomicrefcount *arc,
                                                 gint val);
# 77 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grefstring.h" 1
# 28 "/usr/include/glib-2.0/glib/grefstring.h"
 extern
char * g_ref_string_new (const char *str);
 extern
char * g_ref_string_new_len (const char *str,
                                 gssize len);
 extern
char * g_ref_string_new_intern (const char *str);

 extern
char * g_ref_string_acquire (char *str);
 extern
void g_ref_string_release (char *str);

 extern
gsize g_ref_string_length (char *str);
# 57 "/usr/include/glib-2.0/glib/grefstring.h"
typedef char GRefString;
# 78 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gregex.h" 1
# 142 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum
{
  G_REGEX_ERROR_COMPILE,
  G_REGEX_ERROR_OPTIMIZE,
  G_REGEX_ERROR_REPLACE,
  G_REGEX_ERROR_MATCH,
  G_REGEX_ERROR_INTERNAL,


  G_REGEX_ERROR_STRAY_BACKSLASH = 101,
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
  G_REGEX_ERROR_MEMORY_ERROR = 121,
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
  G_REGEX_ERROR_MALFORMED_CONDITION = 126,
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
  G_REGEX_ERROR_INVALID_CONDITION = 135,
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
  G_REGEX_ERROR_INFINITE_LOOP = 140,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
  G_REGEX_ERROR_DEFINE_REPETION = 155,
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160,
  G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
  G_REGEX_ERROR_MISSING_DIGIT = 163,
  G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
  G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
  G_REGEX_ERROR_MISSING_NAME = 169,
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
  G_REGEX_ERROR_NAME_TOO_LONG = 175,
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
} GRegexError;
# 216 "/usr/include/glib-2.0/glib/gregex.h"
 extern
GQuark g_regex_error_quark (void);
# 304 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum
{
  G_REGEX_DEFAULT = 0,
  G_REGEX_CASELESS = 1 << 0,
  G_REGEX_MULTILINE = 1 << 1,
  G_REGEX_DOTALL = 1 << 2,
  G_REGEX_EXTENDED = 1 << 3,
  G_REGEX_ANCHORED = 1 << 4,
  G_REGEX_DOLLAR_ENDONLY = 1 << 5,
  G_REGEX_UNGREEDY = 1 << 9,
  G_REGEX_RAW = 1 << 11,
  G_REGEX_NO_AUTO_CAPTURE = 1 << 12,
  G_REGEX_OPTIMIZE = 1 << 13,
  G_REGEX_FIRSTLINE = 1 << 18,
  G_REGEX_DUPNAMES = 1 << 19,
  G_REGEX_NEWLINE_CR = 1 << 20,
  G_REGEX_NEWLINE_LF = 1 << 21,
  G_REGEX_NEWLINE_CRLF = G_REGEX_NEWLINE_CR | G_REGEX_NEWLINE_LF,
  G_REGEX_NEWLINE_ANYCRLF = G_REGEX_NEWLINE_CR | 1 << 22,
  G_REGEX_BSR_ANYCRLF = 1 << 23,
  G_REGEX_JAVASCRIPT_COMPAT __attribute__((__deprecated__)) = 1 << 25
} GRegexCompileFlags;
# 396 "/usr/include/glib-2.0/glib/gregex.h"
typedef enum
{
  G_REGEX_MATCH_DEFAULT = 0,
  G_REGEX_MATCH_ANCHORED = 1 << 4,
  G_REGEX_MATCH_NOTBOL = 1 << 7,
  G_REGEX_MATCH_NOTEOL = 1 << 8,
  G_REGEX_MATCH_NOTEMPTY = 1 << 10,
  G_REGEX_MATCH_PARTIAL = 1 << 15,
  G_REGEX_MATCH_NEWLINE_CR = 1 << 20,
  G_REGEX_MATCH_NEWLINE_LF = 1 << 21,
  G_REGEX_MATCH_NEWLINE_CRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_LF,
  G_REGEX_MATCH_NEWLINE_ANY = 1 << 22,
  G_REGEX_MATCH_NEWLINE_ANYCRLF = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_ANY,
  G_REGEX_MATCH_BSR_ANYCRLF = 1 << 23,
  G_REGEX_MATCH_BSR_ANY = 1 << 24,
  G_REGEX_MATCH_PARTIAL_SOFT = G_REGEX_MATCH_PARTIAL,
  G_REGEX_MATCH_PARTIAL_HARD = 1 << 27,
  G_REGEX_MATCH_NOTEMPTY_ATSTART = 1 << 28
} GRegexMatchFlags;

typedef struct _GRegex GRegex;
# 425 "/usr/include/glib-2.0/glib/gregex.h"
typedef struct _GMatchInfo GMatchInfo;
# 444 "/usr/include/glib-2.0/glib/gregex.h"
typedef gboolean (*GRegexEvalCallback) (const GMatchInfo *match_info,
       GString *result,
       gpointer user_data);


 extern
GRegex *g_regex_new (const gchar *pattern,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options,
       GError **error);
 extern
GRegex *g_regex_ref (GRegex *regex);
 extern
void g_regex_unref (GRegex *regex);
 extern
const gchar *g_regex_get_pattern (const GRegex *regex);
 extern
gint g_regex_get_max_backref (const GRegex *regex);
 extern
gint g_regex_get_capture_count (const GRegex *regex);
 extern
gboolean g_regex_get_has_cr_or_lf (const GRegex *regex);
 extern
gint g_regex_get_max_lookbehind (const GRegex *regex);
 extern
gint g_regex_get_string_number (const GRegex *regex,
       const gchar *name);
 extern
gchar *g_regex_escape_string (const gchar *string,
       gint length);
 extern
gchar *g_regex_escape_nul (const gchar *string,
       gint length);

 extern
GRegexCompileFlags g_regex_get_compile_flags (const GRegex *regex);
 extern
GRegexMatchFlags g_regex_get_match_flags (const GRegex *regex);


 extern
gboolean g_regex_match_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
 extern
gboolean g_regex_match (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
 extern
gboolean g_regex_match_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);
 extern
gboolean g_regex_match_all (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info);
 extern
gboolean g_regex_match_all_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GMatchInfo **match_info,
       GError **error);


 extern
gchar **g_regex_split_simple (const gchar *pattern,
       const gchar *string,
       GRegexCompileFlags compile_options,
       GRegexMatchFlags match_options);
 extern
gchar **g_regex_split (const GRegex *regex,
       const gchar *string,
       GRegexMatchFlags match_options);
 extern
gchar **g_regex_split_full (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       gint max_tokens,
       GError **error);


 extern
gchar *g_regex_replace (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
 extern
gchar *g_regex_replace_literal (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       const gchar *replacement,
       GRegexMatchFlags match_options,
       GError **error);
 extern
gchar *g_regex_replace_eval (const GRegex *regex,
       const gchar *string,
       gssize string_len,
       gint start_position,
       GRegexMatchFlags match_options,
       GRegexEvalCallback eval,
       gpointer user_data,
       GError **error);
 extern
gboolean g_regex_check_replacement (const gchar *replacement,
       gboolean *has_references,
       GError **error);


 extern
GRegex *g_match_info_get_regex (const GMatchInfo *match_info);
 extern
const gchar *g_match_info_get_string (const GMatchInfo *match_info);

 extern
GMatchInfo *g_match_info_ref (GMatchInfo *match_info);
 extern
void g_match_info_unref (GMatchInfo *match_info);
 extern
void g_match_info_free (GMatchInfo *match_info);
 extern
gboolean g_match_info_next (GMatchInfo *match_info,
       GError **error);
 extern
gboolean g_match_info_matches (const GMatchInfo *match_info);
 extern
gint g_match_info_get_match_count (const GMatchInfo *match_info);
 extern
gboolean g_match_info_is_partial_match (const GMatchInfo *match_info);
 extern
gchar *g_match_info_expand_references(const GMatchInfo *match_info,
       const gchar *string_to_expand,
       GError **error);
 extern
gchar *g_match_info_fetch (const GMatchInfo *match_info,
       gint match_num);
 extern
gboolean g_match_info_fetch_pos (const GMatchInfo *match_info,
       gint match_num,
       gint *start_pos,
       gint *end_pos);
 extern
gchar *g_match_info_fetch_named (const GMatchInfo *match_info,
       const gchar *name);
 extern
gboolean g_match_info_fetch_named_pos (const GMatchInfo *match_info,
       const gchar *name,
       gint *start_pos,
       gint *end_pos);
 extern
gchar **g_match_info_fetch_all (const GMatchInfo *match_info);
# 79 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gscanner.h" 1
# 39 "/usr/include/glib-2.0/glib/gscanner.h"
typedef struct _GScanner GScanner;
typedef struct _GScannerConfig GScannerConfig;
typedef union _GTokenValue GTokenValue;

typedef void (*GScannerMsgFunc) (GScanner *scanner,
       gchar *message,
       gboolean error);
# 64 "/usr/include/glib-2.0/glib/gscanner.h"
typedef enum
{
  G_ERR_UNKNOWN,
  G_ERR_UNEXP_EOF,
  G_ERR_UNEXP_EOF_IN_STRING,
  G_ERR_UNEXP_EOF_IN_COMMENT,
  G_ERR_NON_DIGIT_IN_CONST,
  G_ERR_DIGIT_RADIX,
  G_ERR_FLOAT_RADIX,
  G_ERR_FLOAT_MALFORMED
} GErrorType;


typedef enum
{
  G_TOKEN_EOF = 0,

  G_TOKEN_LEFT_PAREN = '(',
  G_TOKEN_RIGHT_PAREN = ')',
  G_TOKEN_LEFT_CURLY = '{',
  G_TOKEN_RIGHT_CURLY = '}',
  G_TOKEN_LEFT_BRACE = '[',
  G_TOKEN_RIGHT_BRACE = ']',
  G_TOKEN_EQUAL_SIGN = '=',
  G_TOKEN_COMMA = ',',

  G_TOKEN_NONE = 256,

  G_TOKEN_ERROR,

  G_TOKEN_CHAR,
  G_TOKEN_BINARY,
  G_TOKEN_OCTAL,
  G_TOKEN_INT,
  G_TOKEN_HEX,
  G_TOKEN_FLOAT,
  G_TOKEN_STRING,

  G_TOKEN_SYMBOL,
  G_TOKEN_IDENTIFIER,
  G_TOKEN_IDENTIFIER_NULL,

  G_TOKEN_COMMENT_SINGLE,
  G_TOKEN_COMMENT_MULTI,


  G_TOKEN_LAST
} GTokenType;

union _GTokenValue
{
  gpointer v_symbol;
  gchar *v_identifier;
  gulong v_binary;
  gulong v_octal;
  gulong v_int;
  guint64 v_int64;
  gdouble v_float;
  gulong v_hex;
  gchar *v_string;
  gchar *v_comment;
  guchar v_char;
  guint v_error;
};

struct _GScannerConfig
{


  gchar *cset_skip_characters;
  gchar *cset_identifier_first;
  gchar *cset_identifier_nth;
  gchar *cpair_comment_single;



  guint case_sensitive : 1;




  guint skip_comment_multi : 1;
  guint skip_comment_single : 1;
  guint scan_comment_multi : 1;
  guint scan_identifier : 1;
  guint scan_identifier_1char : 1;
  guint scan_identifier_NULL : 1;
  guint scan_symbols : 1;
  guint scan_binary : 1;
  guint scan_octal : 1;
  guint scan_float : 1;
  guint scan_hex : 1;
  guint scan_hex_dollar : 1;
  guint scan_string_sq : 1;
  guint scan_string_dq : 1;
  guint numbers_2_int : 1;
  guint int_2_float : 1;
  guint identifier_2_string : 1;
  guint char_2_token : 1;
  guint symbol_2_token : 1;
  guint scope_0_fallback : 1;
  guint store_int64 : 1;


  guint padding_dummy;
};

struct _GScanner
{

  gpointer user_data;
  guint max_parse_errors;


  guint parse_errors;


  const gchar *input_name;


  GData *qdata;


  GScannerConfig *config;


  GTokenType token;
  GTokenValue value;
  guint line;
  guint position;


  GTokenType next_token;
  GTokenValue next_value;
  guint next_line;
  guint next_position;



  GHashTable *symbol_table;
  gint input_fd;
  const gchar *text;
  const gchar *text_end;
  gchar *buffer;
  guint scope_id;



  GScannerMsgFunc msg_handler;
};

 extern
GScanner* g_scanner_new (const GScannerConfig *config_templ);
 extern
void g_scanner_destroy (GScanner *scanner);
 extern
void g_scanner_input_file (GScanner *scanner,
       gint input_fd);
 extern
void g_scanner_sync_file_offset (GScanner *scanner);
 extern
void g_scanner_input_text (GScanner *scanner,
       const gchar *text,
       guint text_len);
 extern
GTokenType g_scanner_get_next_token (GScanner *scanner);
 extern
GTokenType g_scanner_peek_next_token (GScanner *scanner);
 extern
GTokenType g_scanner_cur_token (GScanner *scanner);
 extern
GTokenValue g_scanner_cur_value (GScanner *scanner);
 extern
guint g_scanner_cur_line (GScanner *scanner);
 extern
guint g_scanner_cur_position (GScanner *scanner);
 extern
gboolean g_scanner_eof (GScanner *scanner);
 extern
guint g_scanner_set_scope (GScanner *scanner,
       guint scope_id);
 extern
void g_scanner_scope_add_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol,
       gpointer value);
 extern
void g_scanner_scope_remove_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
 extern
gpointer g_scanner_scope_lookup_symbol (GScanner *scanner,
       guint scope_id,
       const gchar *symbol);
 extern
void g_scanner_scope_foreach_symbol (GScanner *scanner,
       guint scope_id,
       GHFunc func,
       gpointer user_data);
 extern
gpointer g_scanner_lookup_symbol (GScanner *scanner,
       const gchar *symbol);
 extern
void g_scanner_unexp_token (GScanner *scanner,
       GTokenType expected_token,
       const gchar *identifier_spec,
       const gchar *symbol_spec,
       const gchar *symbol_name,
       const gchar *message,
       gint is_error);
 extern
void g_scanner_error (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_scanner_warn (GScanner *scanner,
       const gchar *format,
       ...) __attribute__((__format__ (__printf__, 2, 3)));
# 80 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gsequence.h" 1
# 32 "/usr/include/glib-2.0/glib/gsequence.h"
typedef struct _GSequence GSequence;
typedef struct _GSequenceNode GSequenceIter;

typedef gint (* GSequenceIterCompareFunc) (GSequenceIter *a,
                                           GSequenceIter *b,
                                           gpointer data);



 extern
GSequence * g_sequence_new (GDestroyNotify data_destroy);
 extern
void g_sequence_free (GSequence *seq);
 extern
gint g_sequence_get_length (GSequence *seq);
 extern
void g_sequence_foreach (GSequence *seq,
                                              GFunc func,
                                              gpointer user_data);
 extern
void g_sequence_foreach_range (GSequenceIter *begin,
                                              GSequenceIter *end,
                                              GFunc func,
                                              gpointer user_data);
 extern
void g_sequence_sort (GSequence *seq,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
void g_sequence_sort_iter (GSequence *seq,
                                              GSequenceIterCompareFunc cmp_func,
                                              gpointer cmp_data);
 extern
gboolean g_sequence_is_empty (GSequence *seq);



 extern
GSequenceIter *g_sequence_get_begin_iter (GSequence *seq);
 extern
GSequenceIter *g_sequence_get_end_iter (GSequence *seq);
 extern
GSequenceIter *g_sequence_get_iter_at_pos (GSequence *seq,
                                              gint pos);
 extern
GSequenceIter *g_sequence_append (GSequence *seq,
                                              gpointer data);
 extern
GSequenceIter *g_sequence_prepend (GSequence *seq,
                                              gpointer data);
 extern
GSequenceIter *g_sequence_insert_before (GSequenceIter *iter,
                                              gpointer data);
 extern
void g_sequence_move (GSequenceIter *src,
                                              GSequenceIter *dest);
 extern
void g_sequence_swap (GSequenceIter *a,
                                              GSequenceIter *b);
 extern
GSequenceIter *g_sequence_insert_sorted (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
GSequenceIter *g_sequence_insert_sorted_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
 extern
void g_sequence_sort_changed (GSequenceIter *iter,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
void g_sequence_sort_changed_iter (GSequenceIter *iter,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
 extern
void g_sequence_remove (GSequenceIter *iter);
 extern
void g_sequence_remove_range (GSequenceIter *begin,
                                              GSequenceIter *end);
 extern
void g_sequence_move_range (GSequenceIter *dest,
                                              GSequenceIter *begin,
                                              GSequenceIter *end);
 extern
GSequenceIter *g_sequence_search (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
GSequenceIter *g_sequence_search_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);
 extern
GSequenceIter *g_sequence_lookup (GSequence *seq,
                                              gpointer data,
                                              GCompareDataFunc cmp_func,
                                              gpointer cmp_data);
 extern
GSequenceIter *g_sequence_lookup_iter (GSequence *seq,
                                              gpointer data,
                                              GSequenceIterCompareFunc iter_cmp,
                                              gpointer cmp_data);



 extern
gpointer g_sequence_get (GSequenceIter *iter);
 extern
void g_sequence_set (GSequenceIter *iter,
                                              gpointer data);


 extern
gboolean g_sequence_iter_is_begin (GSequenceIter *iter);
 extern
gboolean g_sequence_iter_is_end (GSequenceIter *iter);
 extern
GSequenceIter *g_sequence_iter_next (GSequenceIter *iter);
 extern
GSequenceIter *g_sequence_iter_prev (GSequenceIter *iter);
 extern
gint g_sequence_iter_get_position (GSequenceIter *iter);
 extern
GSequenceIter *g_sequence_iter_move (GSequenceIter *iter,
                                              gint delta);
 extern
GSequence * g_sequence_iter_get_sequence (GSequenceIter *iter);



 extern
gint g_sequence_iter_compare (GSequenceIter *a,
                                              GSequenceIter *b);
 extern
GSequenceIter *g_sequence_range_get_midpoint (GSequenceIter *begin,
                                              GSequenceIter *end);
# 81 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gshell.h" 1
# 34 "/usr/include/glib-2.0/glib/gshell.h"
typedef enum
{

  G_SHELL_ERROR_BAD_QUOTING,

  G_SHELL_ERROR_EMPTY_STRING,
  G_SHELL_ERROR_FAILED
} GShellError;

 extern
GQuark g_shell_error_quark (void);

 extern
gchar* g_shell_quote (const gchar *unquoted_string);
 extern
gchar* g_shell_unquote (const gchar *quoted_string,
                             GError **error);
 extern
gboolean g_shell_parse_argv (const gchar *command_line,
                             gint *argcp,
                             gchar ***argvp,
                             GError **error);
# 82 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gslice.h" 1
# 34 "/usr/include/glib-2.0/glib/gslice.h"
 extern
gpointer g_slice_alloc (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_slice_alloc0 (gsize block_size) __attribute__ ((__malloc__)) __attribute__((__alloc_size__(1)));
 extern
gpointer g_slice_copy (gsize block_size,
                                         gconstpointer mem_block) __attribute__((__alloc_size__(1)));
 extern
void g_slice_free1 (gsize block_size,
      gpointer mem_block);
 extern
void g_slice_free_chain_with_offset (gsize block_size,
      gpointer mem_chain,
      gsize next_offset);
# 94 "/usr/include/glib-2.0/glib/gslice.h"
typedef enum {
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
  G_SLICE_CONFIG_BYPASS_MAGAZINES,
  G_SLICE_CONFIG_WORKING_SET_MSECS,
  G_SLICE_CONFIG_COLOR_INCREMENT,
  G_SLICE_CONFIG_CHUNK_SIZES,
  G_SLICE_CONFIG_CONTENTION_COUNTER
} GSliceConfig;

__attribute__((__deprecated__)) extern
void g_slice_set_config (GSliceConfig ckey, gint64 value);
__attribute__((__deprecated__)) extern
gint64 g_slice_get_config (GSliceConfig ckey);
__attribute__((__deprecated__)) extern
gint64* g_slice_get_config_state (GSliceConfig ckey, gint64 address, guint *n_values);
# 83 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gspawn.h" 1
# 70 "/usr/include/glib-2.0/glib/gspawn.h"
typedef enum
{
  G_SPAWN_ERROR_FORK,
  G_SPAWN_ERROR_READ,
  G_SPAWN_ERROR_CHDIR,
  G_SPAWN_ERROR_ACCES,
  G_SPAWN_ERROR_PERM,
  G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_2BIG __attribute__((__deprecated__("Use '" "G_SPAWN_ERROR_TOO_BIG" "' instead"))) = G_SPAWN_ERROR_TOO_BIG,
  G_SPAWN_ERROR_NOEXEC,
  G_SPAWN_ERROR_NAMETOOLONG,
  G_SPAWN_ERROR_NOENT,
  G_SPAWN_ERROR_NOMEM,
  G_SPAWN_ERROR_NOTDIR,
  G_SPAWN_ERROR_LOOP,
  G_SPAWN_ERROR_TXTBUSY,
  G_SPAWN_ERROR_IO,
  G_SPAWN_ERROR_NFILE,
  G_SPAWN_ERROR_MFILE,
  G_SPAWN_ERROR_INVAL,
  G_SPAWN_ERROR_ISDIR,
  G_SPAWN_ERROR_LIBBAD,
  G_SPAWN_ERROR_FAILED


} GSpawnError;
# 140 "/usr/include/glib-2.0/glib/gspawn.h"
typedef void (* GSpawnChildSetupFunc) (gpointer data);
# 176 "/usr/include/glib-2.0/glib/gspawn.h"
typedef enum
{
  G_SPAWN_DEFAULT = 0,
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 << 0,
  G_SPAWN_DO_NOT_REAP_CHILD = 1 << 1,

  G_SPAWN_SEARCH_PATH = 1 << 2,

  G_SPAWN_STDOUT_TO_DEV_NULL = 1 << 3,
  G_SPAWN_STDERR_TO_DEV_NULL = 1 << 4,
  G_SPAWN_CHILD_INHERITS_STDIN = 1 << 5,
  G_SPAWN_FILE_AND_ARGV_ZERO = 1 << 6,
  G_SPAWN_SEARCH_PATH_FROM_ENVP = 1 << 7,
  G_SPAWN_CLOEXEC_PIPES = 1 << 8,
# 198 "/usr/include/glib-2.0/glib/gspawn.h"
  G_SPAWN_CHILD_INHERITS_STDOUT = 1 << 9,
# 207 "/usr/include/glib-2.0/glib/gspawn.h"
  G_SPAWN_CHILD_INHERITS_STDERR = 1 << 10,
# 216 "/usr/include/glib-2.0/glib/gspawn.h"
  G_SPAWN_STDIN_FROM_DEV_NULL = 1 << 11
} GSpawnFlags;

 extern
GQuark g_spawn_error_quark (void);
 extern
GQuark g_spawn_exit_error_quark (void);

 extern
gboolean g_spawn_async (const gchar *working_directory,
                        gchar **argv,
                        gchar **envp,
                        GSpawnFlags flags,
                        GSpawnChildSetupFunc child_setup,
                        gpointer user_data,
                        GPid *child_pid,
                        GError **error);





 extern
gboolean g_spawn_async_with_pipes (const gchar *working_directory,
                                   gchar **argv,
                                   gchar **envp,
                                   GSpawnFlags flags,
                                   GSpawnChildSetupFunc child_setup,
                                   gpointer user_data,
                                   GPid *child_pid,
                                   gint *standard_input,
                                   gint *standard_output,
                                   gint *standard_error,
                                   GError **error);

 extern
gboolean g_spawn_async_with_pipes_and_fds (const gchar *working_directory,
                                           const gchar * const *argv,
                                           const gchar * const *envp,
                                           GSpawnFlags flags,
                                           GSpawnChildSetupFunc child_setup,
                                           gpointer user_data,
                                           gint stdin_fd,
                                           gint stdout_fd,
                                           gint stderr_fd,
                                           const gint *source_fds,
                                           const gint *target_fds,
                                           gsize n_fds,
                                           GPid *child_pid_out,
                                           gint *stdin_pipe_out,
                                           gint *stdout_pipe_out,
                                           gint *stderr_pipe_out,
                                           GError **error);


 extern
gboolean g_spawn_async_with_fds (const gchar *working_directory,
                                 gchar **argv,
                                 gchar **envp,
                                 GSpawnFlags flags,
                                 GSpawnChildSetupFunc child_setup,
                                 gpointer user_data,
                                 GPid *child_pid,
                                 gint stdin_fd,
                                 gint stdout_fd,
                                 gint stderr_fd,
                                 GError **error);





 extern
gboolean g_spawn_sync (const gchar *working_directory,
                               gchar **argv,
                               gchar **envp,
                               GSpawnFlags flags,
                               GSpawnChildSetupFunc child_setup,
                               gpointer user_data,
                               gchar **standard_output,
                               gchar **standard_error,
                               gint *wait_status,
                               GError **error);

 extern
gboolean g_spawn_command_line_sync (const gchar *command_line,
                                     gchar **standard_output,
                                     gchar **standard_error,
                                     gint *wait_status,
                                     GError **error);
 extern
gboolean g_spawn_command_line_async (const gchar *command_line,
                                     GError **error);

 extern
gboolean g_spawn_check_wait_status (gint wait_status,
                                    GError **error);

__attribute__((__deprecated__("Use '" "g_spawn_check_wait_status" "' instead"))) extern
gboolean g_spawn_check_exit_status (gint wait_status,
        GError **error);

 extern
void g_spawn_close_pid (GPid pid);
# 85 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gstringchunk.h" 1
# 38 "/usr/include/glib-2.0/glib/gstringchunk.h"
typedef struct _GStringChunk GStringChunk;

 extern
GStringChunk* g_string_chunk_new (gsize size);
 extern
void g_string_chunk_free (GStringChunk *chunk);
 extern
void g_string_chunk_clear (GStringChunk *chunk);
 extern
gchar* g_string_chunk_insert (GStringChunk *chunk,
                                           const gchar *string);
 extern
gchar* g_string_chunk_insert_len (GStringChunk *chunk,
                                           const gchar *string,
                                           gssize len);
 extern
gchar* g_string_chunk_insert_const (GStringChunk *chunk,
                                           const gchar *string);
# 87 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gstrvbuilder.h" 1
# 33 "/usr/include/glib-2.0/glib/gstrvbuilder.h"
typedef struct _GStrvBuilder GStrvBuilder;

 extern
GStrvBuilder *g_strv_builder_new (void);

 extern
void g_strv_builder_unref (GStrvBuilder *builder);

 extern
GStrv g_strv_builder_unref_to_strv (GStrvBuilder *builder);

 extern
GStrvBuilder *g_strv_builder_ref (GStrvBuilder *builder);

 extern
void g_strv_builder_add (GStrvBuilder *builder,
                         const char *value);

 extern
void g_strv_builder_addv (GStrvBuilder *builder,
                          const char **value);

 extern
void g_strv_builder_add_many (GStrvBuilder *builder,
                              ...) __attribute__((__sentinel__));

 extern
void g_strv_builder_take (GStrvBuilder *builder,
                          char *value);

 extern
GStrv g_strv_builder_end (GStrvBuilder *builder);
# 89 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtestutils.h" 1
# 32 "/usr/include/glib-2.0/glib/gtestutils.h"
# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/bits/errno.h" 1 3 4
# 26 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4








extern int *__errno_location (void) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));
# 33 "/usr/include/glib-2.0/glib/gtestutils.h" 2





typedef struct GTestCase GTestCase;
typedef struct GTestSuite GTestSuite;
typedef void (*GTestFunc) (void);
typedef void (*GTestDataFunc) (gconstpointer user_data);
typedef void (*GTestFixtureFunc) (gpointer fixture,
                                  gconstpointer user_data);
# 282 "/usr/include/glib-2.0/glib/gtestutils.h"
 extern
int g_strcmp0 (const char *str1,
                                         const char *str2);


 extern
void g_test_minimized_result (double minimized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_test_maximized_result (double maximized_quantity,
                                         const char *format,
                                         ...) __attribute__((__format__ (__printf__, 2, 3)));


 extern
void g_test_init (int *argc,
                                         char ***argv,
                                         ...) __attribute__((__sentinel__));
# 364 "/usr/include/glib-2.0/glib/gtestutils.h"
 extern
gboolean g_test_subprocess (void);


 extern
int g_test_run (void);

 extern
void g_test_add_func (const char *testpath,
                                         GTestFunc test_func);

 extern
void g_test_add_data_func (const char *testpath,
                                         gconstpointer test_data,
                                         GTestDataFunc test_func);

 extern
void g_test_add_data_func_full (const char *testpath,
                                         gpointer test_data,
                                         GTestDataFunc test_func,
                                         GDestroyNotify data_free_func);


 extern
const char * g_test_get_path (void);


 extern
void g_test_fail (void);
 extern
void g_test_fail_printf (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
void g_test_incomplete (const gchar *msg);
 extern
void g_test_incomplete_printf (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
void g_test_skip (const gchar *msg);
 extern
void g_test_skip_printf (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
gboolean g_test_failed (void);
 extern
void g_test_set_nonfatal_assertions (void);
 extern
void g_test_disable_crash_reporting (void);
# 445 "/usr/include/glib-2.0/glib/gtestutils.h"
 extern
void g_test_message (const char *format,
                                         ...) __attribute__((__format__ (__printf__, 1, 2)));
 extern
void g_test_bug_base (const char *uri_pattern);
 extern
void g_test_bug (const char *bug_uri_snippet);
 extern
void g_test_summary (const char *summary);

 extern
void g_test_timer_start (void);
 extern
double g_test_timer_elapsed (void);
 extern
double g_test_timer_last (void);


 extern
void g_test_queue_free (gpointer gfree_pointer);
 extern
void g_test_queue_destroy (GDestroyNotify destroy_func,
                                         gpointer destroy_data);
# 492 "/usr/include/glib-2.0/glib/gtestutils.h"
typedef enum {
  G_TEST_TRAP_DEFAULT = 0,
  G_TEST_TRAP_SILENCE_STDOUT = 1 << 7,
  G_TEST_TRAP_SILENCE_STDERR = 1 << 8,
  G_TEST_TRAP_INHERIT_STDIN = 1 << 9
} GTestTrapFlags __attribute__((__deprecated__("Use '" "GTestSubprocessFlags" "' instead")));

#pragma clang diagnostic push
# 499 "/usr/include/glib-2.0/glib/gtestutils.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

__attribute__((__deprecated__("Use '" "g_test_trap_subprocess" "' instead"))) extern
gboolean g_test_trap_fork (guint64 usec_timeout,
                                         GTestTrapFlags test_trap_flags);

#pragma clang diagnostic pop

typedef enum {
  G_TEST_SUBPROCESS_DEFAULT = 0,
  G_TEST_SUBPROCESS_INHERIT_STDIN = 1 << 0,
  G_TEST_SUBPROCESS_INHERIT_STDOUT = 1 << 1,
  G_TEST_SUBPROCESS_INHERIT_STDERR = 1 << 2
} GTestSubprocessFlags;

 extern
void g_test_trap_subprocess (const char *test_path,
                                         guint64 usec_timeout,
                                         GTestSubprocessFlags test_flags);
 extern
void g_test_trap_subprocess_with_envp (const char *test_path,
                                           const char * const *envp,
                                           guint64 usec_timeout,
                                           GTestSubprocessFlags test_flags);

 extern
gboolean g_test_trap_has_passed (void);
 extern
gboolean g_test_trap_reached_timeout (void);
# 537 "/usr/include/glib-2.0/glib/gtestutils.h"
 extern
gint32 g_test_rand_int (void);
 extern
gint32 g_test_rand_int_range (gint32 begin,
                                         gint32 end);
 extern
double g_test_rand_double (void);
 extern
double g_test_rand_double_range (double range_start,
                                         double range_end);






 extern
GTestCase* g_test_create_case (const char *test_name,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         GTestFixtureFunc data_setup,
                                         GTestFixtureFunc data_test,
                                         GTestFixtureFunc data_teardown);
 extern
GTestSuite* g_test_create_suite (const char *suite_name);
 extern
GTestSuite* g_test_get_root (void);
 extern
void g_test_suite_add (GTestSuite *suite,
                                         GTestCase *test_case);
 extern
void g_test_suite_add_suite (GTestSuite *suite,
                                         GTestSuite *nestedsuite);
 extern
int g_test_run_suite (GTestSuite *suite);

 extern
void g_test_case_free (GTestCase *test_case);

 extern
void g_test_suite_free (GTestSuite *suite);

 extern
void g_test_trap_assertions (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         guint64 assertion_flags,
                                         const char *pattern);
 extern
void g_assertion_message (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *message) ;
__attribute__ ((__noreturn__))
 extern
void g_assertion_message_expr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr);
 extern
void g_assertion_message_cmpstr (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const char *arg1,
                                         const char *cmp,
                                         const char *arg2) ;

 extern
void g_assertion_message_cmpstrv (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const char * const *arg1,
                                         const char * const *arg2,
                                         gsize first_wrong_idx) ;
 extern
void g_assertion_message_cmpint (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         guint64 arg1,
                                         const char *cmp,
                                         guint64 arg2,
                                         char numtype) ;
 extern
void g_assertion_message_cmpnum (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         long double arg1,
                                         const char *cmp,
                                         long double arg2,
                                         char numtype) ;
 extern
void g_assertion_message_error (const char *domain,
                                         const char *file,
                                         int line,
                                         const char *func,
                                         const char *expr,
                                         const GError *error,
                                         GQuark error_domain,
                                         int error_code) ;
 extern
void g_test_add_vtable (const char *testpath,
                                         gsize data_size,
                                         gconstpointer test_data,
                                         GTestFixtureFunc data_setup,
                                         GTestFixtureFunc data_test,
                                         GTestFixtureFunc data_teardown);
typedef struct {
  gboolean test_initialized;
  gboolean test_quick;
  gboolean test_perf;
  gboolean test_verbose;
  gboolean test_quiet;
  gboolean test_undefined;
} GTestConfig;
 extern const GTestConfig * const g_test_config_vars;


typedef enum {
  G_TEST_RUN_SUCCESS,
  G_TEST_RUN_SKIPPED,
  G_TEST_RUN_FAILURE,
  G_TEST_RUN_INCOMPLETE
} GTestResult;

typedef enum {
  G_TEST_LOG_NONE,
  G_TEST_LOG_ERROR,
  G_TEST_LOG_START_BINARY,
  G_TEST_LOG_LIST_CASE,
  G_TEST_LOG_SKIP_CASE,
  G_TEST_LOG_START_CASE,
  G_TEST_LOG_STOP_CASE,
  G_TEST_LOG_MIN_RESULT,
  G_TEST_LOG_MAX_RESULT,
  G_TEST_LOG_MESSAGE,
  G_TEST_LOG_START_SUITE,
  G_TEST_LOG_STOP_SUITE
} GTestLogType;

typedef struct {
  GTestLogType log_type;
  guint n_strings;
  gchar **strings;
  guint n_nums;
  long double *nums;
} GTestLogMsg;
typedef struct {

  GString *data;
  GSList *msgs;
} GTestLogBuffer;

 extern
const char* g_test_log_type_name (GTestLogType log_type);
 extern
GTestLogBuffer* g_test_log_buffer_new (void);
 extern
void g_test_log_buffer_free (GTestLogBuffer *tbuffer);
 extern
void g_test_log_buffer_push (GTestLogBuffer *tbuffer,
                                         guint n_bytes,
                                         const guint8 *bytes);
 extern
GTestLogMsg* g_test_log_buffer_pop (GTestLogBuffer *tbuffer);
 extern
void g_test_log_msg_free (GTestLogMsg *tmsg);
# 728 "/usr/include/glib-2.0/glib/gtestutils.h"
typedef gboolean (*GTestLogFatalFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);
 extern
void
g_test_log_set_fatal_handler (GTestLogFatalFunc log_func,
                                         gpointer user_data);

 extern
void g_test_expect_message (const gchar *log_domain,
                                                  GLogLevelFlags log_level,
                                                  const gchar *pattern);
 extern
void g_test_assert_expected_messages_internal (const char *domain,
                                                  const char *file,
                                                  int line,
                                                  const char *func);

typedef enum
{
  G_TEST_DIST,
  G_TEST_BUILT
} GTestFileType;

 extern
gchar * g_test_build_filename (GTestFileType file_type,
                                                  const gchar *first_path,
                                                  ...) __attribute__((__sentinel__));
 extern
const gchar *g_test_get_dir (GTestFileType file_type);
 extern
const gchar *g_test_get_filename (GTestFileType file_type,
                                                  const gchar *first_path,
                                                  ...) __attribute__((__sentinel__));
# 90 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gthreadpool.h" 1
# 38 "/usr/include/glib-2.0/glib/gthreadpool.h"
typedef struct _GThreadPool GThreadPool;




struct _GThreadPool
{
  GFunc func;
  gpointer user_data;
  gboolean exclusive;
};

 extern
GThreadPool * g_thread_pool_new (GFunc func,
                                                 gpointer user_data,
                                                 gint max_threads,
                                                 gboolean exclusive,
                                                 GError **error);
 extern
GThreadPool * g_thread_pool_new_full (GFunc func,
                                                 gpointer user_data,
                                                 GDestroyNotify item_free_func,
                                                 gint max_threads,
                                                 gboolean exclusive,
                                                 GError **error);
 extern
void g_thread_pool_free (GThreadPool *pool,
                                                 gboolean immediate,
                                                 gboolean wait_);
 extern
gboolean g_thread_pool_push (GThreadPool *pool,
                                                 gpointer data,
                                                 GError **error);
 extern
guint g_thread_pool_unprocessed (GThreadPool *pool);
 extern
void g_thread_pool_set_sort_function (GThreadPool *pool,
                                                 GCompareDataFunc func,
                                                 gpointer user_data);
 extern
gboolean g_thread_pool_move_to_front (GThreadPool *pool,
                                                 gpointer data);

 extern
gboolean g_thread_pool_set_max_threads (GThreadPool *pool,
                                                 gint max_threads,
                                                 GError **error);
 extern
gint g_thread_pool_get_max_threads (GThreadPool *pool);
 extern
guint g_thread_pool_get_num_threads (GThreadPool *pool);

 extern
void g_thread_pool_set_max_unused_threads (gint max_threads);
 extern
gint g_thread_pool_get_max_unused_threads (void);
 extern
guint g_thread_pool_get_num_unused_threads (void);
 extern
void g_thread_pool_stop_unused_threads (void);
 extern
void g_thread_pool_set_max_idle_time (guint interval);
 extern
guint g_thread_pool_get_max_idle_time (void);
# 92 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtimer.h" 1
# 42 "/usr/include/glib-2.0/glib/gtimer.h"
typedef struct _GTimer GTimer;



 extern
GTimer* g_timer_new (void);
 extern
void g_timer_destroy (GTimer *timer);
 extern
void g_timer_start (GTimer *timer);
 extern
void g_timer_stop (GTimer *timer);
 extern
void g_timer_reset (GTimer *timer);
 extern
void g_timer_continue (GTimer *timer);
 extern
gdouble g_timer_elapsed (GTimer *timer,
      gulong *microseconds);
 extern
gboolean g_timer_is_active (GTimer *timer);

 extern
void g_usleep (gulong microseconds);

#pragma clang diagnostic push
# 67 "/usr/include/glib-2.0/glib/gtimer.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_time_val_add (GTimeVal *time_,
                                  glong microseconds);
__attribute__((__deprecated__("Use '" "g_date_time_new_from_iso8601" "' instead"))) extern
gboolean g_time_val_from_iso8601 (const gchar *iso_date,
      GTimeVal *time_);
__attribute__((__deprecated__("Use '" "g_date_time_format" "' instead"))) extern
gchar* g_time_val_to_iso8601 (GTimeVal *time_) __attribute__ ((__malloc__));
#pragma clang diagnostic pop
# 93 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gtrashstack.h" 1
# 38 "/usr/include/glib-2.0/glib/gtrashstack.h"
#pragma clang diagnostic push
# 38 "/usr/include/glib-2.0/glib/gtrashstack.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

typedef struct _GTrashStack GTrashStack __attribute__((__deprecated__));
struct _GTrashStack
{
  GTrashStack *next;
} __attribute__((__deprecated__));

__attribute__((__deprecated__)) extern
void g_trash_stack_push (GTrashStack **stack_p,
                                gpointer data_p);
__attribute__((__deprecated__)) extern
gpointer g_trash_stack_pop (GTrashStack **stack_p);
__attribute__((__deprecated__)) extern
gpointer g_trash_stack_peek (GTrashStack **stack_p);
__attribute__((__deprecated__)) extern
guint g_trash_stack_height (GTrashStack **stack_p);

#pragma clang diagnostic pop
# 95 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtree.h" 1
# 40 "/usr/include/glib-2.0/glib/gtree.h"
typedef struct _GTree GTree;
# 49 "/usr/include/glib-2.0/glib/gtree.h"
typedef struct _GTreeNode GTreeNode;

typedef gboolean (*GTraverseFunc) (gpointer key,
                                   gpointer value,
                                   gpointer data);
# 68 "/usr/include/glib-2.0/glib/gtree.h"
typedef gboolean (*GTraverseNodeFunc) (GTreeNode *node,
                                       gpointer data);



 extern
GTree* g_tree_new (GCompareFunc key_compare_func);
 extern
GTree* g_tree_new_with_data (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data);
 extern
GTree* g_tree_new_full (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data,
                                 GDestroyNotify key_destroy_func,
                                 GDestroyNotify value_destroy_func);
 extern
GTreeNode *g_tree_node_first (GTree *tree);
 extern
GTreeNode *g_tree_node_last (GTree *tree);
 extern
GTreeNode *g_tree_node_previous (GTreeNode *node);
 extern
GTreeNode *g_tree_node_next (GTreeNode *node);
 extern
GTree* g_tree_ref (GTree *tree);
 extern
void g_tree_unref (GTree *tree);
 extern
void g_tree_destroy (GTree *tree);
 extern
GTreeNode *g_tree_insert_node (GTree *tree,
                               gpointer key,
                               gpointer value);
 extern
void g_tree_insert (GTree *tree,
                                 gpointer key,
                                 gpointer value);
 extern
GTreeNode *g_tree_replace_node (GTree *tree,
                                gpointer key,
                                gpointer value);
 extern
void g_tree_replace (GTree *tree,
                                 gpointer key,
                                 gpointer value);
 extern
gboolean g_tree_remove (GTree *tree,
                                 gconstpointer key);

 extern
void g_tree_remove_all (GTree *tree);

 extern
gboolean g_tree_steal (GTree *tree,
                                 gconstpointer key);
 extern
gpointer g_tree_node_key (GTreeNode *node);
 extern
gpointer g_tree_node_value (GTreeNode *node);
 extern
GTreeNode *g_tree_lookup_node (GTree *tree,
                               gconstpointer key);
 extern
gpointer g_tree_lookup (GTree *tree,
                                 gconstpointer key);
 extern
gboolean g_tree_lookup_extended (GTree *tree,
                                 gconstpointer lookup_key,
                                 gpointer *orig_key,
                                 gpointer *value);
 extern
void g_tree_foreach (GTree *tree,
                                 GTraverseFunc func,
                                 gpointer user_data);
 extern
void g_tree_foreach_node (GTree *tree,
                          GTraverseNodeFunc func,
                          gpointer user_data);

__attribute__((__deprecated__)) extern
void g_tree_traverse (GTree *tree,
                                 GTraverseFunc traverse_func,
                                 GTraverseType traverse_type,
                                 gpointer user_data);

 extern
GTreeNode *g_tree_search_node (GTree *tree,
                               GCompareFunc search_func,
                               gconstpointer user_data);
 extern
gpointer g_tree_search (GTree *tree,
                                 GCompareFunc search_func,
                                 gconstpointer user_data);
 extern
GTreeNode *g_tree_lower_bound (GTree *tree,
                               gconstpointer key);
 extern
GTreeNode *g_tree_upper_bound (GTree *tree,
                               gconstpointer key);
 extern
gint g_tree_height (GTree *tree);
 extern
gint g_tree_nnodes (GTree *tree);
# 96 "/usr/include/glib-2.0/glib.h" 2


# 1 "/usr/include/glib-2.0/glib/guri.h" 1
# 31 "/usr/include/glib-2.0/glib/guri.h"
#pragma clang diagnostic push
# 31 "/usr/include/glib-2.0/glib/guri.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

typedef struct _GUri GUri;

 extern
GUri * g_uri_ref (GUri *uri);
 extern
void g_uri_unref (GUri *uri);
# 82 "/usr/include/glib-2.0/glib/guri.h"
typedef enum {
  G_URI_FLAGS_NONE = 0,
  G_URI_FLAGS_PARSE_RELAXED = 1 << 0,
  G_URI_FLAGS_HAS_PASSWORD = 1 << 1,
  G_URI_FLAGS_HAS_AUTH_PARAMS = 1 << 2,
  G_URI_FLAGS_ENCODED = 1 << 3,
  G_URI_FLAGS_NON_DNS = 1 << 4,
  G_URI_FLAGS_ENCODED_QUERY = 1 << 5,
  G_URI_FLAGS_ENCODED_PATH = 1 << 6,
  G_URI_FLAGS_ENCODED_FRAGMENT = 1 << 7,
  G_URI_FLAGS_SCHEME_NORMALIZE = 1 << 8,
} GUriFlags;

 extern
gboolean g_uri_split (const gchar *uri_ref,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **userinfo,
                                     gchar **host,
                                     gint *port,
                                     gchar **path,
                                     gchar **query,
                                     gchar **fragment,
                                     GError **error);
 extern
gboolean g_uri_split_with_user (const gchar *uri_ref,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **user,
                                     gchar **password,
                                     gchar **auth_params,
                                     gchar **host,
                                     gint *port,
                                     gchar **path,
                                     gchar **query,
                                     gchar **fragment,
                                     GError **error);
 extern
gboolean g_uri_split_network (const gchar *uri_string,
                                     GUriFlags flags,
                                     gchar **scheme,
                                     gchar **host,
                                     gint *port,
                                     GError **error);

 extern
gboolean g_uri_is_valid (const gchar *uri_string,
                                     GUriFlags flags,
                                     GError **error);

 extern
gchar * g_uri_join (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *userinfo,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
 extern
gchar * g_uri_join_with_user (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *user,
                                     const gchar *password,
                                     const gchar *auth_params,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);

 extern
GUri * g_uri_parse (const gchar *uri_string,
                                     GUriFlags flags,
                                     GError **error);
 extern
GUri * g_uri_parse_relative (GUri *base_uri,
                                     const gchar *uri_ref,
                                     GUriFlags flags,
                                     GError **error);

 extern
gchar * g_uri_resolve_relative (const gchar *base_uri_string,
                                     const gchar *uri_ref,
                                     GUriFlags flags,
                                     GError **error);

 extern
GUri * g_uri_build (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *userinfo,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
 extern
GUri * g_uri_build_with_user (GUriFlags flags,
                                     const gchar *scheme,
                                     const gchar *user,
                                     const gchar *password,
                                     const gchar *auth_params,
                                     const gchar *host,
                                     gint port,
                                     const gchar *path,
                                     const gchar *query,
                                     const gchar *fragment);
# 207 "/usr/include/glib-2.0/glib/guri.h"
typedef enum {
  G_URI_HIDE_NONE = 0,
  G_URI_HIDE_USERINFO = 1 << 0,
  G_URI_HIDE_PASSWORD = 1 << 1,
  G_URI_HIDE_AUTH_PARAMS = 1 << 2,
  G_URI_HIDE_QUERY = 1 << 3,
  G_URI_HIDE_FRAGMENT = 1 << 4,
} GUriHideFlags;

 extern
char * g_uri_to_string (GUri *uri);
 extern
char * g_uri_to_string_partial (GUri *uri,
                                      GUriHideFlags flags);

 extern
const gchar *g_uri_get_scheme (GUri *uri);
 extern
const gchar *g_uri_get_userinfo (GUri *uri);
 extern
const gchar *g_uri_get_user (GUri *uri);
 extern
const gchar *g_uri_get_password (GUri *uri);
 extern
const gchar *g_uri_get_auth_params (GUri *uri);
 extern
const gchar *g_uri_get_host (GUri *uri);
 extern
gint g_uri_get_port (GUri *uri);
 extern
const gchar *g_uri_get_path (GUri *uri);
 extern
const gchar *g_uri_get_query (GUri *uri);
 extern
const gchar *g_uri_get_fragment (GUri *uri);
 extern
GUriFlags g_uri_get_flags (GUri *uri);
# 259 "/usr/include/glib-2.0/glib/guri.h"
typedef enum {
  G_URI_PARAMS_NONE = 0,
  G_URI_PARAMS_CASE_INSENSITIVE = 1 << 0,
  G_URI_PARAMS_WWW_FORM = 1 << 1,
  G_URI_PARAMS_PARSE_RELAXED = 1 << 2,
} GUriParamsFlags;

 extern
GHashTable *g_uri_parse_params (const gchar *params,
                                      gssize length,
                                      const gchar *separators,
                                      GUriParamsFlags flags,
                                      GError **error);

typedef struct _GUriParamsIter GUriParamsIter;

struct _GUriParamsIter
{

  gint dummy0;
  gpointer dummy1;
  gpointer dummy2;
  guint8 dummy3[256];
};

 extern
void g_uri_params_iter_init (GUriParamsIter *iter,
                                      const gchar *params,
                                      gssize length,
                                      const gchar *separators,
                                      GUriParamsFlags flags);

 extern
gboolean g_uri_params_iter_next (GUriParamsIter *iter,
                                      gchar **attribute,
                                      gchar **value,
                                      GError **error);
# 307 "/usr/include/glib-2.0/glib/guri.h"
 extern
GQuark g_uri_error_quark (void);
# 328 "/usr/include/glib-2.0/glib/guri.h"
typedef enum {
  G_URI_ERROR_FAILED,
  G_URI_ERROR_BAD_SCHEME,
  G_URI_ERROR_BAD_USER,
  G_URI_ERROR_BAD_PASSWORD,
  G_URI_ERROR_BAD_AUTH_PARAMS,
  G_URI_ERROR_BAD_HOST,
  G_URI_ERROR_BAD_PORT,
  G_URI_ERROR_BAD_PATH,
  G_URI_ERROR_BAD_QUERY,
  G_URI_ERROR_BAD_FRAGMENT,
} GUriError;
# 389 "/usr/include/glib-2.0/glib/guri.h"
 extern
char * g_uri_unescape_string (const char *escaped_string,
                                    const char *illegal_characters);
 extern
char * g_uri_unescape_segment (const char *escaped_string,
                                    const char *escaped_string_end,
                                    const char *illegal_characters);

 extern
char * g_uri_parse_scheme (const char *uri);
 extern
const char *g_uri_peek_scheme (const char *uri);

 extern
char * g_uri_escape_string (const char *unescaped,
                                    const char *reserved_chars_allowed,
                                    gboolean allow_utf8);

 extern
GBytes * g_uri_unescape_bytes (const char *escaped_string,
                                    gssize length,
                                    const char *illegal_characters,
                                    GError **error);

 extern
char * g_uri_escape_bytes (const guint8 *unescaped,
                                    gsize length,
                                    const char *reserved_chars_allowed);

#pragma clang diagnostic pop
# 99 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/guuid.h" 1
# 34 "/usr/include/glib-2.0/glib/guuid.h"
 extern
gboolean g_uuid_string_is_valid (const gchar *str);

 extern
gchar * g_uuid_string_random (void);
# 101 "/usr/include/glib-2.0/glib.h" 2


# 1 "/usr/include/glib-2.0/glib/gversion.h" 1
# 38 "/usr/include/glib-2.0/glib/gversion.h"
 extern const guint glib_major_version;
 extern const guint glib_minor_version;
 extern const guint glib_micro_version;
 extern const guint glib_interface_age;
 extern const guint glib_binary_age;

 extern
const gchar * glib_check_version (guint required_major,
                                  guint required_minor,
                                  guint required_micro);
# 104 "/usr/include/glib-2.0/glib.h" 2






# 1 "/usr/include/glib-2.0/glib/deprecated/gallocator.h" 1
# 27 "/usr/include/glib-2.0/glib/deprecated/gallocator.h"
typedef struct _GAllocator GAllocator;
typedef struct _GMemChunk GMemChunk;
# 42 "/usr/include/glib-2.0/glib/deprecated/gallocator.h"
__attribute__((__deprecated__)) extern
GMemChunk * g_mem_chunk_new (const gchar *name,
                                         gint atom_size,
                                         gsize area_size,
                                         gint type);
__attribute__((__deprecated__)) extern
void g_mem_chunk_destroy (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
gpointer g_mem_chunk_alloc (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
gpointer g_mem_chunk_alloc0 (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_free (GMemChunk *mem_chunk,
                                         gpointer mem);
__attribute__((__deprecated__)) extern
void g_mem_chunk_clean (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_reset (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_print (GMemChunk *mem_chunk);
__attribute__((__deprecated__)) extern
void g_mem_chunk_info (void);
__attribute__((__deprecated__)) extern
void g_blow_chunks (void);


__attribute__((__deprecated__)) extern
GAllocator * g_allocator_new (const gchar *name,
                                         guint n_preallocs);
__attribute__((__deprecated__)) extern
void g_allocator_free (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_list_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_list_pop_allocator (void);
__attribute__((__deprecated__)) extern
void g_slist_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_slist_pop_allocator (void);
__attribute__((__deprecated__)) extern
void g_node_push_allocator (GAllocator *allocator);
__attribute__((__deprecated__)) extern
void g_node_pop_allocator (void);
# 111 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gcache.h" 1
# 38 "/usr/include/glib-2.0/glib/deprecated/gcache.h"
typedef struct _GCache GCache __attribute__((__deprecated__("Use '" "GHashTable" "' instead")));

typedef gpointer (*GCacheNewFunc) (gpointer key) __attribute__((__deprecated__));
typedef gpointer (*GCacheDupFunc) (gpointer value) __attribute__((__deprecated__));
typedef void (*GCacheDestroyFunc) (gpointer value) __attribute__((__deprecated__));

#pragma clang diagnostic push
# 44 "/usr/include/glib-2.0/glib/deprecated/gcache.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"



__attribute__((__deprecated__)) extern
GCache* g_cache_new (GCacheNewFunc value_new_func,
                                GCacheDestroyFunc value_destroy_func,
                                GCacheDupFunc key_dup_func,
                                GCacheDestroyFunc key_destroy_func,
                                GHashFunc hash_key_func,
                                GHashFunc hash_value_func,
                                GEqualFunc key_equal_func);
__attribute__((__deprecated__)) extern
void g_cache_destroy (GCache *cache);
__attribute__((__deprecated__)) extern
gpointer g_cache_insert (GCache *cache,
                                gpointer key);
__attribute__((__deprecated__)) extern
void g_cache_remove (GCache *cache,
                                gconstpointer value);
__attribute__((__deprecated__)) extern
void g_cache_key_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);
__attribute__((__deprecated__)) extern
void g_cache_value_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);

#pragma clang diagnostic pop
# 112 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gcompletion.h" 1
# 38 "/usr/include/glib-2.0/glib/deprecated/gcompletion.h"
typedef struct _GCompletion GCompletion;

typedef gchar* (*GCompletionFunc) (gpointer item);




typedef gint (*GCompletionStrncmpFunc) (const gchar *s1,
                                        const gchar *s2,
                                        gsize n);

struct _GCompletion
{
  GList* items;
  GCompletionFunc func;

  gchar* prefix;
  GList* cache;
  GCompletionStrncmpFunc strncmp_func;
};

__attribute__((__deprecated__)) extern
GCompletion* g_completion_new (GCompletionFunc func);
__attribute__((__deprecated__)) extern
void g_completion_add_items (GCompletion* cmp,
                                         GList* items);
__attribute__((__deprecated__)) extern
void g_completion_remove_items (GCompletion* cmp,
                                         GList* items);
__attribute__((__deprecated__)) extern
void g_completion_clear_items (GCompletion* cmp);
__attribute__((__deprecated__)) extern
GList* g_completion_complete (GCompletion* cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
__attribute__((__deprecated__)) extern
GList* g_completion_complete_utf8 (GCompletion *cmp,
                                         const gchar* prefix,
                                         gchar** new_prefix);
__attribute__((__deprecated__)) extern
void g_completion_set_compare (GCompletion *cmp,
                                         GCompletionStrncmpFunc strncmp_func);
__attribute__((__deprecated__)) extern
void g_completion_free (GCompletion* cmp);
# 113 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gmain.h" 1
# 114 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/grel.h" 1
# 38 "/usr/include/glib-2.0/glib/deprecated/grel.h"
typedef struct _GRelation GRelation;
typedef struct _GTuples GTuples;

struct _GTuples
{
  guint len;
};

__attribute__((__deprecated__)) extern
GRelation* g_relation_new (gint fields);
__attribute__((__deprecated__)) extern
void g_relation_destroy (GRelation *relation);
__attribute__((__deprecated__)) extern
void g_relation_index (GRelation *relation,
                               gint field,
                               GHashFunc hash_func,
                               GEqualFunc key_equal_func);
__attribute__((__deprecated__)) extern
void g_relation_insert (GRelation *relation,
                               ...);
__attribute__((__deprecated__)) extern
gint g_relation_delete (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
GTuples* g_relation_select (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
gint g_relation_count (GRelation *relation,
                               gconstpointer key,
                               gint field);
__attribute__((__deprecated__)) extern
gboolean g_relation_exists (GRelation *relation,
                               ...);
__attribute__((__deprecated__)) extern
void g_relation_print (GRelation *relation);
__attribute__((__deprecated__)) extern
void g_tuples_destroy (GTuples *tuples);
__attribute__((__deprecated__)) extern
gpointer g_tuples_index (GTuples *tuples,
                               gint index_,
                               gint field);
# 115 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/deprecated/gthread.h" 1
# 38 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
#pragma clang diagnostic push
# 38 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

typedef enum
{
  G_THREAD_PRIORITY_LOW,
  G_THREAD_PRIORITY_NORMAL,
  G_THREAD_PRIORITY_HIGH,
  G_THREAD_PRIORITY_URGENT
} GThreadPriority __attribute__((__deprecated__));

struct _GThread
{

  GThreadFunc func;
  gpointer data;
  gboolean joinable;
  GThreadPriority priority;
};

typedef struct _GThreadFunctions GThreadFunctions __attribute__((__deprecated__));
struct _GThreadFunctions
{
  GMutex* (*mutex_new) (void);
  void (*mutex_lock) (GMutex *mutex);
  gboolean (*mutex_trylock) (GMutex *mutex);
  void (*mutex_unlock) (GMutex *mutex);
  void (*mutex_free) (GMutex *mutex);
  GCond* (*cond_new) (void);
  void (*cond_signal) (GCond *cond);
  void (*cond_broadcast) (GCond *cond);
  void (*cond_wait) (GCond *cond,
                                   GMutex *mutex);
  gboolean (*cond_timed_wait) (GCond *cond,
                                   GMutex *mutex,
                                   GTimeVal *end_time);
  void (*cond_free) (GCond *cond);
  GPrivate* (*private_new) (GDestroyNotify destructor);
  gpointer (*private_get) (GPrivate *private_key);
  void (*private_set) (GPrivate *private_key,
                                   gpointer data);
  void (*thread_create) (GThreadFunc func,
                                   gpointer data,
                                   gulong stack_size,
                                   gboolean joinable,
                                   gboolean bound,
                                   GThreadPriority priority,
                                   gpointer thread,
                                   GError **error);
  void (*thread_yield) (void);
  void (*thread_join) (gpointer thread);
  void (*thread_exit) (void);
  void (*thread_set_priority)(gpointer thread,
                                   GThreadPriority priority);
  void (*thread_self) (gpointer thread);
  gboolean (*thread_equal) (gpointer thread1,
                                   gpointer thread2);
} __attribute__((__deprecated__));

 extern GThreadFunctions g_thread_functions_for_glib_use;
 extern gboolean g_thread_use_default_impl;

 extern guint64 (*g_thread_gettime) (void);

__attribute__((__deprecated__("Use '" "g_thread_new" "' instead"))) extern
GThread *g_thread_create (GThreadFunc func,
                                gpointer data,
                                gboolean joinable,
                                GError **error);

__attribute__((__deprecated__("Use '" "g_thread_new" "' instead"))) extern
GThread *g_thread_create_full (GThreadFunc func,
                                gpointer data,
                                gulong stack_size,
                                gboolean joinable,
                                gboolean bound,
                                GThreadPriority priority,
                                GError **error);

__attribute__((__deprecated__)) extern
void g_thread_set_priority (GThread *thread,
                                GThreadPriority priority);

__attribute__((__deprecated__)) extern
void g_thread_foreach (GFunc thread_func,
                                gpointer user_data);



# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 108 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3 4
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 80 "/usr/include/bits/sched.h" 3 4
# 1 "/usr/include/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 81 "/usr/include/bits/sched.h" 2 3 4
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 117 "/usr/include/bits/cpu-set.h" 3 4
extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     __attribute__ ((__nothrow__ ));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ )) ;
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ ));
# 45 "/usr/include/sched.h" 2 3 4
# 54 "/usr/include/sched.h" 3 4
extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ ));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ ));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ ));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ ));


extern int sched_yield (void) __attribute__ ((__nothrow__ ));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ ));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ ));



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ ));
# 23 "/usr/include/pthread.h" 2 3 4




# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 26 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 26 "/usr/include/bits/types/struct___jmp_buf_tag.h" 3 4
struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4





enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL





};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 104 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 124 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 159 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 202 "/usr/include/pthread.h" 3 4
extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ ));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ )) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 441 "/usr/include/pthread.h" 3 4
extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ ));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 557 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 697 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
                            ;
# 709 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
                         ;
# 750 "/usr/include/pthread.h" 3 4
extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
                             __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;
# 773 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp (struct __jmp_buf_tag __env[1],
   int __savemask) __attribute__ ((__nothrow__));






extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
# 946 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ ));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ ));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  __attribute__ ((__nothrow__ )) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ ));




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ )) pthread_equal (pthread_t __thread1, pthread_t __thread2)
{
  return __thread1 == __thread2;
}
# 127 "/usr/include/glib-2.0/glib/deprecated/gthread.h" 2








typedef struct
{
  GMutex *mutex;



  pthread_mutex_t unused;


} GStaticMutex __attribute__((__deprecated__("Use '" "GMutex" "' instead")));
# 153 "/usr/include/glib-2.0/glib/deprecated/gthread.h"
__attribute__((__deprecated__("Use '" "g_mutex_init" "' instead"))) extern
void g_static_mutex_init (GStaticMutex *mutex);
__attribute__((__deprecated__("Use '" "g_mutex_clear" "' instead"))) extern
void g_static_mutex_free (GStaticMutex *mutex);
__attribute__((__deprecated__("Use '" "GMutex" "' instead"))) extern
GMutex *g_static_mutex_get_mutex_impl (GStaticMutex *mutex);

typedef struct _GStaticRecMutex GStaticRecMutex __attribute__((__deprecated__("Use '" "GRecMutex" "' instead")));
struct _GStaticRecMutex
{

  GStaticMutex mutex;
  guint depth;



  union {



    pthread_t owner;

    gdouble dummy;
  } unused;

} __attribute__((__deprecated__("Use '" "GRecMutex" "' instead")));


__attribute__((__deprecated__("Use '" "g_rec_mutex_init" "' instead"))) extern
void g_static_rec_mutex_init (GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '" "g_rec_mutex_lock" "' instead"))) extern
void g_static_rec_mutex_lock (GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '" "g_rec_mutex_try_lock" "' instead"))) extern
gboolean g_static_rec_mutex_trylock (GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '" "g_rec_mutex_unlock" "' instead"))) extern
void g_static_rec_mutex_unlock (GStaticRecMutex *mutex);

__attribute__((__deprecated__)) extern
void g_static_rec_mutex_lock_full (GStaticRecMutex *mutex,
                                         guint depth);

__attribute__((__deprecated__)) extern
guint g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);

__attribute__((__deprecated__("Use '" "g_rec_mutex_free" "' instead"))) extern
void g_static_rec_mutex_free (GStaticRecMutex *mutex);

typedef struct _GStaticRWLock GStaticRWLock __attribute__((__deprecated__("Use '" "GRWLock" "' instead")));
struct _GStaticRWLock
{

  GStaticMutex mutex;
  GCond *read_cond;
  GCond *write_cond;
  guint read_counter;
  gboolean have_writer;
  guint want_to_read;
  guint want_to_write;
} __attribute__((__deprecated__("Use '" "GRWLock" "' instead")));



__attribute__((__deprecated__("Use '" "g_rw_lock_init" "' instead"))) extern
void g_static_rw_lock_init (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_reader_lock" "' instead"))) extern
void g_static_rw_lock_reader_lock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_reader_trylock" "' instead"))) extern
gboolean g_static_rw_lock_reader_trylock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_reader_unlock" "' instead"))) extern
void g_static_rw_lock_reader_unlock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_writer_lock" "' instead"))) extern
void g_static_rw_lock_writer_lock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_writer_trylock" "' instead"))) extern
gboolean g_static_rw_lock_writer_trylock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_writer_unlock" "' instead"))) extern
void g_static_rw_lock_writer_unlock (GStaticRWLock *lock);

__attribute__((__deprecated__("Use '" "g_rw_lock_free" "' instead"))) extern
void g_static_rw_lock_free (GStaticRWLock *lock);

__attribute__((__deprecated__)) extern
GPrivate * g_private_new (GDestroyNotify notify);

typedef struct _GStaticPrivate GStaticPrivate __attribute__((__deprecated__("Use '" "GPrivate" "' instead")));
struct _GStaticPrivate
{

  guint index;
} __attribute__((__deprecated__("Use '" "GPrivate" "' instead")));


__attribute__((__deprecated__)) extern
void g_static_private_init (GStaticPrivate *private_key);

__attribute__((__deprecated__("Use '" "g_private_get" "' instead"))) extern
gpointer g_static_private_get (GStaticPrivate *private_key);

__attribute__((__deprecated__("Use '" "g_private_set" "' instead"))) extern
void g_static_private_set (GStaticPrivate *private_key,
                                          gpointer data,
                                          GDestroyNotify notify);

__attribute__((__deprecated__)) extern
void g_static_private_free (GStaticPrivate *private_key);

__attribute__((__deprecated__)) extern
gboolean g_once_init_enter_impl (volatile gsize *location);

__attribute__((__deprecated__)) extern
void g_thread_init (gpointer vtable);
__attribute__((__deprecated__)) extern
void g_thread_init_with_errorcheck_mutexes (gpointer vtable);

__attribute__((__deprecated__)) extern
gboolean g_thread_get_initialized (void);

 extern gboolean g_threads_got_initialized;



__attribute__((__deprecated__)) extern
GMutex * g_mutex_new (void);
__attribute__((__deprecated__)) extern
void g_mutex_free (GMutex *mutex);
__attribute__((__deprecated__)) extern
GCond * g_cond_new (void);
__attribute__((__deprecated__)) extern
void g_cond_free (GCond *cond);
__attribute__((__deprecated__)) extern
gboolean g_cond_timed_wait (GCond *cond,
                                         GMutex *mutex,
                                         GTimeVal *abs_time);

#pragma clang diagnostic pop
# 116 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/glib-autocleanups.h" 1
# 28 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
static inline void
g_autoptr_cleanup_generic_gfree (void *p)
{
  void **pp = (void**)p;
  g_free (*pp);
}

static inline void
g_autoptr_cleanup_gstring_free (GString *string)
{
  if (string)
    (__builtin_constant_p ((!(0))) ? (((!(0))) ? (g_string_free) ((string), ((!(0)))) : g_string_free_and_steal (string)) : (g_string_free) ((string), ((!(0)))));
}



#pragma clang diagnostic push
# 44 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"




typedef GAsyncQueue *GAsyncQueue_autoptr; typedef GList *GAsyncQueue_listautoptr; typedef GSList *GAsyncQueue_slistautoptr; typedef GQueue *GAsyncQueue_queueautoptr;
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncQueue (GAsyncQueue *_ptr) { if (_ptr) (g_async_queue_unref) ((GAsyncQueue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncQueue (GAsyncQueue **_ptr) { glib_autoptr_clear_GAsyncQueue (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GAsyncQueue (void *_ptr) { (g_async_queue_unref) ((GAsyncQueue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncQueue (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GAsyncQueue); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncQueue (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GAsyncQueue); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncQueue (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GAsyncQueue); }
# 49 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GBookmarkFile *GBookmarkFile_autoptr; typedef GList *GBookmarkFile_listautoptr; typedef GSList *GBookmarkFile_slistautoptr; typedef GQueue *GBookmarkFile_queueautoptr;
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBookmarkFile (GBookmarkFile *_ptr) { if (_ptr) (g_bookmark_file_free) ((GBookmarkFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBookmarkFile (GBookmarkFile **_ptr) { glib_autoptr_clear_GBookmarkFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GBookmarkFile (void *_ptr) { (g_bookmark_file_free) ((GBookmarkFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBookmarkFile (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GBookmarkFile); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBookmarkFile (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GBookmarkFile); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBookmarkFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GBookmarkFile); }
# 50 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GBytes *GBytes_autoptr; typedef GList *GBytes_listautoptr; typedef GSList *GBytes_slistautoptr; typedef GQueue *GBytes_queueautoptr;
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBytes (GBytes *_ptr) { if (_ptr) (g_bytes_unref) ((GBytes *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBytes (GBytes **_ptr) { glib_autoptr_clear_GBytes (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GBytes (void *_ptr) { (g_bytes_unref) ((GBytes *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBytes (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GBytes); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBytes (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GBytes); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBytes (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GBytes); }
# 51 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GChecksum *GChecksum_autoptr; typedef GList *GChecksum_listautoptr; typedef GSList *GChecksum_slistautoptr; typedef GQueue *GChecksum_queueautoptr;
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GChecksum (GChecksum *_ptr) { if (_ptr) (g_checksum_free) ((GChecksum *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GChecksum (GChecksum **_ptr) { glib_autoptr_clear_GChecksum (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GChecksum (void *_ptr) { (g_checksum_free) ((GChecksum *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GChecksum (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GChecksum); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GChecksum (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GChecksum); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GChecksum (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GChecksum); }
# 52 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GDateTime *GDateTime_autoptr; typedef GList *GDateTime_listautoptr; typedef GSList *GDateTime_slistautoptr; typedef GQueue *GDateTime_queueautoptr;
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDateTime (GDateTime *_ptr) { if (_ptr) (g_date_time_unref) ((GDateTime *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDateTime (GDateTime **_ptr) { glib_autoptr_clear_GDateTime (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDateTime (void *_ptr) { (g_date_time_unref) ((GDateTime *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDateTime (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDateTime); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDateTime (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDateTime); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDateTime (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDateTime); }
# 53 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GDate *GDate_autoptr; typedef GList *GDate_listautoptr; typedef GSList *GDate_slistautoptr; typedef GQueue *GDate_queueautoptr;
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDate (GDate *_ptr) { if (_ptr) (g_date_free) ((GDate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDate (GDate **_ptr) { glib_autoptr_clear_GDate (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDate (void *_ptr) { (g_date_free) ((GDate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDate (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDate); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDate (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDate); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDate (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDate); }
# 54 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GDir *GDir_autoptr; typedef GList *GDir_listautoptr; typedef GSList *GDir_slistautoptr; typedef GQueue *GDir_queueautoptr;
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDir (GDir *_ptr) { if (_ptr) (g_dir_close) ((GDir *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDir (GDir **_ptr) { glib_autoptr_clear_GDir (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDir (void *_ptr) { (g_dir_close) ((GDir *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDir (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDir); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDir (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDir); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDir (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDir); }
# 55 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GError *GError_autoptr; typedef GList *GError_listautoptr; typedef GSList *GError_slistautoptr; typedef GQueue *GError_queueautoptr;
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GError (GError *_ptr) { if (_ptr) (g_error_free) ((GError *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GError (GError **_ptr) { glib_autoptr_clear_GError (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GError (void *_ptr) { (g_error_free) ((GError *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GError (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GError); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GError (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GError); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GError (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GError); }
# 56 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GHashTable *GHashTable_autoptr; typedef GList *GHashTable_listautoptr; typedef GSList *GHashTable_slistautoptr; typedef GQueue *GHashTable_queueautoptr;
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GHashTable (GHashTable *_ptr) { if (_ptr) (g_hash_table_unref) ((GHashTable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GHashTable (GHashTable **_ptr) { glib_autoptr_clear_GHashTable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GHashTable (void *_ptr) { (g_hash_table_unref) ((GHashTable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GHashTable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GHashTable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GHashTable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GHashTable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GHashTable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GHashTable); }
# 57 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GHmac *GHmac_autoptr; typedef GList *GHmac_listautoptr; typedef GSList *GHmac_slistautoptr; typedef GQueue *GHmac_queueautoptr;
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GHmac (GHmac *_ptr) { if (_ptr) (g_hmac_unref) ((GHmac *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GHmac (GHmac **_ptr) { glib_autoptr_clear_GHmac (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GHmac (void *_ptr) { (g_hmac_unref) ((GHmac *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GHmac (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GHmac); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GHmac (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GHmac); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GHmac (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GHmac); }
# 58 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GIOChannel *GIOChannel_autoptr; typedef GList *GIOChannel_listautoptr; typedef GSList *GIOChannel_slistautoptr; typedef GQueue *GIOChannel_queueautoptr;
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOChannel (GIOChannel *_ptr) { if (_ptr) (g_io_channel_unref) ((GIOChannel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOChannel (GIOChannel **_ptr) { glib_autoptr_clear_GIOChannel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GIOChannel (void *_ptr) { (g_io_channel_unref) ((GIOChannel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOChannel (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GIOChannel); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOChannel (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GIOChannel); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOChannel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GIOChannel); }
# 59 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GKeyFile *GKeyFile_autoptr; typedef GList *GKeyFile_listautoptr; typedef GSList *GKeyFile_slistautoptr; typedef GQueue *GKeyFile_queueautoptr;
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GKeyFile (GKeyFile *_ptr) { if (_ptr) (g_key_file_unref) ((GKeyFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GKeyFile (GKeyFile **_ptr) { glib_autoptr_clear_GKeyFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GKeyFile (void *_ptr) { (g_key_file_unref) ((GKeyFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GKeyFile (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GKeyFile); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GKeyFile (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GKeyFile); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GKeyFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GKeyFile); }
# 60 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GList *GList_autoptr; typedef GList *GList_listautoptr; typedef GSList *GList_slistautoptr; typedef GQueue *GList_queueautoptr;
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GList (GList *_ptr) { if (_ptr) (g_list_free) ((GList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GList (GList **_ptr) { glib_autoptr_clear_GList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GList (void *_ptr) { (g_list_free) ((GList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GList (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GList); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GList (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GList); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GList); }
# 61 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GArray *GArray_autoptr; typedef GList *GArray_listautoptr; typedef GSList *GArray_slistautoptr; typedef GQueue *GArray_queueautoptr;
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GArray (GArray *_ptr) { if (_ptr) (g_array_unref) ((GArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GArray (GArray **_ptr) { glib_autoptr_clear_GArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GArray (void *_ptr) { (g_array_unref) ((GArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GArray (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GArray); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GArray (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GArray); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GArray); }
# 62 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GPtrArray *GPtrArray_autoptr; typedef GList *GPtrArray_listautoptr; typedef GSList *GPtrArray_slistautoptr; typedef GQueue *GPtrArray_queueautoptr;
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPtrArray (GPtrArray *_ptr) { if (_ptr) (g_ptr_array_unref) ((GPtrArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPtrArray (GPtrArray **_ptr) { glib_autoptr_clear_GPtrArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GPtrArray (void *_ptr) { (g_ptr_array_unref) ((GPtrArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPtrArray (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GPtrArray); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPtrArray (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GPtrArray); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPtrArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GPtrArray); }
# 63 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GByteArray *GByteArray_autoptr; typedef GList *GByteArray_listautoptr; typedef GSList *GByteArray_slistautoptr; typedef GQueue *GByteArray_queueautoptr;
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GByteArray (GByteArray *_ptr) { if (_ptr) (g_byte_array_unref) ((GByteArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GByteArray (GByteArray **_ptr) { glib_autoptr_clear_GByteArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GByteArray (void *_ptr) { (g_byte_array_unref) ((GByteArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GByteArray (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GByteArray); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GByteArray (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GByteArray); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GByteArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GByteArray); }
# 64 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GMainContext *GMainContext_autoptr; typedef GList *GMainContext_listautoptr; typedef GSList *GMainContext_slistautoptr; typedef GQueue *GMainContext_queueautoptr;
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainContext (GMainContext *_ptr) { if (_ptr) (g_main_context_unref) ((GMainContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainContext (GMainContext **_ptr) { glib_autoptr_clear_GMainContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMainContext (void *_ptr) { (g_main_context_unref) ((GMainContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMainContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMainContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMainContext); }
# 65 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GMainContextPusher *GMainContextPusher_autoptr; typedef GList *GMainContextPusher_listautoptr; typedef GSList *GMainContextPusher_slistautoptr; typedef GQueue *GMainContextPusher_queueautoptr;
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainContextPusher (GMainContextPusher *_ptr) { if (_ptr) (g_main_context_pusher_free) ((GMainContextPusher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainContextPusher (GMainContextPusher **_ptr) { glib_autoptr_clear_GMainContextPusher (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMainContextPusher (void *_ptr) { (g_main_context_pusher_free) ((GMainContextPusher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainContextPusher (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMainContextPusher); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainContextPusher (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMainContextPusher); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainContextPusher (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMainContextPusher); }
# 66 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GMainLoop *GMainLoop_autoptr; typedef GList *GMainLoop_listautoptr; typedef GSList *GMainLoop_slistautoptr; typedef GQueue *GMainLoop_queueautoptr;
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMainLoop (GMainLoop *_ptr) { if (_ptr) (g_main_loop_unref) ((GMainLoop *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMainLoop (GMainLoop **_ptr) { glib_autoptr_clear_GMainLoop (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMainLoop (void *_ptr) { (g_main_loop_unref) ((GMainLoop *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMainLoop (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMainLoop); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMainLoop (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMainLoop); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMainLoop (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMainLoop); }
# 67 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GSource *GSource_autoptr; typedef GList *GSource_listautoptr; typedef GSList *GSource_slistautoptr; typedef GQueue *GSource_queueautoptr;
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSource (GSource *_ptr) { if (_ptr) (g_source_unref) ((GSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSource (GSource **_ptr) { glib_autoptr_clear_GSource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSource (void *_ptr) { (g_source_unref) ((GSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSource (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSource); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSource (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSource); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSource); }
# 68 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GMappedFile *GMappedFile_autoptr; typedef GList *GMappedFile_listautoptr; typedef GSList *GMappedFile_slistautoptr; typedef GQueue *GMappedFile_queueautoptr;
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMappedFile (GMappedFile *_ptr) { if (_ptr) (g_mapped_file_unref) ((GMappedFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMappedFile (GMappedFile **_ptr) { glib_autoptr_clear_GMappedFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMappedFile (void *_ptr) { (g_mapped_file_unref) ((GMappedFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMappedFile (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMappedFile); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMappedFile (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMappedFile); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMappedFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMappedFile); }
# 69 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GMarkupParseContext *GMarkupParseContext_autoptr; typedef GList *GMarkupParseContext_listautoptr; typedef GSList *GMarkupParseContext_slistautoptr; typedef GQueue *GMarkupParseContext_queueautoptr;
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMarkupParseContext (GMarkupParseContext *_ptr) { if (_ptr) (g_markup_parse_context_unref) ((GMarkupParseContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMarkupParseContext (GMarkupParseContext **_ptr) { glib_autoptr_clear_GMarkupParseContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMarkupParseContext (void *_ptr) { (g_markup_parse_context_unref) ((GMarkupParseContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMarkupParseContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMarkupParseContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMarkupParseContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMarkupParseContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMarkupParseContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMarkupParseContext); }
# 70 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GNode *GNode_autoptr; typedef GList *GNode_listautoptr; typedef GSList *GNode_slistautoptr; typedef GQueue *GNode_queueautoptr;
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNode (GNode *_ptr) { if (_ptr) (g_node_destroy) ((GNode *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNode (GNode **_ptr) { glib_autoptr_clear_GNode (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GNode (void *_ptr) { (g_node_destroy) ((GNode *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNode (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GNode); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNode (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GNode); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNode (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GNode); }
# 71 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GOptionContext *GOptionContext_autoptr; typedef GList *GOptionContext_listautoptr; typedef GSList *GOptionContext_slistautoptr; typedef GQueue *GOptionContext_queueautoptr;
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOptionContext (GOptionContext *_ptr) { if (_ptr) (g_option_context_free) ((GOptionContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOptionContext (GOptionContext **_ptr) { glib_autoptr_clear_GOptionContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GOptionContext (void *_ptr) { (g_option_context_free) ((GOptionContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOptionContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GOptionContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOptionContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GOptionContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOptionContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GOptionContext); }
# 72 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GOptionGroup *GOptionGroup_autoptr; typedef GList *GOptionGroup_listautoptr; typedef GSList *GOptionGroup_slistautoptr; typedef GQueue *GOptionGroup_queueautoptr;
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOptionGroup (GOptionGroup *_ptr) { if (_ptr) (g_option_group_unref) ((GOptionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOptionGroup (GOptionGroup **_ptr) { glib_autoptr_clear_GOptionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GOptionGroup (void *_ptr) { (g_option_group_unref) ((GOptionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOptionGroup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GOptionGroup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOptionGroup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GOptionGroup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOptionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GOptionGroup); }
# 73 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GPatternSpec *GPatternSpec_autoptr; typedef GList *GPatternSpec_listautoptr; typedef GSList *GPatternSpec_slistautoptr; typedef GQueue *GPatternSpec_queueautoptr;
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPatternSpec (GPatternSpec *_ptr) { if (_ptr) (g_pattern_spec_free) ((GPatternSpec *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPatternSpec (GPatternSpec **_ptr) { glib_autoptr_clear_GPatternSpec (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GPatternSpec (void *_ptr) { (g_pattern_spec_free) ((GPatternSpec *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPatternSpec (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GPatternSpec); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPatternSpec (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GPatternSpec); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPatternSpec (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GPatternSpec); }
# 74 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GQueue *GQueue_autoptr; typedef GList *GQueue_listautoptr; typedef GSList *GQueue_slistautoptr; typedef GQueue *GQueue_queueautoptr;
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GQueue (GQueue *_ptr) { if (_ptr) (g_queue_free) ((GQueue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GQueue (GQueue **_ptr) { glib_autoptr_clear_GQueue (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GQueue (void *_ptr) { (g_queue_free) ((GQueue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GQueue (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GQueue); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GQueue (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GQueue); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GQueue (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GQueue); }
# 75 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GQueue (GQueue *_ptr) { (g_queue_clear) (_ptr); }
# 76 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GRand *GRand_autoptr; typedef GList *GRand_listautoptr; typedef GSList *GRand_slistautoptr; typedef GQueue *GRand_queueautoptr;
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRand (GRand *_ptr) { if (_ptr) (g_rand_free) ((GRand *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRand (GRand **_ptr) { glib_autoptr_clear_GRand (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GRand (void *_ptr) { (g_rand_free) ((GRand *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRand (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GRand); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRand (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GRand); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRand (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GRand); }
# 77 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GRegex *GRegex_autoptr; typedef GList *GRegex_listautoptr; typedef GSList *GRegex_slistautoptr; typedef GQueue *GRegex_queueautoptr;
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRegex (GRegex *_ptr) { if (_ptr) (g_regex_unref) ((GRegex *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRegex (GRegex **_ptr) { glib_autoptr_clear_GRegex (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GRegex (void *_ptr) { (g_regex_unref) ((GRegex *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRegex (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GRegex); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRegex (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GRegex); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRegex (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GRegex); }
# 78 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GMatchInfo *GMatchInfo_autoptr; typedef GList *GMatchInfo_listautoptr; typedef GSList *GMatchInfo_slistautoptr; typedef GQueue *GMatchInfo_queueautoptr;
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMatchInfo (GMatchInfo *_ptr) { if (_ptr) (g_match_info_unref) ((GMatchInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMatchInfo (GMatchInfo **_ptr) { glib_autoptr_clear_GMatchInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMatchInfo (void *_ptr) { (g_match_info_unref) ((GMatchInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMatchInfo (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMatchInfo); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMatchInfo (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMatchInfo); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMatchInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMatchInfo); }
# 79 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GScanner *GScanner_autoptr; typedef GList *GScanner_listautoptr; typedef GSList *GScanner_slistautoptr; typedef GQueue *GScanner_queueautoptr;
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GScanner (GScanner *_ptr) { if (_ptr) (g_scanner_destroy) ((GScanner *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GScanner (GScanner **_ptr) { glib_autoptr_clear_GScanner (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GScanner (void *_ptr) { (g_scanner_destroy) ((GScanner *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GScanner (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GScanner); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GScanner (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GScanner); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GScanner (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GScanner); }
# 80 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GSequence *GSequence_autoptr; typedef GList *GSequence_listautoptr; typedef GSList *GSequence_slistautoptr; typedef GQueue *GSequence_queueautoptr;
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSequence (GSequence *_ptr) { if (_ptr) (g_sequence_free) ((GSequence *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSequence (GSequence **_ptr) { glib_autoptr_clear_GSequence (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSequence (void *_ptr) { (g_sequence_free) ((GSequence *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSequence (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSequence); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSequence (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSequence); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSequence (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSequence); }
# 81 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GSList *GSList_autoptr; typedef GList *GSList_listautoptr; typedef GSList *GSList_slistautoptr; typedef GQueue *GSList_queueautoptr;
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSList (GSList *_ptr) { if (_ptr) (g_slist_free) ((GSList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSList (GSList **_ptr) { glib_autoptr_clear_GSList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSList (void *_ptr) { (g_slist_free) ((GSList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSList (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSList); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSList (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSList); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSList); }
# 82 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GString *GString_autoptr; typedef GList *GString_listautoptr; typedef GSList *GString_slistautoptr; typedef GQueue *GString_queueautoptr;
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GString (GString *_ptr) { if (_ptr) (g_autoptr_cleanup_gstring_free) ((GString *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GString (GString **_ptr) { glib_autoptr_clear_GString (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GString (void *_ptr) { (g_autoptr_cleanup_gstring_free) ((GString *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GString (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GString); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GString (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GString); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GString (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GString); }
# 83 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GStringChunk *GStringChunk_autoptr; typedef GList *GStringChunk_listautoptr; typedef GSList *GStringChunk_slistautoptr; typedef GQueue *GStringChunk_queueautoptr;
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GStringChunk (GStringChunk *_ptr) { if (_ptr) (g_string_chunk_free) ((GStringChunk *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GStringChunk (GStringChunk **_ptr) { glib_autoptr_clear_GStringChunk (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GStringChunk (void *_ptr) { (g_string_chunk_free) ((GStringChunk *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GStringChunk (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GStringChunk); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GStringChunk (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GStringChunk); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GStringChunk (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GStringChunk); }
# 84 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GStrvBuilder *GStrvBuilder_autoptr; typedef GList *GStrvBuilder_listautoptr; typedef GSList *GStrvBuilder_slistautoptr; typedef GQueue *GStrvBuilder_queueautoptr;
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GStrvBuilder (GStrvBuilder *_ptr) { if (_ptr) (g_strv_builder_unref) ((GStrvBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GStrvBuilder (GStrvBuilder **_ptr) { glib_autoptr_clear_GStrvBuilder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GStrvBuilder (void *_ptr) { (g_strv_builder_unref) ((GStrvBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GStrvBuilder (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GStrvBuilder); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GStrvBuilder (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GStrvBuilder); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GStrvBuilder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GStrvBuilder); }
# 85 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GThread *GThread_autoptr; typedef GList *GThread_listautoptr; typedef GSList *GThread_slistautoptr; typedef GQueue *GThread_queueautoptr;
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThread (GThread *_ptr) { if (_ptr) (g_thread_unref) ((GThread *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThread (GThread **_ptr) { glib_autoptr_clear_GThread (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GThread (void *_ptr) { (g_thread_unref) ((GThread *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThread (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GThread); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThread (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GThread); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThread (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GThread); }
# 86 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GMutex (GMutex *_ptr) { (g_mutex_clear) (_ptr); }
# 87 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GMutexLocker *GMutexLocker_autoptr; typedef GList *GMutexLocker_listautoptr; typedef GSList *GMutexLocker_slistautoptr; typedef GQueue *GMutexLocker_queueautoptr;
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMutexLocker (GMutexLocker *_ptr) { if (_ptr) (g_mutex_locker_free) ((GMutexLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMutexLocker (GMutexLocker **_ptr) { glib_autoptr_clear_GMutexLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMutexLocker (void *_ptr) { (g_mutex_locker_free) ((GMutexLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMutexLocker (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMutexLocker); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMutexLocker (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMutexLocker); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMutexLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMutexLocker); }
# 88 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GRecMutexLocker *GRecMutexLocker_autoptr; typedef GList *GRecMutexLocker_listautoptr; typedef GSList *GRecMutexLocker_slistautoptr; typedef GQueue *GRecMutexLocker_queueautoptr;
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRecMutexLocker (GRecMutexLocker *_ptr) { if (_ptr) (g_rec_mutex_locker_free) ((GRecMutexLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRecMutexLocker (GRecMutexLocker **_ptr) { glib_autoptr_clear_GRecMutexLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GRecMutexLocker (void *_ptr) { (g_rec_mutex_locker_free) ((GRecMutexLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRecMutexLocker (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GRecMutexLocker); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRecMutexLocker (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GRecMutexLocker); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRecMutexLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GRecMutexLocker); }
# 89 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GRWLockWriterLocker *GRWLockWriterLocker_autoptr; typedef GList *GRWLockWriterLocker_listautoptr; typedef GSList *GRWLockWriterLocker_slistautoptr; typedef GQueue *GRWLockWriterLocker_queueautoptr;
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRWLockWriterLocker (GRWLockWriterLocker *_ptr) { if (_ptr) (g_rw_lock_writer_locker_free) ((GRWLockWriterLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRWLockWriterLocker (GRWLockWriterLocker **_ptr) { glib_autoptr_clear_GRWLockWriterLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GRWLockWriterLocker (void *_ptr) { (g_rw_lock_writer_locker_free) ((GRWLockWriterLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRWLockWriterLocker (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GRWLockWriterLocker); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRWLockWriterLocker (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GRWLockWriterLocker); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRWLockWriterLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GRWLockWriterLocker); }
# 90 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GRWLockReaderLocker *GRWLockReaderLocker_autoptr; typedef GList *GRWLockReaderLocker_listautoptr; typedef GSList *GRWLockReaderLocker_slistautoptr; typedef GQueue *GRWLockReaderLocker_queueautoptr;
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRWLockReaderLocker (GRWLockReaderLocker *_ptr) { if (_ptr) (g_rw_lock_reader_locker_free) ((GRWLockReaderLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRWLockReaderLocker (GRWLockReaderLocker **_ptr) { glib_autoptr_clear_GRWLockReaderLocker (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GRWLockReaderLocker (void *_ptr) { (g_rw_lock_reader_locker_free) ((GRWLockReaderLocker *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRWLockReaderLocker (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GRWLockReaderLocker); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRWLockReaderLocker (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GRWLockReaderLocker); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRWLockReaderLocker (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GRWLockReaderLocker); }
# 91 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GCond (GCond *_ptr) { (g_cond_clear) (_ptr); }
# 92 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GTimer *GTimer_autoptr; typedef GList *GTimer_listautoptr; typedef GSList *GTimer_slistautoptr; typedef GQueue *GTimer_queueautoptr;
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTimer (GTimer *_ptr) { if (_ptr) (g_timer_destroy) ((GTimer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTimer (GTimer **_ptr) { glib_autoptr_clear_GTimer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTimer (void *_ptr) { (g_timer_destroy) ((GTimer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTimer (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTimer); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTimer (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTimer); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTimer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTimer); }
# 93 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GTimeZone *GTimeZone_autoptr; typedef GList *GTimeZone_listautoptr; typedef GSList *GTimeZone_slistautoptr; typedef GQueue *GTimeZone_queueautoptr;
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTimeZone (GTimeZone *_ptr) { if (_ptr) (g_time_zone_unref) ((GTimeZone *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTimeZone (GTimeZone **_ptr) { glib_autoptr_clear_GTimeZone (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTimeZone (void *_ptr) { (g_time_zone_unref) ((GTimeZone *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTimeZone (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTimeZone); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTimeZone (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTimeZone); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTimeZone (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTimeZone); }
# 94 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GTree *GTree_autoptr; typedef GList *GTree_listautoptr; typedef GSList *GTree_slistautoptr; typedef GQueue *GTree_queueautoptr;
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTree (GTree *_ptr) { if (_ptr) (g_tree_unref) ((GTree *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTree (GTree **_ptr) { glib_autoptr_clear_GTree (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTree (void *_ptr) { (g_tree_unref) ((GTree *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTree (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTree); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTree (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTree); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTree (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTree); }
# 95 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GVariant *GVariant_autoptr; typedef GList *GVariant_listautoptr; typedef GSList *GVariant_slistautoptr; typedef GQueue *GVariant_queueautoptr;
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariant (GVariant *_ptr) { if (_ptr) (g_variant_unref) ((GVariant *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariant (GVariant **_ptr) { glib_autoptr_clear_GVariant (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GVariant (void *_ptr) { (g_variant_unref) ((GVariant *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariant (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GVariant); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariant (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GVariant); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariant (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GVariant); }
# 96 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GVariantBuilder *GVariantBuilder_autoptr; typedef GList *GVariantBuilder_listautoptr; typedef GSList *GVariantBuilder_slistautoptr; typedef GQueue *GVariantBuilder_queueautoptr;
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantBuilder (GVariantBuilder *_ptr) { if (_ptr) (g_variant_builder_unref) ((GVariantBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantBuilder (GVariantBuilder **_ptr) { glib_autoptr_clear_GVariantBuilder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GVariantBuilder (void *_ptr) { (g_variant_builder_unref) ((GVariantBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantBuilder (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GVariantBuilder); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantBuilder (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GVariantBuilder); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantBuilder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GVariantBuilder); }
# 97 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GVariantBuilder (GVariantBuilder *_ptr) { (g_variant_builder_clear) (_ptr); }
# 98 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GVariantIter *GVariantIter_autoptr; typedef GList *GVariantIter_listautoptr; typedef GSList *GVariantIter_slistautoptr; typedef GQueue *GVariantIter_queueautoptr;
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantIter (GVariantIter *_ptr) { if (_ptr) (g_variant_iter_free) ((GVariantIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantIter (GVariantIter **_ptr) { glib_autoptr_clear_GVariantIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GVariantIter (void *_ptr) { (g_variant_iter_free) ((GVariantIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantIter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GVariantIter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantIter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GVariantIter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GVariantIter); }
# 99 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GVariantDict *GVariantDict_autoptr; typedef GList *GVariantDict_listautoptr; typedef GSList *GVariantDict_slistautoptr; typedef GQueue *GVariantDict_queueautoptr;
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantDict (GVariantDict *_ptr) { if (_ptr) (g_variant_dict_unref) ((GVariantDict *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantDict (GVariantDict **_ptr) { glib_autoptr_clear_GVariantDict (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GVariantDict (void *_ptr) { (g_variant_dict_unref) ((GVariantDict *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantDict (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GVariantDict); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantDict (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GVariantDict); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantDict (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GVariantDict); }
# 100 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GVariantDict (GVariantDict *_ptr) { (g_variant_dict_clear) (_ptr); }
# 101 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GVariantType *GVariantType_autoptr; typedef GList *GVariantType_listautoptr; typedef GSList *GVariantType_slistautoptr; typedef GQueue *GVariantType_queueautoptr;
# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVariantType (GVariantType *_ptr) { if (_ptr) (g_variant_type_free) ((GVariantType *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVariantType (GVariantType **_ptr) { glib_autoptr_clear_GVariantType (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GVariantType (void *_ptr) { (g_variant_type_free) ((GVariantType *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVariantType (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GVariantType); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVariantType (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GVariantType); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVariantType (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GVariantType); }
# 102 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GStrv (GStrv *_ptr) { if (*_ptr != ((void*)0)) (g_strfreev) (*_ptr); }
# 103 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GRefString *GRefString_autoptr; typedef GList *GRefString_listautoptr; typedef GSList *GRefString_slistautoptr; typedef GQueue *GRefString_queueautoptr;
# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRefString (GRefString *_ptr) { if (_ptr) (g_ref_string_release) ((GRefString *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRefString (GRefString **_ptr) { glib_autoptr_clear_GRefString (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GRefString (void *_ptr) { (g_ref_string_release) ((GRefString *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRefString (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GRefString); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRefString (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GRefString); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRefString (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GRefString); }
# 104 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GUri *GUri_autoptr; typedef GList *GUri_listautoptr; typedef GSList *GUri_slistautoptr; typedef GQueue *GUri_queueautoptr;
# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUri (GUri *_ptr) { if (_ptr) (g_uri_unref) ((GUri *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUri (GUri **_ptr) { glib_autoptr_clear_GUri (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GUri (void *_ptr) { (g_uri_unref) ((GUri *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUri (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GUri); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUri (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GUri); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUri (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GUri); }
# 105 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
typedef GPathBuf *GPathBuf_autoptr; typedef GList *GPathBuf_listautoptr; typedef GSList *GPathBuf_slistautoptr; typedef GQueue *GPathBuf_queueautoptr;
# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic push
# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPathBuf (GPathBuf *_ptr) { if (_ptr) (g_path_buf_free) ((GPathBuf *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPathBuf (GPathBuf **_ptr) { glib_autoptr_clear_GPathBuf (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GPathBuf (void *_ptr) { (g_path_buf_free) ((GPathBuf *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPathBuf (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GPathBuf); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPathBuf (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GPathBuf); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPathBuf (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GPathBuf); }
# 106 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 107 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 107 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GPathBuf (GPathBuf *_ptr) { (g_path_buf_clear) (_ptr); }
# 107 "/usr/include/glib-2.0/glib/glib-autocleanups.h"
#pragma clang diagnostic pop

#pragma clang diagnostic pop
# 118 "/usr/include/glib-2.0/glib.h" 2
# 9 "/usr/include/gtk-3.0/gdk/gdkconfig.h" 2
# 31 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 32 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkapplaunchcontext.h" 1
# 28 "/usr/include/gtk-3.0/gdk/gdkapplaunchcontext.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 28 "/usr/include/glib-2.0/gio/gio.h"
# 1 "/usr/include/glib-2.0/gio/giotypes.h" 1
# 30 "/usr/include/glib-2.0/gio/giotypes.h"
# 1 "/usr/include/glib-2.0/gio/gioenums.h" 1
# 30 "/usr/include/glib-2.0/gio/gioenums.h"
# 1 "/usr/include/glib-2.0/glib-object.h" 1
# 24 "/usr/include/glib-2.0/glib-object.h"
# 1 "/usr/include/glib-2.0/gobject/gbinding.h" 1
# 31 "/usr/include/glib-2.0/gobject/gbinding.h"
# 1 "/usr/include/glib-2.0/gobject/gobject.h" 1
# 26 "/usr/include/glib-2.0/gobject/gobject.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 27 "/usr/include/glib-2.0/gobject/gtype.h"
# 1 "/usr/include/glib-2.0/gobject/gobject-visibility.h" 1
# 28 "/usr/include/glib-2.0/gobject/gtype.h" 2
# 427 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gsize GType;



typedef struct _GValue GValue;
typedef union _GTypeCValue GTypeCValue;
typedef struct _GTypePlugin GTypePlugin;
typedef struct _GTypeClass GTypeClass;
typedef struct _GTypeInterface GTypeInterface;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeInfo GTypeInfo;
typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
typedef struct _GInterfaceInfo GInterfaceInfo;
typedef struct _GTypeValueTable GTypeValueTable;
typedef struct _GTypeQuery GTypeQuery;
# 451 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeClass
{

  GType g_type;
};





struct _GTypeInstance
{

  GTypeClass *g_class;
};





struct _GTypeInterface
{

  GType g_type;
  GType g_instance_type;
};
# 488 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeQuery
{
  GType type;
  const gchar *type_name;
  guint class_size;
  guint instance_size;
};
# 724 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_DEBUG_NONE = 0,
  G_TYPE_DEBUG_OBJECTS = 1 << 0,
  G_TYPE_DEBUG_SIGNALS = 1 << 1,
  G_TYPE_DEBUG_INSTANCE_COUNT = 1 << 2,
  G_TYPE_DEBUG_MASK = 0x07
} GTypeDebugFlags __attribute__((__deprecated__));



#pragma clang diagnostic push
# 735 "/usr/include/glib-2.0/gobject/gtype.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_type_init (void);
__attribute__((__deprecated__)) extern
void g_type_init_with_debug_flags (GTypeDebugFlags debug_flags);
#pragma clang diagnostic pop

 extern
const gchar * g_type_name (GType type);
 extern
GQuark g_type_qname (GType type);
 extern
GType g_type_from_name (const gchar *name);
 extern
GType g_type_parent (GType type);
 extern
guint g_type_depth (GType type);
 extern
GType g_type_next_base (GType leaf_type,
            GType root_type);
 extern
gboolean g_type_is_a (GType type,
            GType is_a_type);




 extern
gpointer g_type_class_ref (GType type);
 extern
gpointer g_type_class_peek (GType type);
 extern
gpointer g_type_class_peek_static (GType type);
 extern
void g_type_class_unref (gpointer g_class);
 extern
gpointer g_type_class_peek_parent (gpointer g_class);
 extern
gpointer g_type_interface_peek (gpointer instance_class,
            GType iface_type);
 extern
gpointer g_type_interface_peek_parent (gpointer g_iface);

 extern
gpointer g_type_default_interface_ref (GType g_type);
 extern
gpointer g_type_default_interface_peek (GType g_type);
 extern
void g_type_default_interface_unref (gpointer g_iface);


 extern
GType* g_type_children (GType type,
            guint *n_children);
 extern
GType* g_type_interfaces (GType type,
            guint *n_interfaces);


 extern
void g_type_set_qdata (GType type,
            GQuark quark,
            gpointer data);
 extern
gpointer g_type_get_qdata (GType type,
            GQuark quark);
 extern
void g_type_query (GType type,
            GTypeQuery *query);

 extern
int g_type_get_instance_count (GType type);
# 825 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GBaseInitFunc) (gpointer g_class);
# 839 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GBaseFinalizeFunc) (gpointer g_class);
# 943 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GClassInitFunc) (gpointer g_class,
           gpointer class_data);
# 960 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GClassFinalizeFunc) (gpointer g_class,
           gpointer class_data);
# 982 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInstanceInitFunc) (GTypeInstance *instance,
           gpointer g_class);
# 998 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInterfaceInitFunc) (gpointer g_iface,
           gpointer iface_data);
# 1010 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GInterfaceFinalizeFunc) (gpointer g_iface,
           gpointer iface_data);
# 1032 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gboolean (*GTypeClassCacheFunc) (gpointer cache_data,
           GTypeClass *g_class);
# 1046 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (*GTypeInterfaceCheckFunc) (gpointer check_data,
           gpointer g_iface);
# 1058 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{


  G_TYPE_FLAG_CLASSED = (1 << 0),
  G_TYPE_FLAG_INSTANTIATABLE = (1 << 1),
  G_TYPE_FLAG_DERIVABLE = (1 << 2),
  G_TYPE_FLAG_DEEP_DERIVABLE = (1 << 3)
} GTypeFundamentalFlags;
# 1083 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_FLAG_NONE = 0,
  G_TYPE_FLAG_ABSTRACT = (1 << 4),
  G_TYPE_FLAG_VALUE_ABSTRACT = (1 << 5),
  G_TYPE_FLAG_FINAL = (1 << 6),
  G_TYPE_FLAG_DEPRECATED = (1 << 7)
} GTypeFlags;
# 1122 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GTypeInfo
{

  guint16 class_size;

  GBaseInitFunc base_init;
  GBaseFinalizeFunc base_finalize;


  GClassInitFunc class_init;
  GClassFinalizeFunc class_finalize;
  gconstpointer class_data;


  guint16 instance_size;
  guint16 n_preallocs;
  GInstanceInitFunc instance_init;


  const GTypeValueTable *value_table;
};







struct _GTypeFundamentalInfo
{
  GTypeFundamentalFlags type_flags;
};
# 1163 "/usr/include/glib-2.0/gobject/gtype.h"
struct _GInterfaceInfo
{
  GInterfaceInitFunc interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer interface_data;
};
# 1189 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (* GTypeValueInitFunc) (GValue *value);
# 1210 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (* GTypeValueFreeFunc) (GValue *value);
# 1233 "/usr/include/glib-2.0/gobject/gtype.h"
typedef void (* GTypeValueCopyFunc) (const GValue *src_value,
                                     GValue *dest_value);
# 1254 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gpointer (* GTypeValuePeekPointerFunc) (const GValue *value);
# 1341 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gchar * (* GTypeValueCollectFunc) (GValue *value,
                                           guint n_collect_values,
                                           GTypeCValue *collect_values,
                                           guint collect_flags);
# 1403 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gchar * (* GTypeValueLCopyFunc) (const GValue *value,
                                         guint n_collect_values,
                                         GTypeCValue *collect_values,
                                         guint collect_flags);
# 1438 "/usr/include/glib-2.0/gobject/gtype.h"
#pragma clang diagnostic push
# 1438 "/usr/include/glib-2.0/gobject/gtype.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
struct _GTypeValueTable
{
  GTypeValueInitFunc value_init;
  GTypeValueFreeFunc value_free;
  GTypeValueCopyFunc value_copy;
  GTypeValuePeekPointerFunc value_peek_pointer;

  const gchar *collect_format;
  GTypeValueCollectFunc collect_value;

  const gchar *lcopy_format;
  GTypeValueLCopyFunc lcopy_value;
};
#pragma clang diagnostic pop

 extern
GType g_type_register_static (GType parent_type,
      const gchar *type_name,
      const GTypeInfo *info,
      GTypeFlags flags);
 extern
GType g_type_register_static_simple (GType parent_type,
      const gchar *type_name,
      guint class_size,
      GClassInitFunc class_init,
      guint instance_size,
      GInstanceInitFunc instance_init,
      GTypeFlags flags);

 extern
GType g_type_register_dynamic (GType parent_type,
      const gchar *type_name,
      GTypePlugin *plugin,
      GTypeFlags flags);
 extern
GType g_type_register_fundamental (GType type_id,
      const gchar *type_name,
      const GTypeInfo *info,
      const GTypeFundamentalInfo *finfo,
      GTypeFlags flags);
 extern
void g_type_add_interface_static (GType instance_type,
      GType interface_type,
      const GInterfaceInfo *info);
 extern
void g_type_add_interface_dynamic (GType instance_type,
      GType interface_type,
      GTypePlugin *plugin);
 extern
void g_type_interface_add_prerequisite (GType interface_type,
      GType prerequisite_type);
 extern
GType*g_type_interface_prerequisites (GType interface_type,
      guint *n_prerequisites);
 extern
GType g_type_interface_instantiatable_prerequisite
                                        (GType interface_type);
__attribute__((__deprecated__)) extern
void g_type_class_add_private (gpointer g_class,
                                         gsize private_size);
 extern
gint g_type_add_instance_private (GType class_type,
                                         gsize private_size);
 extern
gpointer g_type_instance_get_private (GTypeInstance *instance,
                                         GType private_type);
 extern
void g_type_class_adjust_private_offset (gpointer g_class,
                                             gint *private_size_or_offset);

 extern
void g_type_add_class_private (GType class_type,
      gsize private_size);
 extern
gpointer g_type_class_get_private (GTypeClass *klass,
      GType private_type);
 extern
gint g_type_class_get_instance_private_offset (gpointer g_class);

 extern
void g_type_ensure (GType type);
 extern
guint g_type_get_type_registration_serial (void);
# 2583 "/usr/include/glib-2.0/gobject/gtype.h"
 extern
GTypePlugin* g_type_get_plugin (GType type);
 extern
GTypePlugin* g_type_interface_get_plugin (GType instance_type,
       GType interface_type);
 extern
GType g_type_fundamental_next (void);
 extern
GType g_type_fundamental (GType type_id);
 extern
GTypeInstance* g_type_create_instance (GType type);
 extern
void g_type_free_instance (GTypeInstance *instance);

 extern
void g_type_add_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
 extern
void g_type_remove_class_cache_func (gpointer cache_data,
       GTypeClassCacheFunc cache_func);
 extern
void g_type_class_unref_uncached (gpointer g_class);

 extern
void g_type_add_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);
 extern
void g_type_remove_interface_check (gpointer check_data,
       GTypeInterfaceCheckFunc check_func);

 extern
GTypeValueTable* g_type_value_table_peek (GType type);



 extern
gboolean g_type_check_instance (GTypeInstance *instance) __attribute__((__pure__));
 extern
GTypeInstance* g_type_check_instance_cast (GTypeInstance *instance,
       GType iface_type);
 extern
gboolean g_type_check_instance_is_a (GTypeInstance *instance,
       GType iface_type) __attribute__((__pure__));
 extern
gboolean g_type_check_instance_is_fundamentally_a (GTypeInstance *instance,
                                                           GType fundamental_type) __attribute__((__pure__));
 extern
GTypeClass* g_type_check_class_cast (GTypeClass *g_class,
       GType is_a_type);
 extern
gboolean g_type_check_class_is_a (GTypeClass *g_class,
       GType is_a_type) __attribute__((__pure__));
 extern
gboolean g_type_check_is_value_type (GType type) __attribute__ ((__const__));
 extern
gboolean g_type_check_value (const GValue *value) __attribute__((__pure__));
 extern
gboolean g_type_check_value_holds (const GValue *value,
       GType type) __attribute__((__pure__));
 extern
gboolean g_type_test_flags (GType type,
       guint flags) __attribute__ ((__const__));



 extern
const gchar * g_type_name_from_instance (GTypeInstance *instance);
 extern
const gchar * g_type_name_from_class (GTypeClass *g_class);
# 27 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 97 "/usr/include/glib-2.0/gobject/gvalue.h"
typedef void (*GValueTransform) (const GValue *src_value,
     GValue *dest_value);
# 113 "/usr/include/glib-2.0/gobject/gvalue.h"
struct _GValue
{

  GType g_type;


  union {
    gint v_int;
    guint v_uint;
    glong v_long;
    gulong v_ulong;
    gint64 v_int64;
    guint64 v_uint64;
    gfloat v_float;
    gdouble v_double;
    gpointer v_pointer;
  } data[2];
};



 extern
GValue* g_value_init (GValue *value,
      GType g_type);
 extern
void g_value_copy (const GValue *src_value,
      GValue *dest_value);
 extern
GValue* g_value_reset (GValue *value);
 extern
void g_value_unset (GValue *value);
 extern
void g_value_set_instance (GValue *value,
      gpointer instance);
 extern
void g_value_init_from_instance (GValue *value,
                                              gpointer instance);



 extern
gboolean g_value_fits_pointer (const GValue *value);
 extern
gpointer g_value_peek_pointer (const GValue *value);



 extern
gboolean g_value_type_compatible (GType src_type,
      GType dest_type);
 extern
gboolean g_value_type_transformable (GType src_type,
      GType dest_type);
 extern
gboolean g_value_transform (const GValue *src_value,
      GValue *dest_value);
 extern
void g_value_register_transform_func (GType src_type,
      GType dest_type,
      GValueTransform transform_func);
# 28 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparam.h" 1
# 154 "/usr/include/glib-2.0/gobject/gparam.h"
typedef enum
{
  G_PARAM_READABLE = 1 << 0,
  G_PARAM_WRITABLE = 1 << 1,
  G_PARAM_READWRITE = (G_PARAM_READABLE | G_PARAM_WRITABLE),
  G_PARAM_CONSTRUCT = 1 << 2,
  G_PARAM_CONSTRUCT_ONLY = 1 << 3,
  G_PARAM_LAX_VALIDATION = 1 << 4,
  G_PARAM_STATIC_NAME = 1 << 5,
  G_PARAM_PRIVATE __attribute__((__deprecated__)) = G_PARAM_STATIC_NAME,
  G_PARAM_STATIC_NICK = 1 << 6,
  G_PARAM_STATIC_BLURB = 1 << 7,

  G_PARAM_EXPLICIT_NOTIFY = 1 << 30,

  G_PARAM_DEPRECATED = (gint)(1u << 31)
} GParamFlags;
# 202 "/usr/include/glib-2.0/gobject/gparam.h"
typedef struct _GParamSpec GParamSpec;
typedef struct _GParamSpecClass GParamSpecClass;
typedef struct _GParameter GParameter __attribute__((__deprecated__));
typedef struct _GParamSpecPool GParamSpecPool;

struct _GParamSpec
{
  GTypeInstance g_type_instance;

  const gchar *name;
  GParamFlags flags;
  GType value_type;
  GType owner_type;


  gchar *_nick;
  gchar *_blurb;
  GData *qdata;
  guint ref_count;
  guint param_id;
};
# 245 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParamSpecClass
{
  GTypeClass g_type_class;

  GType value_type;

  void (*finalize) (GParamSpec *pspec);


  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);

  gboolean (*value_is_valid) (GParamSpec *pspec,
                                         const GValue *value);


  gpointer dummy[3];
};
# 278 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParameter
{
  const gchar *name;
  GValue value;
} __attribute__((__deprecated__));



 extern
GParamSpec* g_param_spec_ref (GParamSpec *pspec);
 extern
void g_param_spec_unref (GParamSpec *pspec);
 extern
void g_param_spec_sink (GParamSpec *pspec);
 extern
GParamSpec* g_param_spec_ref_sink (GParamSpec *pspec);
 extern
gpointer g_param_spec_get_qdata (GParamSpec *pspec,
       GQuark quark);
 extern
void g_param_spec_set_qdata (GParamSpec *pspec,
       GQuark quark,
       gpointer data);
 extern
void g_param_spec_set_qdata_full (GParamSpec *pspec,
       GQuark quark,
       gpointer data,
       GDestroyNotify destroy);
 extern
gpointer g_param_spec_steal_qdata (GParamSpec *pspec,
       GQuark quark);
 extern
GParamSpec* g_param_spec_get_redirect_target (GParamSpec *pspec);

 extern
void g_param_value_set_default (GParamSpec *pspec,
       GValue *value);
 extern
gboolean g_param_value_defaults (GParamSpec *pspec,
       const GValue *value);
 extern
gboolean g_param_value_validate (GParamSpec *pspec,
       GValue *value);
 extern
gboolean g_param_value_is_valid (GParamSpec *pspec,
                                                 const GValue *value);
 extern
gboolean g_param_value_convert (GParamSpec *pspec,
       const GValue *src_value,
       GValue *dest_value,
       gboolean strict_validation);
 extern
gint g_param_values_cmp (GParamSpec *pspec,
       const GValue *value1,
       const GValue *value2);
 extern
const gchar * g_param_spec_get_name (GParamSpec *pspec);
 extern
const gchar * g_param_spec_get_nick (GParamSpec *pspec);
 extern
const gchar * g_param_spec_get_blurb (GParamSpec *pspec);
 extern
void g_value_set_param (GValue *value,
       GParamSpec *param);
 extern
GParamSpec* g_value_get_param (const GValue *value);
 extern
GParamSpec* g_value_dup_param (const GValue *value);


 extern
void g_value_take_param (GValue *value,
              GParamSpec *param);
__attribute__((__deprecated__("Use '" "g_value_take_param" "' instead"))) extern
void g_value_set_param_take_ownership (GValue *value,
                                                 GParamSpec *param);
 extern
const GValue * g_param_spec_get_default_value (GParamSpec *pspec);

 extern
GQuark g_param_spec_get_name_quark (GParamSpec *pspec);


typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
# 387 "/usr/include/glib-2.0/gobject/gparam.h"
struct _GParamSpecTypeInfo
{

  guint16 instance_size;
  guint16 n_preallocs;
  void (*instance_init) (GParamSpec *pspec);


  GType value_type;
  void (*finalize) (GParamSpec *pspec);
  void (*value_set_default) (GParamSpec *pspec,
      GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
      GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
      const GValue *value1,
      const GValue *value2);
};
 extern
GType g_param_type_register_static (const gchar *name,
      const GParamSpecTypeInfo *pspec_info);

 extern
gboolean g_param_spec_is_valid_name (const gchar *name);


GType _g_param_type_register_static_constant (const gchar *name,
            const GParamSpecTypeInfo *pspec_info,
            GType opt_type);



 extern
gpointer g_param_spec_internal (GType param_type,
       const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
 extern
GParamSpecPool* g_param_spec_pool_new (gboolean type_prefixing);
 extern
void g_param_spec_pool_insert (GParamSpecPool *pool,
       GParamSpec *pspec,
       GType owner_type);
 extern
void g_param_spec_pool_remove (GParamSpecPool *pool,
       GParamSpec *pspec);
 extern
GParamSpec* g_param_spec_pool_lookup (GParamSpecPool *pool,
       const gchar *param_name,
       GType owner_type,
       gboolean walk_ancestors);
 extern
GList* g_param_spec_pool_list_owned (GParamSpecPool *pool,
       GType owner_type);
 extern
GParamSpec** g_param_spec_pool_list (GParamSpecPool *pool,
       GType owner_type,
       guint *n_pspecs_p);
 extern
void g_param_spec_pool_free (GParamSpecPool *pool);
# 29 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gclosure.h" 1
# 77 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef struct _GClosure GClosure;
typedef struct _GClosureNotifyData GClosureNotifyData;
# 92 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GCallback) (void);
# 101 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GClosureNotify) (gpointer data,
      GClosure *closure);
# 121 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (*GClosureMarshal) (GClosure *closure,
      GValue *return_value,
      guint n_param_values,
      const GValue *param_values,
      gpointer invocation_hint,
      gpointer marshal_data);
# 148 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef void (* GVaClosureMarshal) (GClosure *closure,
        GValue *return_value,
        gpointer instance,
        va_list args,
        gpointer marshal_data,
        int n_params,
        GType *param_types);
# 163 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef struct _GCClosure GCClosure;



struct _GClosureNotifyData
{
  gpointer data;
  GClosureNotify notify;
};

struct _GClosure
{

  guint ref_count : 15;


  guint meta_marshal_nouse : 1;
  guint n_guards : 1;
  guint n_fnotifiers : 2;
  guint n_inotifiers : 8;
  guint in_inotify : 1;
  guint floating : 1;

  guint derivative_flag : 1;

  guint in_marshal : 1;
  guint is_invalid : 1;

                  void (*marshal) (GClosure *closure,
         GValue *return_value,
         guint n_param_values,
         const GValue *param_values,
         gpointer invocation_hint,
         gpointer marshal_data);
                    gpointer data;

                  GClosureNotifyData *notifiers;
# 211 "/usr/include/glib-2.0/gobject/gclosure.h"
};


struct _GCClosure
{
  GClosure closure;
  gpointer callback;
};



 extern
GClosure* g_cclosure_new (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
 extern
GClosure* g_cclosure_new_swap (GCallback callback_func,
       gpointer user_data,
       GClosureNotify destroy_data);
 extern
GClosure* g_signal_type_cclosure_new (GType itype,
       guint struct_offset);



 extern
GClosure* g_closure_ref (GClosure *closure);
 extern
void g_closure_sink (GClosure *closure);
 extern
void g_closure_unref (GClosure *closure);

 extern
GClosure* g_closure_new_simple (guint sizeof_closure,
       gpointer data);
 extern
void g_closure_add_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
 extern
void g_closure_remove_finalize_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
 extern
void g_closure_add_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
 extern
void g_closure_remove_invalidate_notifier (GClosure *closure,
       gpointer notify_data,
       GClosureNotify notify_func);
 extern
void g_closure_add_marshal_guards (GClosure *closure,
       gpointer pre_marshal_data,
       GClosureNotify pre_marshal_notify,
       gpointer post_marshal_data,
       GClosureNotify post_marshal_notify);
 extern
void g_closure_set_marshal (GClosure *closure,
       GClosureMarshal marshal);
 extern
void g_closure_set_meta_marshal (GClosure *closure,
       gpointer marshal_data,
       GClosureMarshal meta_marshal);
 extern
void g_closure_invalidate (GClosure *closure);
 extern
void g_closure_invoke (GClosure *closure,
       GValue *return_value,
       guint n_param_values,
       const GValue *param_values,
       gpointer invocation_hint);
# 295 "/usr/include/glib-2.0/gobject/gclosure.h"
 extern
void g_cclosure_marshal_generic (GClosure *closure,
                                 GValue *return_gvalue,
                                 guint n_param_values,
                                 const GValue *param_values,
                                 gpointer invocation_hint,
                                 gpointer marshal_data);

 extern
void g_cclosure_marshal_generic_va (GClosure *closure,
        GValue *return_value,
        gpointer instance,
        va_list args_list,
        gpointer marshal_data,
        int n_params,
        GType *param_types);
# 30 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsignal.h" 1
# 29 "/usr/include/glib-2.0/gobject/gsignal.h"
# 1 "/usr/include/glib-2.0/gobject/gmarshal.h" 1
# 23 "/usr/include/glib-2.0/gobject/gmarshal.h"
 extern
void g_cclosure_marshal_VOID__VOID (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__VOIDv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


 extern
void g_cclosure_marshal_VOID__BOOLEAN (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__BOOLEANv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);


 extern
void g_cclosure_marshal_VOID__CHAR (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__CHARv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


 extern
void g_cclosure_marshal_VOID__UCHAR (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__UCHARv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


 extern
void g_cclosure_marshal_VOID__INT (GClosure *closure,
                                   GValue *return_value,
                                   guint n_param_values,
                                   const GValue *param_values,
                                   gpointer invocation_hint,
                                   gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__INTv (GClosure *closure,
                                    GValue *return_value,
                                    gpointer instance,
                                    va_list args,
                                    gpointer marshal_data,
                                    int n_params,
                                    GType *param_types);


 extern
void g_cclosure_marshal_VOID__UINT (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__UINTv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


 extern
void g_cclosure_marshal_VOID__LONG (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__LONGv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


 extern
void g_cclosure_marshal_VOID__ULONG (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__ULONGv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


 extern
void g_cclosure_marshal_VOID__ENUM (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__ENUMv (GClosure *closure,
                                     GValue *return_value,
                                     gpointer instance,
                                     va_list args,
                                     gpointer marshal_data,
                                     int n_params,
                                     GType *param_types);


 extern
void g_cclosure_marshal_VOID__FLAGS (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__FLAGSv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


 extern
void g_cclosure_marshal_VOID__FLOAT (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__FLOATv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


 extern
void g_cclosure_marshal_VOID__DOUBLE (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__DOUBLEv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);


 extern
void g_cclosure_marshal_VOID__STRING (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__STRINGv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);


 extern
void g_cclosure_marshal_VOID__PARAM (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__PARAMv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


 extern
void g_cclosure_marshal_VOID__BOXED (GClosure *closure,
                                     GValue *return_value,
                                     guint n_param_values,
                                     const GValue *param_values,
                                     gpointer invocation_hint,
                                     gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__BOXEDv (GClosure *closure,
                                      GValue *return_value,
                                      gpointer instance,
                                      va_list args,
                                      gpointer marshal_data,
                                      int n_params,
                                      GType *param_types);


 extern
void g_cclosure_marshal_VOID__POINTER (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__POINTERv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);


 extern
void g_cclosure_marshal_VOID__OBJECT (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__OBJECTv (GClosure *closure,
                                       GValue *return_value,
                                       gpointer instance,
                                       va_list args,
                                       gpointer marshal_data,
                                       int n_params,
                                       GType *param_types);


 extern
void g_cclosure_marshal_VOID__VARIANT (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__VARIANTv (GClosure *closure,
                                        GValue *return_value,
                                        gpointer instance,
                                        va_list args,
                                        gpointer marshal_data,
                                        int n_params,
                                        GType *param_types);


 extern
void g_cclosure_marshal_VOID__UINT_POINTER (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);
 extern
void g_cclosure_marshal_VOID__UINT_POINTERv (GClosure *closure,
                                             GValue *return_value,
                                             gpointer instance,
                                             va_list args,
                                             gpointer marshal_data,
                                             int n_params,
                                             GType *param_types);


 extern
void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure *closure,
                                        GValue *return_value,
                                        guint n_param_values,
                                        const GValue *param_values,
                                        gpointer invocation_hint,
                                        gpointer marshal_data);
 extern
void g_cclosure_marshal_BOOLEAN__FLAGSv (GClosure *closure,
                                         GValue *return_value,
                                         gpointer instance,
                                         va_list args,
                                         gpointer marshal_data,
                                         int n_params,
                                         GType *param_types);
# 381 "/usr/include/glib-2.0/gobject/gmarshal.h"
 extern
void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure *closure,
                                                GValue *return_value,
                                                guint n_param_values,
                                                const GValue *param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
 extern
void g_cclosure_marshal_STRING__OBJECT_POINTERv (GClosure *closure,
                                                 GValue *return_value,
                                                 gpointer instance,
                                                 va_list args,
                                                 gpointer marshal_data,
                                                 int n_params,
                                                 GType *param_types);


 extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXED (GClosure *closure,
                                              GValue *return_value,
                                              guint n_param_values,
                                              const GValue *param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);
 extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv (GClosure *closure,
                                               GValue *return_value,
                                               gpointer instance,
                                               va_list args,
                                               gpointer marshal_data,
                                               int n_params,
                                               GType *param_types);
# 30 "/usr/include/glib-2.0/gobject/gsignal.h" 2




typedef struct _GSignalQuery GSignalQuery;
typedef struct _GSignalInvocationHint GSignalInvocationHint;
# 47 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef GClosureMarshal GSignalCMarshaller;







typedef GVaClosureMarshal GSignalCVaMarshaller;
# 75 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef gboolean (*GSignalEmissionHook) (GSignalInvocationHint *ihint,
      guint n_param_values,
      const GValue *param_values,
      gpointer data);
# 103 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef gboolean (*GSignalAccumulator) (GSignalInvocationHint *ihint,
      GValue *return_accu,
      const GValue *handler_return,
      gpointer data);
# 138 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_SIGNAL_RUN_FIRST = 1 << 0,
  G_SIGNAL_RUN_LAST = 1 << 1,
  G_SIGNAL_RUN_CLEANUP = 1 << 2,
  G_SIGNAL_NO_RECURSE = 1 << 3,
  G_SIGNAL_DETAILED = 1 << 4,
  G_SIGNAL_ACTION = 1 << 5,
  G_SIGNAL_NO_HOOKS = 1 << 6,
  G_SIGNAL_MUST_COLLECT = 1 << 7,
  G_SIGNAL_DEPRECATED = 1 << 8,

  G_SIGNAL_ACCUMULATOR_FIRST_RUN = 1 << 17,
} GSignalFlags;
# 170 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_CONNECT_DEFAULT = 0,
  G_CONNECT_AFTER = 1 << 0,
  G_CONNECT_SWAPPED = 1 << 1
} GConnectFlags;
# 189 "/usr/include/glib-2.0/gobject/gsignal.h"
typedef enum
{
  G_SIGNAL_MATCH_ID = 1 << 0,
  G_SIGNAL_MATCH_DETAIL = 1 << 1,
  G_SIGNAL_MATCH_CLOSURE = 1 << 2,
  G_SIGNAL_MATCH_FUNC = 1 << 3,
  G_SIGNAL_MATCH_DATA = 1 << 4,
  G_SIGNAL_MATCH_UNBLOCKED = 1 << 5
} GSignalMatchType;
# 241 "/usr/include/glib-2.0/gobject/gsignal.h"
struct _GSignalInvocationHint
{
  guint signal_id;
  GQuark detail;
  GSignalFlags run_type;
};
# 268 "/usr/include/glib-2.0/gobject/gsignal.h"
struct _GSignalQuery
{
  guint signal_id;
  const gchar *signal_name;
  GType itype;
  GSignalFlags signal_flags;
  GType return_type;
  guint n_params;
  const GType *param_types;
};



 extern
guint g_signal_newv (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          GType *param_types);
 extern
guint g_signal_new_valist (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          GClosure *class_closure,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          va_list args);
 extern
guint g_signal_new (const gchar *signal_name,
          GType itype,
          GSignalFlags signal_flags,
          guint class_offset,
          GSignalAccumulator accumulator,
          gpointer accu_data,
          GSignalCMarshaller c_marshaller,
          GType return_type,
          guint n_params,
          ...);
 extern
guint g_signal_new_class_handler (const gchar *signal_name,
                                             GType itype,
                                             GSignalFlags signal_flags,
                                             GCallback class_handler,
                                             GSignalAccumulator accumulator,
                                             gpointer accu_data,
                                             GSignalCMarshaller c_marshaller,
                                             GType return_type,
                                             guint n_params,
                                             ...);
 extern
void g_signal_set_va_marshaller (guint signal_id,
          GType instance_type,
          GSignalCVaMarshaller va_marshaller);

 extern
void g_signal_emitv (const GValue *instance_and_params,
          guint signal_id,
          GQuark detail,
          GValue *return_value);
 extern
void g_signal_emit_valist (gpointer instance,
          guint signal_id,
          GQuark detail,
          va_list var_args);
 extern
void g_signal_emit (gpointer instance,
          guint signal_id,
          GQuark detail,
          ...);
 extern
void g_signal_emit_by_name (gpointer instance,
          const gchar *detailed_signal,
          ...);
 extern
guint g_signal_lookup (const gchar *name,
          GType itype);
 extern
const gchar * g_signal_name (guint signal_id);
 extern
void g_signal_query (guint signal_id,
          GSignalQuery *query);
 extern
guint* g_signal_list_ids (GType itype,
          guint *n_ids);
 extern
gboolean g_signal_is_valid_name (const gchar *name);
 extern
gboolean g_signal_parse_name (const gchar *detailed_signal,
          GType itype,
          guint *signal_id_p,
          GQuark *detail_p,
          gboolean force_detail_quark);
 extern
GSignalInvocationHint* g_signal_get_invocation_hint (gpointer instance);



 extern
void g_signal_stop_emission (gpointer instance,
          guint signal_id,
          GQuark detail);
 extern
void g_signal_stop_emission_by_name (gpointer instance,
          const gchar *detailed_signal);
 extern
gulong g_signal_add_emission_hook (guint signal_id,
          GQuark detail,
          GSignalEmissionHook hook_func,
          gpointer hook_data,
          GDestroyNotify data_destroy);
 extern
void g_signal_remove_emission_hook (guint signal_id,
          gulong hook_id);



 extern
gboolean g_signal_has_handler_pending (gpointer instance,
            guint signal_id,
            GQuark detail,
            gboolean may_be_blocked);
 extern
gulong g_signal_connect_closure_by_id (gpointer instance,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gboolean after);
 extern
gulong g_signal_connect_closure (gpointer instance,
            const gchar *detailed_signal,
            GClosure *closure,
            gboolean after);
 extern
gulong g_signal_connect_data (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer data,
            GClosureNotify destroy_data,
            GConnectFlags connect_flags);
 extern
void g_signal_handler_block (gpointer instance,
            gulong handler_id);
 extern
void g_signal_handler_unblock (gpointer instance,
            gulong handler_id);
 extern
void g_signal_handler_disconnect (gpointer instance,
            gulong handler_id);
 extern
gboolean g_signal_handler_is_connected (gpointer instance,
            gulong handler_id);
 extern
gulong g_signal_handler_find (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
 extern
guint g_signal_handlers_block_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
 extern
guint g_signal_handlers_unblock_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);
 extern
guint g_signal_handlers_disconnect_matched (gpointer instance,
            GSignalMatchType mask,
            guint signal_id,
            GQuark detail,
            GClosure *closure,
            gpointer func,
            gpointer data);

 extern
void g_clear_signal_handler (gulong *handler_id_ptr,
            gpointer instance);
# 479 "/usr/include/glib-2.0/gobject/gsignal.h"
 extern
void g_signal_override_class_closure (guint signal_id,
                                               GType instance_type,
                                               GClosure *class_closure);
 extern
void g_signal_override_class_handler (const gchar *signal_name,
                                               GType instance_type,
                                               GCallback class_handler);
 extern
void g_signal_chain_from_overridden (const GValue *instance_and_params,
                                               GValue *return_value);
 extern
void g_signal_chain_from_overridden_handler (gpointer instance,
                                               ...);
# 638 "/usr/include/glib-2.0/gobject/gsignal.h"
 extern
gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint,
         GValue *return_accu,
         const GValue *handler_return,
         gpointer dummy);

 extern
gboolean g_signal_accumulator_first_wins (GSignalInvocationHint *ihint,
                                            GValue *return_accu,
                                            const GValue *handler_return,
                                            gpointer dummy);


 extern
void g_signal_handlers_destroy (gpointer instance);
void _g_signals_destroy (GType itype);
# 31 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gboxed.h" 1
# 29 "/usr/include/glib-2.0/gobject/gboxed.h"
# 1 "/usr/include/glib-2.0/gobject/glib-types.h" 1
# 375 "/usr/include/glib-2.0/gobject/glib-types.h"
 extern
GType g_date_get_type (void) __attribute__ ((__const__));
 extern
GType g_strv_get_type (void) __attribute__ ((__const__));
 extern
GType g_gstring_get_type (void) __attribute__ ((__const__));
 extern
GType g_hash_table_get_type (void) __attribute__ ((__const__));
 extern
GType g_array_get_type (void) __attribute__ ((__const__));
 extern
GType g_byte_array_get_type (void) __attribute__ ((__const__));
 extern
GType g_ptr_array_get_type (void) __attribute__ ((__const__));
 extern
GType g_bytes_get_type (void) __attribute__ ((__const__));
 extern
GType g_variant_type_get_gtype (void) __attribute__ ((__const__));
 extern
GType g_regex_get_type (void) __attribute__ ((__const__));
 extern
GType g_match_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_error_get_type (void) __attribute__ ((__const__));
 extern
GType g_date_time_get_type (void) __attribute__ ((__const__));
 extern
GType g_time_zone_get_type (void) __attribute__ ((__const__));
 extern
GType g_io_channel_get_type (void) __attribute__ ((__const__));
 extern
GType g_io_condition_get_type (void) __attribute__ ((__const__));
 extern
GType g_variant_builder_get_type (void) __attribute__ ((__const__));
 extern
GType g_variant_dict_get_type (void) __attribute__ ((__const__));
 extern
GType g_key_file_get_type (void) __attribute__ ((__const__));
 extern
GType g_main_loop_get_type (void) __attribute__ ((__const__));
 extern
GType g_main_context_get_type (void) __attribute__ ((__const__));
 extern
GType g_source_get_type (void) __attribute__ ((__const__));
 extern
GType g_pollfd_get_type (void) __attribute__ ((__const__));
 extern
GType g_thread_get_type (void) __attribute__ ((__const__));
 extern
GType g_checksum_get_type (void) __attribute__ ((__const__));
 extern
GType g_markup_parse_context_get_type (void) __attribute__ ((__const__));
 extern
GType g_mapped_file_get_type (void) __attribute__ ((__const__));
 extern
GType g_option_group_get_type (void) __attribute__ ((__const__));
 extern
GType g_uri_get_type (void) __attribute__ ((__const__));
 extern
GType g_tree_get_type (void) __attribute__ ((__const__));
 extern
GType g_pattern_spec_get_type (void) __attribute__ ((__const__));
 extern
GType g_bookmark_file_get_type (void) __attribute__ ((__const__));
 extern
GType g_hmac_get_type (void) __attribute__ ((__const__));
 extern
GType g_dir_get_type (void) __attribute__ ((__const__));
 extern
GType g_rand_get_type (void) __attribute__ ((__const__));
 extern
GType g_strv_builder_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "'G_TYPE_VARIANT'" "' instead"))) extern
GType g_variant_get_gtype (void) __attribute__ ((__const__));
# 30 "/usr/include/glib-2.0/gobject/gboxed.h" 2
# 58 "/usr/include/glib-2.0/gobject/gboxed.h"
typedef gpointer (*GBoxedCopyFunc) (gpointer boxed);
# 67 "/usr/include/glib-2.0/gobject/gboxed.h"
typedef void (*GBoxedFreeFunc) (gpointer boxed);



 extern
gpointer g_boxed_copy (GType boxed_type,
                                           gconstpointer src_boxed);
 extern
void g_boxed_free (GType boxed_type,
                                           gpointer boxed);
 extern
void g_value_set_boxed (GValue *value,
                                           gconstpointer v_boxed);
 extern
void g_value_set_static_boxed (GValue *value,
                                           gconstpointer v_boxed);
 extern
void g_value_take_boxed (GValue *value,
                                           gconstpointer v_boxed);
__attribute__((__deprecated__("Use '" "g_value_take_boxed" "' instead"))) extern
void g_value_set_boxed_take_ownership (GValue *value,
                                           gconstpointer v_boxed);
 extern
gpointer g_value_get_boxed (const GValue *value);
 extern
gpointer g_value_dup_boxed (const GValue *value);



 extern
GType g_boxed_type_register_static (const gchar *name,
                                           GBoxedCopyFunc boxed_copy,
                                           GBoxedFreeFunc boxed_free);
# 117 "/usr/include/glib-2.0/gobject/gboxed.h"
 extern
GType g_closure_get_type (void) __attribute__ ((__const__));
 extern
GType g_value_get_type (void) __attribute__ ((__const__));
# 32 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 192 "/usr/include/glib-2.0/gobject/gobject.h"
typedef struct _GObject GObject;
typedef struct _GObjectClass GObjectClass;
typedef struct _GObject GInitiallyUnowned;
typedef struct _GObjectClass GInitiallyUnownedClass;
typedef struct _GObjectConstructParam GObjectConstructParam;
# 207 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GObjectGetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
# 221 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GObjectSetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);






typedef void (*GObjectFinalizeFunc) (GObject *object);
# 249 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GWeakNotify) (gpointer data,
      GObject *where_the_object_was);

struct _GObject
{
  GTypeInstance g_type_instance;


  guint ref_count;
  GData *qdata;
};
# 322 "/usr/include/glib-2.0/gobject/gobject.h"
struct _GObjectClass
{
  GTypeClass g_type_class;


  GSList *construct_properties;



  GObject* (*constructor) (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam *construct_properties);

  void (*set_property) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
  void (*get_property) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
  void (*dispose) (GObject *object);
  void (*finalize) (GObject *object);

  void (*dispatch_properties_changed) (GObject *object,
          guint n_pspecs,
          GParamSpec **pspecs);

  void (*notify) (GObject *object,
      GParamSpec *pspec);


  void (*constructed) (GObject *object);


  gsize flags;

  gsize n_construct_properties;

  gpointer pspecs;
  gsize n_pspecs;


  gpointer pdummy[3];
};
# 376 "/usr/include/glib-2.0/gobject/gobject.h"
struct _GObjectConstructParam
{
  GParamSpec *pspec;
  GValue *value;
};
# 398 "/usr/include/glib-2.0/gobject/gobject.h"
 extern
GType g_initially_unowned_get_type (void);
 extern
void g_object_class_install_property (GObjectClass *oclass,
            guint property_id,
            GParamSpec *pspec);
 extern
GParamSpec* g_object_class_find_property (GObjectClass *oclass,
            const gchar *property_name);
 extern
GParamSpec**g_object_class_list_properties (GObjectClass *oclass,
            guint *n_properties);
 extern
void g_object_class_override_property (GObjectClass *oclass,
            guint property_id,
            const gchar *name);
 extern
void g_object_class_install_properties (GObjectClass *oclass,
                                               guint n_pspecs,
                                               GParamSpec **pspecs);

 extern
void g_object_interface_install_property (gpointer g_iface,
       GParamSpec *pspec);
 extern
GParamSpec* g_object_interface_find_property (gpointer g_iface,
       const gchar *property_name);
 extern
GParamSpec**g_object_interface_list_properties (gpointer g_iface,
       guint *n_properties_p);

 extern
GType g_object_get_type (void) __attribute__ ((__const__));
 extern
gpointer g_object_new (GType object_type,
            const gchar *first_property_name,
            ...);
 extern
GObject* g_object_new_with_properties (GType object_type,
                                               guint n_properties,
                                               const char *names[],
                                               const GValue values[]);

#pragma clang diagnostic push
# 441 "/usr/include/glib-2.0/gobject/gobject.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

__attribute__((__deprecated__("Use '" "g_object_new_with_properties" "' instead"))) extern
gpointer g_object_newv (GType object_type,
            guint n_parameters,
            GParameter *parameters);

#pragma clang diagnostic pop

 extern
GObject* g_object_new_valist (GType object_type,
            const gchar *first_property_name,
            va_list var_args);
 extern
void g_object_set (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
 extern
void g_object_get (gpointer object,
            const gchar *first_property_name,
            ...) __attribute__((__sentinel__));
 extern
gpointer g_object_connect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
 extern
void g_object_disconnect (gpointer object,
            const gchar *signal_spec,
            ...) __attribute__((__sentinel__));
 extern
void g_object_setv (GObject *object,
                                               guint n_properties,
                                               const gchar *names[],
                                               const GValue values[]);
 extern
void g_object_set_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
 extern
void g_object_getv (GObject *object,
                                               guint n_properties,
                                               const gchar *names[],
                                               GValue values[]);
 extern
void g_object_get_valist (GObject *object,
            const gchar *first_property_name,
            va_list var_args);
 extern
void g_object_set_property (GObject *object,
            const gchar *property_name,
            const GValue *value);
 extern
void g_object_get_property (GObject *object,
            const gchar *property_name,
            GValue *value);
 extern
void g_object_freeze_notify (GObject *object);
 extern
void g_object_notify (GObject *object,
            const gchar *property_name);
 extern
void g_object_notify_by_pspec (GObject *object,
            GParamSpec *pspec);
 extern
void g_object_thaw_notify (GObject *object);
 extern
gboolean g_object_is_floating (gpointer object);
 extern
gpointer g_object_ref_sink (gpointer object);
 extern
gpointer g_object_take_ref (gpointer object);
 extern
gpointer g_object_ref (gpointer object);
 extern
void g_object_unref (gpointer object);
 extern
void g_object_weak_ref (GObject *object,
            GWeakNotify notify,
            gpointer data);
 extern
void g_object_weak_unref (GObject *object,
            GWeakNotify notify,
            gpointer data);
 extern
void g_object_add_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
 extern
void g_object_remove_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
# 551 "/usr/include/glib-2.0/gobject/gobject.h"
typedef void (*GToggleNotify) (gpointer data,
          GObject *object,
          gboolean is_last_ref);

 extern
void g_object_add_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);
 extern
void g_object_remove_toggle_ref (GObject *object,
     GToggleNotify notify,
     gpointer data);

 extern
gpointer g_object_get_qdata (GObject *object,
            GQuark quark);
 extern
void g_object_set_qdata (GObject *object,
            GQuark quark,
            gpointer data);
 extern
void g_object_set_qdata_full (GObject *object,
            GQuark quark,
            gpointer data,
            GDestroyNotify destroy);
 extern
gpointer g_object_steal_qdata (GObject *object,
            GQuark quark);

 extern
gpointer g_object_dup_qdata (GObject *object,
                                               GQuark quark,
                                               GDuplicateFunc dup_func,
            gpointer user_data);
 extern
gboolean g_object_replace_qdata (GObject *object,
                                               GQuark quark,
                                               gpointer oldval,
                                               gpointer newval,
                                               GDestroyNotify destroy,
            GDestroyNotify *old_destroy);

 extern
gpointer g_object_get_data (GObject *object,
            const gchar *key);
 extern
void g_object_set_data (GObject *object,
            const gchar *key,
            gpointer data);
 extern
void g_object_set_data_full (GObject *object,
            const gchar *key,
            gpointer data,
            GDestroyNotify destroy);
 extern
gpointer g_object_steal_data (GObject *object,
            const gchar *key);

 extern
gpointer g_object_dup_data (GObject *object,
                                               const gchar *key,
                                               GDuplicateFunc dup_func,
            gpointer user_data);
 extern
gboolean g_object_replace_data (GObject *object,
                                               const gchar *key,
                                               gpointer oldval,
                                               gpointer newval,
                                               GDestroyNotify destroy,
            GDestroyNotify *old_destroy);


 extern
void g_object_watch_closure (GObject *object,
            GClosure *closure);
 extern
GClosure* g_cclosure_new_object (GCallback callback_func,
            GObject *object);
 extern
GClosure* g_cclosure_new_object_swap (GCallback callback_func,
            GObject *object);
 extern
GClosure* g_closure_new_object (guint sizeof_closure,
            GObject *object);
 extern
void g_value_set_object (GValue *value,
            gpointer v_object);
 extern
gpointer g_value_get_object (const GValue *value);
 extern
gpointer g_value_dup_object (const GValue *value);
 extern
gulong g_signal_connect_object (gpointer instance,
            const gchar *detailed_signal,
            GCallback c_handler,
            gpointer gobject,
            GConnectFlags connect_flags);


 extern
void g_object_force_floating (GObject *object);
 extern
void g_object_run_dispose (GObject *object);


 extern
void g_value_take_object (GValue *value,
            gpointer v_object);
__attribute__((__deprecated__("Use '" "g_value_take_object" "' instead"))) extern
void g_value_set_object_take_ownership (GValue *value,
                                               gpointer v_object);

__attribute__((__deprecated__)) extern
gsize g_object_compat_control (gsize what,
            gpointer data);
# 693 "/usr/include/glib-2.0/gobject/gobject.h"
 extern
void g_clear_object (GObject **object_ptr);
# 733 "/usr/include/glib-2.0/gobject/gobject.h"
static inline gboolean
(g_set_object) (GObject **object_ptr,
                GObject *new_object)
{
  GObject *old_object = *object_ptr;







  if (old_object == new_object)
    return (0);

  if (new_object != ((void*)0))
    ((__typeof__ (new_object)) (g_object_ref) (new_object));

  *object_ptr = new_object;

  if (old_object != ((void*)0))
    g_object_unref (old_object);

  return (!(0));
}
# 799 "/usr/include/glib-2.0/gobject/gobject.h"
static inline void
(g_assert_finalize_object) (GObject *object)
{
  gpointer weak_pointer = object;

  do { if (__builtin_expect (__extension__ ({ int _g_boolean_var_8; if ((((g_type_check_instance_is_fundamentally_a ((GTypeInstance*) ((weak_pointer)), (((GType) ((20) << (2))))))))) _g_boolean_var_8 = 1; else _g_boolean_var_8 = 0; _g_boolean_var_8; }), 1)) ; else g_assertion_message (((gchar*) 0), "/usr/include/glib-2.0/gobject/gobject.h", 804, ((const char*) (__func__)), "'" "G_IS_OBJECT (weak_pointer)" "' should be TRUE"); } while (0);
  g_object_add_weak_pointer (object, &weak_pointer);
  g_object_unref (weak_pointer);
  do { if (__builtin_expect (__extension__ ({ int _g_boolean_var_9; if ((weak_pointer) == ((void*)0)) _g_boolean_var_9 = 1; else _g_boolean_var_9 = 0; _g_boolean_var_9; }), 1)) ; else g_assertion_message (((gchar*) 0), "/usr/include/glib-2.0/gobject/gobject.h", 807, ((const char*) (__func__)), "'" "weak_pointer" "' should be NULL"); } while (0);
}
# 834 "/usr/include/glib-2.0/gobject/gobject.h"
static inline void
(g_clear_weak_pointer) (gpointer *weak_pointer_location)
{
  GObject *object = (GObject *) *weak_pointer_location;

  if (object != ((void*)0))
    {
      g_object_remove_weak_pointer (object, weak_pointer_location);
      *weak_pointer_location = ((void*)0);
    }
}
# 889 "/usr/include/glib-2.0/gobject/gobject.h"
static inline gboolean
(g_set_weak_pointer) (gpointer *weak_pointer_location,
                      GObject *new_object)
{
  GObject *old_object = (GObject *) *weak_pointer_location;






  if (old_object == new_object)
    return (0);

  if (old_object != ((void*)0))
    g_object_remove_weak_pointer (old_object, weak_pointer_location);

  *weak_pointer_location = new_object;

  if (new_object != ((void*)0))
    g_object_add_weak_pointer (new_object, weak_pointer_location);

  return (!(0));
}







typedef struct {

    union { gpointer p; } priv;
} GWeakRef;

 extern
void g_weak_ref_init (GWeakRef *weak_ref,
                                gpointer object);
 extern
void g_weak_ref_clear (GWeakRef *weak_ref);
 extern
gpointer g_weak_ref_get (GWeakRef *weak_ref);
 extern
void g_weak_ref_set (GWeakRef *weak_ref,
                                gpointer object);
# 32 "/usr/include/glib-2.0/gobject/gbinding.h" 2
# 41 "/usr/include/glib-2.0/gobject/gbinding.h"
typedef struct _GBinding GBinding;
# 63 "/usr/include/glib-2.0/gobject/gbinding.h"
typedef gboolean (* GBindingTransformFunc) (GBinding *binding,
                                            const GValue *from_value,
                                            GValue *to_value,
                                            gpointer user_data);
# 91 "/usr/include/glib-2.0/gobject/gbinding.h"
typedef enum {
  G_BINDING_DEFAULT = 0,

  G_BINDING_BIDIRECTIONAL = 1 << 0,
  G_BINDING_SYNC_CREATE = 1 << 1,
  G_BINDING_INVERT_BOOLEAN = 1 << 2
} GBindingFlags;

 extern
GType g_binding_flags_get_type (void) __attribute__ ((__const__));
 extern
GType g_binding_get_type (void) __attribute__ ((__const__));

 extern
GBindingFlags g_binding_get_flags (GBinding *binding);
__attribute__((__deprecated__("Use '" "g_binding_dup_source" "' instead"))) extern
GObject * g_binding_get_source (GBinding *binding);
 extern
GObject * g_binding_dup_source (GBinding *binding);
__attribute__((__deprecated__("Use '" "g_binding_dup_target" "' instead"))) extern
GObject * g_binding_get_target (GBinding *binding);
 extern
GObject * g_binding_dup_target (GBinding *binding);
 extern
const gchar * g_binding_get_source_property (GBinding *binding);
 extern
const gchar * g_binding_get_target_property (GBinding *binding);
 extern
void g_binding_unbind (GBinding *binding);

 extern
GBinding *g_object_bind_property (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags);
 extern
GBinding *g_object_bind_property_full (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags,
                                                GBindingTransformFunc transform_to,
                                                GBindingTransformFunc transform_from,
                                                gpointer user_data,
                                                GDestroyNotify notify);
 extern
GBinding *g_object_bind_property_with_closures (gpointer source,
                                                const gchar *source_property,
                                                gpointer target,
                                                const gchar *target_property,
                                                GBindingFlags flags,
                                                GClosure *transform_to,
                                                GClosure *transform_from);
# 25 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gbindinggroup.h" 1
# 39 "/usr/include/glib-2.0/gobject/gbindinggroup.h"
typedef struct _GBindingGroup GBindingGroup;

 extern
GType g_binding_group_get_type (void) __attribute__ ((__const__));
 extern
GBindingGroup *g_binding_group_new (void);
 extern
gpointer g_binding_group_dup_source (GBindingGroup *self);
 extern
void g_binding_group_set_source (GBindingGroup *self,
                                                   gpointer source);
 extern
void g_binding_group_bind (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags);
 extern
void g_binding_group_bind_full (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags,
                                                   GBindingTransformFunc transform_to,
                                                   GBindingTransformFunc transform_from,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_destroy);
 extern
void g_binding_group_bind_with_closures (GBindingGroup *self,
                                                   const gchar *source_property,
                                                   gpointer target,
                                                   const gchar *target_property,
                                                   GBindingFlags flags,
                                                   GClosure *transform_to,
                                                   GClosure *transform_from);
# 26 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/genums.h" 1
# 140 "/usr/include/glib-2.0/gobject/genums.h"
typedef struct _GEnumClass GEnumClass;
typedef struct _GFlagsClass GFlagsClass;
typedef struct _GEnumValue GEnumValue;
typedef struct _GFlagsValue GFlagsValue;
# 157 "/usr/include/glib-2.0/gobject/genums.h"
struct _GEnumClass
{
  GTypeClass g_type_class;


  gint minimum;
  gint maximum;
  guint n_values;
  GEnumValue *values;
};
# 178 "/usr/include/glib-2.0/gobject/genums.h"
struct _GFlagsClass
{
  GTypeClass g_type_class;


  guint mask;
  guint n_values;
  GFlagsValue *values;
};
# 196 "/usr/include/glib-2.0/gobject/genums.h"
struct _GEnumValue
{
  gint value;
  const gchar *value_name;
  const gchar *value_nick;
};
# 211 "/usr/include/glib-2.0/gobject/genums.h"
struct _GFlagsValue
{
  guint value;
  const gchar *value_name;
  const gchar *value_nick;
};



 extern
GEnumValue* g_enum_get_value (GEnumClass *enum_class,
       gint value);
 extern
GEnumValue* g_enum_get_value_by_name (GEnumClass *enum_class,
       const gchar *name);
 extern
GEnumValue* g_enum_get_value_by_nick (GEnumClass *enum_class,
       const gchar *nick);
 extern
GFlagsValue* g_flags_get_first_value (GFlagsClass *flags_class,
       guint value);
 extern
GFlagsValue* g_flags_get_value_by_name (GFlagsClass *flags_class,
       const gchar *name);
 extern
GFlagsValue* g_flags_get_value_by_nick (GFlagsClass *flags_class,
       const gchar *nick);
 extern
gchar *g_enum_to_string (GType g_enum_type,
                                                 gint value);
 extern
gchar *g_flags_to_string (GType flags_type,
                                                 guint value);
 extern
void g_value_set_enum (GValue *value,
       gint v_enum);
 extern
gint g_value_get_enum (const GValue *value);
 extern
void g_value_set_flags (GValue *value,
       guint v_flags);
 extern
guint g_value_get_flags (const GValue *value);







 extern
GType g_enum_register_static (const gchar *name,
        const GEnumValue *const_static_values);
 extern
GType g_flags_register_static (const gchar *name,
        const GFlagsValue *const_static_values);



 extern
void g_enum_complete_type_info (GType g_enum_type,
        GTypeInfo *info,
        const GEnumValue *const_values);
 extern
void g_flags_complete_type_info (GType g_flags_type,
        GTypeInfo *info,
        const GFlagsValue *const_values);
# 28 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/glib-enumtypes.h" 1






# 1 "/usr/include/glib-2.0/glib-object.h" 1
# 8 "/usr/include/glib-2.0/gobject/glib-enumtypes.h" 2




 extern GType g_unicode_type_get_type (void) __attribute__ ((__const__));

 extern GType g_unicode_break_type_get_type (void) __attribute__ ((__const__));

 extern GType g_unicode_script_get_type (void) __attribute__ ((__const__));

 extern GType g_normalize_mode_get_type (void) __attribute__ ((__const__));
# 29 "/usr/include/glib-2.0/glib-object.h" 2


# 1 "/usr/include/glib-2.0/gobject/gparamspecs.h" 1
# 588 "/usr/include/glib-2.0/gobject/gparamspecs.h"
typedef struct _GParamSpecChar GParamSpecChar;
typedef struct _GParamSpecUChar GParamSpecUChar;
typedef struct _GParamSpecBoolean GParamSpecBoolean;
typedef struct _GParamSpecInt GParamSpecInt;
typedef struct _GParamSpecUInt GParamSpecUInt;
typedef struct _GParamSpecLong GParamSpecLong;
typedef struct _GParamSpecULong GParamSpecULong;
typedef struct _GParamSpecInt64 GParamSpecInt64;
typedef struct _GParamSpecUInt64 GParamSpecUInt64;
typedef struct _GParamSpecUnichar GParamSpecUnichar;
typedef struct _GParamSpecEnum GParamSpecEnum;
typedef struct _GParamSpecFlags GParamSpecFlags;
typedef struct _GParamSpecFloat GParamSpecFloat;
typedef struct _GParamSpecDouble GParamSpecDouble;
typedef struct _GParamSpecString GParamSpecString;
typedef struct _GParamSpecParam GParamSpecParam;
typedef struct _GParamSpecBoxed GParamSpecBoxed;
typedef struct _GParamSpecPointer GParamSpecPointer;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecObject GParamSpecObject;
typedef struct _GParamSpecOverride GParamSpecOverride;
typedef struct _GParamSpecGType GParamSpecGType;
typedef struct _GParamSpecVariant GParamSpecVariant;
# 621 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecChar
{
  GParamSpec parent_instance;

  gint8 minimum;
  gint8 maximum;
  gint8 default_value;
};
# 638 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUChar
{
  GParamSpec parent_instance;

  guint8 minimum;
  guint8 maximum;
  guint8 default_value;
};







struct _GParamSpecBoolean
{
  GParamSpec parent_instance;

  gboolean default_value;
};
# 668 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecInt
{
  GParamSpec parent_instance;

  gint minimum;
  gint maximum;
  gint default_value;
};
# 685 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUInt
{
  GParamSpec parent_instance;

  guint minimum;
  guint maximum;
  guint default_value;
};
# 702 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecLong
{
  GParamSpec parent_instance;

  glong minimum;
  glong maximum;
  glong default_value;
};
# 719 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecULong
{
  GParamSpec parent_instance;

  gulong minimum;
  gulong maximum;
  gulong default_value;
};
# 736 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecInt64
{
  GParamSpec parent_instance;

  gint64 minimum;
  gint64 maximum;
  gint64 default_value;
};
# 753 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecUInt64
{
  GParamSpec parent_instance;

  guint64 minimum;
  guint64 maximum;
  guint64 default_value;
};







struct _GParamSpecUnichar
{
  GParamSpec parent_instance;

  gunichar default_value;
};
# 783 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecEnum
{
  GParamSpec parent_instance;

  GEnumClass *enum_class;
  gint default_value;
};
# 799 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecFlags
{
  GParamSpec parent_instance;

  GFlagsClass *flags_class;
  guint default_value;
};
# 817 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecFloat
{
  GParamSpec parent_instance;

  gfloat minimum;
  gfloat maximum;
  gfloat default_value;
  gfloat epsilon;
};
# 837 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecDouble
{
  GParamSpec parent_instance;

  gdouble minimum;
  gdouble maximum;
  gdouble default_value;
  gdouble epsilon;
};
# 859 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecString
{
  GParamSpec parent_instance;

  gchar *default_value;
  gchar *cset_first;
  gchar *cset_nth;
  gchar substitutor;
  guint null_fold_if_empty : 1;
  guint ensure_non_null : 1;
};







struct _GParamSpecParam
{
  GParamSpec parent_instance;
};






struct _GParamSpecBoxed
{
  GParamSpec parent_instance;
};






struct _GParamSpecPointer
{
  GParamSpec parent_instance;
};
# 909 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecValueArray
{
  GParamSpec parent_instance;
  GParamSpec *element_spec;
  guint fixed_n_elements;
};






struct _GParamSpecObject
{
  GParamSpec parent_instance;
};
# 942 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecOverride
{

  GParamSpec parent_instance;
  GParamSpec *overridden;
};
# 957 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecGType
{
  GParamSpec parent_instance;
  GType is_a_type;
};
# 978 "/usr/include/glib-2.0/gobject/gparamspecs.h"
struct _GParamSpecVariant
{
  GParamSpec parent_instance;
  GVariantType *type;
  GVariant *default_value;


  gpointer padding[4];
};


 extern
GParamSpec* g_param_spec_char (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint8 minimum,
       gint8 maximum,
       gint8 default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_uchar (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint8 minimum,
       guint8 maximum,
       guint8 default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_boolean (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gboolean default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_int (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint minimum,
       gint maximum,
       gint default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_uint (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint minimum,
       guint maximum,
       guint default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_long (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       glong minimum,
       glong maximum,
       glong default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_ulong (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gulong minimum,
       gulong maximum,
       gulong default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_int64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gint64 minimum,
       gint64 maximum,
       gint64 default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_uint64 (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       guint64 minimum,
       guint64 maximum,
       guint64 default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_unichar (const gchar *name,
              const gchar *nick,
              const gchar *blurb,
              gunichar default_value,
              GParamFlags flags);
 extern
GParamSpec* g_param_spec_enum (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType enum_type,
       gint default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_flags (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType flags_type,
       guint default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_float (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gfloat minimum,
       gfloat maximum,
       gfloat default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_double (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       gdouble minimum,
       gdouble maximum,
       gdouble default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_string (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const gchar *default_value,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_param (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType param_type,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_boxed (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType boxed_type,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_pointer (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_value_array (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GParamSpec *element_spec,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_object (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType object_type,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_override (const gchar *name,
       GParamSpec *overridden);
 extern
GParamSpec* g_param_spec_gtype (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       GType is_a_type,
       GParamFlags flags);
 extern
GParamSpec* g_param_spec_variant (const gchar *name,
       const gchar *nick,
       const gchar *blurb,
       const GVariantType *type,
       GVariant *default_value,
       GParamFlags flags);

 extern GType *g_param_spec_types;
# 32 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/gsignalgroup.h" 1
# 39 "/usr/include/glib-2.0/gobject/gsignalgroup.h"
typedef struct _GSignalGroup GSignalGroup;

 extern
GType g_signal_group_get_type (void) __attribute__ ((__const__));
 extern
GSignalGroup *g_signal_group_new (GType target_type);
 extern
void g_signal_group_set_target (GSignalGroup *self,
                                              gpointer target);
 extern
gpointer g_signal_group_dup_target (GSignalGroup *self);
 extern
void g_signal_group_block (GSignalGroup *self);
 extern
void g_signal_group_unblock (GSignalGroup *self);
 extern
void g_signal_group_connect_closure (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GClosure *closure,
                                              gboolean after);
 extern
void g_signal_group_connect_object (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer object,
                                              GConnectFlags flags);
 extern
void g_signal_group_connect_data (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data,
                                              GClosureNotify notify,
                                              GConnectFlags flags);
 extern
void g_signal_group_connect (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);
 extern
void g_signal_group_connect_after (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);
 extern
void g_signal_group_connect_swapped (GSignalGroup *self,
                                              const gchar *detailed_signal,
                                              GCallback c_handler,
                                              gpointer data);
# 34 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsourceclosure.h" 1
# 31 "/usr/include/glib-2.0/gobject/gsourceclosure.h"
 extern
void g_source_set_closure (GSource *source,
      GClosure *closure);

 extern
void g_source_set_dummy_callback (GSource *source);
# 35 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/gtypemodule.h" 1
# 31 "/usr/include/glib-2.0/gobject/gtypemodule.h"
typedef struct _GTypeModule GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;
# 41 "/usr/include/glib-2.0/gobject/gtypemodule.h"
typedef GTypeModule *GTypeModule_autoptr; typedef GList *GTypeModule_listautoptr; typedef GSList *GTypeModule_slistautoptr; typedef GQueue *GTypeModule_queueautoptr;
# 41 "/usr/include/glib-2.0/gobject/gtypemodule.h"
#pragma clang diagnostic push
# 41 "/usr/include/glib-2.0/gobject/gtypemodule.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 41 "/usr/include/glib-2.0/gobject/gtypemodule.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTypeModule (GTypeModule *_ptr) { if (_ptr) (g_object_unref) ((GTypeModule *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTypeModule (GTypeModule **_ptr) { glib_autoptr_clear_GTypeModule (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTypeModule (void *_ptr) { (g_object_unref) ((GTypeModule *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTypeModule (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTypeModule); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTypeModule (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTypeModule); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTypeModule (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTypeModule); }
# 41 "/usr/include/glib-2.0/gobject/gtypemodule.h"
#pragma clang diagnostic pop

struct _GTypeModule
{
  GObject parent_instance;

  guint use_count;
  GSList *type_infos;
  GSList *interface_infos;


  gchar *name;
};
# 65 "/usr/include/glib-2.0/gobject/gtypemodule.h"
struct _GTypeModuleClass
{
  GObjectClass parent_class;


  gboolean (* load) (GTypeModule *module);
  void (* unload) (GTypeModule *module);



  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};
# 264 "/usr/include/glib-2.0/gobject/gtypemodule.h"
 extern
GType g_type_module_get_type (void) __attribute__ ((__const__));
 extern
gboolean g_type_module_use (GTypeModule *module);
 extern
void g_type_module_unuse (GTypeModule *module);
 extern
void g_type_module_set_name (GTypeModule *module,
                                       const gchar *name);
 extern
GType g_type_module_register_type (GTypeModule *module,
                                       GType parent_type,
                                       const gchar *type_name,
                                       const GTypeInfo *type_info,
                                       GTypeFlags flags);
 extern
void g_type_module_add_interface (GTypeModule *module,
                                       GType instance_type,
                                       GType interface_type,
                                       const GInterfaceInfo *interface_info);
 extern
GType g_type_module_register_enum (GTypeModule *module,
                                       const gchar *name,
                                       const GEnumValue *const_static_values);
 extern
GType g_type_module_register_flags (GTypeModule *module,
                                       const gchar *name,
                                       const GFlagsValue *const_static_values);
# 37 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gtypeplugin.h" 1
# 40 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef struct _GTypePluginClass GTypePluginClass;







typedef void (*GTypePluginUse) (GTypePlugin *plugin);






typedef void (*GTypePluginUnuse) (GTypePlugin *plugin);
# 65 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef void (*GTypePluginCompleteTypeInfo) (GTypePlugin *plugin,
         GType g_type,
         GTypeInfo *info,
         GTypeValueTable *value_table);
# 79 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef void (*GTypePluginCompleteInterfaceInfo) (GTypePlugin *plugin,
         GType instance_type,
         GType interface_type,
         GInterfaceInfo *info);
# 97 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
struct _GTypePluginClass
{

  GTypeInterface base_iface;


  GTypePluginUse use_plugin;
  GTypePluginUnuse unuse_plugin;
  GTypePluginCompleteTypeInfo complete_type_info;
  GTypePluginCompleteInterfaceInfo complete_interface_info;
};



 extern
GType g_type_plugin_get_type (void) __attribute__ ((__const__));
 extern
void g_type_plugin_use (GTypePlugin *plugin);
 extern
void g_type_plugin_unuse (GTypePlugin *plugin);
 extern
void g_type_plugin_complete_type_info (GTypePlugin *plugin,
       GType g_type,
       GTypeInfo *info,
       GTypeValueTable *value_table);
 extern
void g_type_plugin_complete_interface_info (GTypePlugin *plugin,
       GType instance_type,
       GType interface_type,
       GInterfaceInfo *info);
# 38 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvaluearray.h" 1
# 43 "/usr/include/glib-2.0/gobject/gvaluearray.h"
typedef struct _GValueArray GValueArray;
struct _GValueArray
{
  guint n_values;
  GValue *values;


  guint n_prealloced;
};


__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GType g_value_array_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValue* g_value_array_get_nth (GValueArray *value_array,
           guint index_);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_new (guint n_prealloced);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
void g_value_array_free (GValueArray *value_array);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_copy (const GValueArray *value_array);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_prepend (GValueArray *value_array,
           const GValue *value);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_append (GValueArray *value_array,
           const GValue *value);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_insert (GValueArray *value_array,
           guint index_,
           const GValue *value);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_remove (GValueArray *value_array,
           guint index_);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_sort (GValueArray *value_array,
           GCompareFunc compare_func);

__attribute__((__deprecated__("Use '" "GArray" "' instead"))) extern
GValueArray* g_value_array_sort_with_data (GValueArray *value_array,
           GCompareDataFunc compare_func,
           gpointer user_data);
# 39 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/gvaluetypes.h" 1
# 193 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
__attribute__((__deprecated__("Use '" "g_value_set_schar" "' instead"))) extern
void g_value_set_char (GValue *value,
                                                 gchar v_char);
__attribute__((__deprecated__("Use '" "g_value_get_schar" "' instead"))) extern
gchar g_value_get_char (const GValue *value);
 extern
void g_value_set_schar (GValue *value,
       gint8 v_char);
 extern
gint8 g_value_get_schar (const GValue *value);
 extern
void g_value_set_uchar (GValue *value,
       guchar v_uchar);
 extern
guchar g_value_get_uchar (const GValue *value);
 extern
void g_value_set_boolean (GValue *value,
       gboolean v_boolean);
 extern
gboolean g_value_get_boolean (const GValue *value);
 extern
void g_value_set_int (GValue *value,
       gint v_int);
 extern
gint g_value_get_int (const GValue *value);
 extern
void g_value_set_uint (GValue *value,
       guint v_uint);
 extern
guint g_value_get_uint (const GValue *value);
 extern
void g_value_set_long (GValue *value,
       glong v_long);
 extern
glong g_value_get_long (const GValue *value);
 extern
void g_value_set_ulong (GValue *value,
       gulong v_ulong);
 extern
gulong g_value_get_ulong (const GValue *value);
 extern
void g_value_set_int64 (GValue *value,
       gint64 v_int64);
 extern
gint64 g_value_get_int64 (const GValue *value);
 extern
void g_value_set_uint64 (GValue *value,
       guint64 v_uint64);
 extern
guint64 g_value_get_uint64 (const GValue *value);
 extern
void g_value_set_float (GValue *value,
       gfloat v_float);
 extern
gfloat g_value_get_float (const GValue *value);
 extern
void g_value_set_double (GValue *value,
       gdouble v_double);
 extern
gdouble g_value_get_double (const GValue *value);
 extern
void g_value_set_string (GValue *value,
       const gchar *v_string);
 extern
void g_value_set_static_string (GValue *value,
       const gchar *v_string);
 extern
void g_value_set_interned_string (GValue *value,
         const gchar *v_string);
 extern
const gchar * g_value_get_string (const GValue *value);
 extern
gchar* g_value_dup_string (const GValue *value);
 extern
gchar* g_value_steal_string (GValue *value);
 extern
void g_value_set_pointer (GValue *value,
       gpointer v_pointer);
 extern
gpointer g_value_get_pointer (const GValue *value);
 extern
GType g_gtype_get_type (void);
 extern
void g_value_set_gtype (GValue *value,
       GType v_gtype);
 extern
GType g_value_get_gtype (const GValue *value);
 extern
void g_value_set_variant (GValue *value,
       GVariant *variant);
 extern
void g_value_take_variant (GValue *value,
       GVariant *variant);
 extern
GVariant* g_value_get_variant (const GValue *value);
 extern
GVariant* g_value_dup_variant (const GValue *value);



 extern
GType g_pointer_type_register_static (const gchar *name);


 extern
gchar* g_strdup_value_contents (const GValue *value);


 extern
void g_value_take_string (GValue *value,
       gchar *v_string);
__attribute__((__deprecated__("Use '" "g_value_take_string" "' instead"))) extern
void g_value_set_string_take_ownership (GValue *value,
                                                 gchar *v_string);
# 315 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
typedef gchar* gchararray;
# 41 "/usr/include/glib-2.0/glib-object.h" 2

# 1 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h" 1
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
typedef GClosure *GClosure_autoptr; typedef GList *GClosure_listautoptr; typedef GSList *GClosure_slistautoptr; typedef GQueue *GClosure_queueautoptr;
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic push
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GClosure (GClosure *_ptr) { if (_ptr) (g_closure_unref) ((GClosure *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GClosure (GClosure **_ptr) { glib_autoptr_clear_GClosure (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GClosure (void *_ptr) { (g_closure_unref) ((GClosure *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GClosure (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GClosure); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GClosure (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GClosure); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GClosure (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GClosure); }
# 28 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic pop
typedef GEnumClass *GEnumClass_autoptr; typedef GList *GEnumClass_listautoptr; typedef GSList *GEnumClass_slistautoptr; typedef GQueue *GEnumClass_queueautoptr;
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic push
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEnumClass (GEnumClass *_ptr) { if (_ptr) (g_type_class_unref) ((GEnumClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEnumClass (GEnumClass **_ptr) { glib_autoptr_clear_GEnumClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GEnumClass (void *_ptr) { (g_type_class_unref) ((GEnumClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEnumClass (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GEnumClass); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEnumClass (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GEnumClass); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEnumClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GEnumClass); }
# 29 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic pop
typedef GFlagsClass *GFlagsClass_autoptr; typedef GList *GFlagsClass_listautoptr; typedef GSList *GFlagsClass_slistautoptr; typedef GQueue *GFlagsClass_queueautoptr;
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic push
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFlagsClass (GFlagsClass *_ptr) { if (_ptr) (g_type_class_unref) ((GFlagsClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFlagsClass (GFlagsClass **_ptr) { glib_autoptr_clear_GFlagsClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFlagsClass (void *_ptr) { (g_type_class_unref) ((GFlagsClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFlagsClass (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFlagsClass); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFlagsClass (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFlagsClass); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFlagsClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFlagsClass); }
# 30 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic pop
typedef GObject *GObject_autoptr; typedef GList *GObject_listautoptr; typedef GSList *GObject_slistautoptr; typedef GQueue *GObject_queueautoptr;
# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic push
# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GObject (GObject *_ptr) { if (_ptr) (g_object_unref) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GObject (GObject **_ptr) { glib_autoptr_clear_GObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GObject (void *_ptr) { (g_object_unref) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GObject (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GObject (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GObject); }
# 31 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic pop
typedef GInitiallyUnowned *GInitiallyUnowned_autoptr; typedef GList *GInitiallyUnowned_listautoptr; typedef GSList *GInitiallyUnowned_slistautoptr; typedef GQueue *GInitiallyUnowned_queueautoptr;
# 32 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic push
# 32 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 32 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInitiallyUnowned (GInitiallyUnowned *_ptr) { if (_ptr) (g_object_unref) ((GInitiallyUnowned *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInitiallyUnowned (GInitiallyUnowned **_ptr) { glib_autoptr_clear_GInitiallyUnowned (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GInitiallyUnowned (void *_ptr) { (g_object_unref) ((GInitiallyUnowned *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInitiallyUnowned (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GInitiallyUnowned); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInitiallyUnowned (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GInitiallyUnowned); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInitiallyUnowned (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GInitiallyUnowned); }
# 32 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic pop
typedef GParamSpec *GParamSpec_autoptr; typedef GList *GParamSpec_listautoptr; typedef GSList *GParamSpec_slistautoptr; typedef GQueue *GParamSpec_queueautoptr;
# 33 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic push
# 33 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GParamSpec (GParamSpec *_ptr) { if (_ptr) (g_param_spec_unref) ((GParamSpec *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GParamSpec (GParamSpec **_ptr) { glib_autoptr_clear_GParamSpec (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GParamSpec (void *_ptr) { (g_param_spec_unref) ((GParamSpec *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GParamSpec (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GParamSpec); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GParamSpec (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GParamSpec); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GParamSpec (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GParamSpec); }
# 33 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic pop
typedef GTypeClass *GTypeClass_autoptr; typedef GList *GTypeClass_listautoptr; typedef GSList *GTypeClass_slistautoptr; typedef GQueue *GTypeClass_queueautoptr;
# 34 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic push
# 34 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTypeClass (GTypeClass *_ptr) { if (_ptr) (g_type_class_unref) ((GTypeClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTypeClass (GTypeClass **_ptr) { glib_autoptr_clear_GTypeClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTypeClass (void *_ptr) { (g_type_class_unref) ((GTypeClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTypeClass (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTypeClass); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTypeClass (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTypeClass); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTypeClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTypeClass); }
# 34 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic pop
#pragma clang diagnostic push
# 35 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 35 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_auto_cleanup_GValue (GValue *_ptr) { (g_value_unset) (_ptr); }
# 35 "/usr/include/glib-2.0/gobject/gobject-autocleanups.h"
#pragma clang diagnostic pop
# 43 "/usr/include/glib-2.0/glib-object.h" 2
# 31 "/usr/include/glib-2.0/gio/gioenums.h" 2
# 1 "/usr/include/glib-2.0/gio/gio-visibility.h" 1
# 32 "/usr/include/glib-2.0/gio/gioenums.h" 2
# 45 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_APP_INFO_CREATE_NONE = 0,
  G_APP_INFO_CREATE_NEEDS_TERMINAL = (1 << 0),
  G_APP_INFO_CREATE_SUPPORTS_URIS = (1 << 1),
  G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = (1 << 2)
} GAppInfoCreateFlags;
# 62 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_CONVERTER_NO_FLAGS = 0,
  G_CONVERTER_INPUT_AT_END = (1 << 0),
  G_CONVERTER_FLUSH = (1 << 1)
} GConverterFlags;
# 79 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_CONVERTER_ERROR = 0,
  G_CONVERTER_CONVERTED = 1,
  G_CONVERTER_FINISHED = 2,
  G_CONVERTER_FLUSHED = 3
} GConverterResult;
# 97 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
} GDataStreamByteOrder;
# 113 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DATA_STREAM_NEWLINE_TYPE_LF,
  G_DATA_STREAM_NEWLINE_TYPE_CR,
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
  G_DATA_STREAM_NEWLINE_TYPE_ANY
} GDataStreamNewlineType;
# 136 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
  G_FILE_ATTRIBUTE_TYPE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
  G_FILE_ATTRIBUTE_TYPE_UINT32,
  G_FILE_ATTRIBUTE_TYPE_INT32,
  G_FILE_ATTRIBUTE_TYPE_UINT64,
  G_FILE_ATTRIBUTE_TYPE_INT64,
  G_FILE_ATTRIBUTE_TYPE_OBJECT,
  G_FILE_ATTRIBUTE_TYPE_STRINGV
} GFileAttributeType;
# 158 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_INFO_NONE = 0,
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = (1 << 0),
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = (1 << 1)
} GFileAttributeInfoFlags;
# 173 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
  G_FILE_ATTRIBUTE_STATUS_SET,
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
} GFileAttributeStatus;
# 187 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_QUERY_INFO_NONE = 0,
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (1 << 0)
} GFileQueryInfoFlags;
# 211 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_CREATE_NONE = 0,
  G_FILE_CREATE_PRIVATE = (1 << 0),
  G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1)
} GFileCreateFlags;
# 237 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_MEASURE_NONE = 0,
  G_FILE_MEASURE_REPORT_ANY_ERROR = (1 << 1),
  G_FILE_MEASURE_APPARENT_SIZE = (1 << 2),
  G_FILE_MEASURE_NO_XDEV = (1 << 3)
} GFileMeasureFlags;







typedef enum {
  G_MOUNT_MOUNT_NONE = 0
} GMountMountFlags;
# 263 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MOUNT_UNMOUNT_NONE = 0,
  G_MOUNT_UNMOUNT_FORCE = (1 << 0)
} GMountUnmountFlags;
# 276 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DRIVE_START_NONE = 0
} GDriveStartFlags;
# 300 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DRIVE_START_STOP_TYPE_UNKNOWN,
  G_DRIVE_START_STOP_TYPE_SHUTDOWN,
  G_DRIVE_START_STOP_TYPE_NETWORK,
  G_DRIVE_START_STOP_TYPE_MULTIDISK,
  G_DRIVE_START_STOP_TYPE_PASSWORD
} GDriveStartStopType;
# 322 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_COPY_NONE = 0,
  G_FILE_COPY_OVERWRITE = (1 << 0),
  G_FILE_COPY_BACKUP = (1 << 1),
  G_FILE_COPY_NOFOLLOW_SYMLINKS = (1 << 2),
  G_FILE_COPY_ALL_METADATA = (1 << 3),
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (1 << 4),
  G_FILE_COPY_TARGET_DEFAULT_PERMS = (1 << 5),
  G_FILE_COPY_TARGET_DEFAULT_MODIFIED_TIME = (1 << 6),
} GFileCopyFlags;
# 353 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_MONITOR_NONE = 0,
  G_FILE_MONITOR_WATCH_MOUNTS = (1 << 0),
  G_FILE_MONITOR_SEND_MOVED = (1 << 1),
  G_FILE_MONITOR_WATCH_HARD_LINKS = (1 << 2),
  G_FILE_MONITOR_WATCH_MOVES = (1 << 3)
} GFileMonitorFlags;
# 385 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_TYPE_UNKNOWN = 0,
  G_FILE_TYPE_REGULAR,
  G_FILE_TYPE_DIRECTORY,
  G_FILE_TYPE_SYMBOLIC_LINK,
  G_FILE_TYPE_SPECIAL,
  G_FILE_TYPE_SHORTCUT,
  G_FILE_TYPE_MOUNTABLE
} GFileType;
# 406 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
  G_FILESYSTEM_PREVIEW_TYPE_NEVER
} GFilesystemPreviewType;
# 436 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_FILE_MONITOR_EVENT_CHANGED,
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
  G_FILE_MONITOR_EVENT_DELETED,
  G_FILE_MONITOR_EVENT_CREATED,
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
  G_FILE_MONITOR_EVENT_UNMOUNTED,
  G_FILE_MONITOR_EVENT_MOVED,
  G_FILE_MONITOR_EVENT_RENAMED,
  G_FILE_MONITOR_EVENT_MOVED_IN,
  G_FILE_MONITOR_EVENT_MOVED_OUT
} GFileMonitorEvent;
# 541 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_IO_ERROR_FAILED,
  G_IO_ERROR_NOT_FOUND,
  G_IO_ERROR_EXISTS,
  G_IO_ERROR_IS_DIRECTORY,
  G_IO_ERROR_NOT_DIRECTORY,
  G_IO_ERROR_NOT_EMPTY,
  G_IO_ERROR_NOT_REGULAR_FILE,
  G_IO_ERROR_NOT_SYMBOLIC_LINK,
  G_IO_ERROR_NOT_MOUNTABLE_FILE,
  G_IO_ERROR_FILENAME_TOO_LONG,
  G_IO_ERROR_INVALID_FILENAME,
  G_IO_ERROR_TOO_MANY_LINKS,
  G_IO_ERROR_NO_SPACE,
  G_IO_ERROR_INVALID_ARGUMENT,
  G_IO_ERROR_PERMISSION_DENIED,
  G_IO_ERROR_NOT_SUPPORTED,
  G_IO_ERROR_NOT_MOUNTED,
  G_IO_ERROR_ALREADY_MOUNTED,
  G_IO_ERROR_CLOSED,
  G_IO_ERROR_CANCELLED,
  G_IO_ERROR_PENDING,
  G_IO_ERROR_READ_ONLY,
  G_IO_ERROR_CANT_CREATE_BACKUP,
  G_IO_ERROR_WRONG_ETAG,
  G_IO_ERROR_TIMED_OUT,
  G_IO_ERROR_WOULD_RECURSE,
  G_IO_ERROR_BUSY,
  G_IO_ERROR_WOULD_BLOCK,
  G_IO_ERROR_HOST_NOT_FOUND,
  G_IO_ERROR_WOULD_MERGE,
  G_IO_ERROR_FAILED_HANDLED,
  G_IO_ERROR_TOO_MANY_OPEN_FILES,
  G_IO_ERROR_NOT_INITIALIZED,
  G_IO_ERROR_ADDRESS_IN_USE,
  G_IO_ERROR_PARTIAL_INPUT,
  G_IO_ERROR_INVALID_DATA,
  G_IO_ERROR_DBUS_ERROR,
  G_IO_ERROR_HOST_UNREACHABLE,
  G_IO_ERROR_NETWORK_UNREACHABLE,
  G_IO_ERROR_CONNECTION_REFUSED,
  G_IO_ERROR_PROXY_FAILED,
  G_IO_ERROR_PROXY_AUTH_FAILED,
  G_IO_ERROR_PROXY_NEED_AUTH,
  G_IO_ERROR_PROXY_NOT_ALLOWED,
  G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_CONNECTION_CLOSED = G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_NOT_CONNECTED,
  G_IO_ERROR_MESSAGE_TOO_LARGE,
  G_IO_ERROR_NO_SUCH_DEVICE ,
  G_IO_ERROR_DESTINATION_UNSET ,
} GIOErrorEnum;
# 608 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_ASK_PASSWORD_NEED_PASSWORD = (1 << 0),
  G_ASK_PASSWORD_NEED_USERNAME = (1 << 1),
  G_ASK_PASSWORD_NEED_DOMAIN = (1 << 2),
  G_ASK_PASSWORD_SAVING_SUPPORTED = (1 << 3),
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = (1 << 4),
  G_ASK_PASSWORD_TCRYPT = (1 << 5),
} GAskPasswordFlags;
# 629 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_PASSWORD_SAVE_NEVER,
  G_PASSWORD_SAVE_FOR_SESSION,
  G_PASSWORD_SAVE_PERMANENTLY
} GPasswordSave;
# 648 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MOUNT_OPERATION_HANDLED,
  G_MOUNT_OPERATION_ABORTED,
  G_MOUNT_OPERATION_UNHANDLED
} GMountOperationResult;
# 665 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_OUTPUT_STREAM_SPLICE_NONE = 0,
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = (1 << 0),
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = (1 << 1)
} GOutputStreamSpliceFlags;
# 686 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_IO_STREAM_SPLICE_NONE = 0,
  G_IO_STREAM_SPLICE_CLOSE_STREAM1 = (1 << 0),
  G_IO_STREAM_SPLICE_CLOSE_STREAM2 = (1 << 1),
  G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = (1 << 2)
} GIOStreamSpliceFlags;
# 705 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_EMBLEM_ORIGIN_UNKNOWN,
  G_EMBLEM_ORIGIN_DEVICE,
  G_EMBLEM_ORIGIN_LIVEMETADATA,
  G_EMBLEM_ORIGIN_TAG
} GEmblemOrigin;
# 725 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOLVER_ERROR_NOT_FOUND,
  G_RESOLVER_ERROR_TEMPORARY_FAILURE,
  G_RESOLVER_ERROR_INTERNAL
} GResolverError;
# 772 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOLVER_RECORD_SRV = 1,
  G_RESOLVER_RECORD_MX,
  G_RESOLVER_RECORD_TXT,
  G_RESOLVER_RECORD_SOA,
  G_RESOLVER_RECORD_NS
} GResolverRecordType;
# 790 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOURCE_ERROR_NOT_FOUND,
  G_RESOURCE_ERROR_INTERNAL
} GResourceError;
# 805 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOURCE_FLAGS_NONE = 0,
  G_RESOURCE_FLAGS_COMPRESSED = (1<<0)
} GResourceFlags;
# 818 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_RESOURCE_LOOKUP_FLAGS_NONE = 0
} GResourceLookupFlags;
# 835 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SOCKET_FAMILY_INVALID,
  G_SOCKET_FAMILY_UNIX = 1,
  G_SOCKET_FAMILY_IPV4 = 2,
  G_SOCKET_FAMILY_IPV6 = 10
} GSocketFamily;
# 856 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_SOCKET_TYPE_INVALID,
  G_SOCKET_TYPE_STREAM,
  G_SOCKET_TYPE_DATAGRAM,
  G_SOCKET_TYPE_SEQPACKET
} GSocketType;
# 881 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_SOCKET_MSG_NONE,
  G_SOCKET_MSG_OOB = 1,
  G_SOCKET_MSG_PEEK = 2,
  G_SOCKET_MSG_DONTROUTE = 4
} GSocketMsgFlags;
# 907 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SOCKET_PROTOCOL_UNKNOWN = -1,
  G_SOCKET_PROTOCOL_DEFAULT = 0,
  G_SOCKET_PROTOCOL_TCP = 6,
  G_SOCKET_PROTOCOL_UDP = 17,
  G_SOCKET_PROTOCOL_SCTP = 132
} GSocketProtocol;
# 926 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_ZLIB_COMPRESSOR_FORMAT_ZLIB,
  G_ZLIB_COMPRESSOR_FORMAT_GZIP,
  G_ZLIB_COMPRESSOR_FORMAT_RAW
} GZlibCompressorFormat;
# 957 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_UNIX_SOCKET_ADDRESS_INVALID,
  G_UNIX_SOCKET_ADDRESS_ANONYMOUS,
  G_UNIX_SOCKET_ADDRESS_PATH,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
} GUnixSocketAddressType;
# 976 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_BUS_TYPE_STARTER = -1,
  G_BUS_TYPE_NONE = 0,
  G_BUS_TYPE_SYSTEM = 1,
  G_BUS_TYPE_SESSION = 2
} GBusType;
# 997 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_BUS_NAME_OWNER_FLAGS_NONE = 0,
  G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = (1<<0),
  G_BUS_NAME_OWNER_FLAGS_REPLACE = (1<<1),
  G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = (1<<2)
} GBusNameOwnerFlags;
# 1018 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
  G_BUS_NAME_WATCHER_FLAGS_AUTO_START = (1<<0)
} GBusNameWatcherFlags;
# 1045 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_PROXY_FLAGS_NONE = 0,
  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = (1<<0),
  G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = (1<<1),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = (1<<2),
  G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = (1<<3),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = (1<<4),
  G_DBUS_PROXY_FLAGS_NO_MATCH_RULE = (1<<5)
} GDBusProxyFlags;
# 1163 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{

  G_DBUS_ERROR_FAILED,
  G_DBUS_ERROR_NO_MEMORY,
  G_DBUS_ERROR_SERVICE_UNKNOWN,
  G_DBUS_ERROR_NAME_HAS_NO_OWNER,
  G_DBUS_ERROR_NO_REPLY,
  G_DBUS_ERROR_IO_ERROR,
  G_DBUS_ERROR_BAD_ADDRESS,
  G_DBUS_ERROR_NOT_SUPPORTED,
  G_DBUS_ERROR_LIMITS_EXCEEDED,
  G_DBUS_ERROR_ACCESS_DENIED,
  G_DBUS_ERROR_AUTH_FAILED,
  G_DBUS_ERROR_NO_SERVER,
  G_DBUS_ERROR_TIMEOUT,
  G_DBUS_ERROR_NO_NETWORK,
  G_DBUS_ERROR_ADDRESS_IN_USE,
  G_DBUS_ERROR_DISCONNECTED,
  G_DBUS_ERROR_INVALID_ARGS,
  G_DBUS_ERROR_FILE_NOT_FOUND,
  G_DBUS_ERROR_FILE_EXISTS,
  G_DBUS_ERROR_UNKNOWN_METHOD,
  G_DBUS_ERROR_TIMED_OUT,
  G_DBUS_ERROR_MATCH_RULE_NOT_FOUND,
  G_DBUS_ERROR_MATCH_RULE_INVALID,
  G_DBUS_ERROR_SPAWN_EXEC_FAILED,
  G_DBUS_ERROR_SPAWN_FORK_FAILED,
  G_DBUS_ERROR_SPAWN_CHILD_EXITED,
  G_DBUS_ERROR_SPAWN_CHILD_SIGNALED,
  G_DBUS_ERROR_SPAWN_FAILED,
  G_DBUS_ERROR_SPAWN_SETUP_FAILED,
  G_DBUS_ERROR_SPAWN_CONFIG_INVALID,
  G_DBUS_ERROR_SPAWN_SERVICE_INVALID,
  G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND,
  G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID,
  G_DBUS_ERROR_SPAWN_FILE_INVALID,
  G_DBUS_ERROR_SPAWN_NO_MEMORY,
  G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN,
  G_DBUS_ERROR_INVALID_SIGNATURE,
  G_DBUS_ERROR_INVALID_FILE_CONTENT,
  G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN,
  G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN,
  G_DBUS_ERROR_OBJECT_PATH_IN_USE,
  G_DBUS_ERROR_UNKNOWN_OBJECT,
  G_DBUS_ERROR_UNKNOWN_INTERFACE,
  G_DBUS_ERROR_UNKNOWN_PROPERTY,
  G_DBUS_ERROR_PROPERTY_READ_ONLY
} GDBusError;
# 1239 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_CONNECTION_FLAGS_NONE = 0,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = (1<<0),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = (1<<1),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<2),
  G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = (1<<3),
  G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = (1<<4),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = (1<<5),
  G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE = (1<<6)
} GDBusConnectionFlags;
# 1260 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_CAPABILITY_FLAGS_NONE = 0,
  G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = (1<<0)
} GDBusCapabilityFlags;
# 1278 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_CALL_FLAGS_NONE = 0,
  G_DBUS_CALL_FLAGS_NO_AUTO_START = (1<<0),
  G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<1)
} GDBusCallFlags;
# 1297 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_MESSAGE_TYPE_INVALID,
  G_DBUS_MESSAGE_TYPE_METHOD_CALL,
  G_DBUS_MESSAGE_TYPE_METHOD_RETURN,
  G_DBUS_MESSAGE_TYPE_ERROR,
  G_DBUS_MESSAGE_TYPE_SIGNAL
} GDBusMessageType;
# 1319 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = (1<<0),
  G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = (1<<1),
  G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<2)
} GDBusMessageFlags;
# 1343 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_DBUS_MESSAGE_HEADER_FIELD_INVALID,
  G_DBUS_MESSAGE_HEADER_FIELD_PATH,
  G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE,
  G_DBUS_MESSAGE_HEADER_FIELD_MEMBER,
  G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME,
  G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL,
  G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION,
  G_DBUS_MESSAGE_HEADER_FIELD_SENDER,
  G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE,
  G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS
} GDBusMessageHeaderField;
# 1366 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
  G_DBUS_PROPERTY_INFO_FLAGS_READABLE = (1<<0),
  G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = (1<<1)
} GDBusPropertyInfoFlags;
# 1384 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_SUBTREE_FLAGS_NONE = 0,
  G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = (1<<0)
} GDBusSubtreeFlags;
# 1405 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_SERVER_FLAGS_NONE = 0,
  G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = (1<<0),
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<1),
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER = (1<<2)
} GDBusServerFlags;
# 1429 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_SIGNAL_FLAGS_NONE = 0,
  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = (1<<0),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = (1<<1),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = (1<<2)
} GDBusSignalFlags;
# 1448 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = (1<<0)
} GDBusSendMessageFlags;
# 1470 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_CREDENTIALS_TYPE_INVALID,
  G_CREDENTIALS_TYPE_LINUX_UCRED,
  G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED,
  G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED,
  G_CREDENTIALS_TYPE_SOLARIS_UCRED,
  G_CREDENTIALS_TYPE_NETBSD_UNPCBID,
  G_CREDENTIALS_TYPE_APPLE_XUCRED,
  G_CREDENTIALS_TYPE_WIN32_PID,
} GCredentialsType;
# 1491 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = 'B',
  G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 'l'
} GDBusMessageByteOrder;
# 1543 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_APPLICATION_FLAGS_NONE __attribute__((__deprecated__("Use '" "G_APPLICATION_DEFAULT_FLAGS" "' instead"))),
  G_APPLICATION_DEFAULT_FLAGS = 0,
  G_APPLICATION_IS_SERVICE = (1 << 0),
  G_APPLICATION_IS_LAUNCHER = (1 << 1),

  G_APPLICATION_HANDLES_OPEN = (1 << 2),
  G_APPLICATION_HANDLES_COMMAND_LINE = (1 << 3),
  G_APPLICATION_SEND_ENVIRONMENT = (1 << 4),

  G_APPLICATION_NON_UNIQUE = (1 << 5),

  G_APPLICATION_CAN_OVERRIDE_APP_ID = (1 << 6),
  G_APPLICATION_ALLOW_REPLACEMENT = (1 << 7),
  G_APPLICATION_REPLACE = (1 << 8)
} GApplicationFlags;
# 1588 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_ERROR_UNAVAILABLE,
  G_TLS_ERROR_MISC,
  G_TLS_ERROR_BAD_CERTIFICATE,
  G_TLS_ERROR_NOT_TLS,
  G_TLS_ERROR_HANDSHAKE,
  G_TLS_ERROR_CERTIFICATE_REQUIRED,
  G_TLS_ERROR_EOF,
  G_TLS_ERROR_INAPPROPRIATE_FALLBACK,
  G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD
} GTlsError;
# 1633 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_CERTIFICATE_NO_FLAGS = 0,
  G_TLS_CERTIFICATE_UNKNOWN_CA = (1 << 0),
  G_TLS_CERTIFICATE_BAD_IDENTITY = (1 << 1),
  G_TLS_CERTIFICATE_NOT_ACTIVATED = (1 << 2),
  G_TLS_CERTIFICATE_EXPIRED = (1 << 3),
  G_TLS_CERTIFICATE_REVOKED = (1 << 4),
  G_TLS_CERTIFICATE_INSECURE = (1 << 5),
  G_TLS_CERTIFICATE_GENERIC_ERROR = (1 << 6),

  G_TLS_CERTIFICATE_VALIDATE_ALL = 0x007f
} GTlsCertificateFlags;
# 1656 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_AUTHENTICATION_NONE,
  G_TLS_AUTHENTICATION_REQUESTED,
  G_TLS_AUTHENTICATION_REQUIRED
} GTlsAuthenticationMode;
# 1682 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_CHANNEL_BINDING_TLS_UNIQUE,
  G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT,
  G_TLS_CHANNEL_BINDING_TLS_EXPORTER ,
} GTlsChannelBindingType;
# 1713 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED,
  G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE,
  G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE,
  G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED,
  G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR
} GTlsChannelBindingError;
# 1736 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_REHANDSHAKE_NEVER,
  G_TLS_REHANDSHAKE_SAFELY,
  G_TLS_REHANDSHAKE_UNSAFELY
} GTlsRehandshakeMode __attribute__((__deprecated__));
# 1762 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum _GTlsPasswordFlags
{
  G_TLS_PASSWORD_NONE = 0,
  G_TLS_PASSWORD_RETRY = 1 << 1,
  G_TLS_PASSWORD_MANY_TRIES = 1 << 2,
  G_TLS_PASSWORD_FINAL_TRY = 1 << 3,
  G_TLS_PASSWORD_PKCS11_USER = 1 << 4,
  G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER = 1 << 5,
  G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC = 1 << 6
} GTlsPasswordFlags;
# 1787 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_INTERACTION_UNHANDLED,
  G_TLS_INTERACTION_HANDLED,
  G_TLS_INTERACTION_FAILED
} GTlsInteractionResult;
# 1805 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
  G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = (1<<0)
} GDBusInterfaceSkeletonFlags;
# 1823 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum
{
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = (1<<0)
} GDBusObjectManagerClientFlags;
# 1837 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_DATABASE_VERIFY_NONE = 0
} GTlsDatabaseVerifyFlags;
# 1853 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_DATABASE_LOOKUP_NONE = 0,
  G_TLS_DATABASE_LOOKUP_KEYPAIR = 1
} GTlsDatabaseLookupFlags;
# 1868 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_CERTIFICATE_REQUEST_NONE = 0
} GTlsCertificateRequestFlags;
# 1895 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TLS_PROTOCOL_VERSION_UNKNOWN = 0,
  G_TLS_PROTOCOL_VERSION_SSL_3_0 = 1,
  G_TLS_PROTOCOL_VERSION_TLS_1_0 = 2,
  G_TLS_PROTOCOL_VERSION_TLS_1_1 = 3,
  G_TLS_PROTOCOL_VERSION_TLS_1_2 = 4,
  G_TLS_PROTOCOL_VERSION_TLS_1_3 = 5,
  G_TLS_PROTOCOL_VERSION_DTLS_1_0 = 201,
  G_TLS_PROTOCOL_VERSION_DTLS_1_2 = 202,
} GTlsProtocolVersion;
# 1917 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_IO_MODULE_SCOPE_NONE,
  G_IO_MODULE_SCOPE_BLOCK_DUPLICATES
} GIOModuleScopeFlags;
# 1948 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SOCKET_CLIENT_RESOLVING,
  G_SOCKET_CLIENT_RESOLVED,
  G_SOCKET_CLIENT_CONNECTING,
  G_SOCKET_CLIENT_CONNECTED,
  G_SOCKET_CLIENT_PROXY_NEGOTIATING,
  G_SOCKET_CLIENT_PROXY_NEGOTIATED,
  G_SOCKET_CLIENT_TLS_HANDSHAKING,
  G_SOCKET_CLIENT_TLS_HANDSHAKED,
  G_SOCKET_CLIENT_COMPLETE
} GSocketClientEvent;
# 1976 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SOCKET_LISTENER_BINDING,
  G_SOCKET_LISTENER_BOUND,
  G_SOCKET_LISTENER_LISTENING,
  G_SOCKET_LISTENER_LISTENED
} GSocketListenerEvent;
# 1991 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_TEST_DBUS_NONE = 0
} GTestDBusFlags;
# 2036 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_SUBPROCESS_FLAGS_NONE = 0,
  G_SUBPROCESS_FLAGS_STDIN_PIPE = (1u << 0),
  G_SUBPROCESS_FLAGS_STDIN_INHERIT = (1u << 1),
  G_SUBPROCESS_FLAGS_STDOUT_PIPE = (1u << 2),
  G_SUBPROCESS_FLAGS_STDOUT_SILENCE = (1u << 3),
  G_SUBPROCESS_FLAGS_STDERR_PIPE = (1u << 4),
  G_SUBPROCESS_FLAGS_STDERR_SILENCE = (1u << 5),
  G_SUBPROCESS_FLAGS_STDERR_MERGE = (1u << 6),
  G_SUBPROCESS_FLAGS_INHERIT_FDS = (1u << 7),
  G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP = (1u << 8)
} GSubprocessFlags;
# 2068 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_NOTIFICATION_PRIORITY_NORMAL,
  G_NOTIFICATION_PRIORITY_LOW,
  G_NOTIFICATION_PRIORITY_HIGH,
  G_NOTIFICATION_PRIORITY_URGENT
} GNotificationPriority;
# 2092 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_NETWORK_CONNECTIVITY_LOCAL = 1,
  G_NETWORK_CONNECTIVITY_LIMITED = 2,
  G_NETWORK_CONNECTIVITY_PORTAL = 3,
  G_NETWORK_CONNECTIVITY_FULL = 4
} GNetworkConnectivity;
# 2117 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_POLLABLE_RETURN_FAILED = 0,
  G_POLLABLE_RETURN_OK = 1,
  G_POLLABLE_RETURN_WOULD_BLOCK = -G_IO_ERROR_WOULD_BLOCK
} GPollableReturn;
# 2146 "/usr/include/glib-2.0/gio/gioenums.h"
typedef enum {
  G_MEMORY_MONITOR_WARNING_LEVEL_LOW = 50,
  G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM = 100,
  G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL = 255
} GMemoryMonitorWarningLevel;
# 31 "/usr/include/glib-2.0/gio/giotypes.h" 2



typedef struct _GAppLaunchContext GAppLaunchContext;
typedef struct _GAppInfo GAppInfo;
typedef struct _GAsyncResult GAsyncResult;
typedef struct _GAsyncInitable GAsyncInitable;
typedef struct _GBufferedInputStream GBufferedInputStream;
typedef struct _GBufferedOutputStream GBufferedOutputStream;
typedef struct _GCancellable GCancellable;
typedef struct _GCharsetConverter GCharsetConverter;
typedef struct _GConverter GConverter;
typedef struct _GConverterInputStream GConverterInputStream;
typedef struct _GConverterOutputStream GConverterOutputStream;
typedef struct _GDatagramBased GDatagramBased;
typedef struct _GDataInputStream GDataInputStream;
typedef struct _GSimplePermission GSimplePermission;
typedef struct _GZlibCompressor GZlibCompressor;
typedef struct _GZlibDecompressor GZlibDecompressor;

typedef struct _GSimpleActionGroup GSimpleActionGroup;
typedef struct _GRemoteActionGroup GRemoteActionGroup;
typedef struct _GDBusActionGroup GDBusActionGroup;
typedef struct _GActionMap GActionMap;
typedef struct _GActionGroup GActionGroup;
typedef struct _GPropertyAction GPropertyAction;
typedef struct _GSimpleAction GSimpleAction;
typedef struct _GAction GAction;
typedef struct _GApplication GApplication;
typedef struct _GApplicationCommandLine GApplicationCommandLine;
typedef struct _GSettingsBackend GSettingsBackend;
typedef struct _GSettings GSettings;
typedef struct _GPermission GPermission;

typedef struct _GMenuModel GMenuModel;
typedef struct _GNotification GNotification;

typedef struct _GDrive GDrive;
typedef struct _GFileEnumerator GFileEnumerator;
typedef struct _GFileMonitor GFileMonitor;
typedef struct _GFilterInputStream GFilterInputStream;
typedef struct _GFilterOutputStream GFilterOutputStream;

typedef struct _GFile GFile;
typedef struct _GFileInfo GFileInfo;






typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
typedef struct _GFileAttributeInfo GFileAttributeInfo;
typedef struct _GFileAttributeInfoList GFileAttributeInfoList;
typedef struct _GFileInputStream GFileInputStream;
typedef struct _GFileOutputStream GFileOutputStream;
typedef struct _GFileIOStream GFileIOStream;
typedef struct _GFileIcon GFileIcon;
typedef struct _GFilenameCompleter GFilenameCompleter;


typedef struct _GIcon GIcon;
typedef struct _GInetAddress GInetAddress;
typedef struct _GInetAddressMask GInetAddressMask;
typedef struct _GInetSocketAddress GInetSocketAddress;
typedef struct _GNativeSocketAddress GNativeSocketAddress;
typedef struct _GInputStream GInputStream;
typedef struct _GInitable GInitable;
typedef struct _GIOModule GIOModule;
typedef struct _GIOExtensionPoint GIOExtensionPoint;
typedef struct _GIOExtension GIOExtension;
# 111 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GIOSchedulerJob GIOSchedulerJob;
typedef struct _GIOStreamAdapter GIOStreamAdapter;
typedef struct _GLoadableIcon GLoadableIcon;
typedef struct _GBytesIcon GBytesIcon;
typedef struct _GMemoryInputStream GMemoryInputStream;
typedef struct _GMemoryOutputStream GMemoryOutputStream;

typedef struct _GMount GMount;
typedef struct _GMountOperation GMountOperation;
typedef struct _GNetworkAddress GNetworkAddress;
typedef struct _GNetworkMonitor GNetworkMonitor;
typedef struct _GNetworkService GNetworkService;
typedef struct _GOutputStream GOutputStream;
typedef struct _GIOStream GIOStream;
typedef struct _GSimpleIOStream GSimpleIOStream;
typedef struct _GPollableInputStream GPollableInputStream;
typedef struct _GPollableOutputStream GPollableOutputStream;
typedef struct _GResolver GResolver;

typedef struct _GResource GResource;
typedef struct _GSeekable GSeekable;
typedef struct _GSimpleAsyncResult GSimpleAsyncResult;

typedef struct _GSocket GSocket;

typedef struct _GSocketControlMessage GSocketControlMessage;
typedef struct _GSocketClient GSocketClient;
typedef struct _GSocketConnection GSocketConnection;
typedef struct _GSocketListener GSocketListener;
typedef struct _GSocketService GSocketService;
typedef struct _GSocketAddress GSocketAddress;
typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
typedef struct _GSocketConnectable GSocketConnectable;
typedef struct _GSrvTarget GSrvTarget;
typedef struct _GTask GTask;
typedef struct _GTcpConnection GTcpConnection;
typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
typedef struct _GThreadedSocketService GThreadedSocketService;
typedef struct _GDtlsConnection GDtlsConnection;
typedef struct _GDtlsClientConnection GDtlsClientConnection;
typedef struct _GDtlsServerConnection GDtlsServerConnection;
typedef struct _GThemedIcon GThemedIcon;
typedef struct _GTlsCertificate GTlsCertificate;
typedef struct _GTlsClientConnection GTlsClientConnection;
typedef struct _GTlsConnection GTlsConnection;
typedef struct _GTlsDatabase GTlsDatabase;
typedef struct _GTlsFileDatabase GTlsFileDatabase;
typedef struct _GTlsInteraction GTlsInteraction;
typedef struct _GTlsPassword GTlsPassword;
typedef struct _GTlsServerConnection GTlsServerConnection;
typedef struct _GVfs GVfs;

typedef struct _GProxyResolver GProxyResolver;
typedef struct _GProxy GProxy;
typedef struct _GProxyAddress GProxyAddress;
typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;

typedef struct _GVolume GVolume;
typedef struct _GVolumeMonitor GVolumeMonitor;
# 190 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GAsyncReadyCallback) (GObject *source_object,
         GAsyncResult *res,
         gpointer data);
# 204 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GFileProgressCallback) (goffset current_num_bytes,
                                       goffset total_num_bytes,
                                       gpointer data);
# 221 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (* GFileReadMoreCallback) (const char *file_contents,
                                            goffset file_size,
                                            gpointer callback_data);
# 263 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (* GFileMeasureProgressCallback) (gboolean reporting,
                                               guint64 current_size,
                                               guint64 num_dirs,
                                               guint64 num_files,
                                               gpointer data);
# 285 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GIOSchedulerJobFunc) (GIOSchedulerJob *job,
      GCancellable *cancellable,
      gpointer data);
# 298 "/usr/include/glib-2.0/gio/giotypes.h"
typedef void (*GSimpleAsyncThreadFunc) (GSimpleAsyncResult *res,
                                        GObject *object,
                                        GCancellable *cancellable);
# 315 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GSocketSourceFunc) (GSocket *socket,
           GIOCondition condition,
           gpointer data);
# 333 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GDatagramBasedSourceFunc) (GDatagramBased *datagram_based,
                                              GIOCondition condition,
                                              gpointer data);
# 349 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GInputVector GInputVector;

struct _GInputVector {
  gpointer buffer;
  gsize size;
};
# 395 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GInputMessage GInputMessage;

struct _GInputMessage {
  GSocketAddress **address;

  GInputVector *vectors;
  guint num_vectors;

  gsize bytes_received;
  gint flags;

  GSocketControlMessage ***control_messages;
  guint *num_control_messages;
};
# 422 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GOutputVector GOutputVector;

struct _GOutputVector {
  gconstpointer buffer;
  gsize size;
};
# 450 "/usr/include/glib-2.0/gio/giotypes.h"
typedef struct _GOutputMessage GOutputMessage;

struct _GOutputMessage {
  GSocketAddress *address;

  GOutputVector *vectors;
  guint num_vectors;

  guint bytes_sent;

  GSocketControlMessage **control_messages;
  guint num_control_messages;
};

typedef struct _GCredentials GCredentials;
typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
typedef struct _GUnixFDList GUnixFDList;
typedef struct _GDBusMessage GDBusMessage;
typedef struct _GDBusConnection GDBusConnection;
typedef struct _GDBusProxy GDBusProxy;
typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
typedef struct _GDBusServer GDBusServer;
typedef struct _GDBusAuthObserver GDBusAuthObserver;
typedef struct _GDBusErrorEntry GDBusErrorEntry;
typedef struct _GDBusInterfaceVTable GDBusInterfaceVTable;
typedef struct _GDBusSubtreeVTable GDBusSubtreeVTable;
typedef struct _GDBusAnnotationInfo GDBusAnnotationInfo;
typedef struct _GDBusArgInfo GDBusArgInfo;
typedef struct _GDBusMethodInfo GDBusMethodInfo;
typedef struct _GDBusSignalInfo GDBusSignalInfo;
typedef struct _GDBusPropertyInfo GDBusPropertyInfo;
typedef struct _GDBusInterfaceInfo GDBusInterfaceInfo;
typedef struct _GDBusNodeInfo GDBusNodeInfo;
# 496 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GCancellableSourceFunc) (GCancellable *cancellable,
         gpointer data);
# 512 "/usr/include/glib-2.0/gio/giotypes.h"
typedef gboolean (*GPollableSourceFunc) (GObject *pollable_stream,
      gpointer data);

typedef struct _GDBusInterface GDBusInterface;
typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
typedef struct _GDBusObject GDBusObject;
typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
typedef struct _GDBusObjectProxy GDBusObjectProxy;
typedef struct _GDBusObjectManager GDBusObjectManager;
typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
# 545 "/usr/include/glib-2.0/gio/giotypes.h"
typedef GType (*GDBusProxyTypeFunc) (GDBusObjectManagerClient *manager,
                                     const gchar *object_path,
                                     const gchar *interface_name,
                                     gpointer data);

typedef struct _GTestDBus GTestDBus;

typedef struct _GSubprocess GSubprocess;
typedef struct _GSubprocessLauncher GSubprocessLauncher;
# 29 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gaction.h" 1
# 40 "/usr/include/glib-2.0/gio/gaction.h"
typedef struct _GActionInterface GActionInterface;

struct _GActionInterface
{
  GTypeInterface g_iface;


  const gchar * (* get_name) (GAction *action);
  const GVariantType * (* get_parameter_type) (GAction *action);
  const GVariantType * (* get_state_type) (GAction *action);
  GVariant * (* get_state_hint) (GAction *action);

  gboolean (* get_enabled) (GAction *action);
  GVariant * (* get_state) (GAction *action);

  void (* change_state) (GAction *action,
                                                 GVariant *value);
  void (* activate) (GAction *action,
                                                 GVariant *parameter);
};

 extern
GType g_action_get_type (void) __attribute__ ((__const__));

 extern
const gchar * g_action_get_name (GAction *action);
 extern
const GVariantType * g_action_get_parameter_type (GAction *action);
 extern
const GVariantType * g_action_get_state_type (GAction *action);
 extern
GVariant * g_action_get_state_hint (GAction *action);

 extern
gboolean g_action_get_enabled (GAction *action);
 extern
GVariant * g_action_get_state (GAction *action);

 extern
void g_action_change_state (GAction *action,
                                                                         GVariant *value);
 extern
void g_action_activate (GAction *action,
                                                                         GVariant *parameter);

 extern
gboolean g_action_name_is_valid (const gchar *action_name);

 extern
gboolean g_action_parse_detailed_name (const gchar *detailed_name,
                                                                         gchar **action_name,
                                                                         GVariant **target_value,
                                                                         GError **error);

 extern
gchar * g_action_print_detailed_name (const gchar *action_name,
                                                                         GVariant *target_value);
# 31 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gactiongroup.h" 1
# 42 "/usr/include/glib-2.0/gio/gactiongroup.h"
typedef struct _GActionGroupInterface GActionGroupInterface;

struct _GActionGroupInterface
{
  GTypeInterface g_iface;


  gboolean (* has_action) (GActionGroup *action_group,
                                                        const gchar *action_name);

  gchar ** (* list_actions) (GActionGroup *action_group);

  gboolean (* get_action_enabled) (GActionGroup *action_group,
                                                        const gchar *action_name);

  const GVariantType * (* get_action_parameter_type) (GActionGroup *action_group,
                                                        const gchar *action_name);

  const GVariantType * (* get_action_state_type) (GActionGroup *action_group,
                                                        const gchar *action_name);

  GVariant * (* get_action_state_hint) (GActionGroup *action_group,
                                                        const gchar *action_name);

  GVariant * (* get_action_state) (GActionGroup *action_group,
                                                        const gchar *action_name);

  void (* change_action_state) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *value);

  void (* activate_action) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *parameter);


  void (* action_added) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* action_removed) (GActionGroup *action_group,
                                                        const gchar *action_name);
  void (* action_enabled_changed) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        gboolean enabled);
  void (* action_state_changed) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        GVariant *state);


  gboolean (* query_action) (GActionGroup *action_group,
                                                        const gchar *action_name,
                                                        gboolean *enabled,
                                                        const GVariantType **parameter_type,
                                                        const GVariantType **state_type,
                                                        GVariant **state_hint,
                                                        GVariant **state);
};

 extern
GType g_action_group_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_action_group_has_action (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
gchar ** g_action_group_list_actions (GActionGroup *action_group);

 extern
const GVariantType * g_action_group_get_action_parameter_type (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
const GVariantType * g_action_group_get_action_state_type (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
GVariant * g_action_group_get_action_state_hint (GActionGroup *action_group,
                                                                         const gchar *action_name);

 extern
gboolean g_action_group_get_action_enabled (GActionGroup *action_group,
                                                                         const gchar *action_name);

 extern
GVariant * g_action_group_get_action_state (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
void g_action_group_change_action_state (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *value);

 extern
void g_action_group_activate_action (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *parameter);


 extern
void g_action_group_action_added (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
void g_action_group_action_removed (GActionGroup *action_group,
                                                                         const gchar *action_name);
 extern
void g_action_group_action_enabled_changed (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         gboolean enabled);

 extern
void g_action_group_action_state_changed (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         GVariant *state);

 extern
gboolean g_action_group_query_action (GActionGroup *action_group,
                                                                         const gchar *action_name,
                                                                         gboolean *enabled,
                                                                         const GVariantType **parameter_type,
                                                                         const GVariantType **state_type,
                                                                         GVariant **state_hint,
                                                                         GVariant **state) __attribute__((warn_unused_result));
# 32 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gactiongroupexporter.h" 1
# 35 "/usr/include/glib-2.0/gio/gactiongroupexporter.h"
 extern
guint g_dbus_connection_export_action_group (GDBusConnection *connection,
                                                                         const gchar *object_path,
                                                                         GActionGroup *action_group,
                                                                         GError **error);

 extern
void g_dbus_connection_unexport_action_group (GDBusConnection *connection,
                                                                         guint export_id);
# 33 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gactionmap.h" 1
# 42 "/usr/include/glib-2.0/gio/gactionmap.h"
typedef struct _GActionMapInterface GActionMapInterface;
typedef struct _GActionEntry GActionEntry;

struct _GActionMapInterface
{
  GTypeInterface g_iface;

  GAction * (* lookup_action) (GActionMap *action_map,
                               const gchar *action_name);
  void (* add_action) (GActionMap *action_map,
                               GAction *action);
  void (* remove_action) (GActionMap *action_map,
                               const gchar *action_name);
};

struct _GActionEntry
{
  const gchar *name;

  void (* activate) (GSimpleAction *action,
                     GVariant *parameter,
                     gpointer user_data);

  const gchar *parameter_type;

  const gchar *state;

  void (* change_state) (GSimpleAction *action,
                         GVariant *value,
                         gpointer user_data);


  gsize padding[3];
};

 extern
GType g_action_map_get_type (void) __attribute__ ((__const__));

 extern
GAction * g_action_map_lookup_action (GActionMap *action_map,
                                                                         const gchar *action_name);
 extern
void g_action_map_add_action (GActionMap *action_map,
                                                                         GAction *action);
 extern
void g_action_map_remove_action (GActionMap *action_map,
                                                                         const gchar *action_name);
 extern
void g_action_map_add_action_entries (GActionMap *action_map,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries,
                                                                         gpointer user_data);
 extern
void g_action_map_remove_action_entries (GActionMap *action_map,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries);
# 34 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gappinfo.h" 1
# 46 "/usr/include/glib-2.0/gio/gappinfo.h"
typedef struct _GAppLaunchContextClass GAppLaunchContextClass;
typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;
# 96 "/usr/include/glib-2.0/gio/gappinfo.h"
typedef struct _GAppInfoIface GAppInfoIface;

struct _GAppInfoIface
{
  GTypeInterface g_iface;



  GAppInfo * (* dup) (GAppInfo *appinfo);
  gboolean (* equal) (GAppInfo *appinfo1,
                                                 GAppInfo *appinfo2);
  const char * (* get_id) (GAppInfo *appinfo);
  const char * (* get_name) (GAppInfo *appinfo);
  const char * (* get_description) (GAppInfo *appinfo);
  const char * (* get_executable) (GAppInfo *appinfo);
  GIcon * (* get_icon) (GAppInfo *appinfo);
  gboolean (* launch) (GAppInfo *appinfo,
                                                 GList *files,
                                                 GAppLaunchContext *context,
                                                 GError **error);
  gboolean (* supports_uris) (GAppInfo *appinfo);
  gboolean (* supports_files) (GAppInfo *appinfo);
  gboolean (* launch_uris) (GAppInfo *appinfo,
                                                 GList *uris,
                                                 GAppLaunchContext *context,
                                                 GError **error);
  gboolean (* should_show) (GAppInfo *appinfo);


  gboolean (* set_as_default_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* set_as_default_for_extension) (GAppInfo *appinfo,
                                                 const char *extension,
                                                 GError **error);
  gboolean (* add_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_remove_supports_type) (GAppInfo *appinfo);
  gboolean (* remove_supports_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  gboolean (* can_delete) (GAppInfo *appinfo);
  gboolean (* do_delete) (GAppInfo *appinfo);
  const char * (* get_commandline) (GAppInfo *appinfo);
  const char * (* get_display_name) (GAppInfo *appinfo);
  gboolean (* set_as_last_used_for_type) (GAppInfo *appinfo,
                                                 const char *content_type,
                                                 GError **error);
  const char ** (* get_supported_types) (GAppInfo *appinfo);
  void (* launch_uris_async) (GAppInfo *appinfo,
                                                 GList *uris,
                                                 GAppLaunchContext *context,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
  gboolean (* launch_uris_finish) (GAppInfo *appinfo,
                                                 GAsyncResult *result,
                                                 GError **error);
};

 extern
GType g_app_info_get_type (void) __attribute__ ((__const__));
 extern
GAppInfo * g_app_info_create_from_commandline (const char *commandline,
                                                     const char *application_name,
                                                     GAppInfoCreateFlags flags,
                                                     GError **error);
 extern
GAppInfo * g_app_info_dup (GAppInfo *appinfo);
 extern
gboolean g_app_info_equal (GAppInfo *appinfo1,
                                                     GAppInfo *appinfo2);
 extern
const char *g_app_info_get_id (GAppInfo *appinfo);
 extern
const char *g_app_info_get_name (GAppInfo *appinfo);
 extern
const char *g_app_info_get_display_name (GAppInfo *appinfo);
 extern
const char *g_app_info_get_description (GAppInfo *appinfo);
 extern
const char *g_app_info_get_executable (GAppInfo *appinfo);
 extern
const char *g_app_info_get_commandline (GAppInfo *appinfo);
 extern
GIcon * g_app_info_get_icon (GAppInfo *appinfo);
 extern
gboolean g_app_info_launch (GAppInfo *appinfo,
                                                     GList *files,
                                                     GAppLaunchContext *context,
                                                     GError **error);
 extern
gboolean g_app_info_supports_uris (GAppInfo *appinfo);
 extern
gboolean g_app_info_supports_files (GAppInfo *appinfo);
 extern
gboolean g_app_info_launch_uris (GAppInfo *appinfo,
                                                     GList *uris,
                                                     GAppLaunchContext *context,
                                                     GError **error);
 extern
void g_app_info_launch_uris_async (GAppInfo *appinfo,
                                                     GList *uris,
                                                     GAppLaunchContext *context,
                                                     GCancellable *cancellable,
                                                     GAsyncReadyCallback callback,
                                                     gpointer user_data);
 extern
gboolean g_app_info_launch_uris_finish (GAppInfo *appinfo,
                                                     GAsyncResult *result,
                                                     GError **error);

 extern
gboolean g_app_info_should_show (GAppInfo *appinfo);

 extern
gboolean g_app_info_set_as_default_for_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
 extern
gboolean g_app_info_set_as_default_for_extension (GAppInfo *appinfo,
                                                     const char *extension,
                                                     GError **error);
 extern
gboolean g_app_info_add_supports_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
 extern
gboolean g_app_info_can_remove_supports_type (GAppInfo *appinfo);
 extern
gboolean g_app_info_remove_supports_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);
 extern
const char **g_app_info_get_supported_types (GAppInfo *appinfo);

 extern
gboolean g_app_info_can_delete (GAppInfo *appinfo);
 extern
gboolean g_app_info_delete (GAppInfo *appinfo);

 extern
gboolean g_app_info_set_as_last_used_for_type (GAppInfo *appinfo,
                                                     const char *content_type,
                                                     GError **error);

 extern
GList * g_app_info_get_all (void);
 extern
GList * g_app_info_get_all_for_type (const char *content_type);
 extern
GList * g_app_info_get_recommended_for_type (const gchar *content_type);
 extern
GList * g_app_info_get_fallback_for_type (const gchar *content_type);

 extern
void g_app_info_reset_type_associations (const char *content_type);
 extern
GAppInfo *g_app_info_get_default_for_type (const char *content_type,
                                                  gboolean must_support_uris);
 extern
void g_app_info_get_default_for_type_async (const char *content_type,
                                                  gboolean must_support_uris,
                                                  GCancellable *cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer user_data);
 extern
GAppInfo *g_app_info_get_default_for_type_finish (GAsyncResult *result,
                                                  GError **error);
 extern
GAppInfo *g_app_info_get_default_for_uri_scheme (const char *uri_scheme);

 extern
void g_app_info_get_default_for_uri_scheme_async (const char *uri_scheme,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
 extern
GAppInfo *g_app_info_get_default_for_uri_scheme_finish (GAsyncResult *result,
                                                        GError **error);

 extern
gboolean g_app_info_launch_default_for_uri (const char *uri,
                                                  GAppLaunchContext *context,
                                                  GError **error);

 extern
void g_app_info_launch_default_for_uri_async (const char *uri,
                                                    GAppLaunchContext *context,
                                                    GCancellable *cancellable,
                                                    GAsyncReadyCallback callback,
                                                    gpointer user_data);
 extern
gboolean g_app_info_launch_default_for_uri_finish (GAsyncResult *result,
                                                    GError **error);
# 301 "/usr/include/glib-2.0/gio/gappinfo.h"
struct _GAppLaunchContext
{
  GObject parent_instance;


  GAppLaunchContextPrivate *priv;
};

struct _GAppLaunchContextClass
{
  GObjectClass parent_class;

  char * (* get_display) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  char * (* get_startup_notify_id) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GList *files);
  void (* launch_failed) (GAppLaunchContext *context,
                                    const char *startup_notify_id);
  void (* launched) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GVariant *platform_data);
  void (* launch_started) (GAppLaunchContext *context,
                                    GAppInfo *info,
                                    GVariant *platform_data);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};

 extern
GType g_app_launch_context_get_type (void) __attribute__ ((__const__));
 extern
GAppLaunchContext *g_app_launch_context_new (void);

 extern
void g_app_launch_context_setenv (GAppLaunchContext *context,
                                                               const char *variable,
                                                               const char *value);
 extern
void g_app_launch_context_unsetenv (GAppLaunchContext *context,
                                                               const char *variable);
 extern
char ** g_app_launch_context_get_environment (GAppLaunchContext *context);

 extern
char * g_app_launch_context_get_display (GAppLaunchContext *context,
                                                               GAppInfo *info,
                                                               GList *files);
 extern
char * g_app_launch_context_get_startup_notify_id (GAppLaunchContext *context,
                                                               GAppInfo *info,
                                                               GList *files);
 extern
void g_app_launch_context_launch_failed (GAppLaunchContext *context,
                                                               const char * startup_notify_id);







typedef struct _GAppInfoMonitor GAppInfoMonitor;

 extern
GType g_app_info_monitor_get_type (void);

 extern
GAppInfoMonitor * g_app_info_monitor_get (void);
# 35 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gapplication.h" 1
# 43 "/usr/include/glib-2.0/gio/gapplication.h"
typedef struct _GApplicationPrivate GApplicationPrivate;
typedef struct _GApplicationClass GApplicationClass;

struct _GApplication
{

  GObject parent_instance;

  GApplicationPrivate *priv;
};

struct _GApplicationClass
{

  GObjectClass parent_class;



  void (* startup) (GApplication *application);

  void (* activate) (GApplication *application);

  void (* open) (GApplication *application,
                                                     GFile **files,
                                                     gint n_files,
                                                     const gchar *hint);

  int (* command_line) (GApplication *application,
                                                     GApplicationCommandLine *command_line);
# 94 "/usr/include/glib-2.0/gio/gapplication.h"
  gboolean (* local_command_line) (GApplication *application,
                                                     gchar ***arguments,
                                                     int *exit_status);



  void (* before_emit) (GApplication *application,
                                                     GVariant *platform_data);

  void (* after_emit) (GApplication *application,
                                                     GVariant *platform_data);
  void (* add_platform_data) (GApplication *application,
                                                     GVariantBuilder *builder);
  void (* quit_mainloop) (GApplication *application);
  void (* run_mainloop) (GApplication *application);
  void (* shutdown) (GApplication *application);

  gboolean (* dbus_register) (GApplication *application,
                                                     GDBusConnection *connection,
                                                     const gchar *object_path,
                                                     GError **error);
  void (* dbus_unregister) (GApplication *application,
                                                     GDBusConnection *connection,
                                                     const gchar *object_path);
  gint (* handle_local_options)(GApplication *application,
                                                     GVariantDict *options);
  gboolean (* name_lost) (GApplication *application);


  gpointer padding[7];
};

 extern
GType g_application_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_application_id_is_valid (const gchar *application_id);

 extern
GApplication * g_application_new (const gchar *application_id,
                                                                         GApplicationFlags flags);

 extern
const gchar * g_application_get_application_id (GApplication *application);
 extern
void g_application_set_application_id (GApplication *application,
                                                                         const gchar *application_id);

 extern
const gchar * g_application_get_version (GApplication *application);
 extern
void g_application_set_version (GApplication *application,
                                                                         const gchar *version);

 extern
GDBusConnection * g_application_get_dbus_connection (GApplication *application);
 extern
const gchar * g_application_get_dbus_object_path (GApplication *application);

 extern
guint g_application_get_inactivity_timeout (GApplication *application);
 extern
void g_application_set_inactivity_timeout (GApplication *application,
                                                                         guint inactivity_timeout);

 extern
GApplicationFlags g_application_get_flags (GApplication *application);
 extern
void g_application_set_flags (GApplication *application,
                                                                         GApplicationFlags flags);

 extern
const gchar * g_application_get_resource_base_path (GApplication *application);
 extern
void g_application_set_resource_base_path (GApplication *application,
                                                                         const gchar *resource_path);

__attribute__((__deprecated__)) extern
void g_application_set_action_group (GApplication *application,
                                                                         GActionGroup *action_group);

 extern
void g_application_add_main_option_entries (GApplication *application,
                                                                         const GOptionEntry *entries);

 extern
void g_application_add_main_option (GApplication *application,
                                                                         const char *long_name,
                                                                         char short_name,
                                                                         GOptionFlags flags,
                                                                         GOptionArg arg,
                                                                         const char *description,
                                                                         const char *arg_description);
 extern
void g_application_add_option_group (GApplication *application,
                                                                         GOptionGroup *group);
 extern
void g_application_set_option_context_parameter_string (GApplication *application,
                                                                           const gchar *parameter_string);
 extern
void g_application_set_option_context_summary (GApplication *application,
                                                                         const gchar *summary);
 extern
void g_application_set_option_context_description (GApplication *application,
                                                                         const gchar *description);
 extern
gboolean g_application_get_is_registered (GApplication *application);
 extern
gboolean g_application_get_is_remote (GApplication *application);

 extern
gboolean g_application_register (GApplication *application,
                                                                         GCancellable *cancellable,
                                                                         GError **error);

 extern
void g_application_hold (GApplication *application);
 extern
void g_application_release (GApplication *application);

 extern
void g_application_activate (GApplication *application);

 extern
void g_application_open (GApplication *application,
                                                                         GFile **files,
                                                                         gint n_files,
                                                                         const gchar *hint);

 extern
int g_application_run (GApplication *application,
                                                                         int argc,
                                                                         char **argv);

 extern
void g_application_quit (GApplication *application);

 extern
GApplication * g_application_get_default (void);
 extern
void g_application_set_default (GApplication *application);

 extern
void g_application_mark_busy (GApplication *application);
 extern
void g_application_unmark_busy (GApplication *application);
 extern
gboolean g_application_get_is_busy (GApplication *application);

 extern
void g_application_send_notification (GApplication *application,
                                                                         const gchar *id,
                                                                         GNotification *notification);
 extern
void g_application_withdraw_notification (GApplication *application,
                                                                         const gchar *id);

 extern
void g_application_bind_busy_property (GApplication *application,
                                                                         gpointer object,
                                                                         const gchar *property);

 extern
void g_application_unbind_busy_property (GApplication *application,
                                                                         gpointer object,
                                                                         const gchar *property);
# 36 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gapplicationcommandline.h" 1
# 49 "/usr/include/glib-2.0/gio/gapplicationcommandline.h"
typedef struct _GApplicationCommandLinePrivate GApplicationCommandLinePrivate;
typedef struct _GApplicationCommandLineClass GApplicationCommandLineClass;

struct _GApplicationCommandLine
{

  GObject parent_instance;

  GApplicationCommandLinePrivate *priv;
};

struct _GApplicationCommandLineClass
{

  GObjectClass parent_class;

  void (* print_literal) (GApplicationCommandLine *cmdline,
                                                 const gchar *message);
  void (* printerr_literal) (GApplicationCommandLine *cmdline,
                                                 const gchar *message);
  GInputStream * (* get_stdin) (GApplicationCommandLine *cmdline);
  void (* done) (GApplicationCommandLine *cmdline);

  gpointer padding[10];
};

 extern
GType g_application_command_line_get_type (void) __attribute__ ((__const__));

 extern
gchar ** g_application_command_line_get_arguments (GApplicationCommandLine *cmdline,
                                                                         int *argc);

 extern
GVariantDict * g_application_command_line_get_options_dict (GApplicationCommandLine *cmdline);

 extern
GInputStream * g_application_command_line_get_stdin (GApplicationCommandLine *cmdline);

 extern
const gchar * const * g_application_command_line_get_environ (GApplicationCommandLine *cmdline);

 extern
const gchar * g_application_command_line_getenv (GApplicationCommandLine *cmdline,
                                                                         const gchar *name);

 extern
const gchar * g_application_command_line_get_cwd (GApplicationCommandLine *cmdline);

 extern
gboolean g_application_command_line_get_is_remote (GApplicationCommandLine *cmdline);

 extern
void g_application_command_line_print_literal (GApplicationCommandLine *cmdline,
                                                                         const gchar *message);
 extern
void g_application_command_line_printerr_literal (GApplicationCommandLine *cmdline,
                                                                         const gchar *message);

 extern
void g_application_command_line_print (GApplicationCommandLine *cmdline,
                                                                         const gchar *format,
                                                                         ...) __attribute__((__format__ (__printf__, 2, 3)));
 extern
void g_application_command_line_printerr (GApplicationCommandLine *cmdline,
                                                                         const gchar *format,
                                                                         ...) __attribute__((__format__ (__printf__, 2, 3)));

 extern
int g_application_command_line_get_exit_status (GApplicationCommandLine *cmdline);
 extern
void g_application_command_line_set_exit_status (GApplicationCommandLine *cmdline,
                                                                         int exit_status);

 extern
GVariant * g_application_command_line_get_platform_data (GApplicationCommandLine *cmdline);

 extern
GFile * g_application_command_line_create_file_for_arg (GApplicationCommandLine *cmdline,
                                                                         const gchar *arg);

 extern
void g_application_command_line_done (GApplicationCommandLine *cmdline);
# 37 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gasyncinitable.h" 1
# 31 "/usr/include/glib-2.0/gio/gasyncinitable.h"
# 1 "/usr/include/glib-2.0/gio/ginitable.h" 1
# 40 "/usr/include/glib-2.0/gio/ginitable.h"
typedef struct _GInitableIface GInitableIface;
# 52 "/usr/include/glib-2.0/gio/ginitable.h"
struct _GInitableIface
{
  GTypeInterface g_iface;



  gboolean (* init) (GInitable *initable,
   GCancellable *cancellable,
   GError **error);
};


 extern
GType g_initable_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_initable_init (GInitable *initable,
    GCancellable *cancellable,
    GError **error);

 extern
gpointer g_initable_new (GType object_type,
    GCancellable *cancellable,
    GError **error,
    const gchar *first_property_name,
    ...);

#pragma clang diagnostic push
# 79 "/usr/include/glib-2.0/gio/ginitable.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

__attribute__((__deprecated__("Use '" "g_object_new_with_properties and g_initable_init" "' instead"))) extern
gpointer g_initable_newv (GType object_type,
    guint n_parameters,
    GParameter *parameters,
    GCancellable *cancellable,
    GError **error);

#pragma clang diagnostic pop

 extern
GObject* g_initable_new_valist (GType object_type,
    const gchar *first_property_name,
    va_list var_args,
    GCancellable *cancellable,
    GError **error);
# 32 "/usr/include/glib-2.0/gio/gasyncinitable.h" 2
# 41 "/usr/include/glib-2.0/gio/gasyncinitable.h"
typedef struct _GAsyncInitableIface GAsyncInitableIface;
# 54 "/usr/include/glib-2.0/gio/gasyncinitable.h"
struct _GAsyncInitableIface
{
  GTypeInterface g_iface;



  void (* init_async) (GAsyncInitable *initable,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gboolean (* init_finish) (GAsyncInitable *initable,
       GAsyncResult *res,
       GError **error);
};

 extern
GType g_async_initable_get_type (void) __attribute__ ((__const__));


 extern
void g_async_initable_init_async (GAsyncInitable *initable,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
 extern
gboolean g_async_initable_init_finish (GAsyncInitable *initable,
         GAsyncResult *res,
         GError **error);

 extern
void g_async_initable_new_async (GType object_type,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data,
         const gchar *first_property_name,
         ...);

#pragma clang diagnostic push
# 94 "/usr/include/glib-2.0/gio/gasyncinitable.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

__attribute__((__deprecated__("Use '" "g_object_new_with_properties and g_async_initable_init_async" "' instead"))) extern
void g_async_initable_newv_async (GType object_type,
         guint n_parameters,
         GParameter *parameters,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);

#pragma clang diagnostic pop

 extern
void g_async_initable_new_valist_async (GType object_type,
         const gchar *first_property_name,
         va_list var_args,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
 extern
GObject *g_async_initable_new_finish (GAsyncInitable *initable,
         GAsyncResult *res,
         GError **error);
# 38 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gasyncresult.h" 1
# 39 "/usr/include/glib-2.0/gio/gasyncresult.h"
typedef struct _GAsyncResultIface GAsyncResultIface;
# 51 "/usr/include/glib-2.0/gio/gasyncresult.h"
struct _GAsyncResultIface
{
  GTypeInterface g_iface;



  gpointer (* get_user_data) (GAsyncResult *res);
  GObject * (* get_source_object) (GAsyncResult *res);

  gboolean (* is_tagged) (GAsyncResult *res,
       gpointer source_tag);
};

 extern
GType g_async_result_get_type (void) __attribute__ ((__const__));

 extern
gpointer g_async_result_get_user_data (GAsyncResult *res);
 extern
GObject *g_async_result_get_source_object (GAsyncResult *res);

 extern
gboolean g_async_result_legacy_propagate_error (GAsyncResult *res,
      GError **error);
 extern
gboolean g_async_result_is_tagged (GAsyncResult *res,
      gpointer source_tag);
# 39 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gbufferedinputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gbufferedinputstream.h"
# 1 "/usr/include/glib-2.0/gio/gfilterinputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfilterinputstream.h"
# 1 "/usr/include/glib-2.0/gio/ginputstream.h" 1
# 41 "/usr/include/glib-2.0/gio/ginputstream.h"
typedef struct _GInputStreamClass GInputStreamClass;
typedef struct _GInputStreamPrivate GInputStreamPrivate;

struct _GInputStream
{
  GObject parent_instance;


  GInputStreamPrivate *priv;
};

struct _GInputStreamClass
{
  GObjectClass parent_class;



  gssize (* read_fn) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gssize (* skip) (GInputStream *stream,
                             gsize count,
                             GCancellable *cancellable,
                             GError **error);
  gboolean (* close_fn) (GInputStream *stream,
                             GCancellable *cancellable,
                             GError **error);


  void (* read_async) (GInputStream *stream,
                             void *buffer,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* read_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* skip_async) (GInputStream *stream,
                             gsize count,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gssize (* skip_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);
  void (* close_async) (GInputStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GInputStream *stream,
                             GAsyncResult *result,
                             GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_input_stream_get_type (void) __attribute__ ((__const__));

 extern
gssize g_input_stream_read (GInputStream *stream,
           void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);
 extern
gboolean g_input_stream_read_all (GInputStream *stream,
           void *buffer,
           gsize count,
           gsize *bytes_read,
           GCancellable *cancellable,
           GError **error);
 extern
GBytes *g_input_stream_read_bytes (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
 extern
gssize g_input_stream_skip (GInputStream *stream,
           gsize count,
           GCancellable *cancellable,
           GError **error);
 extern
gboolean g_input_stream_close (GInputStream *stream,
           GCancellable *cancellable,
           GError **error);
 extern
void g_input_stream_read_async (GInputStream *stream,
           void *buffer,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gssize g_input_stream_read_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);

 extern
void g_input_stream_read_all_async (GInputStream *stream,
                                           void *buffer,
                                           gsize count,
                                           int io_priority,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_input_stream_read_all_finish (GInputStream *stream,
                                           GAsyncResult *result,
                                           gsize *bytes_read,
                                           GError **error);

 extern
void g_input_stream_read_bytes_async (GInputStream *stream,
        gsize count,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
 extern
GBytes *g_input_stream_read_bytes_finish (GInputStream *stream,
        GAsyncResult *result,
        GError **error);
 extern
void g_input_stream_skip_async (GInputStream *stream,
           gsize count,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gssize g_input_stream_skip_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);
 extern
void g_input_stream_close_async (GInputStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_input_stream_close_finish (GInputStream *stream,
           GAsyncResult *result,
           GError **error);



 extern
gboolean g_input_stream_is_closed (GInputStream *stream);
 extern
gboolean g_input_stream_has_pending (GInputStream *stream);
 extern
gboolean g_input_stream_set_pending (GInputStream *stream,
           GError **error);
 extern
void g_input_stream_clear_pending (GInputStream *stream);
# 31 "/usr/include/glib-2.0/gio/gfilterinputstream.h" 2
# 41 "/usr/include/glib-2.0/gio/gfilterinputstream.h"
typedef struct _GFilterInputStreamClass GFilterInputStreamClass;

struct _GFilterInputStream
{
  GInputStream parent_instance;


  GInputStream *base_stream;
};

struct _GFilterInputStreamClass
{
  GInputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};


 extern
GType g_filter_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream * g_filter_input_stream_get_base_stream (GFilterInputStream *stream);
 extern
gboolean g_filter_input_stream_get_close_base_stream (GFilterInputStream *stream);
 extern
void g_filter_input_stream_set_close_base_stream (GFilterInputStream *stream,
                                                            gboolean close_base);
# 31 "/usr/include/glib-2.0/gio/gbufferedinputstream.h" 2
# 41 "/usr/include/glib-2.0/gio/gbufferedinputstream.h"
typedef struct _GBufferedInputStreamClass GBufferedInputStreamClass;
typedef struct _GBufferedInputStreamPrivate GBufferedInputStreamPrivate;

struct _GBufferedInputStream
{
  GFilterInputStream parent_instance;


  GBufferedInputStreamPrivate *priv;
};

struct _GBufferedInputStreamClass
{
  GFilterInputStreamClass parent_class;

  gssize (* fill) (GBufferedInputStream *stream,
       gssize count,
       GCancellable *cancellable,
       GError **error);


  void (* fill_async) (GBufferedInputStream *stream,
       gssize count,
       int io_priority,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
  gssize (* fill_finish) (GBufferedInputStream *stream,
       GAsyncResult *result,
       GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


 extern
GType g_buffered_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream* g_buffered_input_stream_new (GInputStream *base_stream);
 extern
GInputStream* g_buffered_input_stream_new_sized (GInputStream *base_stream,
             gsize size);

 extern
gsize g_buffered_input_stream_get_buffer_size (GBufferedInputStream *stream);
 extern
void g_buffered_input_stream_set_buffer_size (GBufferedInputStream *stream,
             gsize size);
 extern
gsize g_buffered_input_stream_get_available (GBufferedInputStream *stream);
 extern
gsize g_buffered_input_stream_peek (GBufferedInputStream *stream,
             void *buffer,
             gsize offset,
             gsize count);
 extern
const void* g_buffered_input_stream_peek_buffer (GBufferedInputStream *stream,
             gsize *count);

 extern
gssize g_buffered_input_stream_fill (GBufferedInputStream *stream,
             gssize count,
             GCancellable *cancellable,
             GError **error);
 extern
void g_buffered_input_stream_fill_async (GBufferedInputStream *stream,
             gssize count,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
 extern
gssize g_buffered_input_stream_fill_finish (GBufferedInputStream *stream,
             GAsyncResult *result,
             GError **error);

 extern
int g_buffered_input_stream_read_byte (GBufferedInputStream *stream,
             GCancellable *cancellable,
             GError **error);
# 40 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h"
# 1 "/usr/include/glib-2.0/gio/gfilteroutputstream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfilteroutputstream.h"
# 1 "/usr/include/glib-2.0/gio/goutputstream.h" 1
# 41 "/usr/include/glib-2.0/gio/goutputstream.h"
typedef struct _GOutputStreamClass GOutputStreamClass;
typedef struct _GOutputStreamPrivate GOutputStreamPrivate;

struct _GOutputStream
{
  GObject parent_instance;


  GOutputStreamPrivate *priv;
};


struct _GOutputStreamClass
{
  GObjectClass parent_class;



  gssize (* write_fn) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 GCancellable *cancellable,
                                 GError **error);
  gssize (* splice) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* flush) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);
  gboolean (* close_fn) (GOutputStream *stream,
                                 GCancellable *cancellable,
                                 GError **error);



  void (* write_async) (GOutputStream *stream,
                                 const void *buffer,
                                 gsize count,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* write_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* splice_async) (GOutputStream *stream,
                                 GInputStream *source,
                                 GOutputStreamSpliceFlags flags,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gssize (* splice_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* flush_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* flush_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);
  void (* close_async) (GOutputStream *stream,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);
  gboolean (* close_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 GError **error);

  gboolean (* writev_fn) (GOutputStream *stream,
                                 const GOutputVector *vectors,
                                 gsize n_vectors,
                                 gsize *bytes_written,
                                 GCancellable *cancellable,
                                 GError **error);

  void (* writev_async) (GOutputStream *stream,
                                 const GOutputVector *vectors,
                                 gsize n_vectors,
                                 int io_priority,
                                 GCancellable *cancellable,
                                 GAsyncReadyCallback callback,
                                 gpointer user_data);

  gboolean (* writev_finish) (GOutputStream *stream,
                                 GAsyncResult *result,
                                 gsize *bytes_written,
                                 GError **error);



  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
};

 extern
GType g_output_stream_get_type (void) __attribute__ ((__const__));

 extern
gssize g_output_stream_write (GOutputStream *stream,
     const void *buffer,
     gsize count,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_write_all (GOutputStream *stream,
     const void *buffer,
     gsize count,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);

 extern
gboolean g_output_stream_writev (GOutputStream *stream,
     const GOutputVector *vectors,
     gsize n_vectors,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_writev_all (GOutputStream *stream,
     GOutputVector *vectors,
     gsize n_vectors,
     gsize *bytes_written,
     GCancellable *cancellable,
     GError **error);

 extern
gboolean g_output_stream_printf (GOutputStream *stream,
                                        gsize *bytes_written,
                                        GCancellable *cancellable,
                                        GError **error,
                                        const gchar *format,
                                        ...) __attribute__((__format__ (__printf__, 5, 6)));
 extern
gboolean g_output_stream_vprintf (GOutputStream *stream,
                                        gsize *bytes_written,
                                        GCancellable *cancellable,
                                        GError **error,
                                        const gchar *format,
                                        va_list args) __attribute__((__format__ (__printf__, 5, 0)));
 extern
gssize g_output_stream_write_bytes (GOutputStream *stream,
     GBytes *bytes,
     GCancellable *cancellable,
     GError **error);
 extern
gssize g_output_stream_splice (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_flush (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
 extern
gboolean g_output_stream_close (GOutputStream *stream,
     GCancellable *cancellable,
     GError **error);
 extern
void g_output_stream_write_async (GOutputStream *stream,
     const void *buffer,
     gsize count,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gssize g_output_stream_write_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);

 extern
void g_output_stream_write_all_async (GOutputStream *stream,
                                          const void *buffer,
                                          gsize count,
                                          int io_priority,
                                          GCancellable *cancellable,
                                          GAsyncReadyCallback callback,
                                          gpointer user_data);

 extern
gboolean g_output_stream_write_all_finish (GOutputStream *stream,
                                           GAsyncResult *result,
                                           gsize *bytes_written,
                                           GError **error);

 extern
void g_output_stream_writev_async (GOutputStream *stream,
     const GOutputVector *vectors,
     gsize n_vectors,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gboolean g_output_stream_writev_finish (GOutputStream *stream,
     GAsyncResult *result,
     gsize *bytes_written,
     GError **error);

 extern
void g_output_stream_writev_all_async (GOutputStream *stream,
                                           GOutputVector *vectors,
                                           gsize n_vectors,
                                           int io_priority,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);

 extern
gboolean g_output_stream_writev_all_finish (GOutputStream *stream,
                                            GAsyncResult *result,
                                            gsize *bytes_written,
                                            GError **error);

 extern
void g_output_stream_write_bytes_async (GOutputStream *stream,
          GBytes *bytes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gssize g_output_stream_write_bytes_finish (GOutputStream *stream,
          GAsyncResult *result,
          GError **error);
 extern
void g_output_stream_splice_async (GOutputStream *stream,
     GInputStream *source,
     GOutputStreamSpliceFlags flags,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gssize g_output_stream_splice_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
 extern
void g_output_stream_flush_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gboolean g_output_stream_flush_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);
 extern
void g_output_stream_close_async (GOutputStream *stream,
     int io_priority,
     GCancellable *cancellable,
     GAsyncReadyCallback callback,
     gpointer user_data);
 extern
gboolean g_output_stream_close_finish (GOutputStream *stream,
     GAsyncResult *result,
     GError **error);

 extern
gboolean g_output_stream_is_closed (GOutputStream *stream);
 extern
gboolean g_output_stream_is_closing (GOutputStream *stream);
 extern
gboolean g_output_stream_has_pending (GOutputStream *stream);
 extern
gboolean g_output_stream_set_pending (GOutputStream *stream,
     GError **error);
 extern
void g_output_stream_clear_pending (GOutputStream *stream);
# 31 "/usr/include/glib-2.0/gio/gfilteroutputstream.h" 2
# 41 "/usr/include/glib-2.0/gio/gfilteroutputstream.h"
typedef struct _GFilterOutputStreamClass GFilterOutputStreamClass;

struct _GFilterOutputStream
{
  GOutputStream parent_instance;


  GOutputStream *base_stream;
};

struct _GFilterOutputStreamClass
{
  GOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};


 extern
GType g_filter_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GOutputStream * g_filter_output_stream_get_base_stream (GFilterOutputStream *stream);
 extern
gboolean g_filter_output_stream_get_close_base_stream (GFilterOutputStream *stream);
 extern
void g_filter_output_stream_set_close_base_stream (GFilterOutputStream *stream,
                                                              gboolean close_base);
# 31 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h" 2
# 41 "/usr/include/glib-2.0/gio/gbufferedoutputstream.h"
typedef struct _GBufferedOutputStreamClass GBufferedOutputStreamClass;
typedef struct _GBufferedOutputStreamPrivate GBufferedOutputStreamPrivate;

struct _GBufferedOutputStream
{
  GFilterOutputStream parent_instance;


  GBufferedOutputStreamPrivate *priv;
};

struct _GBufferedOutputStreamClass
{
  GFilterOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
};


 extern
GType g_buffered_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GOutputStream* g_buffered_output_stream_new (GOutputStream *base_stream);
 extern
GOutputStream* g_buffered_output_stream_new_sized (GOutputStream *base_stream,
        gsize size);
 extern
gsize g_buffered_output_stream_get_buffer_size (GBufferedOutputStream *stream);
 extern
void g_buffered_output_stream_set_buffer_size (GBufferedOutputStream *stream,
        gsize size);
 extern
gboolean g_buffered_output_stream_get_auto_grow (GBufferedOutputStream *stream);
 extern
void g_buffered_output_stream_set_auto_grow (GBufferedOutputStream *stream,
        gboolean auto_grow);
# 41 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gbytesicon.h" 1
# 38 "/usr/include/glib-2.0/gio/gbytesicon.h"
 extern
GType g_bytes_icon_get_type (void) __attribute__ ((__const__));

 extern
GIcon * g_bytes_icon_new (GBytes *bytes);

 extern
GBytes * g_bytes_icon_get_bytes (GBytesIcon *icon);
# 42 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcancellable.h" 1
# 41 "/usr/include/glib-2.0/gio/gcancellable.h"
typedef struct _GCancellableClass GCancellableClass;
typedef struct _GCancellablePrivate GCancellablePrivate;

struct _GCancellable
{
  GObject parent_instance;


  GCancellablePrivate *priv;
};

struct _GCancellableClass
{
  GObjectClass parent_class;

  void (* cancelled) (GCancellable *cancellable);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_cancellable_get_type (void) __attribute__ ((__const__));

 extern
GCancellable *g_cancellable_new (void);


 extern
gboolean g_cancellable_is_cancelled (GCancellable *cancellable);
 extern
gboolean g_cancellable_set_error_if_cancelled (GCancellable *cancellable,
          GError **error);

 extern
int g_cancellable_get_fd (GCancellable *cancellable);
 extern
gboolean g_cancellable_make_pollfd (GCancellable *cancellable,
          GPollFD *pollfd);
 extern
void g_cancellable_release_fd (GCancellable *cancellable);

 extern
GSource * g_cancellable_source_new (GCancellable *cancellable);

 extern
GCancellable *g_cancellable_get_current (void);
 extern
void g_cancellable_push_current (GCancellable *cancellable);
 extern
void g_cancellable_pop_current (GCancellable *cancellable);
 extern
void g_cancellable_reset (GCancellable *cancellable);
 extern
gulong g_cancellable_connect (GCancellable *cancellable,
          GCallback callback,
          gpointer data,
          GDestroyNotify data_destroy_func);
 extern
void g_cancellable_disconnect (GCancellable *cancellable,
          gulong handler_id);



 extern
void g_cancellable_cancel (GCancellable *cancellable);
# 43 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcharsetconverter.h" 1
# 30 "/usr/include/glib-2.0/gio/gcharsetconverter.h"
# 1 "/usr/include/glib-2.0/gio/gconverter.h" 1
# 39 "/usr/include/glib-2.0/gio/gconverter.h"
typedef struct _GConverterIface GConverterIface;
# 53 "/usr/include/glib-2.0/gio/gconverter.h"
struct _GConverterIface
{
  GTypeInterface g_iface;



  GConverterResult (* convert) (GConverter *converter,
    const void *inbuf,
    gsize inbuf_size,
    void *outbuf,
    gsize outbuf_size,
    GConverterFlags flags,
    gsize *bytes_read,
    gsize *bytes_written,
    GError **error);
  void (* reset) (GConverter *converter);
};

 extern
GType g_converter_get_type (void) __attribute__ ((__const__));

 extern
GConverterResult g_converter_convert (GConverter *converter,
          const void *inbuf,
          gsize inbuf_size,
          void *outbuf,
          gsize outbuf_size,
          GConverterFlags flags,
          gsize *bytes_read,
          gsize *bytes_written,
          GError **error);
 extern
void g_converter_reset (GConverter *converter);

 extern
GBytes * g_converter_convert_bytes (GConverter *converter,
                                            GBytes *bytes,
                                            GError **error);
# 31 "/usr/include/glib-2.0/gio/gcharsetconverter.h" 2
# 41 "/usr/include/glib-2.0/gio/gcharsetconverter.h"
typedef struct _GCharsetConverterClass GCharsetConverterClass;

struct _GCharsetConverterClass
{
  GObjectClass parent_class;
};

 extern
GType g_charset_converter_get_type (void) __attribute__ ((__const__));

 extern
GCharsetConverter *g_charset_converter_new (const gchar *to_charset,
             const gchar *from_charset,
             GError **error);
 extern
void g_charset_converter_set_use_fallback (GCharsetConverter *converter,
        gboolean use_fallback);
 extern
gboolean g_charset_converter_get_use_fallback (GCharsetConverter *converter);
 extern
guint g_charset_converter_get_num_fallbacks (GCharsetConverter *converter);
# 44 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcontenttype.h" 1
# 34 "/usr/include/glib-2.0/gio/gcontenttype.h"
 extern
gboolean g_content_type_equals (const gchar *type1,
                                           const gchar *type2);
 extern
gboolean g_content_type_is_a (const gchar *type,
                                           const gchar *supertype);
 extern
gboolean g_content_type_is_mime_type (const gchar *type,
                                           const gchar *mime_type);
 extern
gboolean g_content_type_is_unknown (const gchar *type);
 extern
gchar * g_content_type_get_description (const gchar *type);
 extern
gchar * g_content_type_get_mime_type (const gchar *type);
 extern
GIcon * g_content_type_get_icon (const gchar *type);
 extern
GIcon * g_content_type_get_symbolic_icon (const gchar *type);
 extern
gchar * g_content_type_get_generic_icon_name (const gchar *type);

 extern
gboolean g_content_type_can_be_executable (const gchar *type);

 extern
gchar * g_content_type_from_mime_type (const gchar *mime_type);

 extern
gchar * g_content_type_guess (const gchar *filename,
                                           const guchar *data,
                                           gsize data_size,
                                           gboolean *result_uncertain);

 extern
gchar ** g_content_type_guess_for_tree (GFile *root);

 extern
GList * g_content_types_get_registered (void);



 extern
const gchar * const *g_content_type_get_mime_dirs (void);
 extern
void g_content_type_set_mime_dirs (const gchar * const *dirs);
# 45 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gconverterinputstream.h" 1
# 42 "/usr/include/glib-2.0/gio/gconverterinputstream.h"
typedef struct _GConverterInputStreamClass GConverterInputStreamClass;
typedef struct _GConverterInputStreamPrivate GConverterInputStreamPrivate;

struct _GConverterInputStream
{
  GFilterInputStream parent_instance;


  GConverterInputStreamPrivate *priv;
};

struct _GConverterInputStreamClass
{
  GFilterInputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_converter_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream *g_converter_input_stream_new (GInputStream *base_stream,
                                                               GConverter *converter);
 extern
GConverter *g_converter_input_stream_get_converter (GConverterInputStream *converter_stream);
# 47 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gconverteroutputstream.h" 1
# 42 "/usr/include/glib-2.0/gio/gconverteroutputstream.h"
typedef struct _GConverterOutputStreamClass GConverterOutputStreamClass;
typedef struct _GConverterOutputStreamPrivate GConverterOutputStreamPrivate;

struct _GConverterOutputStream
{
  GFilterOutputStream parent_instance;


  GConverterOutputStreamPrivate *priv;
};

struct _GConverterOutputStreamClass
{
  GFilterOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_converter_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GOutputStream *g_converter_output_stream_new (GOutputStream *base_stream,
                                                                 GConverter *converter);
 extern
GConverter *g_converter_output_stream_get_converter (GConverterOutputStream *converter_stream);
# 48 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gcredentials.h" 1
# 34 "/usr/include/glib-2.0/gio/gcredentials.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 22 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 108 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3 4
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 255 "/usr/include/unistd.h" 3 4
typedef __useconds_t useconds_t;
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 309 "/usr/include/unistd.h" 3 4
extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2))) ;
# 339 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) __attribute__ ((__nothrow__ ));
# 358 "/usr/include/unistd.h" 3 4
extern int close (int __fd);




extern void closefrom (int __lowfd) __attribute__ ((__nothrow__ ));







extern ssize_t read (int __fd, void *__buf, size_t __nbytes)
                                                  ;





extern ssize_t write (int __fd, const void *__buf, size_t __n)
                                         ;
# 389 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset)
                                                  ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset)
                                         ;
# 437 "/usr/include/unistd.h" 3 4
extern int pipe (int __pipedes[2]) __attribute__ ((__nothrow__ )) ;
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) __attribute__ ((__nothrow__ ));
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     __attribute__ ((__nothrow__ ));






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) __attribute__ ((__nothrow__ )) ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) __attribute__ ((__nothrow__ )) ;
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) __attribute__ ((__nothrow__ )) ;
# 545 "/usr/include/unistd.h" 3 4
extern char *getwd (char *__buf)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__))
                                       ;




extern int dup (int __fd) __attribute__ ((__nothrow__ )) ;


extern int dup2 (int __fd, int __fd2) __attribute__ ((__nothrow__ ));
# 564 "/usr/include/unistd.h" 3 4
extern char **__environ;







extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
# 619 "/usr/include/unistd.h" 3 4
extern int nice (int __inc) __attribute__ ((__nothrow__ )) ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 24 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,


    _SC_MINSIGSTKSZ,


    _SC_SIGSTKSZ

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) __attribute__ ((__nothrow__ ));


extern long int sysconf (int __name) __attribute__ ((__nothrow__ ));



extern size_t confstr (int __name, char *__buf, size_t __len) __attribute__ ((__nothrow__ ))
                                                  ;




extern __pid_t getpid (void) __attribute__ ((__nothrow__ ));


extern __pid_t getppid (void) __attribute__ ((__nothrow__ ));


extern __pid_t getpgrp (void) __attribute__ ((__nothrow__ ));


extern __pid_t __getpgid (__pid_t __pid) __attribute__ ((__nothrow__ ));

extern __pid_t getpgid (__pid_t __pid) __attribute__ ((__nothrow__ ));






extern int setpgid (__pid_t __pid, __pid_t __pgid) __attribute__ ((__nothrow__ ));
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) __attribute__ ((__nothrow__ ));






extern __pid_t setsid (void) __attribute__ ((__nothrow__ ));



extern __pid_t getsid (__pid_t __pid) __attribute__ ((__nothrow__ ));



extern __uid_t getuid (void) __attribute__ ((__nothrow__ ));


extern __uid_t geteuid (void) __attribute__ ((__nothrow__ ));


extern __gid_t getgid (void) __attribute__ ((__nothrow__ ));


extern __gid_t getegid (void) __attribute__ ((__nothrow__ ));




extern int getgroups (int __size, __gid_t __list[]) __attribute__ ((__nothrow__ ))
                                                  ;
# 722 "/usr/include/unistd.h" 3 4
extern int setuid (__uid_t __uid) __attribute__ ((__nothrow__ )) ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) __attribute__ ((__nothrow__ )) ;




extern int seteuid (__uid_t __uid) __attribute__ ((__nothrow__ )) ;






extern int setgid (__gid_t __gid) __attribute__ ((__nothrow__ )) ;




extern int setregid (__gid_t __rgid, __gid_t __egid) __attribute__ ((__nothrow__ )) ;




extern int setegid (__gid_t __gid) __attribute__ ((__nothrow__ )) ;
# 778 "/usr/include/unistd.h" 3 4
extern __pid_t fork (void) __attribute__ ((__nothrow__));







extern __pid_t vfork (void) __attribute__ ((__nothrow__ ));
# 799 "/usr/include/unistd.h" 3 4
extern char *ttyname (int __fd) __attribute__ ((__nothrow__ ));



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)))
                                                   ;



extern int isatty (int __fd) __attribute__ ((__nothrow__ ));




extern int ttyslot (void) __attribute__ ((__nothrow__ ));




extern int link (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)))
                                                   ;





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 3)))
                                                   ;



extern int unlink (const char *__name) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) __attribute__ ((__nothrow__ ));


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) __attribute__ ((__nothrow__ ));






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
                                                  ;




extern int setlogin (const char *__name) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/bits/getopt_posix.h" 3 4
# 1 "/usr/include/bits/getopt_core.h" 1 3 4
# 36 "/usr/include/bits/getopt_core.h" 3 4
extern char *optarg;
# 50 "/usr/include/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (2, 3)));
# 28 "/usr/include/bits/getopt_posix.h" 2 3 4
# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)))
                                                  ;






extern int sethostname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) __attribute__ ((__nothrow__ )) ;





extern int getdomainname (char *__name, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)))
                                                   ;
extern int setdomainname (const char *__name, size_t __len)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;




extern int vhangup (void) __attribute__ ((__nothrow__ ));


extern int revoke (const char *__file) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) __attribute__ ((__nothrow__ ));



extern char *getusershell (void) __attribute__ ((__nothrow__ ));
extern void endusershell (void) __attribute__ ((__nothrow__ ));
extern void setusershell (void) __attribute__ ((__nothrow__ ));





extern int daemon (int __nochdir, int __noclose) __attribute__ ((__nothrow__ )) ;






extern int chroot (const char *__path) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);
# 1002 "/usr/include/unistd.h" 3 4
extern long int gethostid (void);


extern void sync (void) __attribute__ ((__nothrow__ ));





extern int getpagesize (void) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));




extern int getdtablesize (void) __attribute__ ((__nothrow__ ));
# 1026 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1))) ;
# 1049 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) __attribute__ ((__nothrow__ )) ;
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) __attribute__ ((__nothrow__ )) ;





extern void *sbrk (intptr_t __delta) __attribute__ ((__nothrow__ ));
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) __attribute__ ((__nothrow__ ));
# 1114 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1150 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);
# 1162 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1, 2)));
# 1201 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length)
                                          ;
# 1221 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/unistd_ext.h" 1 3 4
# 1222 "/usr/include/unistd.h" 2 3 4
# 35 "/usr/include/glib-2.0/gio/gcredentials.h" 2
# 47 "/usr/include/glib-2.0/gio/gcredentials.h"
typedef struct _GCredentialsClass GCredentialsClass;

 extern
GType g_credentials_get_type (void) __attribute__ ((__const__));

 extern
GCredentials *g_credentials_new (void);

 extern
gchar *g_credentials_to_string (GCredentials *credentials);

 extern
gpointer g_credentials_get_native (GCredentials *credentials,
                                                   GCredentialsType native_type);

 extern
void g_credentials_set_native (GCredentials *credentials,
                                                   GCredentialsType native_type,
                                                   gpointer native);

 extern
gboolean g_credentials_is_same_user (GCredentials *credentials,
                                                   GCredentials *other_credentials,
                                                   GError **error);


 extern
pid_t g_credentials_get_unix_pid (GCredentials *credentials,
                                                   GError **error);
 extern
uid_t g_credentials_get_unix_user (GCredentials *credentials,
                                                   GError **error);
 extern
gboolean g_credentials_set_unix_user (GCredentials *credentials,
                                                   uid_t uid,
                                                   GError **error);
# 49 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdatagrambased.h" 1
# 44 "/usr/include/glib-2.0/gio/gdatagrambased.h"
typedef struct _GDatagramBasedInterface GDatagramBasedInterface;
# 64 "/usr/include/glib-2.0/gio/gdatagrambased.h"
struct _GDatagramBasedInterface
{
  GTypeInterface g_iface;


  gint (*receive_messages) (GDatagramBased *datagram_based,
                                         GInputMessage *messages,
                                         guint num_messages,
                                         gint flags,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
  gint (*send_messages) (GDatagramBased *datagram_based,
                                         GOutputMessage *messages,
                                         guint num_messages,
                                         gint flags,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);

  GSource *(*create_source) (GDatagramBased *datagram_based,
                                         GIOCondition condition,
                                         GCancellable *cancellable);
  GIOCondition (*condition_check) (GDatagramBased *datagram_based,
                                         GIOCondition condition);
  gboolean (*condition_wait) (GDatagramBased *datagram_based,
                                         GIOCondition condition,
                                         gint64 timeout,
                                         GCancellable *cancellable,
                                         GError **error);
};

 extern
GType
g_datagram_based_get_type (void);

 extern
gint
g_datagram_based_receive_messages (GDatagramBased *datagram_based,
                                       GInputMessage *messages,
                                       guint num_messages,
                                       gint flags,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);

 extern
gint
g_datagram_based_send_messages (GDatagramBased *datagram_based,
                                       GOutputMessage *messages,
                                       guint num_messages,
                                       gint flags,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);

 extern
GSource *
g_datagram_based_create_source (GDatagramBased *datagram_based,
                                       GIOCondition condition,
                                       GCancellable *cancellable);
 extern
GIOCondition
g_datagram_based_condition_check (GDatagramBased *datagram_based,
                                       GIOCondition condition);
 extern
gboolean
g_datagram_based_condition_wait (GDatagramBased *datagram_based,
                                       GIOCondition condition,
                                       gint64 timeout,
                                       GCancellable *cancellable,
                                       GError **error);
# 50 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdatainputstream.h" 1
# 41 "/usr/include/glib-2.0/gio/gdatainputstream.h"
typedef struct _GDataInputStreamClass GDataInputStreamClass;
typedef struct _GDataInputStreamPrivate GDataInputStreamPrivate;

struct _GDataInputStream
{
  GBufferedInputStream parent_instance;


  GDataInputStreamPrivate *priv;
};

struct _GDataInputStreamClass
{
  GBufferedInputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_data_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GDataInputStream * g_data_input_stream_new (GInputStream *base_stream);

 extern
void g_data_input_stream_set_byte_order (GDataInputStream *stream,
                                                                 GDataStreamByteOrder order);
 extern
GDataStreamByteOrder g_data_input_stream_get_byte_order (GDataInputStream *stream);
 extern
void g_data_input_stream_set_newline_type (GDataInputStream *stream,
                                                                 GDataStreamNewlineType type);
 extern
GDataStreamNewlineType g_data_input_stream_get_newline_type (GDataInputStream *stream);
 extern
guchar g_data_input_stream_read_byte (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
gint16 g_data_input_stream_read_int16 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
guint16 g_data_input_stream_read_uint16 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
gint32 g_data_input_stream_read_int32 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
guint32 g_data_input_stream_read_uint32 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
gint64 g_data_input_stream_read_int64 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
guint64 g_data_input_stream_read_uint64 (GDataInputStream *stream,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
char * g_data_input_stream_read_line (GDataInputStream *stream,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
char * g_data_input_stream_read_line_utf8 (GDataInputStream *stream,
         gsize *length,
         GCancellable *cancellable,
         GError **error);
 extern
void g_data_input_stream_read_line_async (GDataInputStream *stream,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
 extern
char * g_data_input_stream_read_line_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
 extern
char * g_data_input_stream_read_line_finish_utf8(GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto" "' instead"))) extern
char * g_data_input_stream_read_until (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto_async" "' instead"))) extern
void g_data_input_stream_read_until_async (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
__attribute__((__deprecated__("Use '" "g_data_input_stream_read_upto_finish" "' instead"))) extern
char * g_data_input_stream_read_until_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);

 extern
char * g_data_input_stream_read_upto (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gssize stop_chars_len,
                                                                 gsize *length,
                                                                 GCancellable *cancellable,
                                                                 GError **error);
 extern
void g_data_input_stream_read_upto_async (GDataInputStream *stream,
                                                                 const gchar *stop_chars,
                                                                 gssize stop_chars_len,
                                                                 gint io_priority,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);
 extern
char * g_data_input_stream_read_upto_finish (GDataInputStream *stream,
                                                                 GAsyncResult *result,
                                                                 gsize *length,
                                                                 GError **error);
# 51 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdataoutputstream.h" 1
# 41 "/usr/include/glib-2.0/gio/gdataoutputstream.h"
typedef struct _GDataOutputStream GDataOutputStream;
typedef struct _GDataOutputStreamClass GDataOutputStreamClass;
typedef struct _GDataOutputStreamPrivate GDataOutputStreamPrivate;

struct _GDataOutputStream
{
  GFilterOutputStream parent_instance;


  GDataOutputStreamPrivate *priv;
};

struct _GDataOutputStreamClass
{
  GFilterOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


 extern
GType g_data_output_stream_get_type (void) __attribute__ ((__const__));
 extern
GDataOutputStream * g_data_output_stream_new (GOutputStream *base_stream);

 extern
void g_data_output_stream_set_byte_order (GDataOutputStream *stream,
         GDataStreamByteOrder order);
 extern
GDataStreamByteOrder g_data_output_stream_get_byte_order (GDataOutputStream *stream);

 extern
gboolean g_data_output_stream_put_byte (GDataOutputStream *stream,
         guchar data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_int16 (GDataOutputStream *stream,
         gint16 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_uint16 (GDataOutputStream *stream,
         guint16 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_int32 (GDataOutputStream *stream,
         gint32 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_uint32 (GDataOutputStream *stream,
         guint32 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_int64 (GDataOutputStream *stream,
         gint64 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_uint64 (GDataOutputStream *stream,
         guint64 data,
         GCancellable *cancellable,
         GError **error);
 extern
gboolean g_data_output_stream_put_string (GDataOutputStream *stream,
         const char *str,
         GCancellable *cancellable,
         GError **error);
# 52 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusactiongroup.h" 1
# 46 "/usr/include/glib-2.0/gio/gdbusactiongroup.h"
 extern
GType g_dbus_action_group_get_type (void) __attribute__ ((__const__));

 extern
GDBusActionGroup * g_dbus_action_group_get (GDBusConnection *connection,
                                                                       const gchar *bus_name,
                                                                       const gchar *object_path);
# 53 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusaddress.h" 1
# 34 "/usr/include/glib-2.0/gio/gdbusaddress.h"
 extern
gchar *g_dbus_address_escape_value (const gchar *string);

 extern
gboolean g_dbus_is_address (const gchar *string);
 extern
gboolean g_dbus_is_supported_address (const gchar *string,
                                      GError **error);

 extern
void g_dbus_address_get_stream (const gchar *address,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);

 extern
GIOStream *g_dbus_address_get_stream_finish (GAsyncResult *res,
                                                       gchar **out_guid,
                                                       GError **error);

 extern
GIOStream *g_dbus_address_get_stream_sync (const gchar *address,
                                                       gchar **out_guid,
                                                       GCancellable *cancellable,
                                                       GError **error);

 extern
gchar *g_dbus_address_get_for_bus_sync (GBusType bus_type,
                                                       GCancellable *cancellable,
                                                       GError **error);
# 54 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusauthobserver.h" 1
# 38 "/usr/include/glib-2.0/gio/gdbusauthobserver.h"
 extern
GType g_dbus_auth_observer_get_type (void) __attribute__ ((__const__));
 extern
GDBusAuthObserver *g_dbus_auth_observer_new (void);
 extern
gboolean g_dbus_auth_observer_authorize_authenticated_peer (GDBusAuthObserver *observer,
                                                                      GIOStream *stream,
                                                                      GCredentials *credentials);

 extern
gboolean g_dbus_auth_observer_allow_mechanism (GDBusAuthObserver *observer,
                                                         const gchar *mechanism);
# 55 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusconnection.h" 1
# 38 "/usr/include/glib-2.0/gio/gdbusconnection.h"
 extern
GType g_dbus_connection_get_type (void) __attribute__ ((__const__));



 extern
void g_bus_get (GBusType bus_type,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
 extern
GDBusConnection *g_bus_get_finish (GAsyncResult *res,
                                                GError **error);
 extern
GDBusConnection *g_bus_get_sync (GBusType bus_type,
                                                GCancellable *cancellable,
                                                GError **error);



 extern
void g_dbus_connection_new (GIOStream *stream,
                                                               const gchar *guid,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
GDBusConnection *g_dbus_connection_new_finish (GAsyncResult *res,
                                                               GError **error);
 extern
GDBusConnection *g_dbus_connection_new_sync (GIOStream *stream,
                                                               const gchar *guid,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GError **error);

 extern
void g_dbus_connection_new_for_address (const gchar *address,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
GDBusConnection *g_dbus_connection_new_for_address_finish (GAsyncResult *res,
                                                               GError **error);
 extern
GDBusConnection *g_dbus_connection_new_for_address_sync (const gchar *address,
                                                               GDBusConnectionFlags flags,
                                                               GDBusAuthObserver *observer,
                                                               GCancellable *cancellable,
                                                               GError **error);



 extern
void g_dbus_connection_start_message_processing (GDBusConnection *connection);
 extern
gboolean g_dbus_connection_is_closed (GDBusConnection *connection);
 extern
GIOStream *g_dbus_connection_get_stream (GDBusConnection *connection);
 extern
const gchar *g_dbus_connection_get_guid (GDBusConnection *connection);
 extern
const gchar *g_dbus_connection_get_unique_name (GDBusConnection *connection);
 extern
GCredentials *g_dbus_connection_get_peer_credentials (GDBusConnection *connection);

 extern
guint32 g_dbus_connection_get_last_serial (GDBusConnection *connection);

 extern
gboolean g_dbus_connection_get_exit_on_close (GDBusConnection *connection);
 extern
void g_dbus_connection_set_exit_on_close (GDBusConnection *connection,
                                                               gboolean exit_on_close);
 extern
GDBusCapabilityFlags g_dbus_connection_get_capabilities (GDBusConnection *connection);
 extern
GDBusConnectionFlags g_dbus_connection_get_flags (GDBusConnection *connection);



 extern
void g_dbus_connection_close (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
 extern
gboolean g_dbus_connection_close_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
 extern
gboolean g_dbus_connection_close_sync (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GError **error);



 extern
void g_dbus_connection_flush (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
 extern
gboolean g_dbus_connection_flush_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
 extern
gboolean g_dbus_connection_flush_sync (GDBusConnection *connection,
                                                                   GCancellable *cancellable,
                                                                   GError **error);



 extern
gboolean g_dbus_connection_send_message (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   volatile guint32 *out_serial,
                                                                   GError **error);
 extern
void g_dbus_connection_send_message_with_reply (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint timeout_msec,
                                                                   volatile guint32 *out_serial,
                                                                   GCancellable *cancellable,
                                                                   GAsyncReadyCallback callback,
                                                                   gpointer user_data);
 extern
GDBusMessage *g_dbus_connection_send_message_with_reply_finish (GDBusConnection *connection,
                                                                   GAsyncResult *res,
                                                                   GError **error);
 extern
GDBusMessage *g_dbus_connection_send_message_with_reply_sync (GDBusConnection *connection,
                                                                   GDBusMessage *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint timeout_msec,
                                                                   volatile guint32 *out_serial,
                                                                   GCancellable *cancellable,
                                                                   GError **error);



 extern
gboolean g_dbus_connection_emit_signal (GDBusConnection *connection,
                                                               const gchar *destination_bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *signal_name,
                                                               GVariant *parameters,
                                                               GError **error);
 extern
void g_dbus_connection_call (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
GVariant *g_dbus_connection_call_finish (GDBusConnection *connection,
                                                               GAsyncResult *res,
                                                               GError **error);
 extern
GVariant *g_dbus_connection_call_sync (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GCancellable *cancellable,
                                                               GError **error);



 extern
void g_dbus_connection_call_with_unix_fd_list (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GUnixFDList *fd_list,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
GVariant *g_dbus_connection_call_with_unix_fd_list_finish (GDBusConnection *connection,
                                                               GUnixFDList **out_fd_list,
                                                               GAsyncResult *res,
                                                               GError **error);
 extern
GVariant *g_dbus_connection_call_with_unix_fd_list_sync (GDBusConnection *connection,
                                                               const gchar *bus_name,
                                                               const gchar *object_path,
                                                               const gchar *interface_name,
                                                               const gchar *method_name,
                                                               GVariant *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags flags,
                                                               gint timeout_msec,
                                                               GUnixFDList *fd_list,
                                                               GUnixFDList **out_fd_list,
                                                               GCancellable *cancellable,
                                                               GError **error);
# 280 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef void (*GDBusInterfaceMethodCallFunc) (GDBusConnection *connection,
                                              const gchar *sender,
                                              const gchar *object_path,
                                              const gchar *interface_name,
                                              const gchar *method_name,
                                              GVariant *parameters,
                                              GDBusMethodInvocation *invocation,
                                              gpointer user_data);
# 307 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef GVariant *(*GDBusInterfaceGetPropertyFunc) (GDBusConnection *connection,
                                                    const gchar *sender,
                                                    const gchar *object_path,
                                                    const gchar *interface_name,
                                                    const gchar *property_name,
                                                    GError **error,
                                                    gpointer user_data);
# 332 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef gboolean (*GDBusInterfaceSetPropertyFunc) (GDBusConnection *connection,
                                                    const gchar *sender,
                                                    const gchar *object_path,
                                                    const gchar *interface_name,
                                                    const gchar *property_name,
                                                    GVariant *value,
                                                    GError **error,
                                                    gpointer user_data);
# 391 "/usr/include/glib-2.0/gio/gdbusconnection.h"
struct _GDBusInterfaceVTable
{
  GDBusInterfaceMethodCallFunc method_call;
  GDBusInterfaceGetPropertyFunc get_property;
  GDBusInterfaceSetPropertyFunc set_property;






  gpointer padding[8];
};

 extern
guint g_dbus_connection_register_object (GDBusConnection *connection,
                                                               const gchar *object_path,
                                                               GDBusInterfaceInfo *interface_info,
                                                               const GDBusInterfaceVTable *vtable,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func,
                                                               GError **error);
 extern
guint g_dbus_connection_register_object_with_closures (GDBusConnection *connection,
                                                                  const gchar *object_path,
                                                                  GDBusInterfaceInfo *interface_info,
                                                                  GClosure *method_call_closure,
                                                                  GClosure *get_property_closure,
                                                                  GClosure *set_property_closure,
                                                                  GError **error);
 extern
gboolean g_dbus_connection_unregister_object (GDBusConnection *connection,
                                                               guint registration_id);
# 450 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef gchar** (*GDBusSubtreeEnumerateFunc) (GDBusConnection *connection,
                                              const gchar *sender,
                                              const gchar *object_path,
                                              gpointer user_data);
# 486 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef GDBusInterfaceInfo ** (*GDBusSubtreeIntrospectFunc) (GDBusConnection *connection,
                                                             const gchar *sender,
                                                             const gchar *object_path,
                                                             const gchar *node,
                                                             gpointer user_data);
# 511 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef const GDBusInterfaceVTable * (*GDBusSubtreeDispatchFunc) (GDBusConnection *connection,
                                                                  const gchar *sender,
                                                                  const gchar *object_path,
                                                                  const gchar *interface_name,
                                                                  const gchar *node,
                                                                  gpointer *out_user_data,
                                                                  gpointer user_data);
# 529 "/usr/include/glib-2.0/gio/gdbusconnection.h"
struct _GDBusSubtreeVTable
{
  GDBusSubtreeEnumerateFunc enumerate;
  GDBusSubtreeIntrospectFunc introspect;
  GDBusSubtreeDispatchFunc dispatch;






  gpointer padding[8];
};

 extern
guint g_dbus_connection_register_subtree (GDBusConnection *connection,
                                                               const gchar *object_path,
                                                               const GDBusSubtreeVTable *vtable,
                                                               GDBusSubtreeFlags flags,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func,
                                                               GError **error);
 extern
gboolean g_dbus_connection_unregister_subtree (GDBusConnection *connection,
                                                               guint registration_id);
# 572 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef void (*GDBusSignalCallback) (GDBusConnection *connection,
                                     const gchar *sender_name,
                                     const gchar *object_path,
                                     const gchar *interface_name,
                                     const gchar *signal_name,
                                     GVariant *parameters,
                                     gpointer user_data);

 extern
guint g_dbus_connection_signal_subscribe (GDBusConnection *connection,
                                                               const gchar *sender,
                                                               const gchar *interface_name,
                                                               const gchar *member,
                                                               const gchar *object_path,
                                                               const gchar *arg0,
                                                               GDBusSignalFlags flags,
                                                               GDBusSignalCallback callback,
                                                               gpointer user_data,
                                                               GDestroyNotify user_data_free_func);
 extern
void g_dbus_connection_signal_unsubscribe (GDBusConnection *connection,
                                                               guint subscription_id);
# 671 "/usr/include/glib-2.0/gio/gdbusconnection.h"
typedef GDBusMessage *(*GDBusMessageFilterFunction) (GDBusConnection *connection,
                                                     GDBusMessage *message,
                                                     gboolean incoming,
                                                     gpointer user_data);

 extern
guint g_dbus_connection_add_filter (GDBusConnection *connection,
                                    GDBusMessageFilterFunction filter_function,
                                    gpointer user_data,
                                    GDestroyNotify user_data_free_func);

 extern
void g_dbus_connection_remove_filter (GDBusConnection *connection,
                                       guint filter_id);
# 56 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbuserror.h" 1
# 50 "/usr/include/glib-2.0/gio/gdbuserror.h"
 extern
GQuark g_dbus_error_quark (void);


 extern
gboolean g_dbus_error_is_remote_error (const GError *error);
 extern
gchar *g_dbus_error_get_remote_error (const GError *error);
 extern
gboolean g_dbus_error_strip_remote_error (GError *error);
# 70 "/usr/include/glib-2.0/gio/gdbuserror.h"
struct _GDBusErrorEntry
{
  gint error_code;
  const gchar *dbus_error_name;
};

 extern
gboolean g_dbus_error_register_error (GQuark error_domain,
                                             gint error_code,
                                             const gchar *dbus_error_name);
 extern
gboolean g_dbus_error_unregister_error (GQuark error_domain,
                                             gint error_code,
                                             const gchar *dbus_error_name);
 extern
void g_dbus_error_register_error_domain (const gchar *error_domain_quark_name,
                                             volatile gsize *quark_volatile,
                                             const GDBusErrorEntry *entries,
                                             guint num_entries);


 extern
GError *g_dbus_error_new_for_dbus_error (const gchar *dbus_error_name,
                                             const gchar *dbus_error_message);
 extern
void g_dbus_error_set_dbus_error (GError **error,
                                             const gchar *dbus_error_name,
                                             const gchar *dbus_error_message,
                                             const gchar *format,
                                             ...) __attribute__((__format__ (__printf__, 4, 5)));
 extern
void g_dbus_error_set_dbus_error_valist (GError **error,
                                             const gchar *dbus_error_name,
                                             const gchar *dbus_error_message,
                                             const gchar *format,
                                             va_list var_args) __attribute__((__format__ (__printf__, 4, 0)));
 extern
gchar *g_dbus_error_encode_gerror (const GError *error);
# 57 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusinterface.h" 1
# 35 "/usr/include/glib-2.0/gio/gdbusinterface.h"
typedef struct _GDBusInterfaceIface GDBusInterfaceIface;
# 49 "/usr/include/glib-2.0/gio/gdbusinterface.h"
struct _GDBusInterfaceIface
{
  GTypeInterface parent_iface;


  GDBusInterfaceInfo *(*get_info) (GDBusInterface *interface_);
  GDBusObject *(*get_object) (GDBusInterface *interface_);
  void (*set_object) (GDBusInterface *interface_,
                                       GDBusObject *object);
  GDBusObject *(*dup_object) (GDBusInterface *interface_);
};

 extern
GType g_dbus_interface_get_type (void) __attribute__ ((__const__));
 extern
GDBusInterfaceInfo *g_dbus_interface_get_info (GDBusInterface *interface_);
 extern
GDBusObject *g_dbus_interface_get_object (GDBusInterface *interface_);
 extern
void g_dbus_interface_set_object (GDBusInterface *interface_,
                                                         GDBusObject *object);
 extern
GDBusObject *g_dbus_interface_dup_object (GDBusInterface *interface_);
# 58 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h" 1
# 37 "/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h"
typedef struct _GDBusInterfaceSkeletonClass GDBusInterfaceSkeletonClass;
typedef struct _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate;

struct _GDBusInterfaceSkeleton
{

  GObject parent_instance;
  GDBusInterfaceSkeletonPrivate *priv;
};
# 60 "/usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h"
struct _GDBusInterfaceSkeletonClass
{
  GObjectClass parent_class;


  GDBusInterfaceInfo *(*get_info) (GDBusInterfaceSkeleton *interface_);
  GDBusInterfaceVTable *(*get_vtable) (GDBusInterfaceSkeleton *interface_);
  GVariant *(*get_properties) (GDBusInterfaceSkeleton *interface_);
  void (*flush) (GDBusInterfaceSkeleton *interface_);


  gpointer vfunc_padding[8];



  gboolean (*g_authorize_method) (GDBusInterfaceSkeleton *interface_,
                                  GDBusMethodInvocation *invocation);


  gpointer signal_padding[8];
};

 extern
GType g_dbus_interface_skeleton_get_type (void) __attribute__ ((__const__));
 extern
GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags (GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_interface_skeleton_set_flags (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusInterfaceSkeletonFlags flags);
 extern
GDBusInterfaceInfo *g_dbus_interface_skeleton_get_info (GDBusInterfaceSkeleton *interface_);
 extern
GDBusInterfaceVTable *g_dbus_interface_skeleton_get_vtable (GDBusInterfaceSkeleton *interface_);
 extern
GVariant *g_dbus_interface_skeleton_get_properties (GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_interface_skeleton_flush (GDBusInterfaceSkeleton *interface_);

 extern
gboolean g_dbus_interface_skeleton_export (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection,
                                                                        const gchar *object_path,
                                                                        GError **error);
 extern
void g_dbus_interface_skeleton_unexport (GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_interface_skeleton_unexport_from_connection (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection);

 extern
GDBusConnection *g_dbus_interface_skeleton_get_connection (GDBusInterfaceSkeleton *interface_);
 extern
GList *g_dbus_interface_skeleton_get_connections (GDBusInterfaceSkeleton *interface_);
 extern
gboolean g_dbus_interface_skeleton_has_connection (GDBusInterfaceSkeleton *interface_,
                                                                        GDBusConnection *connection);
 extern
const gchar *g_dbus_interface_skeleton_get_object_path (GDBusInterfaceSkeleton *interface_);
# 59 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusintrospection.h" 1
# 45 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusAnnotationInfo
{

  gint ref_count;
  gchar *key;
  gchar *value;
  GDBusAnnotationInfo **annotations;
};
# 65 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusArgInfo
{

  gint ref_count;
  gchar *name;
  gchar *signature;
  GDBusAnnotationInfo **annotations;
};
# 86 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusMethodInfo
{

  gint ref_count;
  gchar *name;
  GDBusArgInfo **in_args;
  GDBusArgInfo **out_args;
  GDBusAnnotationInfo **annotations;
};
# 107 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusSignalInfo
{

  gint ref_count;
  gchar *name;
  GDBusArgInfo **args;
  GDBusAnnotationInfo **annotations;
};
# 128 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusPropertyInfo
{

  gint ref_count;
  gchar *name;
  gchar *signature;
  GDBusPropertyInfoFlags flags;
  GDBusAnnotationInfo **annotations;
};
# 151 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusInterfaceInfo
{

  gint ref_count;
  gchar *name;
  GDBusMethodInfo **methods;
  GDBusSignalInfo **signals;
  GDBusPropertyInfo **properties;
  GDBusAnnotationInfo **annotations;
};
# 174 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
struct _GDBusNodeInfo
{

  gint ref_count;
  gchar *path;
  GDBusInterfaceInfo **interfaces;
  GDBusNodeInfo **nodes;
  GDBusAnnotationInfo **annotations;
};

 extern
const gchar *g_dbus_annotation_info_lookup (GDBusAnnotationInfo **annotations,
                                                            const gchar *name);
 extern
GDBusMethodInfo *g_dbus_interface_info_lookup_method (GDBusInterfaceInfo *info,
                                                            const gchar *name);
 extern
GDBusSignalInfo *g_dbus_interface_info_lookup_signal (GDBusInterfaceInfo *info,
                                                            const gchar *name);
 extern
GDBusPropertyInfo *g_dbus_interface_info_lookup_property (GDBusInterfaceInfo *info,
                                                            const gchar *name);
 extern
void g_dbus_interface_info_cache_build (GDBusInterfaceInfo *info);
 extern
void g_dbus_interface_info_cache_release (GDBusInterfaceInfo *info);

 extern
void g_dbus_interface_info_generate_xml (GDBusInterfaceInfo *info,
                                                            guint indent,
                                                            GString *string_builder);

 extern
GDBusNodeInfo *g_dbus_node_info_new_for_xml (const gchar *xml_data,
                                                            GError **error);
 extern
GDBusInterfaceInfo *g_dbus_node_info_lookup_interface (GDBusNodeInfo *info,
                                                            const gchar *name);
 extern
void g_dbus_node_info_generate_xml (GDBusNodeInfo *info,
                                                            guint indent,
                                                            GString *string_builder);

 extern
GDBusNodeInfo *g_dbus_node_info_ref (GDBusNodeInfo *info);
 extern
GDBusInterfaceInfo *g_dbus_interface_info_ref (GDBusInterfaceInfo *info);
 extern
GDBusMethodInfo *g_dbus_method_info_ref (GDBusMethodInfo *info);
 extern
GDBusSignalInfo *g_dbus_signal_info_ref (GDBusSignalInfo *info);
 extern
GDBusPropertyInfo *g_dbus_property_info_ref (GDBusPropertyInfo *info);
 extern
GDBusArgInfo *g_dbus_arg_info_ref (GDBusArgInfo *info);
 extern
GDBusAnnotationInfo *g_dbus_annotation_info_ref (GDBusAnnotationInfo *info);

 extern
void g_dbus_node_info_unref (GDBusNodeInfo *info);
 extern
void g_dbus_interface_info_unref (GDBusInterfaceInfo *info);
 extern
void g_dbus_method_info_unref (GDBusMethodInfo *info);
 extern
void g_dbus_signal_info_unref (GDBusSignalInfo *info);
 extern
void g_dbus_property_info_unref (GDBusPropertyInfo *info);
 extern
void g_dbus_arg_info_unref (GDBusArgInfo *info);
 extern
void g_dbus_annotation_info_unref (GDBusAnnotationInfo *info);
# 310 "/usr/include/glib-2.0/gio/gdbusintrospection.h"
 extern
GType g_dbus_node_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_interface_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_method_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_signal_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_property_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_arg_info_get_type (void) __attribute__ ((__const__));
 extern
GType g_dbus_annotation_info_get_type (void) __attribute__ ((__const__));
# 60 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusmenumodel.h" 1
# 35 "/usr/include/glib-2.0/gio/gdbusmenumodel.h"
typedef struct _GDBusMenuModel GDBusMenuModel;

 extern
GType g_dbus_menu_model_get_type (void) __attribute__ ((__const__));

 extern
GDBusMenuModel * g_dbus_menu_model_get (GDBusConnection *connection,
                                                        const gchar *bus_name,
                                                        const gchar *object_path);
# 61 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusmessage.h" 1
# 38 "/usr/include/glib-2.0/gio/gdbusmessage.h"
 extern
GType g_dbus_message_get_type (void) __attribute__ ((__const__));
 extern
GDBusMessage *g_dbus_message_new (void);
 extern
GDBusMessage *g_dbus_message_new_signal (const gchar *path,
                                                             const gchar *interface_,
                                                             const gchar *signal);
 extern
GDBusMessage *g_dbus_message_new_method_call (const gchar *name,
                                                             const gchar *path,
                                                             const gchar *interface_,
                                                             const gchar *method);
 extern
GDBusMessage *g_dbus_message_new_method_reply (GDBusMessage *method_call_message);
 extern
GDBusMessage *g_dbus_message_new_method_error (GDBusMessage *method_call_message,
                                                             const gchar *error_name,
                                                             const gchar *error_message_format,
                                                             ...) __attribute__((__format__ (__printf__, 3, 4)));
 extern
GDBusMessage *g_dbus_message_new_method_error_valist (GDBusMessage *method_call_message,
                                                                  const gchar *error_name,
                                                                  const gchar *error_message_format,
                                                                  va_list var_args);
 extern
GDBusMessage *g_dbus_message_new_method_error_literal (GDBusMessage *method_call_message,
                                                                   const gchar *error_name,
                                                                   const gchar *error_message);
 extern
gchar *g_dbus_message_print (GDBusMessage *message,
                                                             guint indent);
 extern
gboolean g_dbus_message_get_locked (GDBusMessage *message);
 extern
void g_dbus_message_lock (GDBusMessage *message);
 extern
GDBusMessage *g_dbus_message_copy (GDBusMessage *message,
                                                             GError **error);
 extern
GDBusMessageByteOrder g_dbus_message_get_byte_order (GDBusMessage *message);
 extern
void g_dbus_message_set_byte_order (GDBusMessage *message,
                                                             GDBusMessageByteOrder byte_order);

 extern
GDBusMessageType g_dbus_message_get_message_type (GDBusMessage *message);
 extern
void g_dbus_message_set_message_type (GDBusMessage *message,
                                                             GDBusMessageType type);
 extern
GDBusMessageFlags g_dbus_message_get_flags (GDBusMessage *message);
 extern
void g_dbus_message_set_flags (GDBusMessage *message,
                                                             GDBusMessageFlags flags);
 extern
guint32 g_dbus_message_get_serial (GDBusMessage *message);
 extern
void g_dbus_message_set_serial (GDBusMessage *message,
                                                             guint32 serial);
 extern
GVariant *g_dbus_message_get_header (GDBusMessage *message,
                                                             GDBusMessageHeaderField header_field);
 extern
void g_dbus_message_set_header (GDBusMessage *message,
                                                             GDBusMessageHeaderField header_field,
                                                             GVariant *value);
 extern
guchar *g_dbus_message_get_header_fields (GDBusMessage *message);
 extern
GVariant *g_dbus_message_get_body (GDBusMessage *message);
 extern
void g_dbus_message_set_body (GDBusMessage *message,
                                                             GVariant *body);



 extern
GUnixFDList *g_dbus_message_get_unix_fd_list (GDBusMessage *message);
 extern
void g_dbus_message_set_unix_fd_list (GDBusMessage *message,
                                                             GUnixFDList *fd_list);



 extern
guint32 g_dbus_message_get_reply_serial (GDBusMessage *message);
 extern
void g_dbus_message_set_reply_serial (GDBusMessage *message,
                                                             guint32 value);

 extern
const gchar *g_dbus_message_get_interface (GDBusMessage *message);
 extern
void g_dbus_message_set_interface (GDBusMessage *message,
                                                             const gchar *value);

 extern
const gchar *g_dbus_message_get_member (GDBusMessage *message);
 extern
void g_dbus_message_set_member (GDBusMessage *message,
                                                             const gchar *value);

 extern
const gchar *g_dbus_message_get_path (GDBusMessage *message);
 extern
void g_dbus_message_set_path (GDBusMessage *message,
                                                             const gchar *value);

 extern
const gchar *g_dbus_message_get_sender (GDBusMessage *message);
 extern
void g_dbus_message_set_sender (GDBusMessage *message,
                                                             const gchar *value);

 extern
const gchar *g_dbus_message_get_destination (GDBusMessage *message);
 extern
void g_dbus_message_set_destination (GDBusMessage *message,
                                                             const gchar *value);

 extern
const gchar *g_dbus_message_get_error_name (GDBusMessage *message);
 extern
void g_dbus_message_set_error_name (GDBusMessage *message,
                                                             const gchar *value);

 extern
const gchar *g_dbus_message_get_signature (GDBusMessage *message);
 extern
void g_dbus_message_set_signature (GDBusMessage *message,
                                                             const gchar *value);

 extern
guint32 g_dbus_message_get_num_unix_fds (GDBusMessage *message);
 extern
void g_dbus_message_set_num_unix_fds (GDBusMessage *message,
                                                             guint32 value);

 extern
const gchar *g_dbus_message_get_arg0 (GDBusMessage *message);
 extern
const gchar *g_dbus_message_get_arg0_path (GDBusMessage *message);

 extern
GDBusMessage *g_dbus_message_new_from_blob (guchar *blob,
                                                             gsize blob_len,
                                                             GDBusCapabilityFlags capabilities,
                                                             GError **error);

 extern
gssize g_dbus_message_bytes_needed (guchar *blob,
                                                             gsize blob_len,
                                                             GError **error);

 extern
guchar *g_dbus_message_to_blob (GDBusMessage *message,
                                                             gsize *out_size,
                                                             GDBusCapabilityFlags capabilities,
                                                             GError **error);

 extern
gboolean g_dbus_message_to_gerror (GDBusMessage *message,
                                                             GError **error);
# 62 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusmethodinvocation.h" 1
# 73 "/usr/include/glib-2.0/gio/gdbusmethodinvocation.h"
 extern
GType g_dbus_method_invocation_get_type (void) __attribute__ ((__const__));
 extern
const gchar *g_dbus_method_invocation_get_sender (GDBusMethodInvocation *invocation);
 extern
const gchar *g_dbus_method_invocation_get_object_path (GDBusMethodInvocation *invocation);
 extern
const gchar *g_dbus_method_invocation_get_interface_name (GDBusMethodInvocation *invocation);
 extern
const gchar *g_dbus_method_invocation_get_method_name (GDBusMethodInvocation *invocation);
 extern
const GDBusMethodInfo *g_dbus_method_invocation_get_method_info (GDBusMethodInvocation *invocation);
 extern
const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info (GDBusMethodInvocation *invocation);
 extern
GDBusConnection *g_dbus_method_invocation_get_connection (GDBusMethodInvocation *invocation);
 extern
GDBusMessage *g_dbus_method_invocation_get_message (GDBusMethodInvocation *invocation);
 extern
GVariant *g_dbus_method_invocation_get_parameters (GDBusMethodInvocation *invocation);
 extern
gpointer g_dbus_method_invocation_get_user_data (GDBusMethodInvocation *invocation);

 extern
void g_dbus_method_invocation_return_value (GDBusMethodInvocation *invocation,
                                                                      GVariant *parameters);

 extern
void g_dbus_method_invocation_return_value_with_unix_fd_list (GDBusMethodInvocation *invocation,
                                                                                GVariant *parameters,
                                                                                GUnixFDList *fd_list);

 extern
void g_dbus_method_invocation_return_error (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *format,
                                                                      ...) __attribute__((__format__ (__printf__, 4, 5)));
 extern
void g_dbus_method_invocation_return_error_valist (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *format,
                                                                      va_list var_args)
                                                                      __attribute__((__format__ (__printf__, 4, 0)));
 extern
void g_dbus_method_invocation_return_error_literal (GDBusMethodInvocation *invocation,
                                                                      GQuark domain,
                                                                      gint code,
                                                                      const gchar *message);
 extern
void g_dbus_method_invocation_return_gerror (GDBusMethodInvocation *invocation,
                                                                      const GError *error);
 extern
void g_dbus_method_invocation_take_error (GDBusMethodInvocation *invocation,
                                                                      GError *error);
 extern
void g_dbus_method_invocation_return_dbus_error (GDBusMethodInvocation *invocation,
                                                                      const gchar *error_name,
                                                                      const gchar *error_message);
# 63 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusnameowning.h" 1
# 44 "/usr/include/glib-2.0/gio/gdbusnameowning.h"
typedef void (*GBusAcquiredCallback) (GDBusConnection *connection,
                                      const gchar *name,
                                      gpointer user_data);
# 58 "/usr/include/glib-2.0/gio/gdbusnameowning.h"
typedef void (*GBusNameAcquiredCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          gpointer user_data);
# 73 "/usr/include/glib-2.0/gio/gdbusnameowning.h"
typedef void (*GBusNameLostCallback) (GDBusConnection *connection,
                                      const gchar *name,
                                      gpointer user_data);

 extern
guint g_bus_own_name (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GBusAcquiredCallback bus_acquired_handler,
                                      GBusNameAcquiredCallback name_acquired_handler,
                                      GBusNameLostCallback name_lost_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);

 extern
guint g_bus_own_name_on_connection (GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GBusNameAcquiredCallback name_acquired_handler,
                                      GBusNameLostCallback name_lost_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);

 extern
guint g_bus_own_name_with_closures (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GClosure *bus_acquired_closure,
                                      GClosure *name_acquired_closure,
                                      GClosure *name_lost_closure);

 extern
guint g_bus_own_name_on_connection_with_closures (
                                      GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameOwnerFlags flags,
                                      GClosure *name_acquired_closure,
                                      GClosure *name_lost_closure);

 extern
void g_bus_unown_name (guint owner_id);
# 64 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusnamewatching.h" 1
# 45 "/usr/include/glib-2.0/gio/gdbusnamewatching.h"
typedef void (*GBusNameAppearedCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          const gchar *name_owner,
                                          gpointer user_data);
# 65 "/usr/include/glib-2.0/gio/gdbusnamewatching.h"
typedef void (*GBusNameVanishedCallback) (GDBusConnection *connection,
                                          const gchar *name,
                                          gpointer user_data);


 extern
guint g_bus_watch_name (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GBusNameAppearedCallback name_appeared_handler,
                                      GBusNameVanishedCallback name_vanished_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
 extern
guint g_bus_watch_name_on_connection (GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GBusNameAppearedCallback name_appeared_handler,
                                      GBusNameVanishedCallback name_vanished_handler,
                                      gpointer user_data,
                                      GDestroyNotify user_data_free_func);
 extern
guint g_bus_watch_name_with_closures (GBusType bus_type,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GClosure *name_appeared_closure,
                                      GClosure *name_vanished_closure);
 extern
guint g_bus_watch_name_on_connection_with_closures (
                                      GDBusConnection *connection,
                                      const gchar *name,
                                      GBusNameWatcherFlags flags,
                                      GClosure *name_appeared_closure,
                                      GClosure *name_vanished_closure);
 extern
void g_bus_unwatch_name (guint watcher_id);
# 65 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobject.h" 1
# 35 "/usr/include/glib-2.0/gio/gdbusobject.h"
typedef struct _GDBusObjectIface GDBusObjectIface;
# 50 "/usr/include/glib-2.0/gio/gdbusobject.h"
struct _GDBusObjectIface
{
  GTypeInterface parent_iface;


  const gchar *(*get_object_path) (GDBusObject *object);
  GList *(*get_interfaces) (GDBusObject *object);
  GDBusInterface *(*get_interface) (GDBusObject *object,
                                       const gchar *interface_name);


  void (*interface_added) (GDBusObject *object,
                             GDBusInterface *interface_);
  void (*interface_removed) (GDBusObject *object,
                             GDBusInterface *interface_);

};

 extern
GType g_dbus_object_get_type (void) __attribute__ ((__const__));
 extern
const gchar *g_dbus_object_get_object_path (GDBusObject *object);
 extern
GList *g_dbus_object_get_interfaces (GDBusObject *object);
 extern
GDBusInterface *g_dbus_object_get_interface (GDBusObject *object,
                                                const gchar *interface_name);
# 66 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectmanager.h" 1
# 35 "/usr/include/glib-2.0/gio/gdbusobjectmanager.h"
typedef struct _GDBusObjectManagerIface GDBusObjectManagerIface;
# 53 "/usr/include/glib-2.0/gio/gdbusobjectmanager.h"
struct _GDBusObjectManagerIface
{
  GTypeInterface parent_iface;


  const gchar *(*get_object_path) (GDBusObjectManager *manager);
  GList *(*get_objects) (GDBusObjectManager *manager);
  GDBusObject *(*get_object) (GDBusObjectManager *manager,
                                       const gchar *object_path);
  GDBusInterface *(*get_interface) (GDBusObjectManager *manager,
                                       const gchar *object_path,
                                       const gchar *interface_name);


  void (*object_added) (GDBusObjectManager *manager,
                                           GDBusObject *object);
  void (*object_removed) (GDBusObjectManager *manager,
                                           GDBusObject *object);

  void (*interface_added) (GDBusObjectManager *manager,
                                           GDBusObject *object,
                                           GDBusInterface *interface_);
  void (*interface_removed) (GDBusObjectManager *manager,
                                           GDBusObject *object,
                                           GDBusInterface *interface_);
};

 extern
GType g_dbus_object_manager_get_type (void) __attribute__ ((__const__));
 extern
const gchar *g_dbus_object_manager_get_object_path (GDBusObjectManager *manager);
 extern
GList *g_dbus_object_manager_get_objects (GDBusObjectManager *manager);
 extern
GDBusObject *g_dbus_object_manager_get_object (GDBusObjectManager *manager,
                                                        const gchar *object_path);
 extern
GDBusInterface *g_dbus_object_manager_get_interface (GDBusObjectManager *manager,
                                                        const gchar *object_path,
                                                        const gchar *interface_name);
# 67 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h" 1
# 37 "/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h"
typedef struct _GDBusObjectManagerClientClass GDBusObjectManagerClientClass;
typedef struct _GDBusObjectManagerClientPrivate GDBusObjectManagerClientPrivate;

struct _GDBusObjectManagerClient
{

  GObject parent_instance;
  GDBusObjectManagerClientPrivate *priv;
};
# 57 "/usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h"
struct _GDBusObjectManagerClientClass
{
  GObjectClass parent_class;


  void (*interface_proxy_signal) (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy *object_proxy,
                                                 GDBusProxy *interface_proxy,
                                                 const gchar *sender_name,
                                                 const gchar *signal_name,
                                                 GVariant *parameters);

  void (*interface_proxy_properties_changed) (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy *object_proxy,
                                                 GDBusProxy *interface_proxy,
                                                 GVariant *changed_properties,
                                                 const gchar* const *invalidated_properties);


  gpointer padding[8];
};

 extern
GType g_dbus_object_manager_client_get_type (void) __attribute__ ((__const__));
 extern
void g_dbus_object_manager_client_new (GDBusConnection *connection,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GAsyncReadyCallback callback,
                                                                               gpointer user_data);
 extern
GDBusObjectManager *g_dbus_object_manager_client_new_finish (GAsyncResult *res,
                                                                               GError **error);
 extern
GDBusObjectManager *g_dbus_object_manager_client_new_sync (GDBusConnection *connection,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GError **error);
 extern
void g_dbus_object_manager_client_new_for_bus (GBusType bus_type,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GAsyncReadyCallback callback,
                                                                               gpointer user_data);
 extern
GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_finish (GAsyncResult *res,
                                                                               GError **error);
 extern
GDBusObjectManager *g_dbus_object_manager_client_new_for_bus_sync (GBusType bus_type,
                                                                               GDBusObjectManagerClientFlags flags,
                                                                               const gchar *name,
                                                                               const gchar *object_path,
                                                                               GDBusProxyTypeFunc get_proxy_type_func,
                                                                               gpointer get_proxy_type_user_data,
                                                                               GDestroyNotify get_proxy_type_destroy_notify,
                                                                               GCancellable *cancellable,
                                                                               GError **error);
 extern
GDBusConnection *g_dbus_object_manager_client_get_connection (GDBusObjectManagerClient *manager);
 extern
GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags (GDBusObjectManagerClient *manager);
 extern
const gchar *g_dbus_object_manager_client_get_name (GDBusObjectManagerClient *manager);
 extern
gchar *g_dbus_object_manager_client_get_name_owner (GDBusObjectManagerClient *manager);
# 68 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h" 1
# 37 "/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h"
typedef struct _GDBusObjectManagerServerClass GDBusObjectManagerServerClass;
typedef struct _GDBusObjectManagerServerPrivate GDBusObjectManagerServerPrivate;

struct _GDBusObjectManagerServer
{

  GObject parent_instance;
  GDBusObjectManagerServerPrivate *priv;
};
# 55 "/usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h"
struct _GDBusObjectManagerServerClass
{
  GObjectClass parent_class;


  gpointer padding[8];
};

 extern
GType g_dbus_object_manager_server_get_type (void) __attribute__ ((__const__));
 extern
GDBusObjectManagerServer *g_dbus_object_manager_server_new (const gchar *object_path);
 extern
GDBusConnection *g_dbus_object_manager_server_get_connection (GDBusObjectManagerServer *manager);
 extern
void g_dbus_object_manager_server_set_connection (GDBusObjectManagerServer *manager,
                                                                            GDBusConnection *connection);
 extern
void g_dbus_object_manager_server_export (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
 extern
void g_dbus_object_manager_server_export_uniquely (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
 extern
gboolean g_dbus_object_manager_server_is_exported (GDBusObjectManagerServer *manager,
                                                                            GDBusObjectSkeleton *object);
 extern
gboolean g_dbus_object_manager_server_unexport (GDBusObjectManagerServer *manager,
                                                                            const gchar *object_path);
# 69 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectproxy.h" 1
# 37 "/usr/include/glib-2.0/gio/gdbusobjectproxy.h"
typedef struct _GDBusObjectProxyClass GDBusObjectProxyClass;
typedef struct _GDBusObjectProxyPrivate GDBusObjectProxyPrivate;

struct _GDBusObjectProxy
{

  GObject parent_instance;
  GDBusObjectProxyPrivate *priv;
};
# 55 "/usr/include/glib-2.0/gio/gdbusobjectproxy.h"
struct _GDBusObjectProxyClass
{
  GObjectClass parent_class;


  gpointer padding[8];
};

 extern
GType g_dbus_object_proxy_get_type (void) __attribute__ ((__const__));
 extern
GDBusObjectProxy *g_dbus_object_proxy_new (GDBusConnection *connection,
                                                      const gchar *object_path);
 extern
GDBusConnection *g_dbus_object_proxy_get_connection (GDBusObjectProxy *proxy);
# 70 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusobjectskeleton.h" 1
# 37 "/usr/include/glib-2.0/gio/gdbusobjectskeleton.h"
typedef struct _GDBusObjectSkeletonClass GDBusObjectSkeletonClass;
typedef struct _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate;

struct _GDBusObjectSkeleton
{

  GObject parent_instance;
  GDBusObjectSkeletonPrivate *priv;
};
# 56 "/usr/include/glib-2.0/gio/gdbusobjectskeleton.h"
struct _GDBusObjectSkeletonClass
{
  GObjectClass parent_class;


  gboolean (*authorize_method) (GDBusObjectSkeleton *object,
                                GDBusInterfaceSkeleton *interface_,
                                GDBusMethodInvocation *invocation);


  gpointer padding[8];
};

 extern
GType g_dbus_object_skeleton_get_type (void) __attribute__ ((__const__));
 extern
GDBusObjectSkeleton *g_dbus_object_skeleton_new (const gchar *object_path);
 extern
void g_dbus_object_skeleton_flush (GDBusObjectSkeleton *object);
 extern
void g_dbus_object_skeleton_add_interface (GDBusObjectSkeleton *object,
                                                                       GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_object_skeleton_remove_interface (GDBusObjectSkeleton *object,
                                                                       GDBusInterfaceSkeleton *interface_);
 extern
void g_dbus_object_skeleton_remove_interface_by_name (GDBusObjectSkeleton *object,
                                                                       const gchar *interface_name);
 extern
void g_dbus_object_skeleton_set_object_path (GDBusObjectSkeleton *object,
                                                                       const gchar *object_path);
# 71 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusproxy.h" 1
# 42 "/usr/include/glib-2.0/gio/gdbusproxy.h"
typedef struct _GDBusProxyClass GDBusProxyClass;
typedef struct _GDBusProxyPrivate GDBusProxyPrivate;

struct _GDBusProxy
{

  GObject parent_instance;
  GDBusProxyPrivate *priv;
};
# 61 "/usr/include/glib-2.0/gio/gdbusproxy.h"
struct _GDBusProxyClass
{

  GObjectClass parent_class;



  void (*g_properties_changed) (GDBusProxy *proxy,
                                GVariant *changed_properties,
                                const gchar* const *invalidated_properties);
  void (*g_signal) (GDBusProxy *proxy,
                                const gchar *sender_name,
                                const gchar *signal_name,
                                GVariant *parameters);



  gpointer padding[32];
};

 extern
GType g_dbus_proxy_get_type (void) __attribute__ ((__const__));
 extern
void g_dbus_proxy_new (GDBusConnection *connection,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
GDBusProxy *g_dbus_proxy_new_finish (GAsyncResult *res,
                                                         GError **error);
 extern
GDBusProxy *g_dbus_proxy_new_sync (GDBusConnection *connection,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
void g_dbus_proxy_new_for_bus (GBusType bus_type,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
GDBusProxy *g_dbus_proxy_new_for_bus_finish (GAsyncResult *res,
                                                         GError **error);
 extern
GDBusProxy *g_dbus_proxy_new_for_bus_sync (GBusType bus_type,
                                                         GDBusProxyFlags flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar *name,
                                                         const gchar *object_path,
                                                         const gchar *interface_name,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
GDBusConnection *g_dbus_proxy_get_connection (GDBusProxy *proxy);
 extern
GDBusProxyFlags g_dbus_proxy_get_flags (GDBusProxy *proxy);
 extern
const gchar *g_dbus_proxy_get_name (GDBusProxy *proxy);
 extern
gchar *g_dbus_proxy_get_name_owner (GDBusProxy *proxy);
 extern
const gchar *g_dbus_proxy_get_object_path (GDBusProxy *proxy);
 extern
const gchar *g_dbus_proxy_get_interface_name (GDBusProxy *proxy);
 extern
gint g_dbus_proxy_get_default_timeout (GDBusProxy *proxy);
 extern
void g_dbus_proxy_set_default_timeout (GDBusProxy *proxy,
                                                         gint timeout_msec);
 extern
GDBusInterfaceInfo *g_dbus_proxy_get_interface_info (GDBusProxy *proxy);
 extern
void g_dbus_proxy_set_interface_info (GDBusProxy *proxy,
                                                         GDBusInterfaceInfo *info);
 extern
GVariant *g_dbus_proxy_get_cached_property (GDBusProxy *proxy,
                                                         const gchar *property_name);
 extern
void g_dbus_proxy_set_cached_property (GDBusProxy *proxy,
                                                         const gchar *property_name,
                                                         GVariant *value);
 extern
gchar **g_dbus_proxy_get_cached_property_names (GDBusProxy *proxy);
 extern
void g_dbus_proxy_call (GDBusProxy *proxy,
                                                         const gchar *method_name,
                                                         GVariant *parameters,
                                                         GDBusCallFlags flags,
                                                         gint timeout_msec,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);
 extern
GVariant *g_dbus_proxy_call_finish (GDBusProxy *proxy,
                                                         GAsyncResult *res,
                                                         GError **error);
 extern
GVariant *g_dbus_proxy_call_sync (GDBusProxy *proxy,
                                                         const gchar *method_name,
                                                         GVariant *parameters,
                                                         GDBusCallFlags flags,
                                                         gint timeout_msec,
                                                         GCancellable *cancellable,
                                                         GError **error);



 extern
void g_dbus_proxy_call_with_unix_fd_list (GDBusProxy *proxy,
                                                             const gchar *method_name,
                                                             GVariant *parameters,
                                                             GDBusCallFlags flags,
                                                             gint timeout_msec,
                                                             GUnixFDList *fd_list,
                                                             GCancellable *cancellable,
                                                             GAsyncReadyCallback callback,
                                                             gpointer user_data);
 extern
GVariant *g_dbus_proxy_call_with_unix_fd_list_finish (GDBusProxy *proxy,
                                                             GUnixFDList **out_fd_list,
                                                             GAsyncResult *res,
                                                             GError **error);
 extern
GVariant *g_dbus_proxy_call_with_unix_fd_list_sync (GDBusProxy *proxy,
                                                             const gchar *method_name,
                                                             GVariant *parameters,
                                                             GDBusCallFlags flags,
                                                             gint timeout_msec,
                                                             GUnixFDList *fd_list,
                                                             GUnixFDList **out_fd_list,
                                                             GCancellable *cancellable,
                                                             GError **error);
# 72 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusserver.h" 1
# 38 "/usr/include/glib-2.0/gio/gdbusserver.h"
 extern
GType g_dbus_server_get_type (void) __attribute__ ((__const__));
 extern
GDBusServer *g_dbus_server_new_sync (const gchar *address,
                                                    GDBusServerFlags flags,
                                                    const gchar *guid,
                                                    GDBusAuthObserver *observer,
                                                    GCancellable *cancellable,
                                                    GError **error);
 extern
const gchar *g_dbus_server_get_client_address (GDBusServer *server);
 extern
const gchar *g_dbus_server_get_guid (GDBusServer *server);
 extern
GDBusServerFlags g_dbus_server_get_flags (GDBusServer *server);
 extern
void g_dbus_server_start (GDBusServer *server);
 extern
void g_dbus_server_stop (GDBusServer *server);
 extern
gboolean g_dbus_server_is_active (GDBusServer *server);
# 73 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdbusutils.h" 1
# 34 "/usr/include/glib-2.0/gio/gdbusutils.h"
 extern
gboolean g_dbus_is_guid (const gchar *string);
 extern
gchar *g_dbus_generate_guid (void);

 extern
gboolean g_dbus_is_name (const gchar *string);
 extern
gboolean g_dbus_is_unique_name (const gchar *string);
 extern
gboolean g_dbus_is_member_name (const gchar *string);
 extern
gboolean g_dbus_is_interface_name (const gchar *string);
 extern
gboolean g_dbus_is_error_name (const gchar *string);

 extern
void g_dbus_gvariant_to_gvalue (GVariant *value,
                                GValue *out_gvalue);
 extern
GVariant *g_dbus_gvalue_to_gvariant (const GValue *gvalue,
                                     const GVariantType *type);
 extern
gchar *g_dbus_escape_object_path_bytestring (const guint8 *bytes);
 extern
gchar *g_dbus_escape_object_path (const gchar *s);
 extern
guint8 *g_dbus_unescape_object_path (const gchar *s);
# 74 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdebugcontroller.h" 1
# 45 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
 extern
GType g_debug_controller_get_type (void);
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma clang diagnostic push
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
 typedef struct _GDebugController GDebugController; typedef struct _GDebugControllerInterface GDebugControllerInterface; typedef GDebugController *GDebugController_autoptr; typedef GList *GDebugController_listautoptr; typedef GSList *GDebugController_slistautoptr; typedef GQueue *GDebugController_queueautoptr;
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma clang diagnostic push
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugController (GDebugController *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugController (GDebugController **_ptr) { glib_autoptr_clear_GDebugController (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDebugController (void *_ptr) { (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugController (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDebugController); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugController (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDebugController); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugController (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDebugController); }
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma clang diagnostic pop
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
 __attribute__ ((__unused__)) static inline GDebugController * g_debug_controller (gpointer ptr) { return (((GDebugController*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline gboolean g_IS_debug_controller (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_debug_controller_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GDebugControllerInterface * g_debug_controller_GET_IFACE (gpointer ptr) { return (((GDebugControllerInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_debug_controller_get_type ())))); }
# 46 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
#pragma clang diagnostic pop
# 60 "/usr/include/glib-2.0/gio/gdebugcontroller.h"
struct _GDebugControllerInterface {

  GTypeInterface g_iface;
};

 extern
gboolean g_debug_controller_get_debug_enabled (GDebugController *self);
 extern
void g_debug_controller_set_debug_enabled (GDebugController *self,
                                                                 gboolean debug_enabled);
# 75 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h" 1
# 32 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 extern
GType g_debug_controller_dbus_get_type (void);
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic push
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 typedef struct _GDebugControllerDBus GDebugControllerDBus; typedef struct _GDebugControllerDBusClass GDebugControllerDBusClass; struct _GDebugControllerDBus { GObject parent_instance; }; typedef GDebugControllerDBus *GDebugControllerDBus_autoptr; typedef GList *GDebugControllerDBus_listautoptr; typedef GSList *GDebugControllerDBus_slistautoptr; typedef GQueue *GDebugControllerDBus_queueautoptr;
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic push
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugControllerDBus (GDebugControllerDBus *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugControllerDBus (GDebugControllerDBus **_ptr) { glib_autoptr_clear_GDebugControllerDBus (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDebugControllerDBus (void *_ptr) { (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugControllerDBus (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDebugControllerDBus); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugControllerDBus (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDebugControllerDBus); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugControllerDBus (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDebugControllerDBus); }
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic pop
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 typedef GDebugControllerDBusClass *GDebugControllerDBusClass_autoptr; typedef GList *GDebugControllerDBusClass_listautoptr; typedef GSList *GDebugControllerDBusClass_slistautoptr; typedef GQueue *GDebugControllerDBusClass_queueautoptr;
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic push
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDebugControllerDBusClass (GDebugControllerDBusClass *_ptr) { if (_ptr) (g_type_class_unref) ((GDebugControllerDBusClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDebugControllerDBusClass (GDebugControllerDBusClass **_ptr) { glib_autoptr_clear_GDebugControllerDBusClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDebugControllerDBusClass (void *_ptr) { (g_type_class_unref) ((GDebugControllerDBusClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDebugControllerDBusClass (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDebugControllerDBusClass); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDebugControllerDBusClass (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDebugControllerDBusClass); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDebugControllerDBusClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDebugControllerDBusClass); }
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic pop
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
 __attribute__ ((__unused__)) static inline GDebugControllerDBus * G_DEBUG_CONTROLLER_DBUS (gpointer ptr) { return (((GDebugControllerDBus*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline GDebugControllerDBusClass * G_DEBUG_CONTROLLER_DBUS_CLASS (gpointer ptr) { return (((GDebugControllerDBusClass*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline gboolean G_IS_DEBUG_CONTROLLER_DBUS (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_debug_controller_dbus_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline gboolean G_IS_DEBUG_CONTROLLER_DBUS_CLASS (gpointer ptr) { return ((__extension__ ({ GTypeClass *__class = (GTypeClass*) (ptr); GType __t = (g_debug_controller_dbus_get_type ()); gboolean __r; if (!__class) __r = (0); else if (__class->g_type == __t) __r = (!(0)); else __r = g_type_check_class_is_a (__class, __t); __r; }))); } __attribute__ ((__unused__)) static inline GDebugControllerDBusClass * G_DEBUG_CONTROLLER_DBUS_GET_CLASS (gpointer ptr) { return (((GDebugControllerDBusClass*) (((GTypeInstance*) (ptr))->g_class))); }
# 33 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
#pragma clang diagnostic pop
# 44 "/usr/include/glib-2.0/gio/gdebugcontrollerdbus.h"
struct _GDebugControllerDBusClass
{
  GObjectClass parent_class;

  gboolean (*authorize) (GDebugControllerDBus *controller,
                          GDBusMethodInvocation *invocation);

  gpointer padding[12];
};

 extern
GDebugControllerDBus *g_debug_controller_dbus_new (GDBusConnection *connection,
                                                   GCancellable *cancellable,
                                                   GError **error);

 extern
void g_debug_controller_dbus_stop (GDebugControllerDBus *self);
# 76 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdrive.h" 1
# 89 "/usr/include/glib-2.0/gio/gdrive.h"
typedef struct _GDriveIface GDriveIface;

struct _GDriveIface
{
  GTypeInterface g_iface;


  void (* changed) (GDrive *drive);
  void (* disconnected) (GDrive *drive);
  void (* eject_button) (GDrive *drive);


  char * (* get_name) (GDrive *drive);
  GIcon * (* get_icon) (GDrive *drive);
  gboolean (* has_volumes) (GDrive *drive);
  GList * (* get_volumes) (GDrive *drive);
  gboolean (* is_media_removable) (GDrive *drive);
  gboolean (* has_media) (GDrive *drive);
  gboolean (* is_media_check_automatic) (GDrive *drive);
  gboolean (* can_eject) (GDrive *drive);
  gboolean (* can_poll_for_media) (GDrive *drive);
  void (* eject) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);
  void (* poll_for_media) (GDrive *drive,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* poll_for_media_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);

  char * (* get_identifier) (GDrive *drive,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GDrive *drive);

  GDriveStartStopType (* get_start_stop_type) (GDrive *drive);

  gboolean (* can_start) (GDrive *drive);
  gboolean (* can_start_degraded) (GDrive *drive);
  void (* start) (GDrive *drive,
                                         GDriveStartFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* start_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);

  gboolean (* can_stop) (GDrive *drive);
  void (* stop) (GDrive *drive,
                                         GMountUnmountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* stop_finish) (GDrive *drive,
                                         GAsyncResult *result,
                                         GError **error);

  void (* stop_button) (GDrive *drive);

  void (* eject_with_operation) (GDrive *drive,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GDrive *drive,
                                             GAsyncResult *result,
                                             GError **error);

  const gchar * (* get_sort_key) (GDrive *drive);
  GIcon * (* get_symbolic_icon) (GDrive *drive);
  gboolean (* is_removable) (GDrive *drive);

};

 extern
GType g_drive_get_type (void) __attribute__ ((__const__));

 extern
char * g_drive_get_name (GDrive *drive);
 extern
GIcon * g_drive_get_icon (GDrive *drive);
 extern
GIcon * g_drive_get_symbolic_icon (GDrive *drive);
 extern
gboolean g_drive_has_volumes (GDrive *drive);
 extern
GList * g_drive_get_volumes (GDrive *drive);
 extern
gboolean g_drive_is_removable (GDrive *drive);
 extern
gboolean g_drive_is_media_removable (GDrive *drive);
 extern
gboolean g_drive_has_media (GDrive *drive);
 extern
gboolean g_drive_is_media_check_automatic (GDrive *drive);
 extern
gboolean g_drive_can_poll_for_media (GDrive *drive);
 extern
gboolean g_drive_can_eject (GDrive *drive);
__attribute__((__deprecated__("Use '" "g_drive_eject_with_operation" "' instead"))) extern
void g_drive_eject (GDrive *drive,
                                           GMountUnmountFlags flags,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);

__attribute__((__deprecated__("Use '" "g_drive_eject_with_operation_finish" "' instead"))) extern
gboolean g_drive_eject_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
 extern
void g_drive_poll_for_media (GDrive *drive,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_drive_poll_for_media_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);
 extern
char * g_drive_get_identifier (GDrive *drive,
                                           const char *kind);
 extern
char ** g_drive_enumerate_identifiers (GDrive *drive);

 extern
GDriveStartStopType g_drive_get_start_stop_type (GDrive *drive);

 extern
gboolean g_drive_can_start (GDrive *drive);
 extern
gboolean g_drive_can_start_degraded (GDrive *drive);
 extern
void g_drive_start (GDrive *drive,
                                           GDriveStartFlags flags,
                                           GMountOperation *mount_operation,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_drive_start_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);

 extern
gboolean g_drive_can_stop (GDrive *drive);
 extern
void g_drive_stop (GDrive *drive,
                                           GMountUnmountFlags flags,
                                           GMountOperation *mount_operation,
                                           GCancellable *cancellable,
                                           GAsyncReadyCallback callback,
                                           gpointer user_data);
 extern
gboolean g_drive_stop_finish (GDrive *drive,
                                           GAsyncResult *result,
                                           GError **error);

 extern
void g_drive_eject_with_operation (GDrive *drive,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_drive_eject_with_operation_finish (GDrive *drive,
                                               GAsyncResult *result,
                                               GError **error);

 extern
const gchar *g_drive_get_sort_key (GDrive *drive);
# 77 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gdtlsclientconnection.h" 1
# 29 "/usr/include/glib-2.0/gio/gdtlsclientconnection.h"
# 1 "/usr/include/glib-2.0/gio/gdtlsconnection.h" 1
# 38 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
typedef struct _GDtlsConnectionInterface GDtlsConnectionInterface;
# 58 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
struct _GDtlsConnectionInterface
{
  GTypeInterface g_iface;


  gboolean (*accept_certificate) (GDtlsConnection *connection,
                                  GTlsCertificate *peer_cert,
                                  GTlsCertificateFlags errors);


  gboolean (*handshake) (GDtlsConnection *conn,
                                  GCancellable *cancellable,
                                  GError **error);

  void (*handshake_async) (GDtlsConnection *conn,
                                  int io_priority,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  gboolean (*handshake_finish) (GDtlsConnection *conn,
                                  GAsyncResult *result,
                                  GError **error);

  gboolean (*shutdown) (GDtlsConnection *conn,
                                  gboolean shutdown_read,
                                  gboolean shutdown_write,
                                  GCancellable *cancellable,
                                  GError **error);

  void (*shutdown_async) (GDtlsConnection *conn,
                                  gboolean shutdown_read,
                                  gboolean shutdown_write,
                                  int io_priority,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  gboolean (*shutdown_finish) (GDtlsConnection *conn,
                                  GAsyncResult *result,
                                  GError **error);

  void (*set_advertised_protocols) (GDtlsConnection *conn,
                                           const gchar * const *protocols);
  const gchar *(*get_negotiated_protocol) (GDtlsConnection *conn);

#pragma clang diagnostic push
# 102 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
  gboolean (*get_binding_data) (GDtlsConnection *conn,
                                  GTlsChannelBindingType type,
                                  GByteArray *data,
                                  GError **error);
#pragma clang diagnostic pop
};

 extern
GType g_dtls_connection_get_type (void) __attribute__ ((__const__));

 extern
void g_dtls_connection_set_database (GDtlsConnection *conn,
                                                                     GTlsDatabase *database);
 extern
GTlsDatabase *g_dtls_connection_get_database (GDtlsConnection *conn);

 extern
void g_dtls_connection_set_certificate (GDtlsConnection *conn,
                                                                     GTlsCertificate *certificate);
 extern
GTlsCertificate *g_dtls_connection_get_certificate (GDtlsConnection *conn);

 extern
void g_dtls_connection_set_interaction (GDtlsConnection *conn,
                                                                     GTlsInteraction *interaction);
 extern
GTlsInteraction *g_dtls_connection_get_interaction (GDtlsConnection *conn);

 extern
GTlsCertificate *g_dtls_connection_get_peer_certificate (GDtlsConnection *conn);
 extern
GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors (GDtlsConnection *conn);

 extern
void g_dtls_connection_set_require_close_notify (GDtlsConnection *conn,
                                                                     gboolean require_close_notify);
 extern
gboolean g_dtls_connection_get_require_close_notify (GDtlsConnection *conn);

#pragma clang diagnostic push
# 142 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_dtls_connection_set_rehandshake_mode (GDtlsConnection *conn,
                                                                     GTlsRehandshakeMode mode);
__attribute__((__deprecated__)) extern
GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode (GDtlsConnection *conn);
#pragma clang diagnostic pop

 extern
gboolean g_dtls_connection_handshake (GDtlsConnection *conn,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

 extern
void g_dtls_connection_handshake_async (GDtlsConnection *conn,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
 extern
gboolean g_dtls_connection_handshake_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);

 extern
gboolean g_dtls_connection_shutdown (GDtlsConnection *conn,
                                                                     gboolean shutdown_read,
                                                                     gboolean shutdown_write,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

 extern
void g_dtls_connection_shutdown_async (GDtlsConnection *conn,
                                                                     gboolean shutdown_read,
                                                                     gboolean shutdown_write,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
 extern
gboolean g_dtls_connection_shutdown_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);

 extern
gboolean g_dtls_connection_close (GDtlsConnection *conn,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

 extern
void g_dtls_connection_close_async (GDtlsConnection *conn,
                                                                     int io_priority,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);
 extern
gboolean g_dtls_connection_close_finish (GDtlsConnection *conn,
                                                                     GAsyncResult *result,
                                                                     GError **error);


 extern
gboolean g_dtls_connection_emit_accept_certificate (GDtlsConnection *conn,
                                                                     GTlsCertificate *peer_cert,
                                                                     GTlsCertificateFlags errors);
 extern
void g_dtls_connection_set_advertised_protocols (GDtlsConnection *conn,
                                                                     const gchar * const *protocols);

 extern
const gchar * g_dtls_connection_get_negotiated_protocol (GDtlsConnection *conn);

#pragma clang diagnostic push
# 214 "/usr/include/glib-2.0/gio/gdtlsconnection.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
gboolean g_dtls_connection_get_channel_binding_data (GDtlsConnection *conn,
                                                                     GTlsChannelBindingType type,
                                                                     GByteArray *data,
                                                                     GError **error);
#pragma clang diagnostic pop

 extern
GTlsProtocolVersion g_dtls_connection_get_protocol_version (GDtlsConnection *conn);

 extern
gchar * g_dtls_connection_get_ciphersuite_name (GDtlsConnection *conn);
# 30 "/usr/include/glib-2.0/gio/gdtlsclientconnection.h" 2








typedef struct _GDtlsClientConnectionInterface GDtlsClientConnectionInterface;
# 48 "/usr/include/glib-2.0/gio/gdtlsclientconnection.h"
struct _GDtlsClientConnectionInterface
{
  GTypeInterface g_iface;
};

 extern
GType g_dtls_client_connection_get_type (void) __attribute__ ((__const__));

 extern
GDatagramBased *g_dtls_client_connection_new (GDatagramBased *base_socket,
                                                                    GSocketConnectable *server_identity,
                                                                    GError **error);

 extern
GTlsCertificateFlags g_dtls_client_connection_get_validation_flags (GDtlsClientConnection *conn);
 extern
void g_dtls_client_connection_set_validation_flags (GDtlsClientConnection *conn,
                                                                    GTlsCertificateFlags flags);
 extern
GSocketConnectable *g_dtls_client_connection_get_server_identity (GDtlsClientConnection *conn);
 extern
void g_dtls_client_connection_set_server_identity (GDtlsClientConnection *conn,
                                                                    GSocketConnectable *identity);
 extern
GList * g_dtls_client_connection_get_accepted_cas (GDtlsClientConnection *conn);
# 78 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gdtlsserverconnection.h" 1
# 38 "/usr/include/glib-2.0/gio/gdtlsserverconnection.h"
typedef struct _GDtlsServerConnectionInterface GDtlsServerConnectionInterface;
# 48 "/usr/include/glib-2.0/gio/gdtlsserverconnection.h"
struct _GDtlsServerConnectionInterface
{
  GTypeInterface g_iface;
};

 extern
GType g_dtls_server_connection_get_type (void) __attribute__ ((__const__));

 extern
GDatagramBased *g_dtls_server_connection_new (GDatagramBased *base_socket,
                                                   GTlsCertificate *certificate,
                                                   GError **error);
# 80 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gemblemedicon.h" 1
# 31 "/usr/include/glib-2.0/gio/gemblemedicon.h"
# 1 "/usr/include/glib-2.0/gio/gicon.h" 1
# 39 "/usr/include/glib-2.0/gio/gicon.h"
typedef struct _GIconIface GIconIface;
# 58 "/usr/include/glib-2.0/gio/gicon.h"
struct _GIconIface
{
  GTypeInterface g_iface;



  guint (* hash) (GIcon *icon);
  gboolean (* equal) (GIcon *icon1,
                               GIcon *icon2);
# 82 "/usr/include/glib-2.0/gio/gicon.h"
  gboolean (* to_tokens) (GIcon *icon,
                               GPtrArray *tokens,
                               gint *out_version);
# 99 "/usr/include/glib-2.0/gio/gicon.h"
  GIcon * (* from_tokens) (gchar **tokens,
                               gint num_tokens,
                               gint version,
                               GError **error);

  GVariant * (* serialize) (GIcon *icon);
};

 extern
GType g_icon_get_type (void) __attribute__ ((__const__));

 extern
guint g_icon_hash (gconstpointer icon);
 extern
gboolean g_icon_equal (GIcon *icon1,
                                 GIcon *icon2);
 extern
gchar *g_icon_to_string (GIcon *icon);
 extern
GIcon *g_icon_new_for_string (const gchar *str,
                                 GError **error);

 extern
GVariant * g_icon_serialize (GIcon *icon);
 extern
GIcon * g_icon_deserialize (GVariant *value);
# 32 "/usr/include/glib-2.0/gio/gemblemedicon.h" 2
# 1 "/usr/include/glib-2.0/gio/gemblem.h" 1
# 40 "/usr/include/glib-2.0/gio/gemblem.h"
typedef struct _GEmblem GEmblem;
typedef struct _GEmblemClass GEmblemClass;

 extern
GType g_emblem_get_type (void) __attribute__ ((__const__));

 extern
GEmblem *g_emblem_new (GIcon *icon);
 extern
GEmblem *g_emblem_new_with_origin (GIcon *icon,
                                         GEmblemOrigin origin);
 extern
GIcon *g_emblem_get_icon (GEmblem *emblem);
 extern
GEmblemOrigin g_emblem_get_origin (GEmblem *emblem);
# 33 "/usr/include/glib-2.0/gio/gemblemedicon.h" 2
# 43 "/usr/include/glib-2.0/gio/gemblemedicon.h"
typedef struct _GEmblemedIcon GEmblemedIcon;
typedef struct _GEmblemedIconClass GEmblemedIconClass;
typedef struct _GEmblemedIconPrivate GEmblemedIconPrivate;

struct _GEmblemedIcon
{
  GObject parent_instance;


  GEmblemedIconPrivate *priv;
};

struct _GEmblemedIconClass
{
  GObjectClass parent_class;
};

 extern
GType g_emblemed_icon_get_type (void) __attribute__ ((__const__));

 extern
GIcon *g_emblemed_icon_new (GIcon *icon,
                                    GEmblem *emblem);
 extern
GIcon *g_emblemed_icon_get_icon (GEmblemedIcon *emblemed);
 extern
GList *g_emblemed_icon_get_emblems (GEmblemedIcon *emblemed);
 extern
void g_emblemed_icon_add_emblem (GEmblemedIcon *emblemed,
                                    GEmblem *emblem);
 extern
void g_emblemed_icon_clear_emblems (GEmblemedIcon *emblemed);
# 81 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfile.h" 1
# 39 "/usr/include/glib-2.0/gio/gfile.h"
typedef struct _GFileIface GFileIface;
# 154 "/usr/include/glib-2.0/gio/gfile.h"
struct _GFileIface
{
  GTypeInterface g_iface;



  GFile * (* dup) (GFile *file);
  guint (* hash) (GFile *file);
  gboolean (* equal) (GFile *file1,
                                                       GFile *file2);
  gboolean (* is_native) (GFile *file);
  gboolean (* has_uri_scheme) (GFile *file,
                                                       const char *uri_scheme);
  char * (* get_uri_scheme) (GFile *file);
  char * (* get_basename) (GFile *file);
  char * (* get_path) (GFile *file);
  char * (* get_uri) (GFile *file);
  char * (* get_parse_name) (GFile *file);
  GFile * (* get_parent) (GFile *file);
  gboolean (* prefix_matches) (GFile *prefix,
                                                       GFile *file);
  char * (* get_relative_path) (GFile *parent,
                                                       GFile *descendant);
  GFile * (* resolve_relative_path) (GFile *file,
                                                       const char *relative_path);
  GFile * (* get_child_for_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GError **error);

  GFileEnumerator * (* enumerate_children) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* enumerate_children_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileEnumerator * (* enumerate_children_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileInfo * (* query_info) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_info_async) (GFile *file,
                                                       const char *attributes,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_info_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileInfo * (* query_filesystem_info) (GFile *file,
                                                       const char *attributes,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* query_filesystem_info_async) (GFile *file,
                                                       const char *attributes,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInfo * (* query_filesystem_info_finish)(GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GMount * (* find_enclosing_mount) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* find_enclosing_mount_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GMount * (* find_enclosing_mount_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFile * (* set_display_name) (GFile *file,
                                                       const char *display_name,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_display_name_async) (GFile *file,
                                                       const char *display_name,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* set_display_name_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileAttributeInfoList * (* query_settable_attributes) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_settable_attributes_async) (void);
  void (* _query_settable_attributes_finish) (void);

  GFileAttributeInfoList * (* query_writable_namespaces) (GFile *file,
                                                             GCancellable *cancellable,
                                                             GError **error);
  void (* _query_writable_namespaces_async) (void);
  void (* _query_writable_namespaces_finish) (void);

  gboolean (* set_attribute) (GFile *file,
                                                       const char *attribute,
                                                       GFileAttributeType type,
                                                       gpointer value_p,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  gboolean (* set_attributes_from_info) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* set_attributes_async) (GFile *file,
                                                       GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* set_attributes_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GFileInfo **info,
                                                       GError **error);

  GFileInputStream * (* read_fn) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* read_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileInputStream * (* read_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* append_to) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* append_to_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* append_to_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* create) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_async) (GFile *file,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* create_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  GFileOutputStream * (* replace) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileOutputStream * (* replace_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  gboolean (* delete_file) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* delete_file_async) (GFile *file,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
  gboolean (* delete_file_finish) (GFile *file,
             GAsyncResult *result,
             GError **error);

  gboolean (* trash) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* trash_async) (GFile *file,
             int io_priority,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
  gboolean (* trash_finish) (GFile *file,
             GAsyncResult *result,
             GError **error);

  gboolean (* make_directory) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* make_directory_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* make_directory_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  gboolean (* make_symbolic_link) (GFile *file,
                                                       const char *symlink_value,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* make_symbolic_link_async) (GFile *file,
                                                       const char *symlink_value,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* make_symbolic_link_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  gboolean (* copy) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* copy_async) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* copy_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  gboolean (* move) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GError **error);
  void (* move_async) (GFile *source,
                                                       GFile *destination,
                                                       GFileCopyFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer progress_callback_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* move_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* mount_mountable) (GFile *file,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFile * (* mount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* unmount_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* eject_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* mount_enclosing_volume) (GFile *location,
                                                       GMountMountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* mount_enclosing_volume_finish) (GFile *location,
                                                       GAsyncResult *result,
                                                       GError **error);

  GFileMonitor * (* monitor_dir) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  GFileMonitor * (* monitor_file) (GFile *file,
                                                       GFileMonitorFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);

  GFileIOStream * (* open_readwrite) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* open_readwrite_async) (GFile *file,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* open_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileIOStream * (* create_readwrite) (GFile *file,
             GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* create_readwrite_async) (GFile *file,
             GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* create_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);
  GFileIOStream * (* replace_readwrite) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       GCancellable *cancellable,
                                                       GError **error);
  void (* replace_readwrite_async) (GFile *file,
                                                       const char *etag,
                                                       gboolean make_backup,
                                                       GFileCreateFlags flags,
                                                       int io_priority,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  GFileIOStream * (* replace_readwrite_finish) (GFile *file,
                                                       GAsyncResult *res,
                                                       GError **error);

  void (* start_mountable) (GFile *file,
                                                       GDriveStartFlags flags,
                                                       GMountOperation *start_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* start_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* stop_mountable) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* stop_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  gboolean supports_thread_contexts;

  void (* unmount_mountable_with_operation) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* unmount_mountable_with_operation_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* eject_mountable_with_operation) (GFile *file,
                                                       GMountUnmountFlags flags,
                                                       GMountOperation *mount_operation,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* eject_mountable_with_operation_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  void (* poll_mountable) (GFile *file,
                                                       GCancellable *cancellable,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* poll_mountable_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       GError **error);

  gboolean (* measure_disk_usage) (GFile *file,
                                                       GFileMeasureFlags flags,
                                                       GCancellable *cancellable,
                                                       GFileMeasureProgressCallback progress_callback,
                                                       gpointer progress_data,
                                                       guint64 *disk_usage,
                                                       guint64 *num_dirs,
                                                       guint64 *num_files,
                                                       GError **error);
  void (* measure_disk_usage_async) (GFile *file,
                                                       GFileMeasureFlags flags,
                                                       gint io_priority,
                                                       GCancellable *cancellable,
                                                       GFileMeasureProgressCallback progress_callback,
                                                       gpointer progress_data,
                                                       GAsyncReadyCallback callback,
                                                       gpointer user_data);
  gboolean (* measure_disk_usage_finish) (GFile *file,
                                                       GAsyncResult *result,
                                                       guint64 *disk_usage,
                                                       guint64 *num_dirs,
                                                       guint64 *num_files,
                                                       GError **error);
};

 extern
GType g_file_get_type (void) __attribute__ ((__const__));

 extern
GFile * g_file_new_for_path (const char *path);
 extern
GFile * g_file_new_for_uri (const char *uri);
 extern
GFile * g_file_new_for_commandline_arg (const char *arg);
 extern
GFile * g_file_new_for_commandline_arg_and_cwd (const gchar *arg,
                                                                const gchar *cwd);
 extern
GFile * g_file_new_tmp (const char *tmpl,
                                                           GFileIOStream **iostream,
                                                           GError **error);
 extern
void g_file_new_tmp_async (const char *tmpl,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
GFile * g_file_new_tmp_finish (GAsyncResult *result,
                                                           GFileIOStream **iostream,
                                                           GError **error);
 extern
void g_file_new_tmp_dir_async (const char *tmpl,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
GFile * g_file_new_tmp_dir_finish (GAsyncResult *result,
                                                           GError **error);
 extern
GFile * g_file_parse_name (const char *parse_name);
 extern
GFile * g_file_new_build_filename (const gchar *first_element,
                                                           ...) __attribute__((__sentinel__));
 extern
GFile * g_file_new_build_filenamev (const gchar * const *args);
 extern
GFile * g_file_dup (GFile *file);
 extern
guint g_file_hash (gconstpointer file);
 extern
gboolean g_file_equal (GFile *file1,
          GFile *file2);
 extern
char * g_file_get_basename (GFile *file);
 extern
char * g_file_get_path (GFile *file);
 extern
const char * g_file_peek_path (GFile *file);
 extern
char * g_file_get_uri (GFile *file);
 extern
char * g_file_get_parse_name (GFile *file);
 extern
GFile * g_file_get_parent (GFile *file);
 extern
gboolean g_file_has_parent (GFile *file,
                                                           GFile *parent);
 extern
GFile * g_file_get_child (GFile *file,
          const char *name);
 extern
GFile * g_file_get_child_for_display_name (GFile *file,
          const char *display_name,
          GError **error);
 extern
gboolean g_file_has_prefix (GFile *file,
          GFile *prefix);
 extern
char * g_file_get_relative_path (GFile *parent,
          GFile *descendant);
 extern
GFile * g_file_resolve_relative_path (GFile *file,
          const char *relative_path);
 extern
gboolean g_file_is_native (GFile *file);
 extern
gboolean g_file_has_uri_scheme (GFile *file,
          const char *uri_scheme);
 extern
char * g_file_get_uri_scheme (GFile *file);
 extern
GFileInputStream * g_file_read (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_read_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileInputStream * g_file_read_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileOutputStream * g_file_append_to (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileOutputStream * g_file_create (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileOutputStream * g_file_replace (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_append_to_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileOutputStream * g_file_append_to_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
void g_file_create_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileOutputStream * g_file_create_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
void g_file_replace_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileOutputStream * g_file_replace_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileIOStream * g_file_open_readwrite (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_open_readwrite_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileIOStream * g_file_open_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileIOStream * g_file_create_readwrite (GFile *file,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_create_readwrite_async (GFile *file,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileIOStream * g_file_create_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileIOStream * g_file_replace_readwrite (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_replace_readwrite_async (GFile *file,
          const char *etag,
          gboolean make_backup,
          GFileCreateFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileIOStream * g_file_replace_readwrite_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
gboolean g_file_query_exists (GFile *file,
          GCancellable *cancellable);
 extern
GFileType g_file_query_file_type (GFile *file,
                                                           GFileQueryInfoFlags flags,
                                                           GCancellable *cancellable);
 extern
GFileInfo * g_file_query_info (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_query_info_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileInfo * g_file_query_info_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFileInfo * g_file_query_filesystem_info (GFile *file,
          const char *attributes,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_query_filesystem_info_async (GFile *file,
          const char *attributes,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileInfo * g_file_query_filesystem_info_finish (GFile *file,
                                                           GAsyncResult *res,
          GError **error);
 extern
GMount * g_file_find_enclosing_mount (GFile *file,
                                                           GCancellable *cancellable,
                                                           GError **error);
 extern
void g_file_find_enclosing_mount_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GMount * g_file_find_enclosing_mount_finish (GFile *file,
           GAsyncResult *res,
           GError **error);
 extern
GFileEnumerator * g_file_enumerate_children (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_enumerate_children_async (GFile *file,
          const char *attributes,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFileEnumerator * g_file_enumerate_children_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
GFile * g_file_set_display_name (GFile *file,
          const char *display_name,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_set_display_name_async (GFile *file,
          const char *display_name,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFile * g_file_set_display_name_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
gboolean g_file_delete (GFile *file,
          GCancellable *cancellable,
          GError **error);

 extern
void g_file_delete_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);

 extern
gboolean g_file_delete_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

 extern
gboolean g_file_trash (GFile *file,
          GCancellable *cancellable,
          GError **error);

 extern
void g_file_trash_async (GFile *file,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);

 extern
gboolean g_file_trash_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

 extern
gboolean g_file_copy (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
 extern
void g_file_copy_async (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
void g_file_copy_async_with_closures (GFile *source,
                                      GFile *destination,
                                      GFileCopyFlags flags,
                                      int io_priority,
                                      GCancellable *cancellable,
                                      GClosure *progress_callback_closure,
                                      GClosure *ready_callback_closure);
 extern
gboolean g_file_copy_finish (GFile *file,
          GAsyncResult *res,
          GError **error);
 extern
gboolean g_file_move (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GFileProgressCallback progress_callback,
          gpointer progress_callback_data,
          GError **error);
 extern
void g_file_move_async (GFile *source,
                                                    GFile *destination,
                                                    GFileCopyFlags flags,
                                                    int io_priority,
                                                    GCancellable *cancellable,
                                                    GFileProgressCallback progress_callback,
                                                    gpointer progress_callback_data,
                                                    GAsyncReadyCallback callback,
                                                    gpointer user_data);
 extern
void g_file_move_async_with_closures (GFile *source,
                                      GFile *destination,
                                      GFileCopyFlags flags,
                                      int io_priority,
                                      GCancellable *cancellable,
                                      GClosure *progress_callback_closure,
                                      GClosure *ready_callback_closure);
 extern
gboolean g_file_move_finish (GFile *file,
                                                    GAsyncResult *result,
                                                    GError **error);
 extern
gboolean g_file_make_directory (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_make_directory_async (GFile *file,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
gboolean g_file_make_directory_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);

 extern
gboolean g_file_make_directory_with_parents (GFile *file,
                                             GCancellable *cancellable,
                                             GError **error);
 extern
gboolean g_file_make_symbolic_link (GFile *file,
          const char *symlink_value,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_make_symbolic_link_async (GFile *file,
                                                           const char *symlink_value,
                                                           int io_priority,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);
 extern
gboolean g_file_make_symbolic_link_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
 extern
GFileAttributeInfoList *g_file_query_settable_attributes (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
GFileAttributeInfoList *g_file_query_writable_namespaces (GFile *file,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute (GFile *file,
          const char *attribute,
          GFileAttributeType type,
          gpointer value_p,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attributes_from_info (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_set_attributes_async (GFile *file,
          GFileInfo *info,
          GFileQueryInfoFlags flags,
          int io_priority,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_set_attributes_finish (GFile *file,
          GAsyncResult *result,
          GFileInfo **info,
          GError **error);
 extern
gboolean g_file_set_attribute_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_byte_string (GFile *file,
          const char *attribute,
          const char *value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_uint32 (GFile *file,
          const char *attribute,
          guint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_int32 (GFile *file,
          const char *attribute,
          gint32 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_uint64 (GFile *file,
          const char *attribute,
          guint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_file_set_attribute_int64 (GFile *file,
          const char *attribute,
          gint64 value,
          GFileQueryInfoFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
void g_file_mount_enclosing_volume (GFile *location,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_mount_enclosing_volume_finish (GFile *location,
          GAsyncResult *result,
          GError **error);
 extern
void g_file_mount_mountable (GFile *file,
          GMountMountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
GFile * g_file_mount_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
__attribute__((__deprecated__("Use '" "g_file_unmount_mountable_with_operation" "' instead"))) extern
void g_file_unmount_mountable (GFile *file,
                                                           GMountUnmountFlags flags,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);

__attribute__((__deprecated__("Use '" "g_file_unmount_mountable_with_operation_finish" "' instead"))) extern
gboolean g_file_unmount_mountable_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
 extern
void g_file_unmount_mountable_with_operation (GFile *file,
          GMountUnmountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_unmount_mountable_with_operation_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
__attribute__((__deprecated__("Use '" "g_file_eject_mountable_with_operation" "' instead"))) extern
void g_file_eject_mountable (GFile *file,
                                                           GMountUnmountFlags flags,
                                                           GCancellable *cancellable,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);

__attribute__((__deprecated__("Use '" "g_file_eject_mountable_with_operation_finish" "' instead"))) extern
gboolean g_file_eject_mountable_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           GError **error);
 extern
void g_file_eject_mountable_with_operation (GFile *file,
          GMountUnmountFlags flags,
          GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_eject_mountable_with_operation_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

 extern
char * g_file_build_attribute_list_for_copy (GFile *file,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GError **error);

 extern
gboolean g_file_copy_attributes (GFile *source,
          GFile *destination,
          GFileCopyFlags flags,
          GCancellable *cancellable,
          GError **error);


 extern
GFileMonitor* g_file_monitor_directory (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileMonitor* g_file_monitor_file (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);
 extern
GFileMonitor* g_file_monitor (GFile *file,
          GFileMonitorFlags flags,
          GCancellable *cancellable,
          GError **error);

 extern
gboolean g_file_measure_disk_usage (GFile *file,
                                                           GFileMeasureFlags flags,
                                                           GCancellable *cancellable,
                                                           GFileMeasureProgressCallback progress_callback,
                                                           gpointer progress_data,
                                                           guint64 *disk_usage,
                                                           guint64 *num_dirs,
                                                           guint64 *num_files,
                                                           GError **error);

 extern
void g_file_measure_disk_usage_async (GFile *file,
                                                           GFileMeasureFlags flags,
                                                           gint io_priority,
                                                           GCancellable *cancellable,
                                                           GFileMeasureProgressCallback progress_callback,
                                                           gpointer progress_data,
                                                           GAsyncReadyCallback callback,
                                                           gpointer user_data);

 extern
gboolean g_file_measure_disk_usage_finish (GFile *file,
                                                           GAsyncResult *result,
                                                           guint64 *disk_usage,
                                                           guint64 *num_dirs,
                                                           guint64 *num_files,
                                                           GError **error);

 extern
void g_file_start_mountable (GFile *file,
          GDriveStartFlags flags,
          GMountOperation *start_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_start_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);
 extern
void g_file_stop_mountable (GFile *file,
          GMountUnmountFlags flags,
                                                           GMountOperation *mount_operation,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_stop_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);

 extern
void g_file_poll_mountable (GFile *file,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_file_poll_mountable_finish (GFile *file,
          GAsyncResult *result,
          GError **error);



 extern
GAppInfo *g_file_query_default_handler (GFile *file,
           GCancellable *cancellable,
           GError **error);
 extern
void g_file_query_default_handler_async (GFile *file,
                                              int io_priority,
                                              GCancellable *cancellable,
                                              GAsyncReadyCallback callback,
                                              gpointer user_data);
 extern
GAppInfo *g_file_query_default_handler_finish (GFile *file,
                                               GAsyncResult *result,
                                               GError **error);

 extern
gboolean g_file_load_contents (GFile *file,
           GCancellable *cancellable,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
 extern
void g_file_load_contents_async (GFile *file,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_file_load_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
 extern
void g_file_load_partial_contents_async (GFile *file,
           GCancellable *cancellable,
           GFileReadMoreCallback read_more_callback,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_file_load_partial_contents_finish (GFile *file,
           GAsyncResult *res,
           char **contents,
           gsize *length,
           char **etag_out,
           GError **error);
 extern
gboolean g_file_replace_contents (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           char **new_etag,
           GCancellable *cancellable,
           GError **error);
 extern
void g_file_replace_contents_async (GFile *file,
           const char *contents,
           gsize length,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
void g_file_replace_contents_bytes_async (GFile *file,
           GBytes *contents,
           const char *etag,
           gboolean make_backup,
           GFileCreateFlags flags,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_file_replace_contents_finish (GFile *file,
           GAsyncResult *res,
           char **new_etag,
           GError **error);

 extern
gboolean g_file_supports_thread_contexts (GFile *file);

 extern
GBytes *g_file_load_bytes (GFile *file,
                                              GCancellable *cancellable,
                                              gchar **etag_out,
                                              GError **error);
 extern
void g_file_load_bytes_async (GFile *file,
                                              GCancellable *cancellable,
                                              GAsyncReadyCallback callback,
                                              gpointer user_data);
 extern
GBytes *g_file_load_bytes_finish (GFile *file,
                                              GAsyncResult *result,
                                              gchar **etag_out,
                                              GError **error);
# 82 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileattribute.h" 1
# 42 "/usr/include/glib-2.0/gio/gfileattribute.h"
struct _GFileAttributeInfo
{
  char *name;
  GFileAttributeType type;
  GFileAttributeInfoFlags flags;
};
# 57 "/usr/include/glib-2.0/gio/gfileattribute.h"
struct _GFileAttributeInfoList
{
  GFileAttributeInfo *infos;
  int n_infos;
};


 extern
GType g_file_attribute_info_list_get_type (void);

 extern
GFileAttributeInfoList * g_file_attribute_info_list_new (void);
 extern
GFileAttributeInfoList * g_file_attribute_info_list_ref (GFileAttributeInfoList *list);
 extern
void g_file_attribute_info_list_unref (GFileAttributeInfoList *list);
 extern
GFileAttributeInfoList * g_file_attribute_info_list_dup (GFileAttributeInfoList *list);
 extern
const GFileAttributeInfo *g_file_attribute_info_list_lookup (GFileAttributeInfoList *list,
            const char *name);
 extern
void g_file_attribute_info_list_add (GFileAttributeInfoList *list,
            const char *name,
            GFileAttributeType type,
            GFileAttributeInfoFlags flags);
# 83 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileenumerator.h" 1
# 41 "/usr/include/glib-2.0/gio/gfileenumerator.h"
typedef struct _GFileEnumeratorClass GFileEnumeratorClass;
typedef struct _GFileEnumeratorPrivate GFileEnumeratorPrivate;

struct _GFileEnumerator
{
  GObject parent_instance;


  GFileEnumeratorPrivate *priv;
};

struct _GFileEnumeratorClass
{
  GObjectClass parent_class;



  GFileInfo * (* next_file) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* close_fn) (GFileEnumerator *enumerator,
                                     GCancellable *cancellable,
                                     GError **error);

  void (* next_files_async) (GFileEnumerator *enumerator,
                                     int num_files,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GList * (* next_files_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *result,
                                     GError **error);
  void (* close_async) (GFileEnumerator *enumerator,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  gboolean (* close_finish) (GFileEnumerator *enumerator,
                                     GAsyncResult *result,
                                     GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};

 extern
GType g_file_enumerator_get_type (void) __attribute__ ((__const__));

 extern
GFileInfo *g_file_enumerator_next_file (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
 extern
gboolean g_file_enumerator_close (GFileEnumerator *enumerator,
      GCancellable *cancellable,
      GError **error);
 extern
void g_file_enumerator_next_files_async (GFileEnumerator *enumerator,
      int num_files,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
 extern
GList * g_file_enumerator_next_files_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
 extern
void g_file_enumerator_close_async (GFileEnumerator *enumerator,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
 extern
gboolean g_file_enumerator_close_finish (GFileEnumerator *enumerator,
      GAsyncResult *result,
      GError **error);
 extern
gboolean g_file_enumerator_is_closed (GFileEnumerator *enumerator);
 extern
gboolean g_file_enumerator_has_pending (GFileEnumerator *enumerator);
 extern
void g_file_enumerator_set_pending (GFileEnumerator *enumerator,
      gboolean pending);
 extern
GFile * g_file_enumerator_get_container (GFileEnumerator *enumerator);
 extern
GFile * g_file_enumerator_get_child (GFileEnumerator *enumerator,
                                                GFileInfo *info);

 extern
gboolean g_file_enumerator_iterate (GFileEnumerator *direnum,
                                                GFileInfo **out_info,
                                                GFile **out_child,
                                                GCancellable *cancellable,
                                                GError **error);
# 84 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileicon.h" 1
# 41 "/usr/include/glib-2.0/gio/gfileicon.h"
typedef struct _GFileIconClass GFileIconClass;

 extern
GType g_file_icon_get_type (void) __attribute__ ((__const__));

 extern
GIcon * g_file_icon_new (GFile *file);

 extern
GFile * g_file_icon_get_file (GFileIcon *icon);
# 85 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileinfo.h" 1
# 41 "/usr/include/glib-2.0/gio/gfileinfo.h"
typedef struct _GFileInfoClass GFileInfoClass;
# 1290 "/usr/include/glib-2.0/gio/gfileinfo.h"
 extern
GType g_file_info_get_type (void) __attribute__ ((__const__));

 extern
GFileInfo * g_file_info_new (void);
 extern
GFileInfo * g_file_info_dup (GFileInfo *other);
 extern
void g_file_info_copy_into (GFileInfo *src_info,
         GFileInfo *dest_info);
 extern
gboolean g_file_info_has_attribute (GFileInfo *info,
         const char *attribute);
 extern
gboolean g_file_info_has_namespace (GFileInfo *info,
         const char *name_space);
 extern
char ** g_file_info_list_attributes (GFileInfo *info,
         const char *name_space);
 extern
gboolean g_file_info_get_attribute_data (GFileInfo *info,
         const char *attribute,
         GFileAttributeType *type,
         gpointer *value_pp,
         GFileAttributeStatus *status);
 extern
GFileAttributeType g_file_info_get_attribute_type (GFileInfo *info,
         const char *attribute);
 extern
void g_file_info_remove_attribute (GFileInfo *info,
         const char *attribute);
 extern
GFileAttributeStatus g_file_info_get_attribute_status (GFileInfo *info,
         const char *attribute);
 extern
gboolean g_file_info_set_attribute_status (GFileInfo *info,
         const char *attribute,
         GFileAttributeStatus status);
 extern
char * g_file_info_get_attribute_as_string (GFileInfo *info,
         const char *attribute);
 extern
const char * g_file_info_get_attribute_string (GFileInfo *info,
         const char *attribute);
 extern
const char * g_file_info_get_attribute_byte_string (GFileInfo *info,
         const char *attribute);
 extern
gboolean g_file_info_get_attribute_boolean (GFileInfo *info,
         const char *attribute);
 extern
guint32 g_file_info_get_attribute_uint32 (GFileInfo *info,
         const char *attribute);
 extern
gint32 g_file_info_get_attribute_int32 (GFileInfo *info,
         const char *attribute);
 extern
guint64 g_file_info_get_attribute_uint64 (GFileInfo *info,
         const char *attribute);
 extern
gint64 g_file_info_get_attribute_int64 (GFileInfo *info,
         const char *attribute);
 extern
GObject * g_file_info_get_attribute_object (GFileInfo *info,
         const char *attribute);
 extern
char ** g_file_info_get_attribute_stringv (GFileInfo *info,
         const char *attribute);
 extern
const char * g_file_info_get_attribute_file_path (GFileInfo *info,
         const char *attribute);

 extern
void g_file_info_set_attribute (GFileInfo *info,
         const char *attribute,
         GFileAttributeType type,
         gpointer value_p);
 extern
void g_file_info_set_attribute_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
 extern
void g_file_info_set_attribute_byte_string (GFileInfo *info,
         const char *attribute,
         const char *attr_value);
 extern
void g_file_info_set_attribute_boolean (GFileInfo *info,
         const char *attribute,
         gboolean attr_value);
 extern
void g_file_info_set_attribute_uint32 (GFileInfo *info,
         const char *attribute,
         guint32 attr_value);
 extern
void g_file_info_set_attribute_int32 (GFileInfo *info,
         const char *attribute,
         gint32 attr_value);
 extern
void g_file_info_set_attribute_uint64 (GFileInfo *info,
         const char *attribute,
         guint64 attr_value);
 extern
void g_file_info_set_attribute_int64 (GFileInfo *info,
         const char *attribute,
         gint64 attr_value);
 extern
void g_file_info_set_attribute_object (GFileInfo *info,
         const char *attribute,
         GObject *attr_value);
 extern
void g_file_info_set_attribute_stringv (GFileInfo *info,
         const char *attribute,
         char **attr_value);
 extern
void g_file_info_set_attribute_file_path (GFileInfo *info,
         const char *attribute,
         const char *attr_value);

 extern
void g_file_info_clear_status (GFileInfo *info);


 extern
GDateTime * g_file_info_get_deletion_date (GFileInfo *info);
 extern
GFileType g_file_info_get_file_type (GFileInfo *info);
 extern
gboolean g_file_info_get_is_hidden (GFileInfo *info);
 extern
gboolean g_file_info_get_is_backup (GFileInfo *info);
 extern
gboolean g_file_info_get_is_symlink (GFileInfo *info);
 extern
const char * g_file_info_get_name (GFileInfo *info);
 extern
const char * g_file_info_get_display_name (GFileInfo *info);
 extern
const char * g_file_info_get_edit_name (GFileInfo *info);
 extern
GIcon * g_file_info_get_icon (GFileInfo *info);
 extern
GIcon * g_file_info_get_symbolic_icon (GFileInfo *info);
 extern
const char * g_file_info_get_content_type (GFileInfo *info);
 extern
goffset g_file_info_get_size (GFileInfo *info);
#pragma clang diagnostic push
# 1436 "/usr/include/glib-2.0/gio/gfileinfo.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_file_info_get_modification_date_time" "' instead"))) extern
void g_file_info_get_modification_time (GFileInfo *info,
                                                      GTimeVal *result);
#pragma clang diagnostic pop
 extern
GDateTime * g_file_info_get_modification_date_time (GFileInfo *info);
 extern
GDateTime * g_file_info_get_access_date_time (GFileInfo *info);
 extern
GDateTime * g_file_info_get_creation_date_time (GFileInfo *info);
 extern
const char * g_file_info_get_symlink_target (GFileInfo *info);
 extern
const char * g_file_info_get_etag (GFileInfo *info);
 extern
gint32 g_file_info_get_sort_order (GFileInfo *info);

 extern
void g_file_info_set_attribute_mask (GFileInfo *info,
            GFileAttributeMatcher *mask);
 extern
void g_file_info_unset_attribute_mask (GFileInfo *info);


 extern
void g_file_info_set_file_type (GFileInfo *info,
            GFileType type);
 extern
void g_file_info_set_is_hidden (GFileInfo *info,
            gboolean is_hidden);
 extern
void g_file_info_set_is_symlink (GFileInfo *info,
            gboolean is_symlink);
 extern
void g_file_info_set_name (GFileInfo *info,
            const char *name);
 extern
void g_file_info_set_display_name (GFileInfo *info,
            const char *display_name);
 extern
void g_file_info_set_edit_name (GFileInfo *info,
            const char *edit_name);
 extern
void g_file_info_set_icon (GFileInfo *info,
            GIcon *icon);
 extern
void g_file_info_set_symbolic_icon (GFileInfo *info,
            GIcon *icon);
 extern
void g_file_info_set_content_type (GFileInfo *info,
            const char *content_type);
 extern
void g_file_info_set_size (GFileInfo *info,
            goffset size);
#pragma clang diagnostic push
# 1491 "/usr/include/glib-2.0/gio/gfileinfo.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__("Use '" "g_file_info_set_modification_date_time" "' instead"))) extern
void g_file_info_set_modification_time (GFileInfo *info,
                                                      GTimeVal *mtime);
#pragma clang diagnostic pop
 extern
void g_file_info_set_modification_date_time (GFileInfo *info,
                                                          GDateTime *mtime);
 extern
void g_file_info_set_access_date_time (GFileInfo *info,
                                                    GDateTime *atime);
 extern
void g_file_info_set_creation_date_time (GFileInfo *info,
                                                      GDateTime *creation_time);
 extern
void g_file_info_set_symlink_target (GFileInfo *info,
            const char *symlink_target);
 extern
void g_file_info_set_sort_order (GFileInfo *info,
            gint32 sort_order);


 extern
GType g_file_attribute_matcher_get_type (void) __attribute__ ((__const__));

 extern
GFileAttributeMatcher *g_file_attribute_matcher_new (const char *attributes);
 extern
GFileAttributeMatcher *g_file_attribute_matcher_ref (GFileAttributeMatcher *matcher);
 extern
void g_file_attribute_matcher_unref (GFileAttributeMatcher *matcher);
 extern
GFileAttributeMatcher *g_file_attribute_matcher_subtract (GFileAttributeMatcher *matcher,
                                                                GFileAttributeMatcher *subtract);
 extern
gboolean g_file_attribute_matcher_matches (GFileAttributeMatcher *matcher,
        const char *attribute);
 extern
gboolean g_file_attribute_matcher_matches_only (GFileAttributeMatcher *matcher,
        const char *attribute);
 extern
gboolean g_file_attribute_matcher_enumerate_namespace (GFileAttributeMatcher *matcher,
             const char *ns);
 extern
const char * g_file_attribute_matcher_enumerate_next (GFileAttributeMatcher *matcher);
 extern
char * g_file_attribute_matcher_to_string (GFileAttributeMatcher *matcher);
# 86 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileinputstream.h" 1
# 41 "/usr/include/glib-2.0/gio/gfileinputstream.h"
typedef struct _GFileInputStreamClass GFileInputStreamClass;
typedef struct _GFileInputStreamPrivate GFileInputStreamPrivate;

struct _GFileInputStream
{
  GInputStream parent_instance;


  GFileInputStreamPrivate *priv;
};

struct _GFileInputStreamClass
{
  GInputStreamClass parent_class;

  goffset (* tell) (GFileInputStream *stream);
  gboolean (* can_seek) (GFileInputStream *stream);
  gboolean (* seek) (GFileInputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileInputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileInputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileInputStream *stream,
                                     GAsyncResult *result,
                                     GError **error);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_file_input_stream_get_type (void) __attribute__ ((__const__));

 extern
GFileInfo *g_file_input_stream_query_info (GFileInputStream *stream,
        const char *attributes,
        GCancellable *cancellable,
        GError **error);
 extern
void g_file_input_stream_query_info_async (GFileInputStream *stream,
        const char *attributes,
        int io_priority,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
 extern
GFileInfo *g_file_input_stream_query_info_finish (GFileInputStream *stream,
        GAsyncResult *result,
        GError **error);
# 87 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileiostream.h" 1
# 30 "/usr/include/glib-2.0/gio/gfileiostream.h"
# 1 "/usr/include/glib-2.0/gio/giostream.h" 1
# 29 "/usr/include/glib-2.0/gio/giostream.h"
# 1 "/usr/include/glib-2.0/gio/gioerror.h" 1
# 44 "/usr/include/glib-2.0/gio/gioerror.h"
 extern
GQuark g_io_error_quark (void);
 extern
GIOErrorEnum g_io_error_from_errno (gint err_no);
 extern
GIOErrorEnum g_io_error_from_file_error (GFileError file_error);
# 30 "/usr/include/glib-2.0/gio/giostream.h" 2
# 40 "/usr/include/glib-2.0/gio/giostream.h"
typedef struct _GIOStreamPrivate GIOStreamPrivate;
typedef struct _GIOStreamClass GIOStreamClass;

struct _GIOStream
{
  GObject parent_instance;


  GIOStreamPrivate *priv;
};

struct _GIOStreamClass
{
  GObjectClass parent_class;

  GInputStream * (*get_input_stream) (GIOStream *stream);
  GOutputStream * (*get_output_stream) (GIOStream *stream);

  gboolean (* close_fn) (GIOStream *stream,
                             GCancellable *cancellable,
                             GError **error);
  void (* close_async) (GIOStream *stream,
                             int io_priority,
                             GCancellable *cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
  gboolean (* close_finish) (GIOStream *stream,
                             GAsyncResult *result,
                             GError **error);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};

 extern
GType g_io_stream_get_type (void) __attribute__ ((__const__));

 extern
GInputStream * g_io_stream_get_input_stream (GIOStream *stream);
 extern
GOutputStream *g_io_stream_get_output_stream (GIOStream *stream);

 extern
void g_io_stream_splice_async (GIOStream *stream1,
           GIOStream *stream2,
           GIOStreamSpliceFlags flags,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);

 extern
gboolean g_io_stream_splice_finish (GAsyncResult *result,
                                              GError **error);

 extern
gboolean g_io_stream_close (GIOStream *stream,
           GCancellable *cancellable,
           GError **error);

 extern
void g_io_stream_close_async (GIOStream *stream,
           int io_priority,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);
 extern
gboolean g_io_stream_close_finish (GIOStream *stream,
           GAsyncResult *result,
           GError **error);

 extern
gboolean g_io_stream_is_closed (GIOStream *stream);
 extern
gboolean g_io_stream_has_pending (GIOStream *stream);
 extern
gboolean g_io_stream_set_pending (GIOStream *stream,
           GError **error);
 extern
void g_io_stream_clear_pending (GIOStream *stream);
# 31 "/usr/include/glib-2.0/gio/gfileiostream.h" 2
# 41 "/usr/include/glib-2.0/gio/gfileiostream.h"
typedef struct _GFileIOStreamClass GFileIOStreamClass;
typedef struct _GFileIOStreamPrivate GFileIOStreamPrivate;

struct _GFileIOStream
{
  GIOStream parent_instance;


  GFileIOStreamPrivate *priv;
};

struct _GFileIOStreamClass
{
  GIOStreamClass parent_class;

  goffset (* tell) (GFileIOStream *stream);
  gboolean (* can_seek) (GFileIOStream *stream);
  gboolean (* seek) (GFileIOStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileIOStream *stream);
  gboolean (* truncate_fn) (GFileIOStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileIOStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileIOStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileIOStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  char * (* get_etag) (GFileIOStream *stream);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_file_io_stream_get_type (void) __attribute__ ((__const__));

 extern
GFileInfo *g_file_io_stream_query_info (GFileIOStream *stream,
            const char *attributes,
            GCancellable *cancellable,
            GError **error);
 extern
void g_file_io_stream_query_info_async (GFileIOStream *stream,
            const char *attributes,
            int io_priority,
            GCancellable *cancellable,
            GAsyncReadyCallback callback,
            gpointer user_data);
 extern
GFileInfo *g_file_io_stream_query_info_finish (GFileIOStream *stream,
            GAsyncResult *result,
            GError **error);
 extern
char * g_file_io_stream_get_etag (GFileIOStream *stream);
# 88 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfilemonitor.h" 1
# 41 "/usr/include/glib-2.0/gio/gfilemonitor.h"
typedef struct _GFileMonitorClass GFileMonitorClass;
typedef struct _GFileMonitorPrivate GFileMonitorPrivate;

struct _GFileMonitor
{
  GObject parent_instance;


  GFileMonitorPrivate *priv;
};

struct _GFileMonitorClass
{
  GObjectClass parent_class;


  void (* changed) (GFileMonitor *monitor,
                        GFile *file,
                        GFile *other_file,
                        GFileMonitorEvent event_type);


  gboolean (* cancel) (GFileMonitor *monitor);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_file_monitor_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_file_monitor_cancel (GFileMonitor *monitor);
 extern
gboolean g_file_monitor_is_cancelled (GFileMonitor *monitor);
 extern
void g_file_monitor_set_rate_limit (GFileMonitor *monitor,
                                        gint limit_msecs);



 extern
void g_file_monitor_emit_event (GFileMonitor *monitor,
                                        GFile *child,
                                        GFile *other_file,
                                        GFileMonitorEvent event_type);
# 89 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfilenamecompleter.h" 1
# 41 "/usr/include/glib-2.0/gio/gfilenamecompleter.h"
typedef struct _GFilenameCompleterClass GFilenameCompleterClass;

struct _GFilenameCompleterClass
{
  GObjectClass parent_class;



  void (* got_completion_data) (GFilenameCompleter *filename_completer);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};

 extern
GType g_filename_completer_get_type (void) __attribute__ ((__const__));

 extern
GFilenameCompleter *g_filename_completer_new (void);

 extern
char * g_filename_completer_get_completion_suffix (GFilenameCompleter *completer,
                                                                const char *initial_text);
 extern
char ** g_filename_completer_get_completions (GFilenameCompleter *completer,
                                                                const char *initial_text);
 extern
void g_filename_completer_set_dirs_only (GFilenameCompleter *completer,
                                                                gboolean dirs_only);
# 90 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gfileoutputstream.h" 1
# 41 "/usr/include/glib-2.0/gio/gfileoutputstream.h"
typedef struct _GFileOutputStreamClass GFileOutputStreamClass;
typedef struct _GFileOutputStreamPrivate GFileOutputStreamPrivate;

struct _GFileOutputStream
{
  GOutputStream parent_instance;


  GFileOutputStreamPrivate *priv;
};

struct _GFileOutputStreamClass
{
  GOutputStreamClass parent_class;

  goffset (* tell) (GFileOutputStream *stream);
  gboolean (* can_seek) (GFileOutputStream *stream);
  gboolean (* seek) (GFileOutputStream *stream,
                                     goffset offset,
                                     GSeekType type,
                                     GCancellable *cancellable,
                                     GError **error);
  gboolean (* can_truncate) (GFileOutputStream *stream);
  gboolean (* truncate_fn) (GFileOutputStream *stream,
                                     goffset size,
                                     GCancellable *cancellable,
                                     GError **error);
  GFileInfo * (* query_info) (GFileOutputStream *stream,
                                     const char *attributes,
                                     GCancellable *cancellable,
                                     GError **error);
  void (* query_info_async) (GFileOutputStream *stream,
                                     const char *attributes,
                                     int io_priority,
                                     GCancellable *cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
  GFileInfo * (* query_info_finish) (GFileOutputStream *stream,
                                     GAsyncResult *result,
                                     GError **error);
  char * (* get_etag) (GFileOutputStream *stream);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_file_output_stream_get_type (void) __attribute__ ((__const__));


 extern
GFileInfo *g_file_output_stream_query_info (GFileOutputStream *stream,
                                                   const char *attributes,
                                                   GCancellable *cancellable,
                                                   GError **error);
 extern
void g_file_output_stream_query_info_async (GFileOutputStream *stream,
         const char *attributes,
         int io_priority,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);
 extern
GFileInfo *g_file_output_stream_query_info_finish (GFileOutputStream *stream,
         GAsyncResult *result,
         GError **error);
 extern
char * g_file_output_stream_get_etag (GFileOutputStream *stream);
# 91 "/usr/include/glib-2.0/gio/gio.h" 2



# 1 "/usr/include/glib-2.0/gio/ginetaddress.h" 1
# 42 "/usr/include/glib-2.0/gio/ginetaddress.h"
typedef struct _GInetAddressClass GInetAddressClass;
typedef struct _GInetAddressPrivate GInetAddressPrivate;

struct _GInetAddress
{
  GObject parent_instance;


  GInetAddressPrivate *priv;
};

struct _GInetAddressClass
{
  GObjectClass parent_class;

  gchar * (*to_string) (GInetAddress *address);
  const guint8 * (*to_bytes) (GInetAddress *address);
};

 extern
GType g_inet_address_get_type (void) __attribute__ ((__const__));

 extern
GInetAddress * g_inet_address_new_from_string (const gchar *string);

 extern
GInetAddress * g_inet_address_new_from_bytes (const guint8 *bytes,
          GSocketFamily family);

 extern
GInetAddress * g_inet_address_new_loopback (GSocketFamily family);

 extern
GInetAddress * g_inet_address_new_any (GSocketFamily family);

 extern
gboolean g_inet_address_equal (GInetAddress *address,
                                                           GInetAddress *other_address);

 extern
gchar * g_inet_address_to_string (GInetAddress *address);

 extern
const guint8 * g_inet_address_to_bytes (GInetAddress *address);

 extern
gsize g_inet_address_get_native_size (GInetAddress *address);

 extern
GSocketFamily g_inet_address_get_family (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_any (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_loopback (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_link_local (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_site_local (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_multicast (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_mc_global (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_mc_link_local (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_mc_node_local (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_mc_org_local (GInetAddress *address);

 extern
gboolean g_inet_address_get_is_mc_site_local (GInetAddress *address);
# 95 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/ginetaddressmask.h" 1
# 39 "/usr/include/glib-2.0/gio/ginetaddressmask.h"
typedef struct _GInetAddressMaskClass GInetAddressMaskClass;
typedef struct _GInetAddressMaskPrivate GInetAddressMaskPrivate;

struct _GInetAddressMask
{
  GObject parent_instance;


  GInetAddressMaskPrivate *priv;
};

struct _GInetAddressMaskClass
{
  GObjectClass parent_class;

};

 extern
GType g_inet_address_mask_get_type (void) __attribute__ ((__const__));

 extern
GInetAddressMask *g_inet_address_mask_new (GInetAddress *addr,
             guint length,
             GError **error);

 extern
GInetAddressMask *g_inet_address_mask_new_from_string (const gchar *mask_string,
             GError **error);
 extern
gchar *g_inet_address_mask_to_string (GInetAddressMask *mask);

 extern
GSocketFamily g_inet_address_mask_get_family (GInetAddressMask *mask);
 extern
GInetAddress *g_inet_address_mask_get_address (GInetAddressMask *mask);
 extern
guint g_inet_address_mask_get_length (GInetAddressMask *mask);

 extern
gboolean g_inet_address_mask_matches (GInetAddressMask *mask,
             GInetAddress *address);
 extern
gboolean g_inet_address_mask_equal (GInetAddressMask *mask,
             GInetAddressMask *mask2);
# 96 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/ginetsocketaddress.h" 1
# 31 "/usr/include/glib-2.0/gio/ginetsocketaddress.h"
# 1 "/usr/include/glib-2.0/gio/gsocketaddress.h" 1
# 42 "/usr/include/glib-2.0/gio/gsocketaddress.h"
typedef struct _GSocketAddressClass GSocketAddressClass;

struct _GSocketAddress
{
  GObject parent_instance;
};

struct _GSocketAddressClass
{
  GObjectClass parent_class;

  GSocketFamily (*get_family) (GSocketAddress *address);

  gssize (*get_native_size) (GSocketAddress *address);

  gboolean (*to_native) (GSocketAddress *address,
                                     gpointer dest,
                                     gsize destlen,
         GError **error);
};

 extern
GType g_socket_address_get_type (void) __attribute__ ((__const__));

 extern
GSocketFamily g_socket_address_get_family (GSocketAddress *address);

 extern
GSocketAddress * g_socket_address_new_from_native (gpointer native,
                                                        gsize len);

 extern
gboolean g_socket_address_to_native (GSocketAddress *address,
                                                        gpointer dest,
                                                        gsize destlen,
       GError **error);

 extern
gssize g_socket_address_get_native_size (GSocketAddress *address);
# 32 "/usr/include/glib-2.0/gio/ginetsocketaddress.h" 2
# 42 "/usr/include/glib-2.0/gio/ginetsocketaddress.h"
typedef struct _GInetSocketAddressClass GInetSocketAddressClass;
typedef struct _GInetSocketAddressPrivate GInetSocketAddressPrivate;

struct _GInetSocketAddress
{
  GSocketAddress parent_instance;


  GInetSocketAddressPrivate *priv;
};

struct _GInetSocketAddressClass
{
  GSocketAddressClass parent_class;
};

 extern
GType g_inet_socket_address_get_type (void) __attribute__ ((__const__));

 extern
GSocketAddress *g_inet_socket_address_new (GInetAddress *address,
                                                       guint16 port);
 extern
GSocketAddress *g_inet_socket_address_new_from_string (const char *address,
                                                       guint port);

 extern
GInetAddress * g_inet_socket_address_get_address (GInetSocketAddress *address);
 extern
guint16 g_inet_socket_address_get_port (GInetSocketAddress *address);

 extern
guint32 g_inet_socket_address_get_flowinfo (GInetSocketAddress *address);
 extern
guint32 g_inet_socket_address_get_scope_id (GInetSocketAddress *address);
# 97 "/usr/include/glib-2.0/gio/gio.h" 2



# 1 "/usr/include/glib-2.0/gio/gioenumtypes.h" 1
# 34 "/usr/include/glib-2.0/gio/gioenumtypes.h"
 extern GType g_app_info_create_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_converter_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_converter_result_get_type (void) __attribute__ ((__const__));

 extern GType g_data_stream_byte_order_get_type (void) __attribute__ ((__const__));

 extern GType g_data_stream_newline_type_get_type (void) __attribute__ ((__const__));

 extern GType g_file_attribute_type_get_type (void) __attribute__ ((__const__));

 extern GType g_file_attribute_info_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_attribute_status_get_type (void) __attribute__ ((__const__));

 extern GType g_file_query_info_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_create_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_measure_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_mount_mount_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_mount_unmount_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_drive_start_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_drive_start_stop_type_get_type (void) __attribute__ ((__const__));

 extern GType g_file_copy_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_monitor_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_file_type_get_type (void) __attribute__ ((__const__));

 extern GType g_filesystem_preview_type_get_type (void) __attribute__ ((__const__));

 extern GType g_file_monitor_event_get_type (void) __attribute__ ((__const__));

 extern GType g_io_error_enum_get_type (void) __attribute__ ((__const__));

 extern GType g_ask_password_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_password_save_get_type (void) __attribute__ ((__const__));

 extern GType g_mount_operation_result_get_type (void) __attribute__ ((__const__));

 extern GType g_output_stream_splice_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_io_stream_splice_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_emblem_origin_get_type (void) __attribute__ ((__const__));

 extern GType g_resolver_error_get_type (void) __attribute__ ((__const__));

 extern GType g_resolver_record_type_get_type (void) __attribute__ ((__const__));

 extern GType g_resource_error_get_type (void) __attribute__ ((__const__));

 extern GType g_resource_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_resource_lookup_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_family_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_type_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_msg_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_protocol_get_type (void) __attribute__ ((__const__));

 extern GType g_zlib_compressor_format_get_type (void) __attribute__ ((__const__));

 extern GType g_unix_socket_address_type_get_type (void) __attribute__ ((__const__));

 extern GType g_bus_type_get_type (void) __attribute__ ((__const__));

 extern GType g_bus_name_owner_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_bus_name_watcher_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_proxy_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_error_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_connection_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_capability_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_call_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_message_type_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_message_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_message_header_field_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_property_info_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_subtree_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_server_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_signal_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_send_message_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_credentials_type_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_message_byte_order_get_type (void) __attribute__ ((__const__));

 extern GType g_application_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_error_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_certificate_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_authentication_mode_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_channel_binding_type_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_channel_binding_error_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_rehandshake_mode_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_password_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_interaction_result_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_interface_skeleton_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_dbus_object_manager_client_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_database_verify_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_database_lookup_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_certificate_request_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_tls_protocol_version_get_type (void) __attribute__ ((__const__));

 extern GType g_io_module_scope_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_client_event_get_type (void) __attribute__ ((__const__));

 extern GType g_socket_listener_event_get_type (void) __attribute__ ((__const__));

 extern GType g_test_dbus_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_subprocess_flags_get_type (void) __attribute__ ((__const__));

 extern GType g_notification_priority_get_type (void) __attribute__ ((__const__));

 extern GType g_network_connectivity_get_type (void) __attribute__ ((__const__));

 extern GType g_pollable_return_get_type (void) __attribute__ ((__const__));

 extern GType g_memory_monitor_warning_level_get_type (void) __attribute__ ((__const__));



 extern GType g_resolver_name_lookup_flags_get_type (void) __attribute__ ((__const__));



 extern GType g_settings_bind_flags_get_type (void) __attribute__ ((__const__));
# 101 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/giomodule.h" 1
# 31 "/usr/include/glib-2.0/gio/giomodule.h"
# 1 "/usr/include/glib-2.0/gmodule.h" 1
# 31 "/usr/include/glib-2.0/gmodule.h"
# 1 "/usr/include/glib-2.0/gmodule/gmodule-visibility.h" 1
# 32 "/usr/include/glib-2.0/gmodule.h" 2
# 63 "/usr/include/glib-2.0/gmodule.h"
typedef enum
{
  G_MODULE_BIND_LAZY = 1 << 0,
  G_MODULE_BIND_LOCAL = 1 << 1,
  G_MODULE_BIND_MASK = 0x03
} GModuleFlags;

typedef struct _GModule GModule;
typedef const gchar* (*GModuleCheckInit) (GModule *module);
typedef void (*GModuleUnload) (GModule *module);


 extern
GQuark g_module_error_quark (void);
# 87 "/usr/include/glib-2.0/gmodule.h"
typedef enum
{
  G_MODULE_ERROR_FAILED,
  G_MODULE_ERROR_CHECK_FAILED,
} GModuleError
                                    ;


 extern
gboolean g_module_supported (void) __attribute__ ((__const__));


 extern
GModule* g_module_open (const gchar *file_name,
           GModuleFlags flags);

 extern
GModule *g_module_open_full (const gchar *file_name,
                                              GModuleFlags flags,
                                              GError **error);


 extern
gboolean g_module_close (GModule *module);


 extern
void g_module_make_resident (GModule *module);


 extern
const gchar * g_module_error (void);


 extern
gboolean g_module_symbol (GModule *module,
           const gchar *symbol_name,
           gpointer *symbol);


 extern
const gchar * g_module_name (GModule *module);
# 141 "/usr/include/glib-2.0/gmodule.h"
__attribute__((__deprecated__)) extern
gchar* g_module_build_path (const gchar *directory,
           const gchar *module_name);
# 32 "/usr/include/glib-2.0/gio/giomodule.h" 2



typedef struct _GIOModuleScope GIOModuleScope;

 extern
GIOModuleScope * g_io_module_scope_new (GIOModuleScopeFlags flags);
 extern
void g_io_module_scope_free (GIOModuleScope *scope);
 extern
void g_io_module_scope_block (GIOModuleScope *scope,
                                              const gchar *basename);
# 52 "/usr/include/glib-2.0/gio/giomodule.h"
typedef struct _GIOModuleClass GIOModuleClass;

 extern
GType g_io_module_get_type (void) __attribute__ ((__const__));
 extern
GIOModule *g_io_module_new (const gchar *filename);

 extern
void g_io_modules_scan_all_in_directory (const char *dirname);
 extern
GList *g_io_modules_load_all_in_directory (const gchar *dirname);

 extern
void g_io_modules_scan_all_in_directory_with_scope (const gchar *dirname,
                                                                    GIOModuleScope *scope);
 extern
GList *g_io_modules_load_all_in_directory_with_scope (const gchar *dirname,
                                                                    GIOModuleScope *scope);

 extern
GIOExtensionPoint *g_io_extension_point_register (const char *name);
 extern
GIOExtensionPoint *g_io_extension_point_lookup (const char *name);
 extern
void g_io_extension_point_set_required_type (GIOExtensionPoint *extension_point,
              GType type);
 extern
GType g_io_extension_point_get_required_type (GIOExtensionPoint *extension_point);
 extern
GList *g_io_extension_point_get_extensions (GIOExtensionPoint *extension_point);
 extern
GIOExtension * g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point,
              const char *name);
 extern
GIOExtension * g_io_extension_point_implement (const char *extension_point_name,
              GType type,
              const char *extension_name,
              gint priority);

 extern
GType g_io_extension_get_type (GIOExtension *extension);
 extern
const char * g_io_extension_get_name (GIOExtension *extension);
 extern
gint g_io_extension_get_priority (GIOExtension *extension);
 extern
GTypeClass* g_io_extension_ref_class (GIOExtension *extension);
# 125 "/usr/include/glib-2.0/gio/giomodule.h"
__attribute__((visibility("default")))
void g_io_module_load (GIOModule *module);
# 145 "/usr/include/glib-2.0/gio/giomodule.h"
__attribute__((visibility("default")))
void g_io_module_unload (GIOModule *module);
# 189 "/usr/include/glib-2.0/gio/giomodule.h"
__attribute__((visibility("default")))
char **g_io_module_query (void);
# 103 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gioscheduler.h" 1
# 35 "/usr/include/glib-2.0/gio/gioscheduler.h"
__attribute__((__deprecated__("Use '" "\"GThreadPool or g_task_run_in_thread\"" "' instead"))) extern
void g_io_scheduler_push_job (GIOSchedulerJobFunc job_func,
          gpointer user_data,
          GDestroyNotify notify,
          gint io_priority,
          GCancellable *cancellable);
__attribute__((__deprecated__)) extern
void g_io_scheduler_cancel_all_jobs (void);
__attribute__((__deprecated__("Use '" "g_main_context_invoke" "' instead"))) extern
gboolean g_io_scheduler_job_send_to_mainloop (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);
__attribute__((__deprecated__("Use '" "g_main_context_invoke" "' instead"))) extern
void g_io_scheduler_job_send_to_mainloop_async (GIOSchedulerJob *job,
          GSourceFunc func,
          gpointer user_data,
          GDestroyNotify notify);
# 104 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/glistmodel.h" 1
# 37 "/usr/include/glib-2.0/gio/glistmodel.h"
 extern
GType g_list_model_get_type (void);
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma clang diagnostic push
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
 typedef struct _GListModel GListModel; typedef struct _GListModelInterface GListModelInterface; typedef GListModel *GListModel_autoptr; typedef GList *GListModel_listautoptr; typedef GSList *GListModel_slistautoptr; typedef GQueue *GListModel_queueautoptr;
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma clang diagnostic push
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListModel (GListModel *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListModel (GListModel **_ptr) { glib_autoptr_clear_GListModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GListModel (void *_ptr) { (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListModel (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GListModel); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListModel (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GListModel); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GListModel); }
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma clang diagnostic pop
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
 __attribute__ ((__unused__)) static inline GListModel * G_LIST_MODEL (gpointer ptr) { return (((GListModel*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline gboolean G_IS_LIST_MODEL (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_list_model_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GListModelInterface * G_LIST_MODEL_GET_IFACE (gpointer ptr) { return (((GListModelInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_list_model_get_type ())))); }
# 38 "/usr/include/glib-2.0/gio/glistmodel.h"
#pragma clang diagnostic pop

struct _GListModelInterface
{
  GTypeInterface g_iface;

  GType (* get_item_type) (GListModel *list);

  guint (* get_n_items) (GListModel *list);

  gpointer (* get_item) (GListModel *list,
                                 guint position);
};

 extern
GType g_list_model_get_item_type (GListModel *list);

 extern
guint g_list_model_get_n_items (GListModel *list);

 extern
gpointer g_list_model_get_item (GListModel *list,
                                                                         guint position);

 extern
GObject * g_list_model_get_object (GListModel *list,
                                                                         guint position);

 extern
void g_list_model_items_changed (GListModel *list,
                                                                         guint position,
                                                                         guint removed,
                                                                         guint added);
# 106 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gliststore.h" 1
# 37 "/usr/include/glib-2.0/gio/gliststore.h"
 extern
GType g_list_store_get_type (void);
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic push
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
 typedef struct _GListStore GListStore; typedef struct { GObjectClass parent_class; } GListStoreClass; typedef GListStore *GListStore_autoptr; typedef GList *GListStore_listautoptr; typedef GSList *GListStore_slistautoptr; typedef GQueue *GListStore_queueautoptr;
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic push
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListStore (GListStore *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListStore (GListStore **_ptr) { glib_autoptr_clear_GListStore (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GListStore (void *_ptr) { (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListStore (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GListStore); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListStore (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GListStore); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListStore (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GListStore); }
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic pop
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
 typedef GListStoreClass *GListStoreClass_autoptr; typedef GList *GListStoreClass_listautoptr; typedef GSList *GListStoreClass_slistautoptr; typedef GQueue *GListStoreClass_queueautoptr;
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic push
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GListStoreClass (GListStoreClass *_ptr) { if (_ptr) (g_type_class_unref) ((GListStoreClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GListStoreClass (GListStoreClass **_ptr) { glib_autoptr_clear_GListStoreClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GListStoreClass (void *_ptr) { (g_type_class_unref) ((GListStoreClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GListStoreClass (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GListStoreClass); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GListStoreClass (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GListStoreClass); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GListStoreClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GListStoreClass); }
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic pop
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
 __attribute__ ((__unused__)) static inline GListStore * G_LIST_STORE (gpointer ptr) { return (((GListStore*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline gboolean G_IS_LIST_STORE (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_list_store_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); }
# 38 "/usr/include/glib-2.0/gio/gliststore.h"
#pragma clang diagnostic pop

 extern
GListStore * g_list_store_new (GType item_type);

 extern
void g_list_store_insert (GListStore *store,
                                                                         guint position,
                                                                         gpointer item);

 extern
guint g_list_store_insert_sorted (GListStore *store,
                                                                         gpointer item,
                                                                         GCompareDataFunc compare_func,
                                                                         gpointer user_data);

 extern
void g_list_store_sort (GListStore *store,
                                                                         GCompareDataFunc compare_func,
                                                                         gpointer user_data);

 extern
void g_list_store_append (GListStore *store,
                                                                         gpointer item);

 extern
void g_list_store_remove (GListStore *store,
                                                                         guint position);

 extern
void g_list_store_remove_all (GListStore *store);

 extern
void g_list_store_splice (GListStore *store,
                                                                         guint position,
                                                                         guint n_removals,
                                                                         gpointer *additions,
                                                                         guint n_additions);

 extern
gboolean g_list_store_find (GListStore *store,
                                                                         gpointer item,
                                                                         guint *position);

 extern
gboolean g_list_store_find_with_equal_func (GListStore *store,
                                                                         gpointer item,
                                                                         GEqualFunc equal_func,
                                                                         guint *position);

 extern
gboolean g_list_store_find_with_equal_func_full (GListStore *store,
                                                                         gpointer item,
                                                                         GEqualFuncFull equal_func,
                                                                         gpointer user_data,
                                                                         guint *position);
# 107 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gloadableicon.h" 1
# 39 "/usr/include/glib-2.0/gio/gloadableicon.h"
typedef struct _GLoadableIconIface GLoadableIconIface;
# 50 "/usr/include/glib-2.0/gio/gloadableicon.h"
struct _GLoadableIconIface
{
  GTypeInterface g_iface;



  GInputStream * (* load) (GLoadableIcon *icon,
                                  int size,
                                  char **type,
                                  GCancellable *cancellable,
                                  GError **error);
  void (* load_async) (GLoadableIcon *icon,
                                  int size,
                                  GCancellable *cancellable,
                                  GAsyncReadyCallback callback,
                                  gpointer user_data);
  GInputStream * (* load_finish) (GLoadableIcon *icon,
                                  GAsyncResult *res,
                                  char **type,
                                  GError **error);
};

 extern
GType g_loadable_icon_get_type (void) __attribute__ ((__const__));

 extern
GInputStream *g_loadable_icon_load (GLoadableIcon *icon,
        int size,
        char **type,
        GCancellable *cancellable,
        GError **error);
 extern
void g_loadable_icon_load_async (GLoadableIcon *icon,
        int size,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
 extern
GInputStream *g_loadable_icon_load_finish (GLoadableIcon *icon,
        GAsyncResult *res,
        char **type,
        GError **error);
# 108 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmemoryinputstream.h" 1
# 41 "/usr/include/glib-2.0/gio/gmemoryinputstream.h"
typedef struct _GMemoryInputStreamClass GMemoryInputStreamClass;
typedef struct _GMemoryInputStreamPrivate GMemoryInputStreamPrivate;

struct _GMemoryInputStream
{
  GInputStream parent_instance;


  GMemoryInputStreamPrivate *priv;
};

struct _GMemoryInputStreamClass
{
  GInputStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


 extern
GType g_memory_input_stream_get_type (void) __attribute__ ((__const__));
 extern
GInputStream * g_memory_input_stream_new (void);
 extern
GInputStream * g_memory_input_stream_new_from_data (const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
 extern
GInputStream * g_memory_input_stream_new_from_bytes (GBytes *bytes);

 extern
void g_memory_input_stream_add_data (GMemoryInputStream *stream,
                                                    const void *data,
                                                    gssize len,
                                                    GDestroyNotify destroy);
 extern
void g_memory_input_stream_add_bytes (GMemoryInputStream *stream,
          GBytes *bytes);
# 109 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmemorymonitor.h" 1
# 43 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
 extern
GType g_memory_monitor_get_type (void);
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma clang diagnostic push
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
 typedef struct _GMemoryMonitor GMemoryMonitor; typedef struct _GMemoryMonitorInterface GMemoryMonitorInterface; typedef GMemoryMonitor *GMemoryMonitor_autoptr; typedef GList *GMemoryMonitor_listautoptr; typedef GSList *GMemoryMonitor_slistautoptr; typedef GQueue *GMemoryMonitor_queueautoptr;
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma clang diagnostic push
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryMonitor (GMemoryMonitor *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryMonitor (GMemoryMonitor **_ptr) { glib_autoptr_clear_GMemoryMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMemoryMonitor (void *_ptr) { (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryMonitor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMemoryMonitor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryMonitor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMemoryMonitor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMemoryMonitor); }
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma clang diagnostic pop
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
 __attribute__ ((__unused__)) static inline GMemoryMonitor * g_memory_monitor (gpointer ptr) { return (((GMemoryMonitor*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline gboolean g_IS_memory_monitor (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_memory_monitor_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GMemoryMonitorInterface * g_memory_monitor_GET_IFACE (gpointer ptr) { return (((GMemoryMonitorInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_memory_monitor_get_type ())))); }
# 44 "/usr/include/glib-2.0/gio/gmemorymonitor.h"
#pragma clang diagnostic pop





struct _GMemoryMonitorInterface {

  GTypeInterface g_iface;


  void (*low_memory_warning) (GMemoryMonitor *monitor,
                                   GMemoryMonitorWarningLevel level);
};

 extern
GMemoryMonitor *g_memory_monitor_dup_default (void);
# 110 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h" 1
# 41 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h"
typedef struct _GMemoryOutputStreamClass GMemoryOutputStreamClass;
typedef struct _GMemoryOutputStreamPrivate GMemoryOutputStreamPrivate;

struct _GMemoryOutputStream
{
  GOutputStream parent_instance;


  GMemoryOutputStreamPrivate *priv;
};

struct _GMemoryOutputStreamClass
{
  GOutputStreamClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};
# 77 "/usr/include/glib-2.0/gio/gmemoryoutputstream.h"
typedef gpointer (* GReallocFunc) (gpointer data,
                                   gsize size);

 extern
GType g_memory_output_stream_get_type (void) __attribute__ ((__const__));

 extern
GOutputStream *g_memory_output_stream_new (gpointer data,
                                                     gsize size,
                                                     GReallocFunc realloc_function,
                                                     GDestroyNotify destroy_function);
 extern
GOutputStream *g_memory_output_stream_new_resizable (void);
 extern
gpointer g_memory_output_stream_get_data (GMemoryOutputStream *ostream);
 extern
gsize g_memory_output_stream_get_size (GMemoryOutputStream *ostream);
 extern
gsize g_memory_output_stream_get_data_size (GMemoryOutputStream *ostream);
 extern
gpointer g_memory_output_stream_steal_data (GMemoryOutputStream *ostream);

 extern
GBytes * g_memory_output_stream_steal_as_bytes (GMemoryOutputStream *ostream);
# 111 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmenu.h" 1
# 25 "/usr/include/glib-2.0/gio/gmenu.h"
# 1 "/usr/include/glib-2.0/gio/gmenumodel.h" 1
# 127 "/usr/include/glib-2.0/gio/gmenumodel.h"
typedef struct _GMenuModelPrivate GMenuModelPrivate;
typedef struct _GMenuModelClass GMenuModelClass;

typedef struct _GMenuAttributeIterPrivate GMenuAttributeIterPrivate;
typedef struct _GMenuAttributeIterClass GMenuAttributeIterClass;
typedef struct _GMenuAttributeIter GMenuAttributeIter;

typedef struct _GMenuLinkIterPrivate GMenuLinkIterPrivate;
typedef struct _GMenuLinkIterClass GMenuLinkIterClass;
typedef struct _GMenuLinkIter GMenuLinkIter;

struct _GMenuModel
{
  GObject parent_instance;
  GMenuModelPrivate *priv;
};
# 160 "/usr/include/glib-2.0/gio/gmenumodel.h"
struct _GMenuModelClass
{
  GObjectClass parent_class;

  gboolean (*is_mutable) (GMenuModel *model);
  gint (*get_n_items) (GMenuModel *model);
  void (*get_item_attributes) (GMenuModel *model,
                                                             gint item_index,
                                                             GHashTable **attributes);
  GMenuAttributeIter * (*iterate_item_attributes) (GMenuModel *model,
                                                             gint item_index);
  GVariant * (*get_item_attribute_value) (GMenuModel *model,
                                                             gint item_index,
                                                             const gchar *attribute,
                                                             const GVariantType *expected_type);
  void (*get_item_links) (GMenuModel *model,
                                                             gint item_index,
                                                             GHashTable **links);
  GMenuLinkIter * (*iterate_item_links) (GMenuModel *model,
                                                             gint item_index);
  GMenuModel * (*get_item_link) (GMenuModel *model,
                                                             gint item_index,
                                                             const gchar *link);
};

 extern
GType g_menu_model_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_menu_model_is_mutable (GMenuModel *model);
 extern
gint g_menu_model_get_n_items (GMenuModel *model);

 extern
GMenuAttributeIter * g_menu_model_iterate_item_attributes (GMenuModel *model,
                                                                         gint item_index);
 extern
GVariant * g_menu_model_get_item_attribute_value (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *attribute,
                                                                         const GVariantType *expected_type);
 extern
gboolean g_menu_model_get_item_attribute (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *attribute,
                                                                         const gchar *format_string,
                                                                         ...);
 extern
GMenuLinkIter * g_menu_model_iterate_item_links (GMenuModel *model,
                                                                         gint item_index);
 extern
GMenuModel * g_menu_model_get_item_link (GMenuModel *model,
                                                                         gint item_index,
                                                                         const gchar *link);

 extern
void g_menu_model_items_changed (GMenuModel *model,
                                                                         gint position,
                                                                         gint removed,
                                                                         gint added);
# 234 "/usr/include/glib-2.0/gio/gmenumodel.h"
struct _GMenuAttributeIter
{
  GObject parent_instance;
  GMenuAttributeIterPrivate *priv;
};

struct _GMenuAttributeIterClass
{
  GObjectClass parent_class;

  gboolean (*get_next) (GMenuAttributeIter *iter,
                             const gchar **out_name,
                             GVariant **value);
};

 extern
GType g_menu_attribute_iter_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_menu_attribute_iter_get_next (GMenuAttributeIter *iter,
                                                                         const gchar **out_name,
                                                                         GVariant **value);
 extern
gboolean g_menu_attribute_iter_next (GMenuAttributeIter *iter);
 extern
const gchar * g_menu_attribute_iter_get_name (GMenuAttributeIter *iter);
 extern
GVariant * g_menu_attribute_iter_get_value (GMenuAttributeIter *iter);
# 276 "/usr/include/glib-2.0/gio/gmenumodel.h"
struct _GMenuLinkIter
{
  GObject parent_instance;
  GMenuLinkIterPrivate *priv;
};

struct _GMenuLinkIterClass
{
  GObjectClass parent_class;

  gboolean (*get_next) (GMenuLinkIter *iter,
                             const gchar **out_link,
                             GMenuModel **value);
};

 extern
GType g_menu_link_iter_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_menu_link_iter_get_next (GMenuLinkIter *iter,
                                                                         const gchar **out_link,
                                                                         GMenuModel **value);
 extern
gboolean g_menu_link_iter_next (GMenuLinkIter *iter);
 extern
const gchar * g_menu_link_iter_get_name (GMenuLinkIter *iter);
 extern
GMenuModel * g_menu_link_iter_get_value (GMenuLinkIter *iter);
# 26 "/usr/include/glib-2.0/gio/gmenu.h" 2
# 41 "/usr/include/glib-2.0/gio/gmenu.h"
typedef struct _GMenuItem GMenuItem;
typedef struct _GMenu GMenu;

 extern
GType g_menu_get_type (void) __attribute__ ((__const__));
 extern
GMenu * g_menu_new (void);

 extern
void g_menu_freeze (GMenu *menu);

 extern
void g_menu_insert_item (GMenu *menu,
                                                     gint position,
                                                     GMenuItem *item);
 extern
void g_menu_prepend_item (GMenu *menu,
                                                     GMenuItem *item);
 extern
void g_menu_append_item (GMenu *menu,
                                                     GMenuItem *item);
 extern
void g_menu_remove (GMenu *menu,
                                                     gint position);

 extern
void g_menu_remove_all (GMenu *menu);

 extern
void g_menu_insert (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
 extern
void g_menu_prepend (GMenu *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
 extern
void g_menu_append (GMenu *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);

 extern
void g_menu_insert_section (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     GMenuModel *section);
 extern
void g_menu_prepend_section (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *section);
 extern
void g_menu_append_section (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *section);

 extern
void g_menu_insert_submenu (GMenu *menu,
                                                     gint position,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
 extern
void g_menu_prepend_submenu (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *submenu);
 extern
void g_menu_append_submenu (GMenu *menu,
                                                     const gchar *label,
                                                     GMenuModel *submenu);


 extern
GType g_menu_item_get_type (void) __attribute__ ((__const__));
 extern
GMenuItem * g_menu_item_new (const gchar *label,
                                                     const gchar *detailed_action);

 extern
GMenuItem * g_menu_item_new_from_model (GMenuModel *model,
                                                     gint item_index);

 extern
GMenuItem * g_menu_item_new_submenu (const gchar *label,
                                                     GMenuModel *submenu);

 extern
GMenuItem * g_menu_item_new_section (const gchar *label,
                                                     GMenuModel *section);

 extern
GVariant * g_menu_item_get_attribute_value (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const GVariantType *expected_type);
 extern
gboolean g_menu_item_get_attribute (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
 extern
GMenuModel *g_menu_item_get_link (GMenuItem *menu_item,
                                                     const gchar *link);

 extern
void g_menu_item_set_attribute_value (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     GVariant *value);
 extern
void g_menu_item_set_attribute (GMenuItem *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
 extern
void g_menu_item_set_link (GMenuItem *menu_item,
                                                     const gchar *link,
                                                     GMenuModel *model);
 extern
void g_menu_item_set_label (GMenuItem *menu_item,
                                                     const gchar *label);
 extern
void g_menu_item_set_submenu (GMenuItem *menu_item,
                                                     GMenuModel *submenu);
 extern
void g_menu_item_set_section (GMenuItem *menu_item,
                                                     GMenuModel *section);
 extern
void g_menu_item_set_action_and_target_value (GMenuItem *menu_item,
                                                     const gchar *action,
                                                     GVariant *target_value);
 extern
void g_menu_item_set_action_and_target (GMenuItem *menu_item,
                                                     const gchar *action,
                                                     const gchar *format_string,
                                                     ...);
 extern
void g_menu_item_set_detailed_action (GMenuItem *menu_item,
                                                     const gchar *detailed_action);

 extern
void g_menu_item_set_icon (GMenuItem *menu_item,
                                                     GIcon *icon);
# 112 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmenuexporter.h" 1
# 43 "/usr/include/glib-2.0/gio/gmenuexporter.h"
 extern
guint g_dbus_connection_export_menu_model (GDBusConnection *connection,
                                                                         const gchar *object_path,
                                                                         GMenuModel *menu,
                                                                         GError **error);

 extern
void g_dbus_connection_unexport_menu_model (GDBusConnection *connection,
                                                                         guint export_id);
# 113 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gmount.h" 1
# 40 "/usr/include/glib-2.0/gio/gmount.h"
typedef struct _GMountIface GMountIface;
# 77 "/usr/include/glib-2.0/gio/gmount.h"
struct _GMountIface
{
  GTypeInterface g_iface;



  void (* changed) (GMount *mount);
  void (* unmounted) (GMount *mount);



  GFile * (* get_root) (GMount *mount);
  char * (* get_name) (GMount *mount);
  GIcon * (* get_icon) (GMount *mount);
  char * (* get_uuid) (GMount *mount);
  GVolume * (* get_volume) (GMount *mount);
  GDrive * (* get_drive) (GMount *mount);
  gboolean (* can_unmount) (GMount *mount);
  gboolean (* can_eject) (GMount *mount);

  void (* unmount) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* eject) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* remount) (GMount *mount,
                                             GMountMountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* remount_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* guess_content_type) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gchar ** (* guess_content_type_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  gchar ** (* guess_content_type_sync) (GMount *mount,
                                             gboolean force_rescan,
                                             GCancellable *cancellable,
                                             GError **error);


  void (* pre_unmount) (GMount *mount);

  void (* unmount_with_operation) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* unmount_with_operation_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);

  void (* eject_with_operation) (GMount *mount,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GMount *mount,
                                             GAsyncResult *result,
                                             GError **error);
  GFile * (* get_default_location) (GMount *mount);

  const gchar * (* get_sort_key) (GMount *mount);
  GIcon * (* get_symbolic_icon) (GMount *mount);
};

 extern
GType g_mount_get_type (void) __attribute__ ((__const__));

 extern
GFile * g_mount_get_root (GMount *mount);
 extern
GFile * g_mount_get_default_location (GMount *mount);
 extern
char * g_mount_get_name (GMount *mount);
 extern
GIcon * g_mount_get_icon (GMount *mount);
 extern
GIcon * g_mount_get_symbolic_icon (GMount *mount);
 extern
char * g_mount_get_uuid (GMount *mount);
 extern
GVolume * g_mount_get_volume (GMount *mount);
 extern
GDrive * g_mount_get_drive (GMount *mount);
 extern
gboolean g_mount_can_unmount (GMount *mount);
 extern
gboolean g_mount_can_eject (GMount *mount);

__attribute__((__deprecated__("Use '" "g_mount_unmount_with_operation" "' instead"))) extern
void g_mount_unmount (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);

__attribute__((__deprecated__("Use '" "g_mount_unmount_with_operation_finish" "' instead"))) extern
gboolean g_mount_unmount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

__attribute__((__deprecated__("Use '" "g_mount_eject_with_operation" "' instead"))) extern
void g_mount_eject (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);

__attribute__((__deprecated__("Use '" "g_mount_eject_with_operation_finish" "' instead"))) extern
gboolean g_mount_eject_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

 extern
void g_mount_remount (GMount *mount,
                                               GMountMountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_mount_remount_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

 extern
void g_mount_guess_content_type (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gchar ** g_mount_guess_content_type_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);
 extern
gchar ** g_mount_guess_content_type_sync (GMount *mount,
                                               gboolean force_rescan,
                                               GCancellable *cancellable,
                                               GError **error);

 extern
gboolean g_mount_is_shadowed (GMount *mount);
 extern
void g_mount_shadow (GMount *mount);
 extern
void g_mount_unshadow (GMount *mount);

 extern
void g_mount_unmount_with_operation (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_mount_unmount_with_operation_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

 extern
void g_mount_eject_with_operation (GMount *mount,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_mount_eject_with_operation_finish (GMount *mount,
                                               GAsyncResult *result,
                                               GError **error);

 extern
const gchar *g_mount_get_sort_key (GMount *mount);
# 115 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gmountoperation.h" 1
# 41 "/usr/include/glib-2.0/gio/gmountoperation.h"
typedef struct _GMountOperationClass GMountOperationClass;
typedef struct _GMountOperationPrivate GMountOperationPrivate;

struct _GMountOperation
{
  GObject parent_instance;

  GMountOperationPrivate *priv;
};

struct _GMountOperationClass
{
  GObjectClass parent_class;



  void (* ask_password) (GMountOperation *op,
    const char *message,
    const char *default_user,
    const char *default_domain,
    GAskPasswordFlags flags);
# 72 "/usr/include/glib-2.0/gio/gmountoperation.h"
  void (* ask_question) (GMountOperation *op,
    const char *message,
    const char *choices[]);

  void (* reply) (GMountOperation *op,
    GMountOperationResult result);

  void (* aborted) (GMountOperation *op);
# 94 "/usr/include/glib-2.0/gio/gmountoperation.h"
  void (* show_processes) (GMountOperation *op,
                           const gchar *message,
                           GArray *processes,
                           const gchar *choices[]);

  void (* show_unmount_progress) (GMountOperation *op,
                                  const gchar *message,
                                  gint64 time_left,
                                  gint64 bytes_left);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
};

 extern
GType g_mount_operation_get_type (void) __attribute__ ((__const__));
 extern
GMountOperation * g_mount_operation_new (void);

 extern
const char * g_mount_operation_get_username (GMountOperation *op);
 extern
void g_mount_operation_set_username (GMountOperation *op,
         const char *username);
 extern
const char * g_mount_operation_get_password (GMountOperation *op);
 extern
void g_mount_operation_set_password (GMountOperation *op,
         const char *password);
 extern
gboolean g_mount_operation_get_anonymous (GMountOperation *op);
 extern
void g_mount_operation_set_anonymous (GMountOperation *op,
         gboolean anonymous);
 extern
const char * g_mount_operation_get_domain (GMountOperation *op);
 extern
void g_mount_operation_set_domain (GMountOperation *op,
         const char *domain);
 extern
GPasswordSave g_mount_operation_get_password_save (GMountOperation *op);
 extern
void g_mount_operation_set_password_save (GMountOperation *op,
         GPasswordSave save);
 extern
int g_mount_operation_get_choice (GMountOperation *op);
 extern
void g_mount_operation_set_choice (GMountOperation *op,
         int choice);
 extern
void g_mount_operation_reply (GMountOperation *op,
         GMountOperationResult result);
 extern
gboolean g_mount_operation_get_is_tcrypt_hidden_volume (GMountOperation *op);
 extern
void g_mount_operation_set_is_tcrypt_hidden_volume (GMountOperation *op,
                                                             gboolean hidden_volume);
 extern
gboolean g_mount_operation_get_is_tcrypt_system_volume (GMountOperation *op);
 extern
void g_mount_operation_set_is_tcrypt_system_volume (GMountOperation *op,
                                                             gboolean system_volume);
 extern
guint g_mount_operation_get_pim (GMountOperation *op);
 extern
void g_mount_operation_set_pim (GMountOperation *op,
                                                   guint pim);
# 116 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnativesocketaddress.h" 1
# 42 "/usr/include/glib-2.0/gio/gnativesocketaddress.h"
typedef struct _GNativeSocketAddressClass GNativeSocketAddressClass;
typedef struct _GNativeSocketAddressPrivate GNativeSocketAddressPrivate;

struct _GNativeSocketAddress
{
  GSocketAddress parent_instance;


  GNativeSocketAddressPrivate *priv;
};

struct _GNativeSocketAddressClass
{
  GSocketAddressClass parent_class;
};

 extern
GType g_native_socket_address_get_type (void) __attribute__ ((__const__));

 extern
GSocketAddress *g_native_socket_address_new (gpointer native,
                                                        gsize len);
# 117 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h" 1
# 30 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h"
# 1 "/usr/include/glib-2.0/gio/gvolumemonitor.h" 1
# 52 "/usr/include/glib-2.0/gio/gvolumemonitor.h"
typedef struct _GVolumeMonitorClass GVolumeMonitorClass;

struct _GVolumeMonitor
{
  GObject parent_instance;


  gpointer priv;
};

struct _GVolumeMonitorClass
{
  GObjectClass parent_class;



  void (* volume_added) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_removed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);
  void (* volume_changed) (GVolumeMonitor *volume_monitor,
                                      GVolume *volume);

  void (* mount_added) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_removed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_pre_unmount) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);
  void (* mount_changed) (GVolumeMonitor *volume_monitor,
                                      GMount *mount);

  void (* drive_connected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_disconnected) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);
  void (* drive_changed) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);



  gboolean (* is_supported) (void);

  GList * (* get_connected_drives) (GVolumeMonitor *volume_monitor);
  GList * (* get_volumes) (GVolumeMonitor *volume_monitor);
  GList * (* get_mounts) (GVolumeMonitor *volume_monitor);

  GVolume * (* get_volume_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);

  GMount * (* get_mount_for_uuid) (GVolumeMonitor *volume_monitor,
                                      const char *uuid);



  GVolume * (* adopt_orphan_mount) (GMount *mount,
                                      GVolumeMonitor *volume_monitor);


  void (* drive_eject_button) (GVolumeMonitor *volume_monitor,
                                      GDrive *drive);


  void (* drive_stop_button) (GVolumeMonitor *volume_monitor,
                                     GDrive *drive);



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

 extern
GType g_volume_monitor_get_type (void) __attribute__ ((__const__));

 extern
GVolumeMonitor *g_volume_monitor_get (void);
 extern
GList * g_volume_monitor_get_connected_drives (GVolumeMonitor *volume_monitor);
 extern
GList * g_volume_monitor_get_volumes (GVolumeMonitor *volume_monitor);
 extern
GList * g_volume_monitor_get_mounts (GVolumeMonitor *volume_monitor);
 extern
GVolume * g_volume_monitor_get_volume_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);
 extern
GMount * g_volume_monitor_get_mount_for_uuid (GVolumeMonitor *volume_monitor,
                                                       const char *uuid);

__attribute__((__deprecated__)) extern
GVolume * g_volume_monitor_adopt_orphan_mount (GMount *mount);
# 31 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h" 2
# 42 "/usr/include/glib-2.0/gio/gnativevolumemonitor.h"
typedef struct _GNativeVolumeMonitor GNativeVolumeMonitor;
typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;

struct _GNativeVolumeMonitor
{
  GVolumeMonitor parent_instance;
};

struct _GNativeVolumeMonitorClass
{
  GVolumeMonitorClass parent_class;

  GMount * (* get_mount_for_mount_path) (const char *mount_path,
                                         GCancellable *cancellable);
};

 extern
GType g_native_volume_monitor_get_type (void) __attribute__ ((__const__));
# 118 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnetworkaddress.h" 1
# 39 "/usr/include/glib-2.0/gio/gnetworkaddress.h"
typedef struct _GNetworkAddressClass GNetworkAddressClass;
typedef struct _GNetworkAddressPrivate GNetworkAddressPrivate;

struct _GNetworkAddress
{
  GObject parent_instance;


  GNetworkAddressPrivate *priv;
};

struct _GNetworkAddressClass
{
  GObjectClass parent_class;

};

 extern
GType g_network_address_get_type (void) __attribute__ ((__const__));

 extern
GSocketConnectable *g_network_address_new (const gchar *hostname,
          guint16 port);
 extern
GSocketConnectable *g_network_address_new_loopback (guint16 port);
 extern
GSocketConnectable *g_network_address_parse (const gchar *host_and_port,
          guint16 default_port,
          GError **error);
 extern
GSocketConnectable *g_network_address_parse_uri (const gchar *uri,
              guint16 default_port,
          GError **error);
 extern
const gchar *g_network_address_get_hostname (GNetworkAddress *addr);
 extern
guint16 g_network_address_get_port (GNetworkAddress *addr);
 extern
const gchar *g_network_address_get_scheme (GNetworkAddress *addr);
# 119 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnetworkmonitor.h" 1
# 47 "/usr/include/glib-2.0/gio/gnetworkmonitor.h"
typedef struct _GNetworkMonitorInterface GNetworkMonitorInterface;

struct _GNetworkMonitorInterface {
  GTypeInterface g_iface;

  void (*network_changed) (GNetworkMonitor *monitor,
    gboolean network_available);

  gboolean (*can_reach) (GNetworkMonitor *monitor,
    GSocketConnectable *connectable,
    GCancellable *cancellable,
    GError **error);
  void (*can_reach_async) (GNetworkMonitor *monitor,
    GSocketConnectable *connectable,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);
  gboolean (*can_reach_finish) (GNetworkMonitor *monitor,
    GAsyncResult *result,
    GError **error);
};

 extern
GType g_network_monitor_get_type (void) __attribute__ ((__const__));
 extern
GNetworkMonitor *g_network_monitor_get_default (void);

 extern
gboolean g_network_monitor_get_network_available (GNetworkMonitor *monitor);

 extern
gboolean g_network_monitor_get_network_metered (GNetworkMonitor *monitor);

 extern
GNetworkConnectivity g_network_monitor_get_connectivity (GNetworkMonitor *monitor);

 extern
gboolean g_network_monitor_can_reach (GNetworkMonitor *monitor,
                                                               GSocketConnectable *connectable,
                                                               GCancellable *cancellable,
                                                               GError **error);
 extern
void g_network_monitor_can_reach_async (GNetworkMonitor *monitor,
                                                               GSocketConnectable *connectable,
                                                               GCancellable *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer user_data);
 extern
gboolean g_network_monitor_can_reach_finish (GNetworkMonitor *monitor,
                                                               GAsyncResult *result,
                                                               GError **error);
# 120 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnetworkservice.h" 1
# 39 "/usr/include/glib-2.0/gio/gnetworkservice.h"
typedef struct _GNetworkServiceClass GNetworkServiceClass;
typedef struct _GNetworkServicePrivate GNetworkServicePrivate;

struct _GNetworkService
{
  GObject parent_instance;


  GNetworkServicePrivate *priv;
};

struct _GNetworkServiceClass
{
  GObjectClass parent_class;

};

 extern
GType g_network_service_get_type (void) __attribute__ ((__const__));

 extern
GSocketConnectable *g_network_service_new (const gchar *service,
            const gchar *protocol,
            const gchar *domain);

 extern
const gchar *g_network_service_get_service (GNetworkService *srv);
 extern
const gchar *g_network_service_get_protocol (GNetworkService *srv);
 extern
const gchar *g_network_service_get_domain (GNetworkService *srv);
 extern
const gchar *g_network_service_get_scheme (GNetworkService *srv);
 extern
void g_network_service_set_scheme (GNetworkService *srv, const gchar *scheme);
# 121 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gnotification.h" 1
# 38 "/usr/include/glib-2.0/gio/gnotification.h"
 extern
GType g_notification_get_type (void) __attribute__ ((__const__));

 extern
GNotification * g_notification_new (const gchar *title);

 extern
void g_notification_set_title (GNotification *notification,
                                                                         const gchar *title);

 extern
void g_notification_set_body (GNotification *notification,
                                                                         const gchar *body);

 extern
void g_notification_set_icon (GNotification *notification,
                                                                         GIcon *icon);

__attribute__((__deprecated__("Use '" "g_notification_set_priority" "' instead"))) extern
void g_notification_set_urgent (GNotification *notification,
                                                                         gboolean urgent);

 extern
void g_notification_set_priority (GNotification *notification,
                                                                         GNotificationPriority priority);

 extern
void g_notification_set_category (GNotification *notification,
                                                                         const gchar *category);

 extern
void g_notification_add_button (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *detailed_action);

 extern
void g_notification_add_button_with_target (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *action,
                                                                         const gchar *target_format,
                                                                         ...);

 extern
void g_notification_add_button_with_target_value (GNotification *notification,
                                                                         const gchar *label,
                                                                         const gchar *action,
                                                                         GVariant *target);

 extern
void g_notification_set_default_action (GNotification *notification,
                                                                         const gchar *detailed_action);

 extern
void g_notification_set_default_action_and_target (GNotification *notification,
                                                                         const gchar *action,
                                                                         const gchar *target_format,
                                                                         ...);

 extern
void g_notification_set_default_action_and_target_value (GNotification *notification,
                                                                         const gchar *action,
                                                                         GVariant *target);
# 122 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gpermission.h" 1
# 45 "/usr/include/glib-2.0/gio/gpermission.h"
typedef struct _GPermissionPrivate GPermissionPrivate;
typedef struct _GPermissionClass GPermissionClass;

struct _GPermission
{
  GObject parent_instance;


  GPermissionPrivate *priv;
};

struct _GPermissionClass {
  GObjectClass parent_class;

  gboolean (*acquire) (GPermission *permission,
                              GCancellable *cancellable,
                              GError **error);
  void (*acquire_async) (GPermission *permission,
                              GCancellable *cancellable,
                              GAsyncReadyCallback callback,
                              gpointer user_data);
  gboolean (*acquire_finish) (GPermission *permission,
                              GAsyncResult *result,
                              GError **error);

  gboolean (*release) (GPermission *permission,
                              GCancellable *cancellable,
                              GError **error);
  void (*release_async) (GPermission *permission,
                              GCancellable *cancellable,
                              GAsyncReadyCallback callback,
                              gpointer user_data);
  gboolean (*release_finish) (GPermission *permission,
                              GAsyncResult *result,
                              GError **error);

  gpointer reserved[16];
};

 extern
GType g_permission_get_type (void);
 extern
gboolean g_permission_acquire (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GError **error);
 extern
void g_permission_acquire_async (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
 extern
gboolean g_permission_acquire_finish (GPermission *permission,
                                                 GAsyncResult *result,
                                                 GError **error);

 extern
gboolean g_permission_release (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GError **error);
 extern
void g_permission_release_async (GPermission *permission,
                                                 GCancellable *cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
 extern
gboolean g_permission_release_finish (GPermission *permission,
                                                 GAsyncResult *result,
                                                 GError **error);

 extern
gboolean g_permission_get_allowed (GPermission *permission);
 extern
gboolean g_permission_get_can_acquire (GPermission *permission);
 extern
gboolean g_permission_get_can_release (GPermission *permission);

 extern
void g_permission_impl_update (GPermission *permission,
                                                 gboolean allowed,
                                                 gboolean can_acquire,
                                                 gboolean can_release);
# 124 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpollableinputstream.h" 1
# 28 "/usr/include/glib-2.0/gio/gpollableinputstream.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 29 "/usr/include/glib-2.0/gio/gpollableinputstream.h" 2








typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface;
# 61 "/usr/include/glib-2.0/gio/gpollableinputstream.h"
struct _GPollableInputStreamInterface
{
  GTypeInterface g_iface;


  gboolean (*can_poll) (GPollableInputStream *stream);

  gboolean (*is_readable) (GPollableInputStream *stream);
  GSource * (*create_source) (GPollableInputStream *stream,
        GCancellable *cancellable);
  gssize (*read_nonblocking) (GPollableInputStream *stream,
        void *buffer,
        gsize count,
        GError **error);
};

 extern
GType g_pollable_input_stream_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_pollable_input_stream_can_poll (GPollableInputStream *stream);

 extern
gboolean g_pollable_input_stream_is_readable (GPollableInputStream *stream);
 extern
GSource *g_pollable_input_stream_create_source (GPollableInputStream *stream,
         GCancellable *cancellable);

 extern
gssize g_pollable_input_stream_read_nonblocking (GPollableInputStream *stream,
         void *buffer,
         gsize count,
         GCancellable *cancellable,
         GError **error);
# 125 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpollableoutputstream.h" 1
# 28 "/usr/include/glib-2.0/gio/gpollableoutputstream.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 29 "/usr/include/glib-2.0/gio/gpollableoutputstream.h" 2








typedef struct _GPollableOutputStreamInterface GPollableOutputStreamInterface;
# 69 "/usr/include/glib-2.0/gio/gpollableoutputstream.h"
struct _GPollableOutputStreamInterface
{
  GTypeInterface g_iface;


  gboolean (*can_poll) (GPollableOutputStream *stream);

  gboolean (*is_writable) (GPollableOutputStream *stream);
  GSource * (*create_source) (GPollableOutputStream *stream,
         GCancellable *cancellable);
  gssize (*write_nonblocking) (GPollableOutputStream *stream,
         const void *buffer,
         gsize count,
         GError **error);
  GPollableReturn (*writev_nonblocking) (GPollableOutputStream *stream,
      const GOutputVector *vectors,
      gsize n_vectors,
      gsize *bytes_written,
      GError **error);
};

 extern
GType g_pollable_output_stream_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_pollable_output_stream_can_poll (GPollableOutputStream *stream);

 extern
gboolean g_pollable_output_stream_is_writable (GPollableOutputStream *stream);
 extern
GSource *g_pollable_output_stream_create_source (GPollableOutputStream *stream,
           GCancellable *cancellable);

 extern
gssize g_pollable_output_stream_write_nonblocking (GPollableOutputStream *stream,
           const void *buffer,
           gsize count,
           GCancellable *cancellable,
           GError **error);

 extern
GPollableReturn g_pollable_output_stream_writev_nonblocking (GPollableOutputStream *stream,
            const GOutputVector *vectors,
            gsize n_vectors,
            gsize *bytes_written,
            GCancellable *cancellable,
            GError **error);
# 126 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpollableutils.h" 1
# 28 "/usr/include/glib-2.0/gio/gpollableutils.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 29 "/usr/include/glib-2.0/gio/gpollableutils.h" 2



 extern
GSource *g_pollable_source_new (GObject *pollable_stream);

 extern
GSource *g_pollable_source_new_full (gpointer pollable_stream,
          GSource *child_source,
          GCancellable *cancellable);

 extern
gssize g_pollable_stream_read (GInputStream *stream,
          void *buffer,
          gsize count,
          gboolean blocking,
          GCancellable *cancellable,
          GError **error);

 extern
gssize g_pollable_stream_write (GOutputStream *stream,
          const void *buffer,
          gsize count,
          gboolean blocking,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_pollable_stream_write_all (GOutputStream *stream,
          const void *buffer,
          gsize count,
          gboolean blocking,
          gsize *bytes_written,
          GCancellable *cancellable,
          GError **error);
# 127 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h" 1
# 44 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
 extern
GType g_power_profile_monitor_get_type (void);
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma clang diagnostic push
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
 typedef struct _GPowerProfileMonitor GPowerProfileMonitor; typedef struct _GPowerProfileMonitorInterface GPowerProfileMonitorInterface; typedef GPowerProfileMonitor *GPowerProfileMonitor_autoptr; typedef GList *GPowerProfileMonitor_listautoptr; typedef GSList *GPowerProfileMonitor_slistautoptr; typedef GQueue *GPowerProfileMonitor_queueautoptr;
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma clang diagnostic push
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPowerProfileMonitor (GPowerProfileMonitor *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPowerProfileMonitor (GPowerProfileMonitor **_ptr) { glib_autoptr_clear_GPowerProfileMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GPowerProfileMonitor (void *_ptr) { (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPowerProfileMonitor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GPowerProfileMonitor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPowerProfileMonitor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GPowerProfileMonitor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPowerProfileMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GPowerProfileMonitor); }
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma clang diagnostic pop
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
 __attribute__ ((__unused__)) static inline GPowerProfileMonitor * g_power_profile_monitor (gpointer ptr) { return (((GPowerProfileMonitor*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline gboolean g_IS_power_profile_monitor (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (g_power_profile_monitor_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline GPowerProfileMonitorInterface * g_power_profile_monitor_GET_IFACE (gpointer ptr) { return (((GPowerProfileMonitorInterface*) g_type_interface_peek (((GTypeInstance*) (ptr))->g_class, (g_power_profile_monitor_get_type ())))); }
# 45 "/usr/include/glib-2.0/gio/gpowerprofilemonitor.h"
#pragma clang diagnostic pop





struct _GPowerProfileMonitorInterface
{

  GTypeInterface g_iface;
};

 extern
GPowerProfileMonitor *g_power_profile_monitor_dup_default (void);

 extern
gboolean g_power_profile_monitor_get_power_saver_enabled (GPowerProfileMonitor *monitor);
# 128 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gpropertyaction.h" 1
# 39 "/usr/include/glib-2.0/gio/gpropertyaction.h"
 extern
GType g_property_action_get_type (void) __attribute__ ((__const__));

 extern
GPropertyAction * g_property_action_new (const gchar *name,
                                                                         gpointer object,
                                                                         const gchar *property_name);
# 129 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gproxy.h" 1
# 51 "/usr/include/glib-2.0/gio/gproxy.h"
typedef struct _GProxyInterface GProxyInterface;
# 66 "/usr/include/glib-2.0/gio/gproxy.h"
struct _GProxyInterface
{
  GTypeInterface g_iface;



  GIOStream * (* connect) (GProxy *proxy,
         GIOStream *connection,
         GProxyAddress *proxy_address,
         GCancellable *cancellable,
         GError **error);

  void (* connect_async) (GProxy *proxy,
         GIOStream *connection,
         GProxyAddress *proxy_address,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);

  GIOStream * (* connect_finish) (GProxy *proxy,
         GAsyncResult *result,
         GError **error);

  gboolean (* supports_hostname) (GProxy *proxy);
};

 extern
GType g_proxy_get_type (void) __attribute__ ((__const__));

 extern
GProxy *g_proxy_get_default_for_protocol (const gchar *protocol);

 extern
GIOStream *g_proxy_connect (GProxy *proxy,
          GIOStream *connection,
          GProxyAddress *proxy_address,
          GCancellable *cancellable,
          GError **error);

 extern
void g_proxy_connect_async (GProxy *proxy,
          GIOStream *connection,
          GProxyAddress *proxy_address,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);

 extern
GIOStream *g_proxy_connect_finish (GProxy *proxy,
          GAsyncResult *result,
          GError **error);

 extern
gboolean g_proxy_supports_hostname (GProxy *proxy);
# 130 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gproxyaddress.h" 1
# 41 "/usr/include/glib-2.0/gio/gproxyaddress.h"
typedef struct _GProxyAddressClass GProxyAddressClass;
typedef struct _GProxyAddressPrivate GProxyAddressPrivate;

struct _GProxyAddress
{
  GInetSocketAddress parent_instance;


  GProxyAddressPrivate *priv;
};

struct _GProxyAddressClass
{
  GInetSocketAddressClass parent_class;
};


 extern
GType g_proxy_address_get_type (void) __attribute__ ((__const__));

 extern
GSocketAddress *g_proxy_address_new (GInetAddress *inetaddr,
          guint16 port,
          const gchar *protocol,
          const gchar *dest_hostname,
                               guint16 dest_port,
          const gchar *username,
          const gchar *password);

 extern
const gchar *g_proxy_address_get_protocol (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_destination_protocol (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_destination_hostname (GProxyAddress *proxy);
 extern
guint16 g_proxy_address_get_destination_port (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_username (GProxyAddress *proxy);
 extern
const gchar *g_proxy_address_get_password (GProxyAddress *proxy);

 extern
const gchar *g_proxy_address_get_uri (GProxyAddress *proxy);
# 131 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gproxyaddressenumerator.h" 1
# 30 "/usr/include/glib-2.0/gio/gproxyaddressenumerator.h"
# 1 "/usr/include/glib-2.0/gio/gsocketaddressenumerator.h" 1
# 39 "/usr/include/glib-2.0/gio/gsocketaddressenumerator.h"
typedef struct _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass;

struct _GSocketAddressEnumerator
{

  GObject parent_instance;
};
# 55 "/usr/include/glib-2.0/gio/gsocketaddressenumerator.h"
struct _GSocketAddressEnumeratorClass
{

  GObjectClass parent_class;




  GSocketAddress * (* next) (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GError **error);

  void (* next_async) (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
  GSocketAddress * (* next_finish) (GSocketAddressEnumerator *enumerator,
        GAsyncResult *result,
        GError **error);
};

 extern
GType g_socket_address_enumerator_get_type (void) __attribute__ ((__const__));

 extern
GSocketAddress *g_socket_address_enumerator_next (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GError **error);

 extern
void g_socket_address_enumerator_next_async (GSocketAddressEnumerator *enumerator,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
 extern
GSocketAddress *g_socket_address_enumerator_next_finish (GSocketAddressEnumerator *enumerator,
        GAsyncResult *result,
        GError **error);
# 31 "/usr/include/glib-2.0/gio/gproxyaddressenumerator.h" 2
# 41 "/usr/include/glib-2.0/gio/gproxyaddressenumerator.h"
typedef struct _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass;
typedef struct _GProxyAddressEnumeratorPrivate GProxyAddressEnumeratorPrivate;

struct _GProxyAddressEnumerator
{

  GSocketAddressEnumerator parent_instance;
  GProxyAddressEnumeratorPrivate *priv;
};






struct _GProxyAddressEnumeratorClass
{

  GSocketAddressEnumeratorClass parent_class;

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};

 extern
GType g_proxy_address_enumerator_get_type (void) __attribute__ ((__const__));
# 132 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gproxyresolver.h" 1
# 47 "/usr/include/glib-2.0/gio/gproxyresolver.h"
typedef struct _GProxyResolverInterface GProxyResolverInterface;

struct _GProxyResolverInterface {
  GTypeInterface g_iface;


  gboolean (* is_supported) (GProxyResolver *resolver);

  gchar ** (* lookup) (GProxyResolver *resolver,
         const gchar *uri,
         GCancellable *cancellable,
         GError **error);

  void (* lookup_async) (GProxyResolver *resolver,
         const gchar *uri,
         GCancellable *cancellable,
         GAsyncReadyCallback callback,
         gpointer user_data);

  gchar ** (* lookup_finish) (GProxyResolver *resolver,
         GAsyncResult *result,
         GError **error);
};

 extern
GType g_proxy_resolver_get_type (void) __attribute__ ((__const__));
 extern
GProxyResolver *g_proxy_resolver_get_default (void);

 extern
gboolean g_proxy_resolver_is_supported (GProxyResolver *resolver);
 extern
gchar **g_proxy_resolver_lookup (GProxyResolver *resolver,
       const gchar *uri,
       GCancellable *cancellable,
       GError **error);
 extern
void g_proxy_resolver_lookup_async (GProxyResolver *resolver,
       const gchar *uri,
       GCancellable *cancellable,
       GAsyncReadyCallback callback,
       gpointer user_data);
 extern
gchar **g_proxy_resolver_lookup_finish (GProxyResolver *resolver,
       GAsyncResult *result,
       GError **error);
# 133 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gremoteactiongroup.h" 1
# 43 "/usr/include/glib-2.0/gio/gremoteactiongroup.h"
typedef struct _GRemoteActionGroupInterface GRemoteActionGroupInterface;

struct _GRemoteActionGroupInterface
{
  GTypeInterface g_iface;

  void (* activate_action_full) (GRemoteActionGroup *remote,
                                     const gchar *action_name,
                                     GVariant *parameter,
                                     GVariant *platform_data);

  void (* change_action_state_full) (GRemoteActionGroup *remote,
                                     const gchar *action_name,
                                     GVariant *value,
                                     GVariant *platform_data);
};

 extern
GType g_remote_action_group_get_type (void) __attribute__ ((__const__));

 extern
void g_remote_action_group_activate_action_full (GRemoteActionGroup *remote,
                                                                         const gchar *action_name,
                                                                         GVariant *parameter,
                                                                         GVariant *platform_data);

 extern
void g_remote_action_group_change_action_state_full (GRemoteActionGroup *remote,
                                                                         const gchar *action_name,
                                                                         GVariant *value,
                                                                         GVariant *platform_data);
# 134 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gresolver.h" 1
# 40 "/usr/include/glib-2.0/gio/gresolver.h"
typedef struct _GResolverPrivate GResolverPrivate;
typedef struct _GResolverClass GResolverClass;

struct _GResolver {
  GObject parent_instance;

  GResolverPrivate *priv;
};
# 59 "/usr/include/glib-2.0/gio/gresolver.h"
typedef enum {
  G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT = 0,
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY = 1 << 0,
  G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY = 1 << 1,
} GResolverNameLookupFlags;

struct _GResolverClass {
  GObjectClass parent_class;


  void ( *reload) (GResolver *resolver);


  GList * ( *lookup_by_name) (GResolver *resolver,
                                                const gchar *hostname,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_by_name_async) (GResolver *resolver,
                                                const gchar *hostname,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  GList * ( *lookup_by_name_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);

  gchar * ( *lookup_by_address) (GResolver *resolver,
                                                GInetAddress *address,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_by_address_async) (GResolver *resolver,
                                                GInetAddress *address,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  gchar * ( *lookup_by_address_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);

  GList * ( *lookup_service) (GResolver *resolver,
                                                const gchar *rrname,
                                                GCancellable *cancellable,
                                                GError **error);
  void ( *lookup_service_async) (GResolver *resolver,
                                                const gchar *rrname,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
  GList * ( *lookup_service_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);

  GList * ( *lookup_records) (GResolver *resolver,
                                                const gchar *rrname,
                                                GResolverRecordType record_type,
                                                GCancellable *cancellable,
                                                GError **error);

  void ( *lookup_records_async) (GResolver *resolver,
                                                const gchar *rrname,
                                                GResolverRecordType record_type,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);

  GList * ( *lookup_records_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);
# 143 "/usr/include/glib-2.0/gio/gresolver.h"
  void ( *lookup_by_name_with_flags_async) (GResolver *resolver,
                                                const gchar *hostname,
                                                GResolverNameLookupFlags flags,
                                                GCancellable *cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
# 160 "/usr/include/glib-2.0/gio/gresolver.h"
  GList * ( *lookup_by_name_with_flags_finish) (GResolver *resolver,
                                                GAsyncResult *result,
                                                GError **error);
# 178 "/usr/include/glib-2.0/gio/gresolver.h"
  GList * ( *lookup_by_name_with_flags) (GResolver *resolver,
                                                const gchar *hostname,
                                                GResolverNameLookupFlags flags,
                                                GCancellable *cancellable,
                                                GError **error);

};

 extern
GType g_resolver_get_type (void) __attribute__ ((__const__));
 extern
GResolver *g_resolver_get_default (void);
 extern
void g_resolver_set_default (GResolver *resolver);
 extern
GList *g_resolver_lookup_by_name (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_lookup_by_name_async (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
GList *g_resolver_lookup_by_name_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
void g_resolver_lookup_by_name_with_flags_async (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GResolverNameLookupFlags flags,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
GList *g_resolver_lookup_by_name_with_flags_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
GList *g_resolver_lookup_by_name_with_flags (GResolver *resolver,
                                                        const gchar *hostname,
                                                        GResolverNameLookupFlags flags,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_free_addresses (GList *addresses);
 extern
gchar *g_resolver_lookup_by_address (GResolver *resolver,
                                                        GInetAddress *address,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_lookup_by_address_async (GResolver *resolver,
                                                        GInetAddress *address,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
gchar *g_resolver_lookup_by_address_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
GList *g_resolver_lookup_service (GResolver *resolver,
                                                        const gchar *service,
                                                        const gchar *protocol,
                                                        const gchar *domain,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_lookup_service_async (GResolver *resolver,
                                                        const gchar *service,
                                                        const gchar *protocol,
                                                        const gchar *domain,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
GList *g_resolver_lookup_service_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
GList *g_resolver_lookup_records (GResolver *resolver,
                                                        const gchar *rrname,
                                                        GResolverRecordType record_type,
                                                        GCancellable *cancellable,
                                                        GError **error);
 extern
void g_resolver_lookup_records_async (GResolver *resolver,
                                                        const gchar *rrname,
                                                        GResolverRecordType record_type,
                                                        GCancellable *cancellable,
                                                        GAsyncReadyCallback callback,
                                                        gpointer user_data);
 extern
GList *g_resolver_lookup_records_finish (GResolver *resolver,
                                                        GAsyncResult *result,
                                                        GError **error);
 extern
void g_resolver_free_targets (GList *targets);

 extern
unsigned g_resolver_get_timeout (GResolver *resolver);
 extern
void g_resolver_set_timeout (GResolver *resolver,
                                                        unsigned timeout_ms);
# 294 "/usr/include/glib-2.0/gio/gresolver.h"
 extern
GQuark g_resolver_error_quark (void);
# 135 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gresource.h" 1
# 50 "/usr/include/glib-2.0/gio/gresource.h"
 extern
GQuark g_resource_error_quark (void);

typedef struct _GStaticResource GStaticResource;

struct _GStaticResource {

  const guint8 *data;
  gsize data_len;
  GResource *resource;
  GStaticResource *next;
  gpointer padding;
};

 extern
GType g_resource_get_type (void) __attribute__ ((__const__));
 extern
GResource * g_resource_new_from_data (GBytes *data,
           GError **error);
 extern
GResource * g_resource_ref (GResource *resource);
 extern
void g_resource_unref (GResource *resource);
 extern
GResource * g_resource_load (const gchar *filename,
           GError **error);
 extern
GInputStream *g_resource_open_stream (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
GBytes * g_resource_lookup_data (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
char ** g_resource_enumerate_children (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
gboolean g_resource_get_info (GResource *resource,
           const char *path,
           GResourceLookupFlags lookup_flags,
           gsize *size,
           guint32 *flags,
           GError **error);

 extern
void g_resources_register (GResource *resource);
 extern
void g_resources_unregister (GResource *resource);
 extern
GInputStream *g_resources_open_stream (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
GBytes * g_resources_lookup_data (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
char ** g_resources_enumerate_children (const char *path,
           GResourceLookupFlags lookup_flags,
           GError **error);
 extern
gboolean g_resources_get_info (const char *path,
           GResourceLookupFlags lookup_flags,
           gsize *size,
           guint32 *flags,
           GError **error);


 extern
void g_static_resource_init (GStaticResource *static_resource);
 extern
void g_static_resource_fini (GStaticResource *static_resource);
 extern
GResource *g_static_resource_get_resource (GStaticResource *static_resource);
# 136 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gseekable.h" 1
# 39 "/usr/include/glib-2.0/gio/gseekable.h"
typedef struct _GSeekableIface GSeekableIface;
# 52 "/usr/include/glib-2.0/gio/gseekable.h"
struct _GSeekableIface
{
  GTypeInterface g_iface;



  goffset (* tell) (GSeekable *seekable);

  gboolean (* can_seek) (GSeekable *seekable);
  gboolean (* seek) (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);

  gboolean (* can_truncate) (GSeekable *seekable);
  gboolean (* truncate_fn) (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);


};

 extern
GType g_seekable_get_type (void) __attribute__ ((__const__));

 extern
goffset g_seekable_tell (GSeekable *seekable);
 extern
gboolean g_seekable_can_seek (GSeekable *seekable);
 extern
gboolean g_seekable_seek (GSeekable *seekable,
      goffset offset,
      GSeekType type,
      GCancellable *cancellable,
      GError **error);
 extern
gboolean g_seekable_can_truncate (GSeekable *seekable);
 extern
gboolean g_seekable_truncate (GSeekable *seekable,
      goffset offset,
      GCancellable *cancellable,
      GError **error);
# 137 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsettings.h" 1
# 29 "/usr/include/glib-2.0/gio/gsettings.h"
# 1 "/usr/include/glib-2.0/gio/gsettingsschema.h" 1
# 29 "/usr/include/glib-2.0/gio/gsettingsschema.h"
typedef struct _GSettingsSchemaSource GSettingsSchemaSource;
typedef struct _GSettingsSchema GSettingsSchema;
typedef struct _GSettingsSchemaKey GSettingsSchemaKey;


 extern
GType g_settings_schema_source_get_type (void) __attribute__ ((__const__));

 extern
GSettingsSchemaSource * g_settings_schema_source_get_default (void);
 extern
GSettingsSchemaSource * g_settings_schema_source_ref (GSettingsSchemaSource *source);
 extern
void g_settings_schema_source_unref (GSettingsSchemaSource *source);

 extern
GSettingsSchemaSource * g_settings_schema_source_new_from_directory (const gchar *directory,
                                                                         GSettingsSchemaSource *parent,
                                                                         gboolean trusted,
                                                                         GError **error);

 extern
GSettingsSchema * g_settings_schema_source_lookup (GSettingsSchemaSource *source,
                                                                         const gchar *schema_id,
                                                                         gboolean recursive);

 extern
void g_settings_schema_source_list_schemas (GSettingsSchemaSource *source,
                                                                         gboolean recursive,
                                                                         gchar ***non_relocatable,
                                                                         gchar ***relocatable);


 extern
GType g_settings_schema_get_type (void) __attribute__ ((__const__));

 extern
GSettingsSchema * g_settings_schema_ref (GSettingsSchema *schema);
 extern
void g_settings_schema_unref (GSettingsSchema *schema);

 extern
const gchar * g_settings_schema_get_id (GSettingsSchema *schema);
 extern
const gchar * g_settings_schema_get_path (GSettingsSchema *schema);
 extern
GSettingsSchemaKey * g_settings_schema_get_key (GSettingsSchema *schema,
                                                                         const gchar *name);
 extern
gboolean g_settings_schema_has_key (GSettingsSchema *schema,
                                                                         const gchar *name);
 extern
gchar** g_settings_schema_list_keys (GSettingsSchema *schema);


 extern
gchar ** g_settings_schema_list_children (GSettingsSchema *schema);


 extern
GType g_settings_schema_key_get_type (void) __attribute__ ((__const__));

 extern
GSettingsSchemaKey * g_settings_schema_key_ref (GSettingsSchemaKey *key);
 extern
void g_settings_schema_key_unref (GSettingsSchemaKey *key);

 extern
const GVariantType * g_settings_schema_key_get_value_type (GSettingsSchemaKey *key);
 extern
GVariant * g_settings_schema_key_get_default_value (GSettingsSchemaKey *key);
 extern
GVariant * g_settings_schema_key_get_range (GSettingsSchemaKey *key);
 extern
gboolean g_settings_schema_key_range_check (GSettingsSchemaKey *key,
                                                                         GVariant *value);

 extern
const gchar * g_settings_schema_key_get_name (GSettingsSchemaKey *key);
 extern
const gchar * g_settings_schema_key_get_summary (GSettingsSchemaKey *key);
 extern
const gchar * g_settings_schema_key_get_description (GSettingsSchemaKey *key);
# 30 "/usr/include/glib-2.0/gio/gsettings.h" 2
# 44 "/usr/include/glib-2.0/gio/gsettings.h"
typedef struct _GSettingsPrivate GSettingsPrivate;
typedef struct _GSettingsClass GSettingsClass;

struct _GSettingsClass
{
  GObjectClass parent_class;


  void (*writable_changed) (GSettings *settings,
                                        const gchar *key);
  void (*changed) (GSettings *settings,
                                        const gchar *key);
  gboolean (*writable_change_event) (GSettings *settings,
                                        GQuark key);
  gboolean (*change_event) (GSettings *settings,
                                        const GQuark *keys,
                                        gint n_keys);

  gpointer padding[20];
};

struct _GSettings
{
  GObject parent_instance;
  GSettingsPrivate *priv;
};


 extern
GType g_settings_get_type (void);

__attribute__((__deprecated__("Use '" "g_settings_schema_source_list_schemas" "' instead"))) extern
const gchar * const * g_settings_list_schemas (void);
__attribute__((__deprecated__("Use '" "g_settings_schema_source_list_schemas" "' instead"))) extern
const gchar * const * g_settings_list_relocatable_schemas (void);
 extern
GSettings * g_settings_new (const gchar *schema_id);
 extern
GSettings * g_settings_new_with_path (const gchar *schema_id,
                                                                         const gchar *path);
 extern
GSettings * g_settings_new_with_backend (const gchar *schema_id,
                                                                         GSettingsBackend *backend);
 extern
GSettings * g_settings_new_with_backend_and_path (const gchar *schema_id,
                                                                         GSettingsBackend *backend,
                                                                         const gchar *path);
 extern
GSettings * g_settings_new_full (GSettingsSchema *schema,
                                                                         GSettingsBackend *backend,
                                                                         const gchar *path);
 extern
gchar ** g_settings_list_children (GSettings *settings);
__attribute__((__deprecated__("Use '" "g_settings_schema_list_keys" "' instead"))) extern
gchar ** g_settings_list_keys (GSettings *settings);
__attribute__((__deprecated__("Use '" "g_settings_schema_key_get_range" "' instead"))) extern
GVariant * g_settings_get_range (GSettings *settings,
                                                                         const gchar *key);
__attribute__((__deprecated__("Use '" "g_settings_schema_key_range_check" "' instead"))) extern
gboolean g_settings_range_check (GSettings *settings,
                                                                         const gchar *key,
                                                                         GVariant *value);

 extern
gboolean g_settings_set_value (GSettings *settings,
                                                                         const gchar *key,
                                                                         GVariant *value);
 extern
GVariant * g_settings_get_value (GSettings *settings,
                                                                         const gchar *key);

 extern
GVariant * g_settings_get_user_value (GSettings *settings,
                                                                         const gchar *key);
 extern
GVariant * g_settings_get_default_value (GSettings *settings,
                                                                         const gchar *key);

 extern
gboolean g_settings_set (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *format,
                                                                         ...);
 extern
void g_settings_get (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *format,
                                                                         ...);
 extern
void g_settings_reset (GSettings *settings,
                                                                         const gchar *key);

 extern
gint g_settings_get_int (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_int (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint value);
 extern
gint64 g_settings_get_int64 (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_int64 (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint64 value);
 extern
guint g_settings_get_uint (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_uint (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint value);
 extern
guint64 g_settings_get_uint64 (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_uint64 (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint64 value);
 extern
gchar * g_settings_get_string (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_string (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *value);
 extern
gboolean g_settings_get_boolean (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_boolean (GSettings *settings,
                                                                         const gchar *key,
                                                                         gboolean value);
 extern
gdouble g_settings_get_double (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_double (GSettings *settings,
                                                                         const gchar *key,
                                                                         gdouble value);
 extern
gchar ** g_settings_get_strv (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_strv (GSettings *settings,
                                                                         const gchar *key,
                                                                         const gchar *const *value);
 extern
gint g_settings_get_enum (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_enum (GSettings *settings,
                                                                         const gchar *key,
                                                                         gint value);
 extern
guint g_settings_get_flags (GSettings *settings,
                                                                         const gchar *key);
 extern
gboolean g_settings_set_flags (GSettings *settings,
                                                                         const gchar *key,
                                                                         guint value);
 extern
GSettings * g_settings_get_child (GSettings *settings,
                                                                         const gchar *name);

 extern
gboolean g_settings_is_writable (GSettings *settings,
                                                                         const gchar *name);

 extern
void g_settings_delay (GSettings *settings);
 extern
void g_settings_apply (GSettings *settings);
 extern
void g_settings_revert (GSettings *settings);
 extern
gboolean g_settings_get_has_unapplied (GSettings *settings);
 extern
void g_settings_sync (void);
# 237 "/usr/include/glib-2.0/gio/gsettings.h"
typedef GVariant * (*GSettingsBindSetMapping) (const GValue *value,
                                                                         const GVariantType *expected_type,
                                                                         gpointer user_data);
# 253 "/usr/include/glib-2.0/gio/gsettings.h"
typedef gboolean (*GSettingsBindGetMapping) (GValue *value,
                                                                         GVariant *variant,
                                                                         gpointer user_data);
# 277 "/usr/include/glib-2.0/gio/gsettings.h"
typedef gboolean (*GSettingsGetMapping) (GVariant *value,
                                                                         gpointer *result,
                                                                         gpointer user_data);
# 299 "/usr/include/glib-2.0/gio/gsettings.h"
typedef enum
{
  G_SETTINGS_BIND_DEFAULT,
  G_SETTINGS_BIND_GET = (1<<0),
  G_SETTINGS_BIND_SET = (1<<1),
  G_SETTINGS_BIND_NO_SENSITIVITY = (1<<2),
  G_SETTINGS_BIND_GET_NO_CHANGES = (1<<3),
  G_SETTINGS_BIND_INVERT_BOOLEAN = (1<<4)
} GSettingsBindFlags;

 extern
void g_settings_bind (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         GSettingsBindFlags flags);
 extern
void g_settings_bind_with_mapping (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         GSettingsBindFlags flags,
                                                                         GSettingsBindGetMapping get_mapping,
                                                                         GSettingsBindSetMapping set_mapping,
                                                                         gpointer user_data,
                                                                         GDestroyNotify destroy);
 extern
void g_settings_bind_with_mapping_closures (GSettings *settings,
                                            const char *key,
                                            GObject *object,
                                            const char *property,
                                            GSettingsBindFlags flags,
                                            GClosure *get_mapping,
                                            GClosure *set_mapping);
 extern
void g_settings_bind_writable (GSettings *settings,
                                                                         const gchar *key,
                                                                         gpointer object,
                                                                         const gchar *property,
                                                                         gboolean inverted);
 extern
void g_settings_unbind (gpointer object,
                                                                         const gchar *property);

 extern
GAction * g_settings_create_action (GSettings *settings,
                                                                         const gchar *key);

 extern
gpointer g_settings_get_mapped (GSettings *settings,
                                                                         const gchar *key,
                                                                         GSettingsGetMapping mapping,
                                                                         gpointer user_data);
# 138 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gsimpleaction.h" 1
# 39 "/usr/include/glib-2.0/gio/gsimpleaction.h"
 extern
GType g_simple_action_get_type (void) __attribute__ ((__const__));

 extern
GSimpleAction * g_simple_action_new (const gchar *name,
                                                                         const GVariantType *parameter_type);

 extern
GSimpleAction * g_simple_action_new_stateful (const gchar *name,
                                                                         const GVariantType *parameter_type,
                                                                         GVariant *state);

 extern
void g_simple_action_set_enabled (GSimpleAction *simple,
                                                                         gboolean enabled);

 extern
void g_simple_action_set_state (GSimpleAction *simple,
                                                                         GVariant *value);

 extern
void g_simple_action_set_state_hint (GSimpleAction *simple,
                                                                         GVariant *state_hint);
# 140 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleactiongroup.h" 1
# 46 "/usr/include/glib-2.0/gio/gsimpleactiongroup.h"
typedef struct _GSimpleActionGroupPrivate GSimpleActionGroupPrivate;
typedef struct _GSimpleActionGroupClass GSimpleActionGroupClass;

struct _GSimpleActionGroup
{

  GObject parent_instance;

  GSimpleActionGroupPrivate *priv;
};

struct _GSimpleActionGroupClass
{

  GObjectClass parent_class;


  gpointer padding[12];
};

 extern
GType g_simple_action_group_get_type (void) __attribute__ ((__const__));

 extern
GSimpleActionGroup * g_simple_action_group_new (void);

__attribute__((__deprecated__("Use '" "g_action_map_lookup_action" "' instead"))) extern
GAction * g_simple_action_group_lookup (GSimpleActionGroup *simple,
                                                                         const gchar *action_name);

__attribute__((__deprecated__("Use '" "g_action_map_add_action" "' instead"))) extern
void g_simple_action_group_insert (GSimpleActionGroup *simple,
                                                                         GAction *action);

__attribute__((__deprecated__("Use '" "g_action_map_remove_action" "' instead"))) extern
void g_simple_action_group_remove (GSimpleActionGroup *simple,
                                                                         const gchar *action_name);

__attribute__((__deprecated__("Use '" "g_action_map_add_action_entries" "' instead"))) extern
void g_simple_action_group_add_entries (GSimpleActionGroup *simple,
                                                                         const GActionEntry *entries,
                                                                         gint n_entries,
                                                                         gpointer user_data);
# 141 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h" 1
# 41 "/usr/include/glib-2.0/gio/gsimpleasyncresult.h"
typedef struct _GSimpleAsyncResultClass GSimpleAsyncResultClass;


 extern
GType g_simple_async_result_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           gpointer source_tag);
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (__printf__, 6, 7)));
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_from_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           const GError *error);
__attribute__((__deprecated__("Use '" "g_task_new" "' instead"))) extern
GSimpleAsyncResult *g_simple_async_result_new_take_error (GObject *source_object,
           GAsyncReadyCallback callback,
           gpointer user_data,
           GError *error);

__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gpointer (GSimpleAsyncResult *simple,
                                                               gpointer op_res,
                                                               GDestroyNotify destroy_op_res);
__attribute__((__deprecated__)) extern
gpointer g_simple_async_result_get_op_res_gpointer (GSimpleAsyncResult *simple);

__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gssize (GSimpleAsyncResult *simple,
                                                               gssize op_res);
__attribute__((__deprecated__)) extern
gssize g_simple_async_result_get_op_res_gssize (GSimpleAsyncResult *simple);

__attribute__((__deprecated__)) extern
void g_simple_async_result_set_op_res_gboolean (GSimpleAsyncResult *simple,
                                                               gboolean op_res);
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_get_op_res_gboolean (GSimpleAsyncResult *simple);



 extern
void g_simple_async_result_set_check_cancellable (GSimpleAsyncResult *simple,
                                                                 GCancellable *check_cancellable);
__attribute__((__deprecated__)) extern
gpointer g_simple_async_result_get_source_tag (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_handle_cancellation (GSimpleAsyncResult *simple,
           gboolean handle_cancellation);
__attribute__((__deprecated__)) extern
void g_simple_async_result_complete (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_complete_in_idle (GSimpleAsyncResult *simple);
__attribute__((__deprecated__)) extern
void g_simple_async_result_run_in_thread (GSimpleAsyncResult *simple,
           GSimpleAsyncThreadFunc func,
           int io_priority,
           GCancellable *cancellable);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_from_error (GSimpleAsyncResult *simple,
           const GError *error);
__attribute__((__deprecated__)) extern
void g_simple_async_result_take_error (GSimpleAsyncResult *simple,
           GError *error);
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_propagate_error (GSimpleAsyncResult *simple,
           GError **dest);
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_error (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           ...) __attribute__((__format__ (__printf__, 4, 5)));
__attribute__((__deprecated__)) extern
void g_simple_async_result_set_error_va (GSimpleAsyncResult *simple,
           GQuark domain,
           gint code,
           const char *format,
           va_list args)
           __attribute__((__format__ (__printf__, 4, 0)));
__attribute__((__deprecated__)) extern
gboolean g_simple_async_result_is_valid (GAsyncResult *result,
                                                            GObject *source,
                                                            gpointer source_tag);

__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_error_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        GQuark domain,
        gint code,
        const char *format,
        ...) __attribute__((__format__ (__printf__, 6, 7)));
__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_gerror_in_idle (GObject *object,
        GAsyncReadyCallback callback,
        gpointer user_data,
        const GError *error);
__attribute__((__deprecated__("Use '" "g_task_report_error" "' instead"))) extern
void g_simple_async_report_take_gerror_in_idle (GObject *object,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data,
                                                GError *error);
# 142 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleiostream.h" 1
# 38 "/usr/include/glib-2.0/gio/gsimpleiostream.h"
 extern
GType g_simple_io_stream_get_type (void) __attribute__ ((__const__));

 extern
GIOStream *g_simple_io_stream_new (GInputStream *input_stream,
                                                          GOutputStream *output_stream);
# 143 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimplepermission.h" 1
# 40 "/usr/include/glib-2.0/gio/gsimplepermission.h"
 extern
GType g_simple_permission_get_type (void);
 extern
GPermission * g_simple_permission_new (gboolean allowed);
# 144 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsimpleproxyresolver.h" 1
# 39 "/usr/include/glib-2.0/gio/gsimpleproxyresolver.h"
typedef struct _GSimpleProxyResolver GSimpleProxyResolver;
typedef struct _GSimpleProxyResolverPrivate GSimpleProxyResolverPrivate;
typedef struct _GSimpleProxyResolverClass GSimpleProxyResolverClass;

struct _GSimpleProxyResolver
{
  GObject parent_instance;


  GSimpleProxyResolverPrivate *priv;
};

struct _GSimpleProxyResolverClass
{
  GObjectClass parent_class;



  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

 extern
GType g_simple_proxy_resolver_get_type (void) __attribute__ ((__const__));

 extern
GProxyResolver *g_simple_proxy_resolver_new (const gchar *default_proxy,
                                                           gchar **ignore_hosts);

 extern
void g_simple_proxy_resolver_set_default_proxy (GSimpleProxyResolver *resolver,
                                                           const gchar *default_proxy);

 extern
void g_simple_proxy_resolver_set_ignore_hosts (GSimpleProxyResolver *resolver,
                                                           gchar **ignore_hosts);

 extern
void g_simple_proxy_resolver_set_uri_proxy (GSimpleProxyResolver *resolver,
                                                           const gchar *uri_scheme,
                                                           const gchar *proxy);
# 145 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocket.h" 1
# 48 "/usr/include/glib-2.0/gio/gsocket.h"
typedef struct _GSocketPrivate GSocketPrivate;
typedef struct _GSocketClass GSocketClass;

struct _GSocketClass
{
  GObjectClass parent_class;




  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};

struct _GSocket
{
  GObject parent_instance;
  GSocketPrivate *priv;
};

 extern
GType g_socket_get_type (void) __attribute__ ((__const__));
 extern
GSocket * g_socket_new (GSocketFamily family,
        GSocketType type,
        GSocketProtocol protocol,
        GError **error);
 extern
GSocket * g_socket_new_from_fd (gint fd,
        GError **error);
 extern
int g_socket_get_fd (GSocket *socket);
 extern
GSocketFamily g_socket_get_family (GSocket *socket);
 extern
GSocketType g_socket_get_socket_type (GSocket *socket);
 extern
GSocketProtocol g_socket_get_protocol (GSocket *socket);
 extern
GSocketAddress * g_socket_get_local_address (GSocket *socket,
        GError **error);
 extern
GSocketAddress * g_socket_get_remote_address (GSocket *socket,
        GError **error);
 extern
void g_socket_set_blocking (GSocket *socket,
        gboolean blocking);
 extern
gboolean g_socket_get_blocking (GSocket *socket);
 extern
void g_socket_set_keepalive (GSocket *socket,
        gboolean keepalive);
 extern
gboolean g_socket_get_keepalive (GSocket *socket);
 extern
gint g_socket_get_listen_backlog (GSocket *socket);
 extern
void g_socket_set_listen_backlog (GSocket *socket,
        gint backlog);
 extern
guint g_socket_get_timeout (GSocket *socket);
 extern
void g_socket_set_timeout (GSocket *socket,
        guint timeout);

 extern
guint g_socket_get_ttl (GSocket *socket);
 extern
void g_socket_set_ttl (GSocket *socket,
                                                         guint ttl);

 extern
gboolean g_socket_get_broadcast (GSocket *socket);
 extern
void g_socket_set_broadcast (GSocket *socket,
                                                         gboolean broadcast);

 extern
gboolean g_socket_get_multicast_loopback (GSocket *socket);
 extern
void g_socket_set_multicast_loopback (GSocket *socket,
                                                         gboolean loopback);
 extern
guint g_socket_get_multicast_ttl (GSocket *socket);
 extern
void g_socket_set_multicast_ttl (GSocket *socket,
                                                         guint ttl);
 extern
gboolean g_socket_is_connected (GSocket *socket);
 extern
gboolean g_socket_bind (GSocket *socket,
        GSocketAddress *address,
        gboolean allow_reuse,
        GError **error);
 extern
gboolean g_socket_join_multicast_group (GSocket *socket,
                                                         GInetAddress *group,
                                                         gboolean source_specific,
                                                         const gchar *iface,
                                                         GError **error);
 extern
gboolean g_socket_leave_multicast_group (GSocket *socket,
                                                         GInetAddress *group,
                                                         gboolean source_specific,
                                                         const gchar *iface,
                                                         GError **error);
 extern
gboolean g_socket_join_multicast_group_ssm (GSocket *socket,
                                                             GInetAddress *group,
                                                             GInetAddress *source_specific,
                                                             const gchar *iface,
                                                             GError **error);
 extern
gboolean g_socket_leave_multicast_group_ssm (GSocket *socket,
                                                             GInetAddress *group,
                                                             GInetAddress *source_specific,
                                                             const gchar *iface,
                                                             GError **error);
 extern
gboolean g_socket_connect (GSocket *socket,
        GSocketAddress *address,
        GCancellable *cancellable,
        GError **error);
 extern
gboolean g_socket_check_connect_result (GSocket *socket,
        GError **error);

 extern
gssize g_socket_get_available_bytes (GSocket *socket);

 extern
GIOCondition g_socket_condition_check (GSocket *socket,
        GIOCondition condition);
 extern
gboolean g_socket_condition_wait (GSocket *socket,
        GIOCondition condition,
        GCancellable *cancellable,
        GError **error);
 extern
gboolean g_socket_condition_timed_wait (GSocket *socket,
        GIOCondition condition,
        gint64 timeout_us,
        GCancellable *cancellable,
        GError **error);
 extern
GSocket * g_socket_accept (GSocket *socket,
        GCancellable *cancellable,
        GError **error);
 extern
gboolean g_socket_listen (GSocket *socket,
        GError **error);
 extern
gssize g_socket_receive (GSocket *socket,
        gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
 extern
GBytes * g_socket_receive_bytes (GSocket *socket,
                                                         gsize size,
                                                         gint64 timeout_us,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
gssize g_socket_receive_from (GSocket *socket,
        GSocketAddress **address,
        gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
 extern
GBytes * g_socket_receive_bytes_from (GSocket *socket,
                                                         GSocketAddress **address,
                                                         gsize size,
                                                         gint64 timeout_us,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
gssize g_socket_send (GSocket *socket,
        const gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_send_to (GSocket *socket,
        GSocketAddress *address,
        const gchar *buffer,
        gsize size,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_receive_message (GSocket *socket,
        GSocketAddress **address,
        GInputVector *vectors,
        gint num_vectors,
        GSocketControlMessage ***messages,
        gint *num_messages,
        gint *flags,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_send_message (GSocket *socket,
        GSocketAddress *address,
        GOutputVector *vectors,
        gint num_vectors,
        GSocketControlMessage **messages,
        gint num_messages,
        gint flags,
        GCancellable *cancellable,
        GError **error);

 extern
gint g_socket_receive_messages (GSocket *socket,
                                                         GInputMessage *messages,
                                                         guint num_messages,
                                                         gint flags,
                                                         GCancellable *cancellable,
                                                         GError **error);
 extern
gint g_socket_send_messages (GSocket *socket,
        GOutputMessage *messages,
        guint num_messages,
        gint flags,
        GCancellable *cancellable,
        GError **error);

 extern
gboolean g_socket_close (GSocket *socket,
        GError **error);
 extern
gboolean g_socket_shutdown (GSocket *socket,
        gboolean shutdown_read,
        gboolean shutdown_write,
        GError **error);
 extern
gboolean g_socket_is_closed (GSocket *socket);
 extern
GSource * g_socket_create_source (GSocket *socket,
        GIOCondition condition,
        GCancellable *cancellable);
 extern
gboolean g_socket_speaks_ipv4 (GSocket *socket);
 extern
GCredentials *g_socket_get_credentials (GSocket *socket,
                                                         GError **error);

 extern
gssize g_socket_receive_with_blocking (GSocket *socket,
        gchar *buffer,
        gsize size,
        gboolean blocking,
        GCancellable *cancellable,
        GError **error);
 extern
gssize g_socket_send_with_blocking (GSocket *socket,
        const gchar *buffer,
        gsize size,
        gboolean blocking,
        GCancellable *cancellable,
        GError **error);
 extern
GPollableReturn g_socket_send_message_with_timeout (GSocket *socket,
          GSocketAddress *address,
          const GOutputVector *vectors,
          gint num_vectors,
          GSocketControlMessage **messages,
          gint num_messages,
          gint flags,
          gint64 timeout_us,
          gsize *bytes_written,
          GCancellable *cancellable,
          GError **error);
 extern
gboolean g_socket_get_option (GSocket *socket,
        gint level,
        gint optname,
        gint *value,
        GError **error);
 extern
gboolean g_socket_set_option (GSocket *socket,
        gint level,
        gint optname,
        gint value,
        GError **error);
# 146 "/usr/include/glib-2.0/gio/gio.h" 2


# 1 "/usr/include/glib-2.0/gio/gsocketclient.h" 1
# 48 "/usr/include/glib-2.0/gio/gsocketclient.h"
typedef struct _GSocketClientPrivate GSocketClientPrivate;
typedef struct _GSocketClientClass GSocketClientClass;

struct _GSocketClientClass
{
  GObjectClass parent_class;

  void (* event) (GSocketClient *client,
    GSocketClientEvent event,
    GSocketConnectable *connectable,
    GIOStream *connection);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
};

struct _GSocketClient
{
  GObject parent_instance;
  GSocketClientPrivate *priv;
};

 extern
GType g_socket_client_get_type (void) __attribute__ ((__const__));

 extern
GSocketClient *g_socket_client_new (void);

 extern
GSocketFamily g_socket_client_get_family (GSocketClient *client);
 extern
void g_socket_client_set_family (GSocketClient *client,
          GSocketFamily family);
 extern
GSocketType g_socket_client_get_socket_type (GSocketClient *client);
 extern
void g_socket_client_set_socket_type (GSocketClient *client,
          GSocketType type);
 extern
GSocketProtocol g_socket_client_get_protocol (GSocketClient *client);
 extern
void g_socket_client_set_protocol (GSocketClient *client,
          GSocketProtocol protocol);
 extern
GSocketAddress *g_socket_client_get_local_address (GSocketClient *client);
 extern
void g_socket_client_set_local_address (GSocketClient *client,
          GSocketAddress *address);
 extern
guint g_socket_client_get_timeout (GSocketClient *client);
 extern
void g_socket_client_set_timeout (GSocketClient *client,
          guint timeout);
 extern
gboolean g_socket_client_get_enable_proxy (GSocketClient *client);
 extern
void g_socket_client_set_enable_proxy (GSocketClient *client,
              gboolean enable);

 extern
gboolean g_socket_client_get_tls (GSocketClient *client);
 extern
void g_socket_client_set_tls (GSocketClient *client,
          gboolean tls);
__attribute__((__deprecated__)) extern
GTlsCertificateFlags g_socket_client_get_tls_validation_flags (GSocketClient *client);
__attribute__((__deprecated__)) extern
void g_socket_client_set_tls_validation_flags (GSocketClient *client,
          GTlsCertificateFlags flags);
 extern
GProxyResolver *g_socket_client_get_proxy_resolver (GSocketClient *client);
 extern
void g_socket_client_set_proxy_resolver (GSocketClient *client,
                                                                         GProxyResolver *proxy_resolver);

 extern
GSocketConnection * g_socket_client_connect (GSocketClient *client,
                                                                         GSocketConnectable *connectable,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
GSocketConnection * g_socket_client_connect_to_host (GSocketClient *client,
          const gchar *host_and_port,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
GSocketConnection * g_socket_client_connect_to_service (GSocketClient *client,
          const gchar *domain,
          const gchar *service,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
GSocketConnection * g_socket_client_connect_to_uri (GSocketClient *client,
          const gchar *uri,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_socket_client_connect_async (GSocketClient *client,
                                                                         GSocketConnectable *connectable,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_client_connect_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
 extern
void g_socket_client_connect_to_host_async (GSocketClient *client,
          const gchar *host_and_port,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_client_connect_to_host_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);

 extern
void g_socket_client_connect_to_service_async (GSocketClient *client,
          const gchar *domain,
          const gchar *service,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_client_connect_to_service_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
 extern
void g_socket_client_connect_to_uri_async (GSocketClient *client,
          const gchar *uri,
          guint16 default_port,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocketConnection * g_socket_client_connect_to_uri_finish (GSocketClient *client,
                                                                         GAsyncResult *result,
                                                                         GError **error);
 extern
void g_socket_client_add_application_proxy (GSocketClient *client,
          const gchar *protocol);
# 149 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketconnectable.h" 1
# 37 "/usr/include/glib-2.0/gio/gsocketconnectable.h"
typedef struct _GSocketConnectableIface GSocketConnectableIface;
# 50 "/usr/include/glib-2.0/gio/gsocketconnectable.h"
struct _GSocketConnectableIface
{
  GTypeInterface g_iface;



  GSocketAddressEnumerator * (* enumerate) (GSocketConnectable *connectable);

  GSocketAddressEnumerator * (* proxy_enumerate) (GSocketConnectable *connectable);

  gchar * (* to_string) (GSocketConnectable *connectable);
};

 extern
GType g_socket_connectable_get_type (void) __attribute__ ((__const__));

 extern
GSocketAddressEnumerator *g_socket_connectable_enumerate (GSocketConnectable *connectable);

 extern
GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate (GSocketConnectable *connectable);

 extern
gchar *g_socket_connectable_to_string (GSocketConnectable *connectable);
# 150 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketconnection.h" 1
# 51 "/usr/include/glib-2.0/gio/gsocketconnection.h"
typedef struct _GSocketConnectionPrivate GSocketConnectionPrivate;
typedef struct _GSocketConnectionClass GSocketConnectionClass;

struct _GSocketConnectionClass
{
  GIOStreamClass parent_class;


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketConnection
{
  GIOStream parent_instance;
  GSocketConnectionPrivate *priv;
};

 extern
GType g_socket_connection_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_socket_connection_is_connected (GSocketConnection *connection);
 extern
gboolean g_socket_connection_connect (GSocketConnection *connection,
          GSocketAddress *address,
          GCancellable *cancellable,
          GError **error);
 extern
void g_socket_connection_connect_async (GSocketConnection *connection,
          GSocketAddress *address,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data);
 extern
gboolean g_socket_connection_connect_finish (GSocketConnection *connection,
          GAsyncResult *result,
          GError **error);

 extern
GSocket *g_socket_connection_get_socket (GSocketConnection *connection);
 extern
GSocketAddress *g_socket_connection_get_local_address (GSocketConnection *connection,
          GError **error);
 extern
GSocketAddress *g_socket_connection_get_remote_address (GSocketConnection *connection,
          GError **error);

 extern
void g_socket_connection_factory_register_type (GType g_type,
          GSocketFamily family,
          GSocketType type,
          gint protocol);
 extern
GType g_socket_connection_factory_lookup_type (GSocketFamily family,
          GSocketType type,
          gint protocol_id);
 extern
GSocketConnection *g_socket_connection_factory_create_connection (GSocket *socket);
# 151 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketcontrolmessage.h" 1
# 49 "/usr/include/glib-2.0/gio/gsocketcontrolmessage.h"
typedef struct _GSocketControlMessagePrivate GSocketControlMessagePrivate;
typedef struct _GSocketControlMessageClass GSocketControlMessageClass;
# 63 "/usr/include/glib-2.0/gio/gsocketcontrolmessage.h"
struct _GSocketControlMessageClass
{
  GObjectClass parent_class;

  gsize (* get_size) (GSocketControlMessage *message);
  int (* get_level) (GSocketControlMessage *message);
  int (* get_type) (GSocketControlMessage *message);
  void (* serialize) (GSocketControlMessage *message,
     gpointer data);
  GSocketControlMessage *(* deserialize) (int level,
       int type,
       gsize size,
       gpointer data);




  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

struct _GSocketControlMessage
{
  GObject parent_instance;
  GSocketControlMessagePrivate *priv;
};

 extern
GType g_socket_control_message_get_type (void) __attribute__ ((__const__));
 extern
gsize g_socket_control_message_get_size (GSocketControlMessage *message);
 extern
int g_socket_control_message_get_level (GSocketControlMessage *message);
 extern
int g_socket_control_message_get_msg_type (GSocketControlMessage *message);
 extern
void g_socket_control_message_serialize (GSocketControlMessage *message,
             gpointer data);
 extern
GSocketControlMessage *g_socket_control_message_deserialize (int level,
             int type,
             gsize size,
             gpointer data);
# 152 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketlistener.h" 1
# 51 "/usr/include/glib-2.0/gio/gsocketlistener.h"
typedef struct _GSocketListenerPrivate GSocketListenerPrivate;
typedef struct _GSocketListenerClass GSocketListenerClass;







struct _GSocketListenerClass
{
  GObjectClass parent_class;

  void (* changed) (GSocketListener *listener);

  void (* event) (GSocketListener *listener,
                  GSocketListenerEvent event,
                  GSocket *socket);


  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketListener
{
  GObject parent_instance;
  GSocketListenerPrivate *priv;
};

 extern
GType g_socket_listener_get_type (void) __attribute__ ((__const__));

 extern
GSocketListener * g_socket_listener_new (void);

 extern
void g_socket_listener_set_backlog (GSocketListener *listener,
          int listen_backlog);

 extern
gboolean g_socket_listener_add_socket (GSocketListener *listener,
                                                                         GSocket *socket,
          GObject *source_object,
          GError **error);
 extern
gboolean g_socket_listener_add_address (GSocketListener *listener,
                                                                         GSocketAddress *address,
          GSocketType type,
          GSocketProtocol protocol,
          GObject *source_object,
                                                                         GSocketAddress **effective_address,
          GError **error);
 extern
gboolean g_socket_listener_add_inet_port (GSocketListener *listener,
                                                                         guint16 port,
          GObject *source_object,
          GError **error);
 extern
guint16 g_socket_listener_add_any_inet_port (GSocketListener *listener,
          GObject *source_object,
          GError **error);

 extern
GSocket * g_socket_listener_accept_socket (GSocketListener *listener,
          GObject **source_object,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_socket_listener_accept_socket_async (GSocketListener *listener,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GSocket * g_socket_listener_accept_socket_finish (GSocketListener *listener,
                                                                         GAsyncResult *result,
          GObject **source_object,
                                                                         GError **error);


 extern
GSocketConnection * g_socket_listener_accept (GSocketListener *listener,
          GObject **source_object,
                                                                         GCancellable *cancellable,
                                                                         GError **error);

 extern
void g_socket_listener_accept_async (GSocketListener *listener,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);

 extern
GSocketConnection * g_socket_listener_accept_finish (GSocketListener *listener,
                                                                         GAsyncResult *result,
          GObject **source_object,
                                                                         GError **error);

 extern
void g_socket_listener_close (GSocketListener *listener);
# 153 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsocketservice.h" 1
# 48 "/usr/include/glib-2.0/gio/gsocketservice.h"
typedef struct _GSocketServicePrivate GSocketServicePrivate;
typedef struct _GSocketServiceClass GSocketServiceClass;







struct _GSocketServiceClass
{
  GSocketListenerClass parent_class;

  gboolean (* incoming) (GSocketService *service,
                         GSocketConnection *connection,
    GObject *source_object);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketService
{
  GSocketListener parent_instance;
  GSocketServicePrivate *priv;
};

 extern
GType g_socket_service_get_type (void);

 extern
GSocketService *g_socket_service_new (void);
 extern
void g_socket_service_start (GSocketService *service);
 extern
void g_socket_service_stop (GSocketService *service);
 extern
gboolean g_socket_service_is_active (GSocketService *service);
# 154 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsrvtarget.h" 1
# 32 "/usr/include/glib-2.0/gio/gsrvtarget.h"
 extern
GType g_srv_target_get_type (void) __attribute__ ((__const__));


 extern
GSrvTarget *g_srv_target_new (const gchar *hostname,
            guint16 port,
            guint16 priority,
            guint16 weight);
 extern
GSrvTarget *g_srv_target_copy (GSrvTarget *target);
 extern
void g_srv_target_free (GSrvTarget *target);

 extern
const gchar *g_srv_target_get_hostname (GSrvTarget *target);
 extern
guint16 g_srv_target_get_port (GSrvTarget *target);
 extern
guint16 g_srv_target_get_priority (GSrvTarget *target);
 extern
guint16 g_srv_target_get_weight (GSrvTarget *target);

 extern
GList *g_srv_target_list_sort (GList *targets);
# 155 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsubprocess.h" 1
# 38 "/usr/include/glib-2.0/gio/gsubprocess.h"
 extern
GType g_subprocess_get_type (void) __attribute__ ((__const__));



 extern
GSubprocess * g_subprocess_new (GSubprocessFlags flags,
                                                         GError **error,
                                                         const gchar *argv0,
                                                         ...) __attribute__((__sentinel__));
 extern
GSubprocess * g_subprocess_newv (const gchar * const *argv,
                                                         GSubprocessFlags flags,
                                                         GError **error);

 extern
GOutputStream * g_subprocess_get_stdin_pipe (GSubprocess *subprocess);

 extern
GInputStream * g_subprocess_get_stdout_pipe (GSubprocess *subprocess);

 extern
GInputStream * g_subprocess_get_stderr_pipe (GSubprocess *subprocess);

 extern
const gchar * g_subprocess_get_identifier (GSubprocess *subprocess);


 extern
void g_subprocess_send_signal (GSubprocess *subprocess,
                                                         gint signal_num);


 extern
void g_subprocess_force_exit (GSubprocess *subprocess);

 extern
gboolean g_subprocess_wait (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GError **error);

 extern
void g_subprocess_wait_async (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

 extern
gboolean g_subprocess_wait_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GError **error);

 extern
gboolean g_subprocess_wait_check (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GError **error);

 extern
void g_subprocess_wait_check_async (GSubprocess *subprocess,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

 extern
gboolean g_subprocess_wait_check_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GError **error);


 extern
gint g_subprocess_get_status (GSubprocess *subprocess);

 extern
gboolean g_subprocess_get_successful (GSubprocess *subprocess);

 extern
gboolean g_subprocess_get_if_exited (GSubprocess *subprocess);

 extern
gint g_subprocess_get_exit_status (GSubprocess *subprocess);

 extern
gboolean g_subprocess_get_if_signaled (GSubprocess *subprocess);

 extern
gint g_subprocess_get_term_sig (GSubprocess *subprocess);

 extern
gboolean g_subprocess_communicate (GSubprocess *subprocess,
                                                         GBytes *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GBytes **stdout_buf,
                                                         GBytes **stderr_buf,
                                                         GError **error);
 extern
void g_subprocess_communicate_async (GSubprocess *subprocess,
                                                         GBytes *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

 extern
gboolean g_subprocess_communicate_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         GBytes **stdout_buf,
                                                         GBytes **stderr_buf,
                                                         GError **error);

 extern
gboolean g_subprocess_communicate_utf8 (GSubprocess *subprocess,
                                                         const char *stdin_buf,
                                                         GCancellable *cancellable,
                                                         char **stdout_buf,
                                                         char **stderr_buf,
                                                         GError **error);
 extern
void g_subprocess_communicate_utf8_async (GSubprocess *subprocess,
                                                         const char *stdin_buf,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

 extern
gboolean g_subprocess_communicate_utf8_finish (GSubprocess *subprocess,
                                                         GAsyncResult *result,
                                                         char **stdout_buf,
                                                         char **stderr_buf,
                                                         GError **error);
# 156 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gsubprocesslauncher.h" 1
# 40 "/usr/include/glib-2.0/gio/gsubprocesslauncher.h"
 extern
GType g_subprocess_launcher_get_type (void) __attribute__ ((__const__));

 extern
GSubprocessLauncher * g_subprocess_launcher_new (GSubprocessFlags flags);

 extern
GSubprocess * g_subprocess_launcher_spawn (GSubprocessLauncher *self,
                                                                         GError **error,
                                                                         const gchar *argv0,
                                                                         ...) __attribute__((__sentinel__));

 extern
GSubprocess * g_subprocess_launcher_spawnv (GSubprocessLauncher *self,
                                                                         const gchar * const *argv,
                                                                         GError **error);

 extern
void g_subprocess_launcher_set_environ (GSubprocessLauncher *self,
                                                                         gchar **env);

 extern
void g_subprocess_launcher_setenv (GSubprocessLauncher *self,
                                                                         const gchar *variable,
                                                                         const gchar *value,
                                                                         gboolean overwrite);

 extern
void g_subprocess_launcher_unsetenv (GSubprocessLauncher *self,
                                                                         const gchar *variable);

 extern
const gchar * g_subprocess_launcher_getenv (GSubprocessLauncher *self,
                                                                         const gchar *variable);

 extern
void g_subprocess_launcher_set_cwd (GSubprocessLauncher *self,
                                                                         const gchar *cwd);
 extern
void g_subprocess_launcher_set_flags (GSubprocessLauncher *self,
                                                                         GSubprocessFlags flags);



 extern
void g_subprocess_launcher_set_stdin_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
 extern
void g_subprocess_launcher_take_stdin_fd (GSubprocessLauncher *self,
                                                                         gint fd);
 extern
void g_subprocess_launcher_set_stdout_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
 extern
void g_subprocess_launcher_take_stdout_fd (GSubprocessLauncher *self,
                                                                         gint fd);
 extern
void g_subprocess_launcher_set_stderr_file_path (GSubprocessLauncher *self,
                                                                         const gchar *path);
 extern
void g_subprocess_launcher_take_stderr_fd (GSubprocessLauncher *self,
                                                                         gint fd);

 extern
void g_subprocess_launcher_take_fd (GSubprocessLauncher *self,
                                                                         gint source_fd,
                                                                         gint target_fd);

 extern
void g_subprocess_launcher_close (GSubprocessLauncher *self);


 extern
void g_subprocess_launcher_set_child_setup (GSubprocessLauncher *self,
                                                                         GSpawnChildSetupFunc child_setup,
                                                                         gpointer user_data,
                                                                         GDestroyNotify destroy_notify);
# 157 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtask.h" 1
# 39 "/usr/include/glib-2.0/gio/gtask.h"
typedef struct _GTaskClass GTaskClass;

 extern
GType g_task_get_type (void) __attribute__ ((__const__));

 extern
GTask *g_task_new (gpointer source_object,
                                            GCancellable *cancellable,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data);

 extern
void g_task_report_error (gpointer source_object,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data,
                                            gpointer source_tag,
                                            GError *error);
 extern
void g_task_report_new_error (gpointer source_object,
                                            GAsyncReadyCallback callback,
                                            gpointer callback_data,
                                            gpointer source_tag,
                                            GQuark domain,
                                            gint code,
                                            const char *format,
                                            ...) __attribute__((__format__ (__printf__, 7, 8)));

 extern
void g_task_set_task_data (GTask *task,
                                            gpointer task_data,
                                            GDestroyNotify task_data_destroy);
 extern
void g_task_set_priority (GTask *task,
                                            gint priority);
 extern
void g_task_set_check_cancellable (GTask *task,
                                            gboolean check_cancellable);
 extern
void g_task_set_source_tag (GTask *task,
                                            gpointer source_tag);
 extern
void g_task_set_name (GTask *task,
                                            const gchar *name);
 extern
void g_task_set_static_name (GTask *task,
                                            const gchar *name);
# 108 "/usr/include/glib-2.0/gio/gtask.h"
 extern
gpointer g_task_get_source_object (GTask *task);
 extern
gpointer g_task_get_task_data (GTask *task);
 extern
gint g_task_get_priority (GTask *task);
 extern
GMainContext *g_task_get_context (GTask *task);
 extern
GCancellable *g_task_get_cancellable (GTask *task);
 extern
gboolean g_task_get_check_cancellable (GTask *task);
 extern
gpointer g_task_get_source_tag (GTask *task);
 extern
const gchar *g_task_get_name (GTask *task);

 extern
gboolean g_task_is_valid (gpointer result,
                                            gpointer source_object);


typedef void (*GTaskThreadFunc) (GTask *task,
                                           gpointer source_object,
                                           gpointer task_data,
                                           GCancellable *cancellable);
 extern
void g_task_run_in_thread (GTask *task,
                                           GTaskThreadFunc task_func);
 extern
void g_task_run_in_thread_sync (GTask *task,
                                           GTaskThreadFunc task_func);
 extern
gboolean g_task_set_return_on_cancel (GTask *task,
                                           gboolean return_on_cancel);
 extern
gboolean g_task_get_return_on_cancel (GTask *task);

 extern
void g_task_attach_source (GTask *task,
                                           GSource *source,
                                           GSourceFunc callback);


 extern
void g_task_return_pointer (GTask *task,
                                                gpointer result,
                                                GDestroyNotify result_destroy);
 extern
void g_task_return_boolean (GTask *task,
                                                gboolean result);
 extern
void g_task_return_int (GTask *task,
                                                gssize result);

 extern
void g_task_return_error (GTask *task,
                                                GError *error);
 extern
void g_task_return_prefixed_error (GTask *task,
                                                GError *error,
                                                const char *format,
                                                ...) __attribute__((__format__ (__printf__, 3, 4)));

 extern
void g_task_return_new_error (GTask *task,
                                                GQuark domain,
                                                gint code,
                                                const char *format,
                                                ...) __attribute__((__format__ (__printf__, 4, 5)));

 extern
void g_task_return_new_error_literal (GTask *task,
                                                GQuark domain,
                                                gint code,
                                                const char *message);
 extern
void g_task_return_value (GTask *task,
                                                GValue *result);

 extern
gboolean g_task_return_error_if_cancelled (GTask *task);

 extern
gpointer g_task_propagate_pointer (GTask *task,
                                                GError **error);
 extern
gboolean g_task_propagate_boolean (GTask *task,
                                                GError **error);
 extern
gssize g_task_propagate_int (GTask *task,
                                                GError **error);
 extern
gboolean g_task_propagate_value (GTask *task,
                                                GValue *value,
                                                GError **error);
 extern
gboolean g_task_had_error (GTask *task);
 extern
gboolean g_task_get_completed (GTask *task);





void g_task_print_alive_tasks (void);
# 158 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtcpconnection.h" 1
# 46 "/usr/include/glib-2.0/gio/gtcpconnection.h"
typedef struct _GTcpConnectionPrivate GTcpConnectionPrivate;
typedef struct _GTcpConnectionClass GTcpConnectionClass;

struct _GTcpConnectionClass
{
  GSocketConnectionClass parent_class;
};

struct _GTcpConnection
{
  GSocketConnection parent_instance;
  GTcpConnectionPrivate *priv;
};

 extern
GType g_tcp_connection_get_type (void) __attribute__ ((__const__));

 extern
void g_tcp_connection_set_graceful_disconnect (GTcpConnection *connection,
         gboolean graceful_disconnect);
 extern
gboolean g_tcp_connection_get_graceful_disconnect (GTcpConnection *connection);
# 159 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtcpwrapperconnection.h" 1
# 46 "/usr/include/glib-2.0/gio/gtcpwrapperconnection.h"
typedef struct _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate;
typedef struct _GTcpWrapperConnectionClass GTcpWrapperConnectionClass;

struct _GTcpWrapperConnectionClass
{
  GTcpConnectionClass parent_class;
};

struct _GTcpWrapperConnection
{
  GTcpConnection parent_instance;
  GTcpWrapperConnectionPrivate *priv;
};

 extern
GType g_tcp_wrapper_connection_get_type (void) __attribute__ ((__const__));

 extern
GSocketConnection *g_tcp_wrapper_connection_new (GIOStream *base_io_stream,
        GSocket *socket);
 extern
GIOStream *g_tcp_wrapper_connection_get_base_io_stream (GTcpWrapperConnection *conn);
# 160 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtestdbus.h" 1
# 44 "/usr/include/glib-2.0/gio/gtestdbus.h"
 extern
GType g_test_dbus_get_type (void) __attribute__ ((__const__));

 extern
GTestDBus * g_test_dbus_new (GTestDBusFlags flags);

 extern
GTestDBusFlags g_test_dbus_get_flags (GTestDBus *self);

 extern
const gchar * g_test_dbus_get_bus_address (GTestDBus *self);

 extern
void g_test_dbus_add_service_dir (GTestDBus *self,
                                            const gchar *path);

 extern
void g_test_dbus_up (GTestDBus *self);

 extern
void g_test_dbus_stop (GTestDBus *self);

 extern
void g_test_dbus_down (GTestDBus *self);

 extern
void g_test_dbus_unset (void);
# 161 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gthemedicon.h" 1
# 41 "/usr/include/glib-2.0/gio/gthemedicon.h"
typedef struct _GThemedIconClass GThemedIconClass;

 extern
GType g_themed_icon_get_type (void) __attribute__ ((__const__));

 extern
GIcon *g_themed_icon_new (const char *iconname);
 extern
GIcon *g_themed_icon_new_with_default_fallbacks (const char *iconname);
 extern
GIcon *g_themed_icon_new_from_names (char **iconnames,
                                                 int len);
 extern
void g_themed_icon_prepend_name (GThemedIcon *icon,
                                                 const char *iconname);
 extern
void g_themed_icon_append_name (GThemedIcon *icon,
                                                 const char *iconname);

 extern
const gchar* const * g_themed_icon_get_names (GThemedIcon *icon);
# 162 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gthreadedsocketservice.h" 1
# 51 "/usr/include/glib-2.0/gio/gthreadedsocketservice.h"
typedef struct _GThreadedSocketServicePrivate GThreadedSocketServicePrivate;
typedef struct _GThreadedSocketServiceClass GThreadedSocketServiceClass;

struct _GThreadedSocketServiceClass
{
  GSocketServiceClass parent_class;

  gboolean (* run) (GThreadedSocketService *service,
                    GSocketConnection *connection,
                    GObject *source_object);


  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

struct _GThreadedSocketService
{
  GSocketService parent_instance;
  GThreadedSocketServicePrivate *priv;
};

 extern
GType g_threaded_socket_service_get_type (void);
 extern
GSocketService * g_threaded_socket_service_new (int max_threads);
# 163 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsbackend.h" 1
# 46 "/usr/include/glib-2.0/gio/gtlsbackend.h"
typedef struct _GTlsBackend GTlsBackend;
typedef struct _GTlsBackendInterface GTlsBackendInterface;
# 66 "/usr/include/glib-2.0/gio/gtlsbackend.h"
struct _GTlsBackendInterface
{
  GTypeInterface g_iface;


  gboolean ( *supports_tls) (GTlsBackend *backend);
  GType ( *get_certificate_type) (void);
  GType ( *get_client_connection_type) (void);
  GType ( *get_server_connection_type) (void);
  GType ( *get_file_database_type) (void);
  GTlsDatabase * ( *get_default_database) (GTlsBackend *backend);
  gboolean ( *supports_dtls) (GTlsBackend *backend);
  GType ( *get_dtls_client_connection_type) (void);
  GType ( *get_dtls_server_connection_type) (void);
};

 extern
GType g_tls_backend_get_type (void) __attribute__ ((__const__));

 extern
GTlsBackend * g_tls_backend_get_default (void);

 extern
GTlsDatabase * g_tls_backend_get_default_database (GTlsBackend *backend);
 extern
void g_tls_backend_set_default_database (GTlsBackend *backend,
                                                         GTlsDatabase *database);

 extern
gboolean g_tls_backend_supports_tls (GTlsBackend *backend);
 extern
gboolean g_tls_backend_supports_dtls (GTlsBackend *backend);

 extern
GType g_tls_backend_get_certificate_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_client_connection_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_server_connection_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_file_database_type (GTlsBackend *backend);

 extern
GType g_tls_backend_get_dtls_client_connection_type (GTlsBackend *backend);
 extern
GType g_tls_backend_get_dtls_server_connection_type (GTlsBackend *backend);
# 164 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlscertificate.h" 1
# 39 "/usr/include/glib-2.0/gio/gtlscertificate.h"
typedef struct _GTlsCertificateClass GTlsCertificateClass;
typedef struct _GTlsCertificatePrivate GTlsCertificatePrivate;

struct _GTlsCertificate {
  GObject parent_instance;

  GTlsCertificatePrivate *priv;
};

struct _GTlsCertificateClass
{
  GObjectClass parent_class;

  GTlsCertificateFlags (* verify) (GTlsCertificate *cert,
        GSocketConnectable *identity,
        GTlsCertificate *trusted_ca);



  gpointer padding[8];
};

 extern
GType g_tls_certificate_get_type (void) __attribute__ ((__const__));

 extern
GTlsCertificate *g_tls_certificate_new_from_pem (const gchar *data,
           gssize length,
           GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_pkcs12 (const guint8 *data,
                                                              gsize length,
                                                              const gchar *password,
                                                              GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_file_with_password (const gchar *file,
                                                                     const gchar *password,
                                                                     GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_file (const gchar *file,
           GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_files (const gchar *cert_file,
           const gchar *key_file,
           GError **error);
 extern
GTlsCertificate *g_tls_certificate_new_from_pkcs11_uris (const gchar *pkcs11_uri,
                                                              const gchar *private_key_pkcs11_uri,
                                                              GError **error);

 extern
GList *g_tls_certificate_list_new_from_file (const gchar *file,
           GError **error);

 extern
GTlsCertificate *g_tls_certificate_get_issuer (GTlsCertificate *cert);

 extern
GTlsCertificateFlags g_tls_certificate_verify (GTlsCertificate *cert,
           GSocketConnectable *identity,
           GTlsCertificate *trusted_ca);

 extern
gboolean g_tls_certificate_is_same (GTlsCertificate *cert_one,
                                                            GTlsCertificate *cert_two);

 extern
GDateTime *g_tls_certificate_get_not_valid_before (GTlsCertificate *cert);

 extern
GDateTime *g_tls_certificate_get_not_valid_after (GTlsCertificate *cert);

 extern
gchar *g_tls_certificate_get_subject_name (GTlsCertificate *cert);

 extern
gchar *g_tls_certificate_get_issuer_name (GTlsCertificate *cert);

 extern
GPtrArray *g_tls_certificate_get_dns_names (GTlsCertificate *cert);

 extern
GPtrArray *g_tls_certificate_get_ip_addresses (GTlsCertificate *cert);
# 165 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsclientconnection.h" 1
# 28 "/usr/include/glib-2.0/gio/gtlsclientconnection.h"
# 1 "/usr/include/glib-2.0/gio/gtlsconnection.h" 1
# 39 "/usr/include/glib-2.0/gio/gtlsconnection.h"
typedef struct _GTlsConnectionClass GTlsConnectionClass;
typedef struct _GTlsConnectionPrivate GTlsConnectionPrivate;

struct _GTlsConnection {
  GIOStream parent_instance;

  GTlsConnectionPrivate *priv;
};
# 62 "/usr/include/glib-2.0/gio/gtlsconnection.h"
struct _GTlsConnectionClass
{
  GIOStreamClass parent_class;


  gboolean ( *accept_certificate) (GTlsConnection *connection,
         GTlsCertificate *peer_cert,
         GTlsCertificateFlags errors);


  gboolean ( *handshake ) (GTlsConnection *conn,
      GCancellable *cancellable,
      GError **error);

  void ( *handshake_async ) (GTlsConnection *conn,
      int io_priority,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
  gboolean ( *handshake_finish ) (GTlsConnection *conn,
      GAsyncResult *result,
      GError **error);

#pragma clang diagnostic push
# 85 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
  gboolean ( *get_binding_data) (GTlsConnection *conn,
                                  GTlsChannelBindingType type,
                                  GByteArray *data,
                                  GError **error);
#pragma clang diagnostic pop

  const gchar *(*get_negotiated_protocol) (GTlsConnection *conn);



  gpointer padding[6];
};

 extern
GType g_tls_connection_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
void g_tls_connection_set_use_system_certdb (GTlsConnection *conn,
                                                                    gboolean use_system_certdb);
__attribute__((__deprecated__)) extern
gboolean g_tls_connection_get_use_system_certdb (GTlsConnection *conn);

 extern
void g_tls_connection_set_database (GTlsConnection *conn,
            GTlsDatabase *database);
 extern
GTlsDatabase * g_tls_connection_get_database (GTlsConnection *conn);

 extern
void g_tls_connection_set_certificate (GTlsConnection *conn,
                                                                    GTlsCertificate *certificate);
 extern
GTlsCertificate *g_tls_connection_get_certificate (GTlsConnection *conn);

 extern
void g_tls_connection_set_interaction (GTlsConnection *conn,
                                                                    GTlsInteraction *interaction);
 extern
GTlsInteraction * g_tls_connection_get_interaction (GTlsConnection *conn);

 extern
GTlsCertificate *g_tls_connection_get_peer_certificate (GTlsConnection *conn);
 extern
GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors (GTlsConnection *conn);

 extern
void g_tls_connection_set_require_close_notify (GTlsConnection *conn,
            gboolean require_close_notify);
 extern
gboolean g_tls_connection_get_require_close_notify (GTlsConnection *conn);

#pragma clang diagnostic push
# 137 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
__attribute__((__deprecated__)) extern
void g_tls_connection_set_rehandshake_mode (GTlsConnection *conn,
            GTlsRehandshakeMode mode);
__attribute__((__deprecated__)) extern
GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode (GTlsConnection *conn);
#pragma clang diagnostic pop

 extern
void g_tls_connection_set_advertised_protocols (GTlsConnection *conn,
                                                                    const gchar * const *protocols);

 extern
const gchar * g_tls_connection_get_negotiated_protocol (GTlsConnection *conn);

#pragma clang diagnostic push
# 152 "/usr/include/glib-2.0/gio/gtlsconnection.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 extern
gboolean g_tls_connection_get_channel_binding_data (GTlsConnection *conn,
                                                                    GTlsChannelBindingType type,
                                                                    GByteArray *data,
                                                                    GError **error);
#pragma clang diagnostic pop

 extern
gboolean g_tls_connection_handshake (GTlsConnection *conn,
            GCancellable *cancellable,
            GError **error);

 extern
void g_tls_connection_handshake_async (GTlsConnection *conn,
            int io_priority,
            GCancellable *cancellable,
            GAsyncReadyCallback callback,
            gpointer user_data);
 extern
gboolean g_tls_connection_handshake_finish (GTlsConnection *conn,
            GAsyncResult *result,
            GError **error);

 extern
GTlsProtocolVersion g_tls_connection_get_protocol_version (GTlsConnection *conn);

 extern
gchar * g_tls_connection_get_ciphersuite_name (GTlsConnection *conn);
# 190 "/usr/include/glib-2.0/gio/gtlsconnection.h"
 extern
GQuark g_tls_error_quark (void);
# 203 "/usr/include/glib-2.0/gio/gtlsconnection.h"
 extern
GQuark g_tls_channel_binding_error_quark (void);


 extern
gboolean g_tls_connection_emit_accept_certificate (GTlsConnection *conn,
            GTlsCertificate *peer_cert,
            GTlsCertificateFlags errors);
# 29 "/usr/include/glib-2.0/gio/gtlsclientconnection.h" 2








typedef struct _GTlsClientConnectionInterface GTlsClientConnectionInterface;
# 48 "/usr/include/glib-2.0/gio/gtlsclientconnection.h"
struct _GTlsClientConnectionInterface
{
  GTypeInterface g_iface;

  void ( *copy_session_state ) (GTlsClientConnection *conn,
                                        GTlsClientConnection *source);
};

 extern
GType g_tls_client_connection_get_type (void) __attribute__ ((__const__));

 extern
GIOStream * g_tls_client_connection_new (GIOStream *base_io_stream,
            GSocketConnectable *server_identity,
            GError **error);

__attribute__((__deprecated__)) extern
GTlsCertificateFlags g_tls_client_connection_get_validation_flags (GTlsClientConnection *conn);
__attribute__((__deprecated__)) extern
void g_tls_client_connection_set_validation_flags (GTlsClientConnection *conn,
            GTlsCertificateFlags flags);
 extern
GSocketConnectable *g_tls_client_connection_get_server_identity (GTlsClientConnection *conn);
 extern
void g_tls_client_connection_set_server_identity (GTlsClientConnection *conn,
            GSocketConnectable *identity);
__attribute__((__deprecated__)) extern
gboolean g_tls_client_connection_get_use_ssl3 (GTlsClientConnection *conn);
__attribute__((__deprecated__)) extern
void g_tls_client_connection_set_use_ssl3 (GTlsClientConnection *conn,
            gboolean use_ssl3);
 extern
GList * g_tls_client_connection_get_accepted_cas (GTlsClientConnection *conn);

 extern
void g_tls_client_connection_copy_session_state (GTlsClientConnection *conn,
                                                                    GTlsClientConnection *source);
# 166 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gtlsdatabase.h" 1
# 44 "/usr/include/glib-2.0/gio/gtlsdatabase.h"
typedef struct _GTlsDatabaseClass GTlsDatabaseClass;
typedef struct _GTlsDatabasePrivate GTlsDatabasePrivate;

struct _GTlsDatabase
{
  GObject parent_instance;

  GTlsDatabasePrivate *priv;
};

struct _GTlsDatabaseClass
{
  GObjectClass parent_class;



  GTlsCertificateFlags (*verify_chain) (GTlsDatabase *self,
                                                                 GTlsCertificate *chain,
                                                                 const gchar *purpose,
                                                                 GSocketConnectable *identity,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseVerifyFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);

  void (*verify_chain_async) (GTlsDatabase *self,
                                                                 GTlsCertificate *chain,
                                                                 const gchar *purpose,
                                                                 GSocketConnectable *identity,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseVerifyFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);

  GTlsCertificateFlags (*verify_chain_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);

  gchar* (*create_certificate_handle) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate);

  GTlsCertificate* (*lookup_certificate_for_handle) (GTlsDatabase *self,
                                                                 const gchar *handle,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);

  void (*lookup_certificate_for_handle_async) (GTlsDatabase *self,
                                                                 const gchar *handle,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);

  GTlsCertificate* (*lookup_certificate_for_handle_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);

  GTlsCertificate* (*lookup_certificate_issuer) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);

  void (*lookup_certificate_issuer_async) (GTlsDatabase *self,
                                                                 GTlsCertificate *certificate,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);

  GTlsCertificate* (*lookup_certificate_issuer_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);

  GList* (*lookup_certificates_issued_by) (GTlsDatabase *self,
                                                                 GByteArray *issuer_raw_dn,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GError **error);

  void (*lookup_certificates_issued_by_async) (GTlsDatabase *self,
                                                                 GByteArray *issuer_raw_dn,
                                                                 GTlsInteraction *interaction,
                                                                 GTlsDatabaseLookupFlags flags,
                                                                 GCancellable *cancellable,
                                                                 GAsyncReadyCallback callback,
                                                                 gpointer user_data);

  GList* (*lookup_certificates_issued_by_finish) (GTlsDatabase *self,
                                                                 GAsyncResult *result,
                                                                 GError **error);



  gpointer padding[16];
};

 extern
GType g_tls_database_get_type (void) __attribute__ ((__const__));

 extern
GTlsCertificateFlags g_tls_database_verify_chain (GTlsDatabase *self,
                                                                           GTlsCertificate *chain,
                                                                           const gchar *purpose,
                                                                           GSocketConnectable *identity,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseVerifyFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);

 extern
void g_tls_database_verify_chain_async (GTlsDatabase *self,
                                                                           GTlsCertificate *chain,
                                                                           const gchar *purpose,
                                                                           GSocketConnectable *identity,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseVerifyFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);

 extern
GTlsCertificateFlags g_tls_database_verify_chain_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);

 extern
gchar* g_tls_database_create_certificate_handle (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate);

 extern
GTlsCertificate* g_tls_database_lookup_certificate_for_handle (GTlsDatabase *self,
                                                                           const gchar *handle,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);

 extern
void g_tls_database_lookup_certificate_for_handle_async (GTlsDatabase *self,
                                                                           const gchar *handle,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);

 extern
GTlsCertificate* g_tls_database_lookup_certificate_for_handle_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);

 extern
GTlsCertificate* g_tls_database_lookup_certificate_issuer (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);

 extern
void g_tls_database_lookup_certificate_issuer_async (GTlsDatabase *self,
                                                                           GTlsCertificate *certificate,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GAsyncReadyCallback callback,
                                                                           gpointer user_data);

 extern
GTlsCertificate* g_tls_database_lookup_certificate_issuer_finish (GTlsDatabase *self,
                                                                           GAsyncResult *result,
                                                                           GError **error);

 extern
GList* g_tls_database_lookup_certificates_issued_by (GTlsDatabase *self,
                                                                           GByteArray *issuer_raw_dn,
                                                                           GTlsInteraction *interaction,
                                                                           GTlsDatabaseLookupFlags flags,
                                                                           GCancellable *cancellable,
                                                                           GError **error);

 extern
void g_tls_database_lookup_certificates_issued_by_async (GTlsDatabase *self,
                                                                            GByteArray *issuer_raw_dn,
                                                                            GTlsInteraction *interaction,
                                                                            GTlsDatabaseLookupFlags flags,
                                                                            GCancellable *cancellable,
                                                                            GAsyncReadyCallback callback,
                                                                            gpointer user_data);

 extern
GList* g_tls_database_lookup_certificates_issued_by_finish (GTlsDatabase *self,
                                                                            GAsyncResult *result,
                                                                            GError **error);
# 168 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsfiledatabase.h" 1
# 33 "/usr/include/glib-2.0/gio/gtlsfiledatabase.h"
typedef struct _GTlsFileDatabaseInterface GTlsFileDatabaseInterface;
# 42 "/usr/include/glib-2.0/gio/gtlsfiledatabase.h"
struct _GTlsFileDatabaseInterface
{
  GTypeInterface g_iface;



  gpointer padding[8];
};

 extern
GType g_tls_file_database_get_type (void) __attribute__ ((__const__));

 extern
GTlsDatabase* g_tls_file_database_new (const gchar *anchors,
                                                                        GError **error);
# 169 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsinteraction.h" 1
# 41 "/usr/include/glib-2.0/gio/gtlsinteraction.h"
typedef struct _GTlsInteractionClass GTlsInteractionClass;
typedef struct _GTlsInteractionPrivate GTlsInteractionPrivate;

struct _GTlsInteraction
{

  GObject parent_instance;
  GTlsInteractionPrivate *priv;
};

struct _GTlsInteractionClass
{

  GObjectClass parent_class;


  GTlsInteractionResult (* ask_password) (GTlsInteraction *interaction,
                                                  GTlsPassword *password,
                                                  GCancellable *cancellable,
                                                  GError **error);

  void (* ask_password_async) (GTlsInteraction *interaction,
                                                  GTlsPassword *password,
                                                  GCancellable *cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer user_data);

  GTlsInteractionResult (* ask_password_finish) (GTlsInteraction *interaction,
                                                  GAsyncResult *result,
                                                  GError **error);

  GTlsInteractionResult (* request_certificate) (GTlsInteraction *interaction,
                                                         GTlsConnection *connection,
                                                         GTlsCertificateRequestFlags flags,
                                                         GCancellable *cancellable,
                                                         GError **error);

  void (* request_certificate_async) (GTlsInteraction *interaction,
                                                         GTlsConnection *connection,
                                                         GTlsCertificateRequestFlags flags,
                                                         GCancellable *cancellable,
                                                         GAsyncReadyCallback callback,
                                                         gpointer user_data);

  GTlsInteractionResult (* request_certificate_finish) (GTlsInteraction *interaction,
                                                         GAsyncResult *result,
                                                         GError **error);



  gpointer padding[21];
};

 extern
GType g_tls_interaction_get_type (void) __attribute__ ((__const__));

 extern
GTlsInteractionResult g_tls_interaction_invoke_ask_password (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GError **error);

 extern
GTlsInteractionResult g_tls_interaction_ask_password (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GError **error);

 extern
void g_tls_interaction_ask_password_async (GTlsInteraction *interaction,
                                                              GTlsPassword *password,
                                                              GCancellable *cancellable,
                                                              GAsyncReadyCallback callback,
                                                              gpointer user_data);

 extern
GTlsInteractionResult g_tls_interaction_ask_password_finish (GTlsInteraction *interaction,
                                                              GAsyncResult *result,
                                                              GError **error);

 extern
GTlsInteractionResult g_tls_interaction_invoke_request_certificate (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

 extern
GTlsInteractionResult g_tls_interaction_request_certificate (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GError **error);

 extern
void g_tls_interaction_request_certificate_async (GTlsInteraction *interaction,
                                                                     GTlsConnection *connection,
                                                                     GTlsCertificateRequestFlags flags,
                                                                     GCancellable *cancellable,
                                                                     GAsyncReadyCallback callback,
                                                                     gpointer user_data);

 extern
GTlsInteractionResult g_tls_interaction_request_certificate_finish (GTlsInteraction *interaction,
                                                                     GAsyncResult *result,
                                                                     GError **error);
# 170 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlspassword.h" 1
# 41 "/usr/include/glib-2.0/gio/gtlspassword.h"
typedef struct _GTlsPasswordClass GTlsPasswordClass;
typedef struct _GTlsPasswordPrivate GTlsPasswordPrivate;

struct _GTlsPassword
{
  GObject parent_instance;

  GTlsPasswordPrivate *priv;
};
# 60 "/usr/include/glib-2.0/gio/gtlspassword.h"
struct _GTlsPasswordClass
{
  GObjectClass parent_class;



  const guchar * ( *get_value) (GTlsPassword *password,
                                              gsize *length);

  void ( *set_value) (GTlsPassword *password,
                                              guchar *value,
                                              gssize length,
                                              GDestroyNotify destroy);

  const gchar* ( *get_default_warning) (GTlsPassword *password);



  gpointer padding[4];
};

 extern
GType g_tls_password_get_type (void) __attribute__ ((__const__));

 extern
GTlsPassword * g_tls_password_new (GTlsPasswordFlags flags,
                                                      const gchar *description);

 extern
const guchar * g_tls_password_get_value (GTlsPassword *password,
                                                      gsize *length);
 extern
void g_tls_password_set_value (GTlsPassword *password,
                                                      const guchar *value,
                                                      gssize length);
 extern
void g_tls_password_set_value_full (GTlsPassword *password,
                                                      guchar *value,
                                                      gssize length,
                                                      GDestroyNotify destroy);

 extern
GTlsPasswordFlags g_tls_password_get_flags (GTlsPassword *password);
 extern
void g_tls_password_set_flags (GTlsPassword *password,
                                                      GTlsPasswordFlags flags);

 extern
const gchar* g_tls_password_get_description (GTlsPassword *password);
 extern
void g_tls_password_set_description (GTlsPassword *password,
                                                      const gchar *description);

 extern
const gchar * g_tls_password_get_warning (GTlsPassword *password);
 extern
void g_tls_password_set_warning (GTlsPassword *password,
                                                      const gchar *warning);
# 171 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gtlsserverconnection.h" 1
# 37 "/usr/include/glib-2.0/gio/gtlsserverconnection.h"
typedef struct _GTlsServerConnectionInterface GTlsServerConnectionInterface;
# 47 "/usr/include/glib-2.0/gio/gtlsserverconnection.h"
struct _GTlsServerConnectionInterface
{
  GTypeInterface g_iface;

};

 extern
GType g_tls_server_connection_get_type (void) __attribute__ ((__const__));

 extern
GIOStream * g_tls_server_connection_new (GIOStream *base_io_stream,
         GTlsCertificate *certificate,
         GError **error);
# 172 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gunixconnection.h" 1
# 26 "/usr/include/glib-2.0/gio/gunixconnection.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 27 "/usr/include/glib-2.0/gio/gunixconnection.h" 2
# 42 "/usr/include/glib-2.0/gio/gunixconnection.h"
typedef struct _GUnixConnection GUnixConnection;
typedef struct _GUnixConnectionPrivate GUnixConnectionPrivate;
typedef struct _GUnixConnectionClass GUnixConnectionClass;

typedef GUnixConnection *GUnixConnection_autoptr; typedef GList *GUnixConnection_listautoptr; typedef GSList *GUnixConnection_slistautoptr; typedef GQueue *GUnixConnection_queueautoptr;
# 46 "/usr/include/glib-2.0/gio/gunixconnection.h"
#pragma clang diagnostic push
# 46 "/usr/include/glib-2.0/gio/gunixconnection.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 46 "/usr/include/glib-2.0/gio/gunixconnection.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUnixConnection (GUnixConnection *_ptr) { if (_ptr) (g_object_unref) ((GUnixConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUnixConnection (GUnixConnection **_ptr) { glib_autoptr_clear_GUnixConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GUnixConnection (void *_ptr) { (g_object_unref) ((GUnixConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUnixConnection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GUnixConnection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUnixConnection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GUnixConnection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUnixConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GUnixConnection); }
# 46 "/usr/include/glib-2.0/gio/gunixconnection.h"
#pragma clang diagnostic pop

struct _GUnixConnectionClass
{
  GSocketConnectionClass parent_class;
};

struct _GUnixConnection
{
  GSocketConnection parent_instance;
  GUnixConnectionPrivate *priv;
};

 extern
GType g_unix_connection_get_type (void);

 extern
gboolean g_unix_connection_send_fd (GUnixConnection *connection,
                                                                         gint fd,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
gint g_unix_connection_receive_fd (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GError **error);

 extern
gboolean g_unix_connection_send_credentials (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_unix_connection_send_credentials_async (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
gboolean g_unix_connection_send_credentials_finish (GUnixConnection *connection,
                                                                         GAsyncResult *result,
                                                                         GError **error);

 extern
GCredentials *g_unix_connection_receive_credentials (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GError **error);
 extern
void g_unix_connection_receive_credentials_async (GUnixConnection *connection,
                                                                         GCancellable *cancellable,
                                                                         GAsyncReadyCallback callback,
                                                                         gpointer user_data);
 extern
GCredentials *g_unix_connection_receive_credentials_finish (GUnixConnection *connection,
                                                                         GAsyncResult *result,
                                                                         GError **error);
# 173 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gunixcredentialsmessage.h" 1
# 27 "/usr/include/glib-2.0/gio/gunixcredentialsmessage.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 28 "/usr/include/glib-2.0/gio/gunixcredentialsmessage.h" 2
# 38 "/usr/include/glib-2.0/gio/gunixcredentialsmessage.h"
typedef struct _GUnixCredentialsMessagePrivate GUnixCredentialsMessagePrivate;
typedef struct _GUnixCredentialsMessageClass GUnixCredentialsMessageClass;

typedef GUnixCredentialsMessage *GUnixCredentialsMessage_autoptr; typedef GList *GUnixCredentialsMessage_listautoptr; typedef GSList *GUnixCredentialsMessage_slistautoptr; typedef GQueue *GUnixCredentialsMessage_queueautoptr;
# 41 "/usr/include/glib-2.0/gio/gunixcredentialsmessage.h"
#pragma clang diagnostic push
# 41 "/usr/include/glib-2.0/gio/gunixcredentialsmessage.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 41 "/usr/include/glib-2.0/gio/gunixcredentialsmessage.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUnixCredentialsMessage (GUnixCredentialsMessage *_ptr) { if (_ptr) (g_object_unref) ((GUnixCredentialsMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUnixCredentialsMessage (GUnixCredentialsMessage **_ptr) { glib_autoptr_clear_GUnixCredentialsMessage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GUnixCredentialsMessage (void *_ptr) { (g_object_unref) ((GUnixCredentialsMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUnixCredentialsMessage (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GUnixCredentialsMessage); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUnixCredentialsMessage (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GUnixCredentialsMessage); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUnixCredentialsMessage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GUnixCredentialsMessage); }
# 41 "/usr/include/glib-2.0/gio/gunixcredentialsmessage.h"
#pragma clang diagnostic pop








struct _GUnixCredentialsMessageClass
{
  GSocketControlMessageClass parent_class;




  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
};

struct _GUnixCredentialsMessage
{
  GSocketControlMessage parent_instance;
  GUnixCredentialsMessagePrivate *priv;
};

 extern
GType g_unix_credentials_message_get_type (void) __attribute__ ((__const__));
 extern
GSocketControlMessage *g_unix_credentials_message_new (void);
 extern
GSocketControlMessage *g_unix_credentials_message_new_with_credentials (GCredentials *credentials);
 extern
GCredentials *g_unix_credentials_message_get_credentials (GUnixCredentialsMessage *message);

 extern
gboolean g_unix_credentials_message_is_supported (void);
# 174 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gunixfdlist.h" 1
# 26 "/usr/include/glib-2.0/gio/gunixfdlist.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 27 "/usr/include/glib-2.0/gio/gunixfdlist.h" 2
# 41 "/usr/include/glib-2.0/gio/gunixfdlist.h"
typedef GUnixFDList *GUnixFDList_autoptr; typedef GList *GUnixFDList_listautoptr; typedef GSList *GUnixFDList_slistautoptr; typedef GQueue *GUnixFDList_queueautoptr;
# 41 "/usr/include/glib-2.0/gio/gunixfdlist.h"
#pragma clang diagnostic push
# 41 "/usr/include/glib-2.0/gio/gunixfdlist.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 41 "/usr/include/glib-2.0/gio/gunixfdlist.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUnixFDList (GUnixFDList *_ptr) { if (_ptr) (g_object_unref) ((GUnixFDList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUnixFDList (GUnixFDList **_ptr) { glib_autoptr_clear_GUnixFDList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GUnixFDList (void *_ptr) { (g_object_unref) ((GUnixFDList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUnixFDList (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GUnixFDList); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUnixFDList (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GUnixFDList); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUnixFDList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GUnixFDList); }
# 41 "/usr/include/glib-2.0/gio/gunixfdlist.h"
#pragma clang diagnostic pop

typedef struct _GUnixFDListPrivate GUnixFDListPrivate;
typedef struct _GUnixFDListClass GUnixFDListClass;

struct _GUnixFDListClass
{
  GObjectClass parent_class;




  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

struct _GUnixFDList
{
  GObject parent_instance;
  GUnixFDListPrivate *priv;
};

 extern
GType g_unix_fd_list_get_type (void) __attribute__ ((__const__));
 extern
GUnixFDList * g_unix_fd_list_new (void);
 extern
GUnixFDList * g_unix_fd_list_new_from_array (const gint *fds,
                                                                         gint n_fds);

 extern
gint g_unix_fd_list_append (GUnixFDList *list,
                                                                         gint fd,
                                                                         GError **error);

 extern
gint g_unix_fd_list_get_length (GUnixFDList *list);

 extern
gint g_unix_fd_list_get (GUnixFDList *list,
                                                                         gint index_,
                                                                         GError **error);

 extern
const gint * g_unix_fd_list_peek_fds (GUnixFDList *list,
                                                                         gint *length);

 extern
gint * g_unix_fd_list_steal_fds (GUnixFDList *list,
                                                                         gint *length);
# 175 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gunixsocketaddress.h" 1
# 27 "/usr/include/glib-2.0/gio/gunixsocketaddress.h"
# 1 "/usr/include/glib-2.0/gio/gio.h" 1
# 28 "/usr/include/glib-2.0/gio/gunixsocketaddress.h" 2
# 38 "/usr/include/glib-2.0/gio/gunixsocketaddress.h"
typedef struct _GUnixSocketAddress GUnixSocketAddress;
typedef struct _GUnixSocketAddressClass GUnixSocketAddressClass;
typedef struct _GUnixSocketAddressPrivate GUnixSocketAddressPrivate;

typedef GUnixSocketAddress *GUnixSocketAddress_autoptr; typedef GList *GUnixSocketAddress_listautoptr; typedef GSList *GUnixSocketAddress_slistautoptr; typedef GQueue *GUnixSocketAddress_queueautoptr;
# 42 "/usr/include/glib-2.0/gio/gunixsocketaddress.h"
#pragma clang diagnostic push
# 42 "/usr/include/glib-2.0/gio/gunixsocketaddress.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 42 "/usr/include/glib-2.0/gio/gunixsocketaddress.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GUnixSocketAddress (GUnixSocketAddress *_ptr) { if (_ptr) (g_object_unref) ((GUnixSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GUnixSocketAddress (GUnixSocketAddress **_ptr) { glib_autoptr_clear_GUnixSocketAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GUnixSocketAddress (void *_ptr) { (g_object_unref) ((GUnixSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GUnixSocketAddress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GUnixSocketAddress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GUnixSocketAddress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GUnixSocketAddress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GUnixSocketAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GUnixSocketAddress); }
# 42 "/usr/include/glib-2.0/gio/gunixsocketaddress.h"
#pragma clang diagnostic pop

struct _GUnixSocketAddress
{
  GSocketAddress parent_instance;


  GUnixSocketAddressPrivate *priv;
};

struct _GUnixSocketAddressClass
{
  GSocketAddressClass parent_class;
};

 extern
GType g_unix_socket_address_get_type (void) __attribute__ ((__const__));

 extern
GSocketAddress *g_unix_socket_address_new (const gchar *path);
__attribute__((__deprecated__("Use '" "g_unix_socket_address_new_with_type" "' instead"))) extern
GSocketAddress *g_unix_socket_address_new_abstract (const gchar *path,
                                                       gint path_len);
 extern
GSocketAddress *g_unix_socket_address_new_with_type (const gchar *path,
                                                       gint path_len,
                                                       GUnixSocketAddressType type);
 extern
const char * g_unix_socket_address_get_path (GUnixSocketAddress *address);
 extern
gsize g_unix_socket_address_get_path_len (GUnixSocketAddress *address);
 extern
GUnixSocketAddressType g_unix_socket_address_get_address_type (GUnixSocketAddress *address);
__attribute__((__deprecated__)) extern
gboolean g_unix_socket_address_get_is_abstract (GUnixSocketAddress *address);

 extern
gboolean g_unix_socket_address_abstract_names_supported (void);
# 176 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gvfs.h" 1
# 59 "/usr/include/glib-2.0/gio/gvfs.h"
typedef GFile * (* GVfsFileLookupFunc) (GVfs *vfs,
                                        const char *identifier,
                                        gpointer user_data);
# 71 "/usr/include/glib-2.0/gio/gvfs.h"
typedef struct _GVfsClass GVfsClass;

struct _GVfs
{
  GObject parent_instance;
};

struct _GVfsClass
{
  GObjectClass parent_class;



  gboolean (* is_active) (GVfs *vfs);
  GFile * (* get_file_for_path) (GVfs *vfs,
                                                       const char *path);
  GFile * (* get_file_for_uri) (GVfs *vfs,
                                                       const char *uri);
  const gchar * const * (* get_supported_uri_schemes) (GVfs *vfs);
  GFile * (* parse_name) (GVfs *vfs,
                                                       const char *parse_name);


  void (* local_file_add_info) (GVfs *vfs,
             const char *filename,
             guint64 device,
             GFileAttributeMatcher *attribute_matcher,
             GFileInfo *info,
             GCancellable *cancellable,
             gpointer *extra_data,
             GDestroyNotify *free_extra_data);
  void (* add_writable_namespaces) (GVfs *vfs,
             GFileAttributeInfoList *list);
  gboolean (* local_file_set_attributes) (GVfs *vfs,
             const char *filename,
             GFileInfo *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
             GError **error);
  void (* local_file_removed) (GVfs *vfs,
             const char *filename);
  void (* local_file_moved) (GVfs *vfs,
             const char *source,
             const char *dest);
  GIcon * (* deserialize_icon) (GVfs *vfs,
                                                       GVariant *value);

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

 extern
GType g_vfs_get_type (void) __attribute__ ((__const__));

 extern
gboolean g_vfs_is_active (GVfs *vfs);
 extern
GFile * g_vfs_get_file_for_path (GVfs *vfs,
                                                       const char *path);
 extern
GFile * g_vfs_get_file_for_uri (GVfs *vfs,
                                                       const char *uri);
 extern
const gchar* const * g_vfs_get_supported_uri_schemes (GVfs *vfs);

 extern
GFile * g_vfs_parse_name (GVfs *vfs,
                                                       const char *parse_name);

 extern
GVfs * g_vfs_get_default (void);
 extern
GVfs * g_vfs_get_local (void);

 extern
gboolean g_vfs_register_uri_scheme (GVfs *vfs,
                                                       const char *scheme,
                                                       GVfsFileLookupFunc uri_func,
                                                       gpointer uri_data,
                                                       GDestroyNotify uri_destroy,
                                                       GVfsFileLookupFunc parse_name_func,
                                                       gpointer parse_name_data,
                                                       GDestroyNotify parse_name_destroy);
 extern
gboolean g_vfs_unregister_uri_scheme (GVfs *vfs,
                                                       const char *scheme);
# 177 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gvolume.h" 1
# 126 "/usr/include/glib-2.0/gio/gvolume.h"
typedef struct _GVolumeIface GVolumeIface;

struct _GVolumeIface
{
  GTypeInterface g_iface;



  void (* changed) (GVolume *volume);
  void (* removed) (GVolume *volume);



  char * (* get_name) (GVolume *volume);
  GIcon * (* get_icon) (GVolume *volume);
  char * (* get_uuid) (GVolume *volume);
  GDrive * (* get_drive) (GVolume *volume);
  GMount * (* get_mount) (GVolume *volume);
  gboolean (* can_mount) (GVolume *volume);
  gboolean (* can_eject) (GVolume *volume);
  void (* mount_fn) (GVolume *volume,
                                         GMountMountFlags flags,
                                         GMountOperation *mount_operation,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* mount_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
  void (* eject) (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
  gboolean (* eject_finish) (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);

  char * (* get_identifier) (GVolume *volume,
                                         const char *kind);
  char ** (* enumerate_identifiers) (GVolume *volume);

  gboolean (* should_automount) (GVolume *volume);

  GFile * (* get_activation_root) (GVolume *volume);

  void (* eject_with_operation) (GVolume *volume,
                                             GMountUnmountFlags flags,
                                             GMountOperation *mount_operation,
                                             GCancellable *cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
  gboolean (* eject_with_operation_finish) (GVolume *volume,
                                             GAsyncResult *result,
                                             GError **error);

  const gchar * (* get_sort_key) (GVolume *volume);
  GIcon * (* get_symbolic_icon) (GVolume *volume);
};

 extern
GType g_volume_get_type (void) __attribute__ ((__const__));

 extern
char * g_volume_get_name (GVolume *volume);
 extern
GIcon * g_volume_get_icon (GVolume *volume);
 extern
GIcon * g_volume_get_symbolic_icon (GVolume *volume);
 extern
char * g_volume_get_uuid (GVolume *volume);
 extern
GDrive * g_volume_get_drive (GVolume *volume);
 extern
GMount * g_volume_get_mount (GVolume *volume);
 extern
gboolean g_volume_can_mount (GVolume *volume);
 extern
gboolean g_volume_can_eject (GVolume *volume);
 extern
gboolean g_volume_should_automount (GVolume *volume);
 extern
void g_volume_mount (GVolume *volume,
      GMountMountFlags flags,
      GMountOperation *mount_operation,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);
 extern
gboolean g_volume_mount_finish (GVolume *volume,
      GAsyncResult *result,
      GError **error);
__attribute__((__deprecated__("Use '" "g_volume_eject_with_operation" "' instead"))) extern
void g_volume_eject (GVolume *volume,
                                         GMountUnmountFlags flags,
                                         GCancellable *cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);

__attribute__((__deprecated__("Use '" "g_volume_eject_with_operation_finish" "' instead"))) extern
gboolean g_volume_eject_finish (GVolume *volume,
                                         GAsyncResult *result,
                                         GError **error);
 extern
char * g_volume_get_identifier (GVolume *volume,
      const char *kind);
 extern
char ** g_volume_enumerate_identifiers (GVolume *volume);

 extern
GFile * g_volume_get_activation_root (GVolume *volume);

 extern
void g_volume_eject_with_operation (GVolume *volume,
                                               GMountUnmountFlags flags,
                                               GMountOperation *mount_operation,
                                               GCancellable *cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
 extern
gboolean g_volume_eject_with_operation_finish (GVolume *volume,
                                               GAsyncResult *result,
                                               GError **error);

 extern
const gchar *g_volume_get_sort_key (GVolume *volume);
# 178 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gzlibcompressor.h" 1
# 42 "/usr/include/glib-2.0/gio/gzlibcompressor.h"
typedef struct _GZlibCompressorClass GZlibCompressorClass;

struct _GZlibCompressorClass
{
  GObjectClass parent_class;
};

 extern
GType g_zlib_compressor_get_type (void) __attribute__ ((__const__));

 extern
GZlibCompressor *g_zlib_compressor_new (GZlibCompressorFormat format,
     int level);

 extern
GFileInfo *g_zlib_compressor_get_file_info (GZlibCompressor *compressor);
 extern
void g_zlib_compressor_set_file_info (GZlibCompressor *compressor,
                                                  GFileInfo *file_info);
# 180 "/usr/include/glib-2.0/gio/gio.h" 2
# 1 "/usr/include/glib-2.0/gio/gzlibdecompressor.h" 1
# 42 "/usr/include/glib-2.0/gio/gzlibdecompressor.h"
typedef struct _GZlibDecompressorClass GZlibDecompressorClass;

struct _GZlibDecompressorClass
{
  GObjectClass parent_class;
};

 extern
GType g_zlib_decompressor_get_type (void) __attribute__ ((__const__));

 extern
GZlibDecompressor *g_zlib_decompressor_new (GZlibCompressorFormat format);

 extern
GFileInfo *g_zlib_decompressor_get_file_info (GZlibDecompressor *decompressor);
# 181 "/usr/include/glib-2.0/gio/gio.h" 2

# 1 "/usr/include/glib-2.0/gio/gio-autocleanups.h" 1
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
typedef GAction *GAction_autoptr; typedef GList *GAction_listautoptr; typedef GSList *GAction_slistautoptr; typedef GQueue *GAction_queueautoptr;
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAction (GAction *_ptr) { if (_ptr) (g_object_unref) ((GAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAction (GAction **_ptr) { glib_autoptr_clear_GAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GAction (void *_ptr) { (g_object_unref) ((GAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAction (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GAction); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAction (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GAction); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GAction); }
# 28 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GActionMap *GActionMap_autoptr; typedef GList *GActionMap_listautoptr; typedef GSList *GActionMap_slistautoptr; typedef GQueue *GActionMap_queueautoptr;
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GActionMap (GActionMap *_ptr) { if (_ptr) (g_object_unref) ((GActionMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GActionMap (GActionMap **_ptr) { glib_autoptr_clear_GActionMap (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GActionMap (void *_ptr) { (g_object_unref) ((GActionMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GActionMap (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GActionMap); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GActionMap (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GActionMap); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GActionMap (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GActionMap); }
# 29 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GAppInfo *GAppInfo_autoptr; typedef GList *GAppInfo_listautoptr; typedef GSList *GAppInfo_slistautoptr; typedef GQueue *GAppInfo_queueautoptr;
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppInfo (GAppInfo *_ptr) { if (_ptr) (g_object_unref) ((GAppInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppInfo (GAppInfo **_ptr) { glib_autoptr_clear_GAppInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GAppInfo (void *_ptr) { (g_object_unref) ((GAppInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppInfo (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GAppInfo); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppInfo (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GAppInfo); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GAppInfo); }
# 30 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GAppLaunchContext *GAppLaunchContext_autoptr; typedef GList *GAppLaunchContext_listautoptr; typedef GSList *GAppLaunchContext_slistautoptr; typedef GQueue *GAppLaunchContext_queueautoptr;
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppLaunchContext (GAppLaunchContext *_ptr) { if (_ptr) (g_object_unref) ((GAppLaunchContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppLaunchContext (GAppLaunchContext **_ptr) { glib_autoptr_clear_GAppLaunchContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GAppLaunchContext (void *_ptr) { (g_object_unref) ((GAppLaunchContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppLaunchContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GAppLaunchContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppLaunchContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GAppLaunchContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppLaunchContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GAppLaunchContext); }
# 31 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GAppInfoMonitor *GAppInfoMonitor_autoptr; typedef GList *GAppInfoMonitor_listautoptr; typedef GSList *GAppInfoMonitor_slistautoptr; typedef GQueue *GAppInfoMonitor_queueautoptr;
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAppInfoMonitor (GAppInfoMonitor *_ptr) { if (_ptr) (g_object_unref) ((GAppInfoMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAppInfoMonitor (GAppInfoMonitor **_ptr) { glib_autoptr_clear_GAppInfoMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GAppInfoMonitor (void *_ptr) { (g_object_unref) ((GAppInfoMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAppInfoMonitor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GAppInfoMonitor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAppInfoMonitor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GAppInfoMonitor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAppInfoMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GAppInfoMonitor); }
# 32 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GApplicationCommandLine *GApplicationCommandLine_autoptr; typedef GList *GApplicationCommandLine_listautoptr; typedef GSList *GApplicationCommandLine_slistautoptr; typedef GQueue *GApplicationCommandLine_queueautoptr;
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GApplicationCommandLine (GApplicationCommandLine *_ptr) { if (_ptr) (g_object_unref) ((GApplicationCommandLine *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GApplicationCommandLine (GApplicationCommandLine **_ptr) { glib_autoptr_clear_GApplicationCommandLine (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GApplicationCommandLine (void *_ptr) { (g_object_unref) ((GApplicationCommandLine *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GApplicationCommandLine (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GApplicationCommandLine); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GApplicationCommandLine (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GApplicationCommandLine); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GApplicationCommandLine (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GApplicationCommandLine); }
# 33 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GApplication *GApplication_autoptr; typedef GList *GApplication_listautoptr; typedef GSList *GApplication_slistautoptr; typedef GQueue *GApplication_queueautoptr;
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GApplication (GApplication *_ptr) { if (_ptr) (g_object_unref) ((GApplication *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GApplication (GApplication **_ptr) { glib_autoptr_clear_GApplication (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GApplication (void *_ptr) { (g_object_unref) ((GApplication *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GApplication (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GApplication); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GApplication (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GApplication); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GApplication (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GApplication); }
# 34 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GAsyncInitable *GAsyncInitable_autoptr; typedef GList *GAsyncInitable_listautoptr; typedef GSList *GAsyncInitable_slistautoptr; typedef GQueue *GAsyncInitable_queueautoptr;
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncInitable (GAsyncInitable *_ptr) { if (_ptr) (g_object_unref) ((GAsyncInitable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncInitable (GAsyncInitable **_ptr) { glib_autoptr_clear_GAsyncInitable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GAsyncInitable (void *_ptr) { (g_object_unref) ((GAsyncInitable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncInitable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GAsyncInitable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncInitable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GAsyncInitable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncInitable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GAsyncInitable); }
# 35 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GAsyncResult *GAsyncResult_autoptr; typedef GList *GAsyncResult_listautoptr; typedef GSList *GAsyncResult_slistautoptr; typedef GQueue *GAsyncResult_queueautoptr;
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GAsyncResult (GAsyncResult *_ptr) { if (_ptr) (g_object_unref) ((GAsyncResult *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GAsyncResult (GAsyncResult **_ptr) { glib_autoptr_clear_GAsyncResult (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GAsyncResult (void *_ptr) { (g_object_unref) ((GAsyncResult *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GAsyncResult (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GAsyncResult); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GAsyncResult (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GAsyncResult); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GAsyncResult (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GAsyncResult); }
# 36 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GBufferedInputStream *GBufferedInputStream_autoptr; typedef GList *GBufferedInputStream_listautoptr; typedef GSList *GBufferedInputStream_slistautoptr; typedef GQueue *GBufferedInputStream_queueautoptr;
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBufferedInputStream (GBufferedInputStream *_ptr) { if (_ptr) (g_object_unref) ((GBufferedInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBufferedInputStream (GBufferedInputStream **_ptr) { glib_autoptr_clear_GBufferedInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GBufferedInputStream (void *_ptr) { (g_object_unref) ((GBufferedInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBufferedInputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GBufferedInputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBufferedInputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GBufferedInputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBufferedInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GBufferedInputStream); }
# 37 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GBufferedOutputStream *GBufferedOutputStream_autoptr; typedef GList *GBufferedOutputStream_listautoptr; typedef GSList *GBufferedOutputStream_slistautoptr; typedef GQueue *GBufferedOutputStream_queueautoptr;
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBufferedOutputStream (GBufferedOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GBufferedOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBufferedOutputStream (GBufferedOutputStream **_ptr) { glib_autoptr_clear_GBufferedOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GBufferedOutputStream (void *_ptr) { (g_object_unref) ((GBufferedOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBufferedOutputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GBufferedOutputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBufferedOutputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GBufferedOutputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBufferedOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GBufferedOutputStream); }
# 38 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GBytesIcon *GBytesIcon_autoptr; typedef GList *GBytesIcon_listautoptr; typedef GSList *GBytesIcon_slistautoptr; typedef GQueue *GBytesIcon_queueautoptr;
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GBytesIcon (GBytesIcon *_ptr) { if (_ptr) (g_object_unref) ((GBytesIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GBytesIcon (GBytesIcon **_ptr) { glib_autoptr_clear_GBytesIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GBytesIcon (void *_ptr) { (g_object_unref) ((GBytesIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GBytesIcon (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GBytesIcon); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GBytesIcon (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GBytesIcon); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GBytesIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GBytesIcon); }
# 39 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GCancellable *GCancellable_autoptr; typedef GList *GCancellable_listautoptr; typedef GSList *GCancellable_slistautoptr; typedef GQueue *GCancellable_queueautoptr;
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCancellable (GCancellable *_ptr) { if (_ptr) (g_object_unref) ((GCancellable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCancellable (GCancellable **_ptr) { glib_autoptr_clear_GCancellable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GCancellable (void *_ptr) { (g_object_unref) ((GCancellable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCancellable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GCancellable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCancellable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GCancellable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCancellable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GCancellable); }
# 40 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GCharsetConverter *GCharsetConverter_autoptr; typedef GList *GCharsetConverter_listautoptr; typedef GSList *GCharsetConverter_slistautoptr; typedef GQueue *GCharsetConverter_queueautoptr;
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCharsetConverter (GCharsetConverter *_ptr) { if (_ptr) (g_object_unref) ((GCharsetConverter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCharsetConverter (GCharsetConverter **_ptr) { glib_autoptr_clear_GCharsetConverter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GCharsetConverter (void *_ptr) { (g_object_unref) ((GCharsetConverter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCharsetConverter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GCharsetConverter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCharsetConverter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GCharsetConverter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCharsetConverter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GCharsetConverter); }
# 41 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GConverter *GConverter_autoptr; typedef GList *GConverter_listautoptr; typedef GSList *GConverter_slistautoptr; typedef GQueue *GConverter_queueautoptr;
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverter (GConverter *_ptr) { if (_ptr) (g_object_unref) ((GConverter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverter (GConverter **_ptr) { glib_autoptr_clear_GConverter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GConverter (void *_ptr) { (g_object_unref) ((GConverter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GConverter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GConverter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GConverter); }
# 42 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GConverterInputStream *GConverterInputStream_autoptr; typedef GList *GConverterInputStream_listautoptr; typedef GSList *GConverterInputStream_slistautoptr; typedef GQueue *GConverterInputStream_queueautoptr;
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverterInputStream (GConverterInputStream *_ptr) { if (_ptr) (g_object_unref) ((GConverterInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverterInputStream (GConverterInputStream **_ptr) { glib_autoptr_clear_GConverterInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GConverterInputStream (void *_ptr) { (g_object_unref) ((GConverterInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverterInputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GConverterInputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverterInputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GConverterInputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverterInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GConverterInputStream); }
# 43 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GConverterOutputStream *GConverterOutputStream_autoptr; typedef GList *GConverterOutputStream_listautoptr; typedef GSList *GConverterOutputStream_slistautoptr; typedef GQueue *GConverterOutputStream_queueautoptr;
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GConverterOutputStream (GConverterOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GConverterOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GConverterOutputStream (GConverterOutputStream **_ptr) { glib_autoptr_clear_GConverterOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GConverterOutputStream (void *_ptr) { (g_object_unref) ((GConverterOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GConverterOutputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GConverterOutputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GConverterOutputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GConverterOutputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GConverterOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GConverterOutputStream); }
# 44 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GCredentials *GCredentials_autoptr; typedef GList *GCredentials_listautoptr; typedef GSList *GCredentials_slistautoptr; typedef GQueue *GCredentials_queueautoptr;
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GCredentials (GCredentials *_ptr) { if (_ptr) (g_object_unref) ((GCredentials *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GCredentials (GCredentials **_ptr) { glib_autoptr_clear_GCredentials (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GCredentials (void *_ptr) { (g_object_unref) ((GCredentials *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GCredentials (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GCredentials); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GCredentials (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GCredentials); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GCredentials (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GCredentials); }
# 45 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDatagramBased *GDatagramBased_autoptr; typedef GList *GDatagramBased_listautoptr; typedef GSList *GDatagramBased_slistautoptr; typedef GQueue *GDatagramBased_queueautoptr;
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDatagramBased (GDatagramBased *_ptr) { if (_ptr) (g_object_unref) ((GDatagramBased *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDatagramBased (GDatagramBased **_ptr) { glib_autoptr_clear_GDatagramBased (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDatagramBased (void *_ptr) { (g_object_unref) ((GDatagramBased *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDatagramBased (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDatagramBased); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDatagramBased (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDatagramBased); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDatagramBased (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDatagramBased); }
# 46 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDataInputStream *GDataInputStream_autoptr; typedef GList *GDataInputStream_listautoptr; typedef GSList *GDataInputStream_slistautoptr; typedef GQueue *GDataInputStream_queueautoptr;
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDataInputStream (GDataInputStream *_ptr) { if (_ptr) (g_object_unref) ((GDataInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDataInputStream (GDataInputStream **_ptr) { glib_autoptr_clear_GDataInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDataInputStream (void *_ptr) { (g_object_unref) ((GDataInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDataInputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDataInputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDataInputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDataInputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDataInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDataInputStream); }
# 47 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDataOutputStream *GDataOutputStream_autoptr; typedef GList *GDataOutputStream_listautoptr; typedef GSList *GDataOutputStream_slistautoptr; typedef GQueue *GDataOutputStream_queueautoptr;
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDataOutputStream (GDataOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GDataOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDataOutputStream (GDataOutputStream **_ptr) { glib_autoptr_clear_GDataOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDataOutputStream (void *_ptr) { (g_object_unref) ((GDataOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDataOutputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDataOutputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDataOutputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDataOutputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDataOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDataOutputStream); }
# 48 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusActionGroup *GDBusActionGroup_autoptr; typedef GList *GDBusActionGroup_listautoptr; typedef GSList *GDBusActionGroup_slistautoptr; typedef GQueue *GDBusActionGroup_queueautoptr;
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusActionGroup (GDBusActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GDBusActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusActionGroup (GDBusActionGroup **_ptr) { glib_autoptr_clear_GDBusActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusActionGroup (void *_ptr) { (g_object_unref) ((GDBusActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusActionGroup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusActionGroup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusActionGroup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusActionGroup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusActionGroup); }
# 49 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusAuthObserver *GDBusAuthObserver_autoptr; typedef GList *GDBusAuthObserver_listautoptr; typedef GSList *GDBusAuthObserver_slistautoptr; typedef GQueue *GDBusAuthObserver_queueautoptr;
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusAuthObserver (GDBusAuthObserver *_ptr) { if (_ptr) (g_object_unref) ((GDBusAuthObserver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusAuthObserver (GDBusAuthObserver **_ptr) { glib_autoptr_clear_GDBusAuthObserver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusAuthObserver (void *_ptr) { (g_object_unref) ((GDBusAuthObserver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusAuthObserver (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusAuthObserver); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusAuthObserver (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusAuthObserver); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusAuthObserver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusAuthObserver); }
# 50 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusConnection *GDBusConnection_autoptr; typedef GList *GDBusConnection_listautoptr; typedef GSList *GDBusConnection_slistautoptr; typedef GQueue *GDBusConnection_queueautoptr;
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusConnection (GDBusConnection *_ptr) { if (_ptr) (g_object_unref) ((GDBusConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusConnection (GDBusConnection **_ptr) { glib_autoptr_clear_GDBusConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusConnection (void *_ptr) { (g_object_unref) ((GDBusConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusConnection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusConnection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusConnection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusConnection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusConnection); }
# 51 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusInterface *GDBusInterface_autoptr; typedef GList *GDBusInterface_listautoptr; typedef GSList *GDBusInterface_slistautoptr; typedef GQueue *GDBusInterface_queueautoptr;
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusInterface (GDBusInterface *_ptr) { if (_ptr) (g_object_unref) ((GDBusInterface *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusInterface (GDBusInterface **_ptr) { glib_autoptr_clear_GDBusInterface (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusInterface (void *_ptr) { (g_object_unref) ((GDBusInterface *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusInterface (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusInterface); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusInterface (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusInterface); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusInterface (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusInterface); }
# 52 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusInterfaceSkeleton *GDBusInterfaceSkeleton_autoptr; typedef GList *GDBusInterfaceSkeleton_listautoptr; typedef GSList *GDBusInterfaceSkeleton_slistautoptr; typedef GQueue *GDBusInterfaceSkeleton_queueautoptr;
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusInterfaceSkeleton (GDBusInterfaceSkeleton *_ptr) { if (_ptr) (g_object_unref) ((GDBusInterfaceSkeleton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusInterfaceSkeleton (GDBusInterfaceSkeleton **_ptr) { glib_autoptr_clear_GDBusInterfaceSkeleton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusInterfaceSkeleton (void *_ptr) { (g_object_unref) ((GDBusInterfaceSkeleton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusInterfaceSkeleton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusInterfaceSkeleton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusInterfaceSkeleton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusInterfaceSkeleton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusInterfaceSkeleton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusInterfaceSkeleton); }
# 53 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusMenuModel *GDBusMenuModel_autoptr; typedef GList *GDBusMenuModel_listautoptr; typedef GSList *GDBusMenuModel_slistautoptr; typedef GQueue *GDBusMenuModel_queueautoptr;
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMenuModel (GDBusMenuModel *_ptr) { if (_ptr) (g_object_unref) ((GDBusMenuModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMenuModel (GDBusMenuModel **_ptr) { glib_autoptr_clear_GDBusMenuModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusMenuModel (void *_ptr) { (g_object_unref) ((GDBusMenuModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMenuModel (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusMenuModel); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMenuModel (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusMenuModel); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMenuModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusMenuModel); }
# 54 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusMessage *GDBusMessage_autoptr; typedef GList *GDBusMessage_listautoptr; typedef GSList *GDBusMessage_slistautoptr; typedef GQueue *GDBusMessage_queueautoptr;
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMessage (GDBusMessage *_ptr) { if (_ptr) (g_object_unref) ((GDBusMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMessage (GDBusMessage **_ptr) { glib_autoptr_clear_GDBusMessage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusMessage (void *_ptr) { (g_object_unref) ((GDBusMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMessage (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusMessage); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMessage (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusMessage); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMessage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusMessage); }
# 55 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusMethodInvocation *GDBusMethodInvocation_autoptr; typedef GList *GDBusMethodInvocation_listautoptr; typedef GSList *GDBusMethodInvocation_slistautoptr; typedef GQueue *GDBusMethodInvocation_queueautoptr;
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusMethodInvocation (GDBusMethodInvocation *_ptr) { if (_ptr) (g_object_unref) ((GDBusMethodInvocation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusMethodInvocation (GDBusMethodInvocation **_ptr) { glib_autoptr_clear_GDBusMethodInvocation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusMethodInvocation (void *_ptr) { (g_object_unref) ((GDBusMethodInvocation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusMethodInvocation (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusMethodInvocation); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusMethodInvocation (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusMethodInvocation); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusMethodInvocation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusMethodInvocation); }
# 56 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusNodeInfo *GDBusNodeInfo_autoptr; typedef GList *GDBusNodeInfo_listautoptr; typedef GSList *GDBusNodeInfo_slistautoptr; typedef GQueue *GDBusNodeInfo_queueautoptr;
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusNodeInfo (GDBusNodeInfo *_ptr) { if (_ptr) (g_dbus_node_info_unref) ((GDBusNodeInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusNodeInfo (GDBusNodeInfo **_ptr) { glib_autoptr_clear_GDBusNodeInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusNodeInfo (void *_ptr) { (g_dbus_node_info_unref) ((GDBusNodeInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusNodeInfo (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusNodeInfo); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusNodeInfo (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusNodeInfo); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusNodeInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusNodeInfo); }
# 57 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusObject *GDBusObject_autoptr; typedef GList *GDBusObject_listautoptr; typedef GSList *GDBusObject_slistautoptr; typedef GQueue *GDBusObject_queueautoptr;
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObject (GDBusObject *_ptr) { if (_ptr) (g_object_unref) ((GDBusObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObject (GDBusObject **_ptr) { glib_autoptr_clear_GDBusObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusObject (void *_ptr) { (g_object_unref) ((GDBusObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObject (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObject (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusObject); }
# 58 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusObjectManagerClient *GDBusObjectManagerClient_autoptr; typedef GList *GDBusObjectManagerClient_listautoptr; typedef GSList *GDBusObjectManagerClient_slistautoptr; typedef GQueue *GDBusObjectManagerClient_queueautoptr;
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManagerClient (GDBusObjectManagerClient *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManagerClient *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManagerClient (GDBusObjectManagerClient **_ptr) { glib_autoptr_clear_GDBusObjectManagerClient (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusObjectManagerClient (void *_ptr) { (g_object_unref) ((GDBusObjectManagerClient *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManagerClient (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusObjectManagerClient); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManagerClient (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusObjectManagerClient); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManagerClient (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusObjectManagerClient); }
# 59 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusObjectManager *GDBusObjectManager_autoptr; typedef GList *GDBusObjectManager_listautoptr; typedef GSList *GDBusObjectManager_slistautoptr; typedef GQueue *GDBusObjectManager_queueautoptr;
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManager (GDBusObjectManager *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManager (GDBusObjectManager **_ptr) { glib_autoptr_clear_GDBusObjectManager (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusObjectManager (void *_ptr) { (g_object_unref) ((GDBusObjectManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManager (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusObjectManager); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManager (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusObjectManager); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManager (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusObjectManager); }
# 60 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusObjectManagerServer *GDBusObjectManagerServer_autoptr; typedef GList *GDBusObjectManagerServer_listautoptr; typedef GSList *GDBusObjectManagerServer_slistautoptr; typedef GQueue *GDBusObjectManagerServer_queueautoptr;
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectManagerServer (GDBusObjectManagerServer *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectManagerServer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectManagerServer (GDBusObjectManagerServer **_ptr) { glib_autoptr_clear_GDBusObjectManagerServer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusObjectManagerServer (void *_ptr) { (g_object_unref) ((GDBusObjectManagerServer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectManagerServer (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusObjectManagerServer); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectManagerServer (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusObjectManagerServer); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectManagerServer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusObjectManagerServer); }
# 61 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusObjectProxy *GDBusObjectProxy_autoptr; typedef GList *GDBusObjectProxy_listautoptr; typedef GSList *GDBusObjectProxy_slistautoptr; typedef GQueue *GDBusObjectProxy_queueautoptr;
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectProxy (GDBusObjectProxy *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectProxy (GDBusObjectProxy **_ptr) { glib_autoptr_clear_GDBusObjectProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusObjectProxy (void *_ptr) { (g_object_unref) ((GDBusObjectProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectProxy (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusObjectProxy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectProxy (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusObjectProxy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusObjectProxy); }
# 62 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusObjectSkeleton *GDBusObjectSkeleton_autoptr; typedef GList *GDBusObjectSkeleton_listautoptr; typedef GSList *GDBusObjectSkeleton_slistautoptr; typedef GQueue *GDBusObjectSkeleton_queueautoptr;
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusObjectSkeleton (GDBusObjectSkeleton *_ptr) { if (_ptr) (g_object_unref) ((GDBusObjectSkeleton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusObjectSkeleton (GDBusObjectSkeleton **_ptr) { glib_autoptr_clear_GDBusObjectSkeleton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusObjectSkeleton (void *_ptr) { (g_object_unref) ((GDBusObjectSkeleton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusObjectSkeleton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusObjectSkeleton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusObjectSkeleton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusObjectSkeleton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusObjectSkeleton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusObjectSkeleton); }
# 63 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusProxy *GDBusProxy_autoptr; typedef GList *GDBusProxy_listautoptr; typedef GSList *GDBusProxy_slistautoptr; typedef GQueue *GDBusProxy_queueautoptr;
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusProxy (GDBusProxy *_ptr) { if (_ptr) (g_object_unref) ((GDBusProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusProxy (GDBusProxy **_ptr) { glib_autoptr_clear_GDBusProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusProxy (void *_ptr) { (g_object_unref) ((GDBusProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusProxy (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusProxy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusProxy (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusProxy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusProxy); }
# 64 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDBusServer *GDBusServer_autoptr; typedef GList *GDBusServer_listautoptr; typedef GSList *GDBusServer_slistautoptr; typedef GQueue *GDBusServer_queueautoptr;
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDBusServer (GDBusServer *_ptr) { if (_ptr) (g_object_unref) ((GDBusServer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDBusServer (GDBusServer **_ptr) { glib_autoptr_clear_GDBusServer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDBusServer (void *_ptr) { (g_object_unref) ((GDBusServer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDBusServer (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDBusServer); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDBusServer (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDBusServer); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDBusServer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDBusServer); }
# 65 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GDrive *GDrive_autoptr; typedef GList *GDrive_listautoptr; typedef GSList *GDrive_slistautoptr; typedef GQueue *GDrive_queueautoptr;
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GDrive (GDrive *_ptr) { if (_ptr) (g_object_unref) ((GDrive *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GDrive (GDrive **_ptr) { glib_autoptr_clear_GDrive (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GDrive (void *_ptr) { (g_object_unref) ((GDrive *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GDrive (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GDrive); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GDrive (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GDrive); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GDrive (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GDrive); }
# 66 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GEmblemedIcon *GEmblemedIcon_autoptr; typedef GList *GEmblemedIcon_listautoptr; typedef GSList *GEmblemedIcon_slistautoptr; typedef GQueue *GEmblemedIcon_queueautoptr;
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEmblemedIcon (GEmblemedIcon *_ptr) { if (_ptr) (g_object_unref) ((GEmblemedIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEmblemedIcon (GEmblemedIcon **_ptr) { glib_autoptr_clear_GEmblemedIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GEmblemedIcon (void *_ptr) { (g_object_unref) ((GEmblemedIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEmblemedIcon (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GEmblemedIcon); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEmblemedIcon (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GEmblemedIcon); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEmblemedIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GEmblemedIcon); }
# 67 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GEmblem *GEmblem_autoptr; typedef GList *GEmblem_listautoptr; typedef GSList *GEmblem_slistautoptr; typedef GQueue *GEmblem_queueautoptr;
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GEmblem (GEmblem *_ptr) { if (_ptr) (g_object_unref) ((GEmblem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GEmblem (GEmblem **_ptr) { glib_autoptr_clear_GEmblem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GEmblem (void *_ptr) { (g_object_unref) ((GEmblem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GEmblem (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GEmblem); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GEmblem (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GEmblem); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GEmblem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GEmblem); }
# 68 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFileEnumerator *GFileEnumerator_autoptr; typedef GList *GFileEnumerator_listautoptr; typedef GSList *GFileEnumerator_slistautoptr; typedef GQueue *GFileEnumerator_queueautoptr;
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileEnumerator (GFileEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GFileEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileEnumerator (GFileEnumerator **_ptr) { glib_autoptr_clear_GFileEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFileEnumerator (void *_ptr) { (g_object_unref) ((GFileEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileEnumerator (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFileEnumerator); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileEnumerator (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFileEnumerator); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFileEnumerator); }
# 69 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFile *GFile_autoptr; typedef GList *GFile_listautoptr; typedef GSList *GFile_slistautoptr; typedef GQueue *GFile_queueautoptr;
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFile (GFile *_ptr) { if (_ptr) (g_object_unref) ((GFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFile (GFile **_ptr) { glib_autoptr_clear_GFile (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFile (void *_ptr) { (g_object_unref) ((GFile *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFile (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFile); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFile (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFile); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFile (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFile); }
# 70 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFileAttributeInfoList *GFileAttributeInfoList_autoptr; typedef GList *GFileAttributeInfoList_listautoptr; typedef GSList *GFileAttributeInfoList_slistautoptr; typedef GQueue *GFileAttributeInfoList_queueautoptr;
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileAttributeInfoList (GFileAttributeInfoList *_ptr) { if (_ptr) (g_file_attribute_info_list_unref) ((GFileAttributeInfoList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileAttributeInfoList (GFileAttributeInfoList **_ptr) { glib_autoptr_clear_GFileAttributeInfoList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFileAttributeInfoList (void *_ptr) { (g_file_attribute_info_list_unref) ((GFileAttributeInfoList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileAttributeInfoList (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFileAttributeInfoList); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileAttributeInfoList (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFileAttributeInfoList); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileAttributeInfoList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFileAttributeInfoList); }
# 71 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFileIcon *GFileIcon_autoptr; typedef GList *GFileIcon_listautoptr; typedef GSList *GFileIcon_slistautoptr; typedef GQueue *GFileIcon_queueautoptr;
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileIcon (GFileIcon *_ptr) { if (_ptr) (g_object_unref) ((GFileIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileIcon (GFileIcon **_ptr) { glib_autoptr_clear_GFileIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFileIcon (void *_ptr) { (g_object_unref) ((GFileIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileIcon (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFileIcon); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileIcon (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFileIcon); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFileIcon); }
# 72 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFileInfo *GFileInfo_autoptr; typedef GList *GFileInfo_listautoptr; typedef GSList *GFileInfo_slistautoptr; typedef GQueue *GFileInfo_queueautoptr;
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileInfo (GFileInfo *_ptr) { if (_ptr) (g_object_unref) ((GFileInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileInfo (GFileInfo **_ptr) { glib_autoptr_clear_GFileInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFileInfo (void *_ptr) { (g_object_unref) ((GFileInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileInfo (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFileInfo); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileInfo (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFileInfo); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFileInfo); }
# 73 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFileInputStream *GFileInputStream_autoptr; typedef GList *GFileInputStream_listautoptr; typedef GSList *GFileInputStream_slistautoptr; typedef GQueue *GFileInputStream_queueautoptr;
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileInputStream (GFileInputStream *_ptr) { if (_ptr) (g_object_unref) ((GFileInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileInputStream (GFileInputStream **_ptr) { glib_autoptr_clear_GFileInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFileInputStream (void *_ptr) { (g_object_unref) ((GFileInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileInputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFileInputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileInputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFileInputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFileInputStream); }
# 74 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFileIOStream *GFileIOStream_autoptr; typedef GList *GFileIOStream_listautoptr; typedef GSList *GFileIOStream_slistautoptr; typedef GQueue *GFileIOStream_queueautoptr;
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileIOStream (GFileIOStream *_ptr) { if (_ptr) (g_object_unref) ((GFileIOStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileIOStream (GFileIOStream **_ptr) { glib_autoptr_clear_GFileIOStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFileIOStream (void *_ptr) { (g_object_unref) ((GFileIOStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileIOStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFileIOStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileIOStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFileIOStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileIOStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFileIOStream); }
# 75 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFileMonitor *GFileMonitor_autoptr; typedef GList *GFileMonitor_listautoptr; typedef GSList *GFileMonitor_slistautoptr; typedef GQueue *GFileMonitor_queueautoptr;
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileMonitor (GFileMonitor *_ptr) { if (_ptr) (g_object_unref) ((GFileMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileMonitor (GFileMonitor **_ptr) { glib_autoptr_clear_GFileMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFileMonitor (void *_ptr) { (g_object_unref) ((GFileMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileMonitor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFileMonitor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileMonitor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFileMonitor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFileMonitor); }
# 76 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFilenameCompleter *GFilenameCompleter_autoptr; typedef GList *GFilenameCompleter_listautoptr; typedef GSList *GFilenameCompleter_slistautoptr; typedef GQueue *GFilenameCompleter_queueautoptr;
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilenameCompleter (GFilenameCompleter *_ptr) { if (_ptr) (g_object_unref) ((GFilenameCompleter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilenameCompleter (GFilenameCompleter **_ptr) { glib_autoptr_clear_GFilenameCompleter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFilenameCompleter (void *_ptr) { (g_object_unref) ((GFilenameCompleter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilenameCompleter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFilenameCompleter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilenameCompleter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFilenameCompleter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilenameCompleter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFilenameCompleter); }
# 77 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFileOutputStream *GFileOutputStream_autoptr; typedef GList *GFileOutputStream_listautoptr; typedef GSList *GFileOutputStream_slistautoptr; typedef GQueue *GFileOutputStream_queueautoptr;
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFileOutputStream (GFileOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GFileOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFileOutputStream (GFileOutputStream **_ptr) { glib_autoptr_clear_GFileOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFileOutputStream (void *_ptr) { (g_object_unref) ((GFileOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFileOutputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFileOutputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFileOutputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFileOutputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFileOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFileOutputStream); }
# 78 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFilterInputStream *GFilterInputStream_autoptr; typedef GList *GFilterInputStream_listautoptr; typedef GSList *GFilterInputStream_slistautoptr; typedef GQueue *GFilterInputStream_queueautoptr;
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilterInputStream (GFilterInputStream *_ptr) { if (_ptr) (g_object_unref) ((GFilterInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilterInputStream (GFilterInputStream **_ptr) { glib_autoptr_clear_GFilterInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFilterInputStream (void *_ptr) { (g_object_unref) ((GFilterInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilterInputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFilterInputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilterInputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFilterInputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilterInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFilterInputStream); }
# 79 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GFilterOutputStream *GFilterOutputStream_autoptr; typedef GList *GFilterOutputStream_listautoptr; typedef GSList *GFilterOutputStream_slistautoptr; typedef GQueue *GFilterOutputStream_queueautoptr;
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GFilterOutputStream (GFilterOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GFilterOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GFilterOutputStream (GFilterOutputStream **_ptr) { glib_autoptr_clear_GFilterOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GFilterOutputStream (void *_ptr) { (g_object_unref) ((GFilterOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GFilterOutputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GFilterOutputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GFilterOutputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GFilterOutputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GFilterOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GFilterOutputStream); }
# 80 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GIcon *GIcon_autoptr; typedef GList *GIcon_listautoptr; typedef GSList *GIcon_slistautoptr; typedef GQueue *GIcon_queueautoptr;
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIcon (GIcon *_ptr) { if (_ptr) (g_object_unref) ((GIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIcon (GIcon **_ptr) { glib_autoptr_clear_GIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GIcon (void *_ptr) { (g_object_unref) ((GIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIcon (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GIcon); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIcon (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GIcon); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GIcon); }
# 81 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GInetAddress *GInetAddress_autoptr; typedef GList *GInetAddress_listautoptr; typedef GSList *GInetAddress_slistautoptr; typedef GQueue *GInetAddress_queueautoptr;
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetAddress (GInetAddress *_ptr) { if (_ptr) (g_object_unref) ((GInetAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetAddress (GInetAddress **_ptr) { glib_autoptr_clear_GInetAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GInetAddress (void *_ptr) { (g_object_unref) ((GInetAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetAddress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GInetAddress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetAddress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GInetAddress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GInetAddress); }
# 82 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GInetAddressMask *GInetAddressMask_autoptr; typedef GList *GInetAddressMask_listautoptr; typedef GSList *GInetAddressMask_slistautoptr; typedef GQueue *GInetAddressMask_queueautoptr;
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetAddressMask (GInetAddressMask *_ptr) { if (_ptr) (g_object_unref) ((GInetAddressMask *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetAddressMask (GInetAddressMask **_ptr) { glib_autoptr_clear_GInetAddressMask (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GInetAddressMask (void *_ptr) { (g_object_unref) ((GInetAddressMask *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetAddressMask (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GInetAddressMask); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetAddressMask (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GInetAddressMask); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetAddressMask (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GInetAddressMask); }
# 83 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GInetSocketAddress *GInetSocketAddress_autoptr; typedef GList *GInetSocketAddress_listautoptr; typedef GSList *GInetSocketAddress_slistautoptr; typedef GQueue *GInetSocketAddress_queueautoptr;
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInetSocketAddress (GInetSocketAddress *_ptr) { if (_ptr) (g_object_unref) ((GInetSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInetSocketAddress (GInetSocketAddress **_ptr) { glib_autoptr_clear_GInetSocketAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GInetSocketAddress (void *_ptr) { (g_object_unref) ((GInetSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInetSocketAddress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GInetSocketAddress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInetSocketAddress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GInetSocketAddress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInetSocketAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GInetSocketAddress); }
# 84 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GInitable *GInitable_autoptr; typedef GList *GInitable_listautoptr; typedef GSList *GInitable_slistautoptr; typedef GQueue *GInitable_queueautoptr;
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInitable (GInitable *_ptr) { if (_ptr) (g_object_unref) ((GInitable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInitable (GInitable **_ptr) { glib_autoptr_clear_GInitable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GInitable (void *_ptr) { (g_object_unref) ((GInitable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInitable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GInitable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInitable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GInitable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInitable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GInitable); }
# 85 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GInputStream *GInputStream_autoptr; typedef GList *GInputStream_listautoptr; typedef GSList *GInputStream_slistautoptr; typedef GQueue *GInputStream_queueautoptr;
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GInputStream (GInputStream *_ptr) { if (_ptr) (g_object_unref) ((GInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GInputStream (GInputStream **_ptr) { glib_autoptr_clear_GInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GInputStream (void *_ptr) { (g_object_unref) ((GInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GInputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GInputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GInputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GInputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GInputStream); }
# 86 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GIOModule *GIOModule_autoptr; typedef GList *GIOModule_listautoptr; typedef GSList *GIOModule_slistautoptr; typedef GQueue *GIOModule_queueautoptr;
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOModule (GIOModule *_ptr) { if (_ptr) (g_object_unref) ((GIOModule *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOModule (GIOModule **_ptr) { glib_autoptr_clear_GIOModule (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GIOModule (void *_ptr) { (g_object_unref) ((GIOModule *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOModule (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GIOModule); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOModule (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GIOModule); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOModule (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GIOModule); }
# 87 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GIOStream *GIOStream_autoptr; typedef GList *GIOStream_listautoptr; typedef GSList *GIOStream_slistautoptr; typedef GQueue *GIOStream_queueautoptr;
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GIOStream (GIOStream *_ptr) { if (_ptr) (g_object_unref) ((GIOStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GIOStream (GIOStream **_ptr) { glib_autoptr_clear_GIOStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GIOStream (void *_ptr) { (g_object_unref) ((GIOStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GIOStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GIOStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GIOStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GIOStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GIOStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GIOStream); }
# 88 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GLoadableIcon *GLoadableIcon_autoptr; typedef GList *GLoadableIcon_listautoptr; typedef GSList *GLoadableIcon_slistautoptr; typedef GQueue *GLoadableIcon_queueautoptr;
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GLoadableIcon (GLoadableIcon *_ptr) { if (_ptr) (g_object_unref) ((GLoadableIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GLoadableIcon (GLoadableIcon **_ptr) { glib_autoptr_clear_GLoadableIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GLoadableIcon (void *_ptr) { (g_object_unref) ((GLoadableIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GLoadableIcon (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GLoadableIcon); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GLoadableIcon (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GLoadableIcon); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GLoadableIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GLoadableIcon); }
# 89 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMemoryInputStream *GMemoryInputStream_autoptr; typedef GList *GMemoryInputStream_listautoptr; typedef GSList *GMemoryInputStream_slistautoptr; typedef GQueue *GMemoryInputStream_queueautoptr;
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryInputStream (GMemoryInputStream *_ptr) { if (_ptr) (g_object_unref) ((GMemoryInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryInputStream (GMemoryInputStream **_ptr) { glib_autoptr_clear_GMemoryInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMemoryInputStream (void *_ptr) { (g_object_unref) ((GMemoryInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryInputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMemoryInputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryInputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMemoryInputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMemoryInputStream); }
# 90 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMemoryOutputStream *GMemoryOutputStream_autoptr; typedef GList *GMemoryOutputStream_listautoptr; typedef GSList *GMemoryOutputStream_slistautoptr; typedef GQueue *GMemoryOutputStream_queueautoptr;
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMemoryOutputStream (GMemoryOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GMemoryOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMemoryOutputStream (GMemoryOutputStream **_ptr) { glib_autoptr_clear_GMemoryOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMemoryOutputStream (void *_ptr) { (g_object_unref) ((GMemoryOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMemoryOutputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMemoryOutputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMemoryOutputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMemoryOutputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMemoryOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMemoryOutputStream); }
# 91 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMenu *GMenu_autoptr; typedef GList *GMenu_listautoptr; typedef GSList *GMenu_slistautoptr; typedef GQueue *GMenu_queueautoptr;
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenu (GMenu *_ptr) { if (_ptr) (g_object_unref) ((GMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenu (GMenu **_ptr) { glib_autoptr_clear_GMenu (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMenu (void *_ptr) { (g_object_unref) ((GMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenu (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMenu); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenu (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMenu); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenu (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMenu); }
# 92 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMenuItem *GMenuItem_autoptr; typedef GList *GMenuItem_listautoptr; typedef GSList *GMenuItem_slistautoptr; typedef GQueue *GMenuItem_queueautoptr;
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuItem (GMenuItem *_ptr) { if (_ptr) (g_object_unref) ((GMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuItem (GMenuItem **_ptr) { glib_autoptr_clear_GMenuItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMenuItem (void *_ptr) { (g_object_unref) ((GMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuItem (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMenuItem); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuItem (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMenuItem); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMenuItem); }
# 93 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMenuModel *GMenuModel_autoptr; typedef GList *GMenuModel_listautoptr; typedef GSList *GMenuModel_slistautoptr; typedef GQueue *GMenuModel_queueautoptr;
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuModel (GMenuModel *_ptr) { if (_ptr) (g_object_unref) ((GMenuModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuModel (GMenuModel **_ptr) { glib_autoptr_clear_GMenuModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMenuModel (void *_ptr) { (g_object_unref) ((GMenuModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuModel (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMenuModel); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuModel (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMenuModel); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMenuModel); }
# 94 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMenuAttributeIter *GMenuAttributeIter_autoptr; typedef GList *GMenuAttributeIter_listautoptr; typedef GSList *GMenuAttributeIter_slistautoptr; typedef GQueue *GMenuAttributeIter_queueautoptr;
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuAttributeIter (GMenuAttributeIter *_ptr) { if (_ptr) (g_object_unref) ((GMenuAttributeIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuAttributeIter (GMenuAttributeIter **_ptr) { glib_autoptr_clear_GMenuAttributeIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMenuAttributeIter (void *_ptr) { (g_object_unref) ((GMenuAttributeIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuAttributeIter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMenuAttributeIter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuAttributeIter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMenuAttributeIter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuAttributeIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMenuAttributeIter); }
# 95 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMenuLinkIter *GMenuLinkIter_autoptr; typedef GList *GMenuLinkIter_listautoptr; typedef GSList *GMenuLinkIter_slistautoptr; typedef GQueue *GMenuLinkIter_queueautoptr;
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMenuLinkIter (GMenuLinkIter *_ptr) { if (_ptr) (g_object_unref) ((GMenuLinkIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMenuLinkIter (GMenuLinkIter **_ptr) { glib_autoptr_clear_GMenuLinkIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMenuLinkIter (void *_ptr) { (g_object_unref) ((GMenuLinkIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMenuLinkIter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMenuLinkIter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMenuLinkIter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMenuLinkIter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMenuLinkIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMenuLinkIter); }
# 96 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMount *GMount_autoptr; typedef GList *GMount_listautoptr; typedef GSList *GMount_slistautoptr; typedef GQueue *GMount_queueautoptr;
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMount (GMount *_ptr) { if (_ptr) (g_object_unref) ((GMount *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMount (GMount **_ptr) { glib_autoptr_clear_GMount (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMount (void *_ptr) { (g_object_unref) ((GMount *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMount (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMount); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMount (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMount); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMount (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMount); }
# 97 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GMountOperation *GMountOperation_autoptr; typedef GList *GMountOperation_listautoptr; typedef GSList *GMountOperation_slistautoptr; typedef GQueue *GMountOperation_queueautoptr;
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GMountOperation (GMountOperation *_ptr) { if (_ptr) (g_object_unref) ((GMountOperation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GMountOperation (GMountOperation **_ptr) { glib_autoptr_clear_GMountOperation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GMountOperation (void *_ptr) { (g_object_unref) ((GMountOperation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GMountOperation (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GMountOperation); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GMountOperation (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GMountOperation); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GMountOperation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GMountOperation); }
# 98 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GNativeVolumeMonitor *GNativeVolumeMonitor_autoptr; typedef GList *GNativeVolumeMonitor_listautoptr; typedef GSList *GNativeVolumeMonitor_slistautoptr; typedef GQueue *GNativeVolumeMonitor_queueautoptr;
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNativeVolumeMonitor (GNativeVolumeMonitor *_ptr) { if (_ptr) (g_object_unref) ((GNativeVolumeMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNativeVolumeMonitor (GNativeVolumeMonitor **_ptr) { glib_autoptr_clear_GNativeVolumeMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GNativeVolumeMonitor (void *_ptr) { (g_object_unref) ((GNativeVolumeMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNativeVolumeMonitor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GNativeVolumeMonitor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNativeVolumeMonitor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GNativeVolumeMonitor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNativeVolumeMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GNativeVolumeMonitor); }
# 99 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GNetworkAddress *GNetworkAddress_autoptr; typedef GList *GNetworkAddress_listautoptr; typedef GSList *GNetworkAddress_slistautoptr; typedef GQueue *GNetworkAddress_queueautoptr;
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkAddress (GNetworkAddress *_ptr) { if (_ptr) (g_object_unref) ((GNetworkAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkAddress (GNetworkAddress **_ptr) { glib_autoptr_clear_GNetworkAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GNetworkAddress (void *_ptr) { (g_object_unref) ((GNetworkAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkAddress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GNetworkAddress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkAddress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GNetworkAddress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GNetworkAddress); }
# 100 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GNetworkMonitor *GNetworkMonitor_autoptr; typedef GList *GNetworkMonitor_listautoptr; typedef GSList *GNetworkMonitor_slistautoptr; typedef GQueue *GNetworkMonitor_queueautoptr;
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkMonitor (GNetworkMonitor *_ptr) { if (_ptr) (g_object_unref) ((GNetworkMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkMonitor (GNetworkMonitor **_ptr) { glib_autoptr_clear_GNetworkMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GNetworkMonitor (void *_ptr) { (g_object_unref) ((GNetworkMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkMonitor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GNetworkMonitor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkMonitor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GNetworkMonitor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GNetworkMonitor); }
# 101 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GNetworkService *GNetworkService_autoptr; typedef GList *GNetworkService_listautoptr; typedef GSList *GNetworkService_slistautoptr; typedef GQueue *GNetworkService_queueautoptr;
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNetworkService (GNetworkService *_ptr) { if (_ptr) (g_object_unref) ((GNetworkService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNetworkService (GNetworkService **_ptr) { glib_autoptr_clear_GNetworkService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GNetworkService (void *_ptr) { (g_object_unref) ((GNetworkService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNetworkService (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GNetworkService); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNetworkService (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GNetworkService); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNetworkService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GNetworkService); }
# 102 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GNotification *GNotification_autoptr; typedef GList *GNotification_listautoptr; typedef GSList *GNotification_slistautoptr; typedef GQueue *GNotification_queueautoptr;
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GNotification (GNotification *_ptr) { if (_ptr) (g_object_unref) ((GNotification *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GNotification (GNotification **_ptr) { glib_autoptr_clear_GNotification (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GNotification (void *_ptr) { (g_object_unref) ((GNotification *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GNotification (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GNotification); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GNotification (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GNotification); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GNotification (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GNotification); }
# 103 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GOutputStream *GOutputStream_autoptr; typedef GList *GOutputStream_listautoptr; typedef GSList *GOutputStream_slistautoptr; typedef GQueue *GOutputStream_queueautoptr;
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GOutputStream (GOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GOutputStream (GOutputStream **_ptr) { glib_autoptr_clear_GOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GOutputStream (void *_ptr) { (g_object_unref) ((GOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GOutputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GOutputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GOutputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GOutputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GOutputStream); }
# 104 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GPermission *GPermission_autoptr; typedef GList *GPermission_listautoptr; typedef GSList *GPermission_slistautoptr; typedef GQueue *GPermission_queueautoptr;
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPermission (GPermission *_ptr) { if (_ptr) (g_object_unref) ((GPermission *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPermission (GPermission **_ptr) { glib_autoptr_clear_GPermission (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GPermission (void *_ptr) { (g_object_unref) ((GPermission *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPermission (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GPermission); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPermission (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GPermission); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPermission (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GPermission); }
# 105 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GPollableInputStream *GPollableInputStream_autoptr; typedef GList *GPollableInputStream_listautoptr; typedef GSList *GPollableInputStream_slistautoptr; typedef GQueue *GPollableInputStream_queueautoptr;
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPollableInputStream (GPollableInputStream *_ptr) { if (_ptr) (g_object_unref) ((GPollableInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPollableInputStream (GPollableInputStream **_ptr) { glib_autoptr_clear_GPollableInputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GPollableInputStream (void *_ptr) { (g_object_unref) ((GPollableInputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPollableInputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GPollableInputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPollableInputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GPollableInputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPollableInputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GPollableInputStream); }
# 106 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GPollableOutputStream *GPollableOutputStream_autoptr; typedef GList *GPollableOutputStream_listautoptr; typedef GSList *GPollableOutputStream_slistautoptr; typedef GQueue *GPollableOutputStream_queueautoptr;
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPollableOutputStream (GPollableOutputStream *_ptr) { if (_ptr) (g_object_unref) ((GPollableOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPollableOutputStream (GPollableOutputStream **_ptr) { glib_autoptr_clear_GPollableOutputStream (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GPollableOutputStream (void *_ptr) { (g_object_unref) ((GPollableOutputStream *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPollableOutputStream (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GPollableOutputStream); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPollableOutputStream (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GPollableOutputStream); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPollableOutputStream (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GPollableOutputStream); }
# 107 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GPropertyAction *GPropertyAction_autoptr; typedef GList *GPropertyAction_listautoptr; typedef GSList *GPropertyAction_slistautoptr; typedef GQueue *GPropertyAction_queueautoptr;
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GPropertyAction (GPropertyAction *_ptr) { if (_ptr) (g_object_unref) ((GPropertyAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GPropertyAction (GPropertyAction **_ptr) { glib_autoptr_clear_GPropertyAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GPropertyAction (void *_ptr) { (g_object_unref) ((GPropertyAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GPropertyAction (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GPropertyAction); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GPropertyAction (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GPropertyAction); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GPropertyAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GPropertyAction); }
# 108 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GProxyAddressEnumerator *GProxyAddressEnumerator_autoptr; typedef GList *GProxyAddressEnumerator_listautoptr; typedef GSList *GProxyAddressEnumerator_slistautoptr; typedef GQueue *GProxyAddressEnumerator_queueautoptr;
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyAddressEnumerator (GProxyAddressEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GProxyAddressEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyAddressEnumerator (GProxyAddressEnumerator **_ptr) { glib_autoptr_clear_GProxyAddressEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GProxyAddressEnumerator (void *_ptr) { (g_object_unref) ((GProxyAddressEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyAddressEnumerator (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GProxyAddressEnumerator); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyAddressEnumerator (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GProxyAddressEnumerator); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyAddressEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GProxyAddressEnumerator); }
# 109 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GProxyAddress *GProxyAddress_autoptr; typedef GList *GProxyAddress_listautoptr; typedef GSList *GProxyAddress_slistautoptr; typedef GQueue *GProxyAddress_queueautoptr;
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyAddress (GProxyAddress *_ptr) { if (_ptr) (g_object_unref) ((GProxyAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyAddress (GProxyAddress **_ptr) { glib_autoptr_clear_GProxyAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GProxyAddress (void *_ptr) { (g_object_unref) ((GProxyAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyAddress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GProxyAddress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyAddress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GProxyAddress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GProxyAddress); }
# 110 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GProxy *GProxy_autoptr; typedef GList *GProxy_listautoptr; typedef GSList *GProxy_slistautoptr; typedef GQueue *GProxy_queueautoptr;
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxy (GProxy *_ptr) { if (_ptr) (g_object_unref) ((GProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxy (GProxy **_ptr) { glib_autoptr_clear_GProxy (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GProxy (void *_ptr) { (g_object_unref) ((GProxy *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxy (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GProxy); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxy (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GProxy); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxy (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GProxy); }
# 111 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GProxyResolver *GProxyResolver_autoptr; typedef GList *GProxyResolver_listautoptr; typedef GSList *GProxyResolver_slistautoptr; typedef GQueue *GProxyResolver_queueautoptr;
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GProxyResolver (GProxyResolver *_ptr) { if (_ptr) (g_object_unref) ((GProxyResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GProxyResolver (GProxyResolver **_ptr) { glib_autoptr_clear_GProxyResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GProxyResolver (void *_ptr) { (g_object_unref) ((GProxyResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GProxyResolver (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GProxyResolver); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GProxyResolver (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GProxyResolver); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GProxyResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GProxyResolver); }
# 112 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GRemoteActionGroup *GRemoteActionGroup_autoptr; typedef GList *GRemoteActionGroup_listautoptr; typedef GSList *GRemoteActionGroup_slistautoptr; typedef GQueue *GRemoteActionGroup_queueautoptr;
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GRemoteActionGroup (GRemoteActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GRemoteActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GRemoteActionGroup (GRemoteActionGroup **_ptr) { glib_autoptr_clear_GRemoteActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GRemoteActionGroup (void *_ptr) { (g_object_unref) ((GRemoteActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GRemoteActionGroup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GRemoteActionGroup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GRemoteActionGroup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GRemoteActionGroup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GRemoteActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GRemoteActionGroup); }
# 113 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GResolver *GResolver_autoptr; typedef GList *GResolver_listautoptr; typedef GSList *GResolver_slistautoptr; typedef GQueue *GResolver_queueautoptr;
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GResolver (GResolver *_ptr) { if (_ptr) (g_object_unref) ((GResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GResolver (GResolver **_ptr) { glib_autoptr_clear_GResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GResolver (void *_ptr) { (g_object_unref) ((GResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GResolver (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GResolver); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GResolver (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GResolver); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GResolver); }
# 114 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GResource *GResource_autoptr; typedef GList *GResource_listautoptr; typedef GSList *GResource_slistautoptr; typedef GQueue *GResource_queueautoptr;
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GResource (GResource *_ptr) { if (_ptr) (g_resource_unref) ((GResource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GResource (GResource **_ptr) { glib_autoptr_clear_GResource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GResource (void *_ptr) { (g_resource_unref) ((GResource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GResource (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GResource); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GResource (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GResource); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GResource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GResource); }
# 115 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSeekable *GSeekable_autoptr; typedef GList *GSeekable_listautoptr; typedef GSList *GSeekable_slistautoptr; typedef GQueue *GSeekable_queueautoptr;
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSeekable (GSeekable *_ptr) { if (_ptr) (g_object_unref) ((GSeekable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSeekable (GSeekable **_ptr) { glib_autoptr_clear_GSeekable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSeekable (void *_ptr) { (g_object_unref) ((GSeekable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSeekable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSeekable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSeekable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSeekable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSeekable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSeekable); }
# 116 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSettingsBackend *GSettingsBackend_autoptr; typedef GList *GSettingsBackend_listautoptr; typedef GSList *GSettingsBackend_slistautoptr; typedef GQueue *GSettingsBackend_queueautoptr;
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsBackend (GSettingsBackend *_ptr) { if (_ptr) (g_object_unref) ((GSettingsBackend *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsBackend (GSettingsBackend **_ptr) { glib_autoptr_clear_GSettingsBackend (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSettingsBackend (void *_ptr) { (g_object_unref) ((GSettingsBackend *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsBackend (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSettingsBackend); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsBackend (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSettingsBackend); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsBackend (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSettingsBackend); }
# 117 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSettingsSchema *GSettingsSchema_autoptr; typedef GList *GSettingsSchema_listautoptr; typedef GSList *GSettingsSchema_slistautoptr; typedef GQueue *GSettingsSchema_queueautoptr;
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchema (GSettingsSchema *_ptr) { if (_ptr) (g_settings_schema_unref) ((GSettingsSchema *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchema (GSettingsSchema **_ptr) { glib_autoptr_clear_GSettingsSchema (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSettingsSchema (void *_ptr) { (g_settings_schema_unref) ((GSettingsSchema *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchema (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSettingsSchema); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchema (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSettingsSchema); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchema (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSettingsSchema); }
# 118 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSettingsSchemaKey *GSettingsSchemaKey_autoptr; typedef GList *GSettingsSchemaKey_listautoptr; typedef GSList *GSettingsSchemaKey_slistautoptr; typedef GQueue *GSettingsSchemaKey_queueautoptr;
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchemaKey (GSettingsSchemaKey *_ptr) { if (_ptr) (g_settings_schema_key_unref) ((GSettingsSchemaKey *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchemaKey (GSettingsSchemaKey **_ptr) { glib_autoptr_clear_GSettingsSchemaKey (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSettingsSchemaKey (void *_ptr) { (g_settings_schema_key_unref) ((GSettingsSchemaKey *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchemaKey (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSettingsSchemaKey); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchemaKey (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSettingsSchemaKey); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchemaKey (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSettingsSchemaKey); }
# 119 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSettingsSchemaSource *GSettingsSchemaSource_autoptr; typedef GList *GSettingsSchemaSource_listautoptr; typedef GSList *GSettingsSchemaSource_slistautoptr; typedef GQueue *GSettingsSchemaSource_queueautoptr;
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettingsSchemaSource (GSettingsSchemaSource *_ptr) { if (_ptr) (g_settings_schema_source_unref) ((GSettingsSchemaSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettingsSchemaSource (GSettingsSchemaSource **_ptr) { glib_autoptr_clear_GSettingsSchemaSource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSettingsSchemaSource (void *_ptr) { (g_settings_schema_source_unref) ((GSettingsSchemaSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettingsSchemaSource (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSettingsSchemaSource); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettingsSchemaSource (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSettingsSchemaSource); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettingsSchemaSource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSettingsSchemaSource); }
# 120 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSettings *GSettings_autoptr; typedef GList *GSettings_listautoptr; typedef GSList *GSettings_slistautoptr; typedef GQueue *GSettings_queueautoptr;
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSettings (GSettings *_ptr) { if (_ptr) (g_object_unref) ((GSettings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSettings (GSettings **_ptr) { glib_autoptr_clear_GSettings (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSettings (void *_ptr) { (g_object_unref) ((GSettings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSettings (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSettings); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSettings (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSettings); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSettings (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSettings); }
# 121 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSimpleActionGroup *GSimpleActionGroup_autoptr; typedef GList *GSimpleActionGroup_listautoptr; typedef GSList *GSimpleActionGroup_slistautoptr; typedef GQueue *GSimpleActionGroup_queueautoptr;
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleActionGroup (GSimpleActionGroup *_ptr) { if (_ptr) (g_object_unref) ((GSimpleActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleActionGroup (GSimpleActionGroup **_ptr) { glib_autoptr_clear_GSimpleActionGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSimpleActionGroup (void *_ptr) { (g_object_unref) ((GSimpleActionGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleActionGroup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSimpleActionGroup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleActionGroup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSimpleActionGroup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleActionGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSimpleActionGroup); }
# 122 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSimpleAction *GSimpleAction_autoptr; typedef GList *GSimpleAction_listautoptr; typedef GSList *GSimpleAction_slistautoptr; typedef GQueue *GSimpleAction_queueautoptr;
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleAction (GSimpleAction *_ptr) { if (_ptr) (g_object_unref) ((GSimpleAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleAction (GSimpleAction **_ptr) { glib_autoptr_clear_GSimpleAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSimpleAction (void *_ptr) { (g_object_unref) ((GSimpleAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleAction (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSimpleAction); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleAction (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSimpleAction); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSimpleAction); }
# 123 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSimpleAsyncResult *GSimpleAsyncResult_autoptr; typedef GList *GSimpleAsyncResult_listautoptr; typedef GSList *GSimpleAsyncResult_slistautoptr; typedef GQueue *GSimpleAsyncResult_queueautoptr;
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleAsyncResult (GSimpleAsyncResult *_ptr) { if (_ptr) (g_object_unref) ((GSimpleAsyncResult *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleAsyncResult (GSimpleAsyncResult **_ptr) { glib_autoptr_clear_GSimpleAsyncResult (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSimpleAsyncResult (void *_ptr) { (g_object_unref) ((GSimpleAsyncResult *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleAsyncResult (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSimpleAsyncResult); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleAsyncResult (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSimpleAsyncResult); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleAsyncResult (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSimpleAsyncResult); }
# 124 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSimplePermission *GSimplePermission_autoptr; typedef GList *GSimplePermission_listautoptr; typedef GSList *GSimplePermission_slistautoptr; typedef GQueue *GSimplePermission_queueautoptr;
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimplePermission (GSimplePermission *_ptr) { if (_ptr) (g_object_unref) ((GSimplePermission *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimplePermission (GSimplePermission **_ptr) { glib_autoptr_clear_GSimplePermission (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSimplePermission (void *_ptr) { (g_object_unref) ((GSimplePermission *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimplePermission (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSimplePermission); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimplePermission (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSimplePermission); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimplePermission (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSimplePermission); }
# 125 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSimpleProxyResolver *GSimpleProxyResolver_autoptr; typedef GList *GSimpleProxyResolver_listautoptr; typedef GSList *GSimpleProxyResolver_slistautoptr; typedef GQueue *GSimpleProxyResolver_queueautoptr;
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSimpleProxyResolver (GSimpleProxyResolver *_ptr) { if (_ptr) (g_object_unref) ((GSimpleProxyResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSimpleProxyResolver (GSimpleProxyResolver **_ptr) { glib_autoptr_clear_GSimpleProxyResolver (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSimpleProxyResolver (void *_ptr) { (g_object_unref) ((GSimpleProxyResolver *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSimpleProxyResolver (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSimpleProxyResolver); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSimpleProxyResolver (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSimpleProxyResolver); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSimpleProxyResolver (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSimpleProxyResolver); }
# 126 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocketAddressEnumerator *GSocketAddressEnumerator_autoptr; typedef GList *GSocketAddressEnumerator_listautoptr; typedef GSList *GSocketAddressEnumerator_slistautoptr; typedef GQueue *GSocketAddressEnumerator_queueautoptr;
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketAddressEnumerator (GSocketAddressEnumerator *_ptr) { if (_ptr) (g_object_unref) ((GSocketAddressEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketAddressEnumerator (GSocketAddressEnumerator **_ptr) { glib_autoptr_clear_GSocketAddressEnumerator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocketAddressEnumerator (void *_ptr) { (g_object_unref) ((GSocketAddressEnumerator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketAddressEnumerator (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocketAddressEnumerator); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketAddressEnumerator (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocketAddressEnumerator); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketAddressEnumerator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocketAddressEnumerator); }
# 127 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocketAddress *GSocketAddress_autoptr; typedef GList *GSocketAddress_listautoptr; typedef GSList *GSocketAddress_slistautoptr; typedef GQueue *GSocketAddress_queueautoptr;
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketAddress (GSocketAddress *_ptr) { if (_ptr) (g_object_unref) ((GSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketAddress (GSocketAddress **_ptr) { glib_autoptr_clear_GSocketAddress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocketAddress (void *_ptr) { (g_object_unref) ((GSocketAddress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketAddress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocketAddress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketAddress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocketAddress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketAddress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocketAddress); }
# 128 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocketClient *GSocketClient_autoptr; typedef GList *GSocketClient_listautoptr; typedef GSList *GSocketClient_slistautoptr; typedef GQueue *GSocketClient_queueautoptr;
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketClient (GSocketClient *_ptr) { if (_ptr) (g_object_unref) ((GSocketClient *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketClient (GSocketClient **_ptr) { glib_autoptr_clear_GSocketClient (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocketClient (void *_ptr) { (g_object_unref) ((GSocketClient *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketClient (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocketClient); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketClient (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocketClient); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketClient (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocketClient); }
# 129 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocketConnectable *GSocketConnectable_autoptr; typedef GList *GSocketConnectable_listautoptr; typedef GSList *GSocketConnectable_slistautoptr; typedef GQueue *GSocketConnectable_queueautoptr;
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketConnectable (GSocketConnectable *_ptr) { if (_ptr) (g_object_unref) ((GSocketConnectable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketConnectable (GSocketConnectable **_ptr) { glib_autoptr_clear_GSocketConnectable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocketConnectable (void *_ptr) { (g_object_unref) ((GSocketConnectable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketConnectable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocketConnectable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketConnectable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocketConnectable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketConnectable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocketConnectable); }
# 130 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocketConnection *GSocketConnection_autoptr; typedef GList *GSocketConnection_listautoptr; typedef GSList *GSocketConnection_slistautoptr; typedef GQueue *GSocketConnection_queueautoptr;
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketConnection (GSocketConnection *_ptr) { if (_ptr) (g_object_unref) ((GSocketConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketConnection (GSocketConnection **_ptr) { glib_autoptr_clear_GSocketConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocketConnection (void *_ptr) { (g_object_unref) ((GSocketConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketConnection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocketConnection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketConnection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocketConnection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocketConnection); }
# 131 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocketControlMessage *GSocketControlMessage_autoptr; typedef GList *GSocketControlMessage_listautoptr; typedef GSList *GSocketControlMessage_slistautoptr; typedef GQueue *GSocketControlMessage_queueautoptr;
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketControlMessage (GSocketControlMessage *_ptr) { if (_ptr) (g_object_unref) ((GSocketControlMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketControlMessage (GSocketControlMessage **_ptr) { glib_autoptr_clear_GSocketControlMessage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocketControlMessage (void *_ptr) { (g_object_unref) ((GSocketControlMessage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketControlMessage (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocketControlMessage); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketControlMessage (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocketControlMessage); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketControlMessage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocketControlMessage); }
# 132 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocket *GSocket_autoptr; typedef GList *GSocket_listautoptr; typedef GSList *GSocket_slistautoptr; typedef GQueue *GSocket_queueautoptr;
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocket (GSocket *_ptr) { if (_ptr) (g_object_unref) ((GSocket *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocket (GSocket **_ptr) { glib_autoptr_clear_GSocket (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocket (void *_ptr) { (g_object_unref) ((GSocket *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocket (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocket); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocket (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocket); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocket (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocket); }
# 133 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocketListener *GSocketListener_autoptr; typedef GList *GSocketListener_listautoptr; typedef GSList *GSocketListener_slistautoptr; typedef GQueue *GSocketListener_queueautoptr;
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketListener (GSocketListener *_ptr) { if (_ptr) (g_object_unref) ((GSocketListener *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketListener (GSocketListener **_ptr) { glib_autoptr_clear_GSocketListener (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocketListener (void *_ptr) { (g_object_unref) ((GSocketListener *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketListener (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocketListener); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketListener (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocketListener); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketListener (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocketListener); }
# 134 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSocketService *GSocketService_autoptr; typedef GList *GSocketService_listautoptr; typedef GSList *GSocketService_slistautoptr; typedef GQueue *GSocketService_queueautoptr;
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSocketService (GSocketService *_ptr) { if (_ptr) (g_object_unref) ((GSocketService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSocketService (GSocketService **_ptr) { glib_autoptr_clear_GSocketService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSocketService (void *_ptr) { (g_object_unref) ((GSocketService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSocketService (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSocketService); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSocketService (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSocketService); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSocketService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSocketService); }
# 135 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSubprocess *GSubprocess_autoptr; typedef GList *GSubprocess_listautoptr; typedef GSList *GSubprocess_slistautoptr; typedef GQueue *GSubprocess_queueautoptr;
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSubprocess (GSubprocess *_ptr) { if (_ptr) (g_object_unref) ((GSubprocess *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSubprocess (GSubprocess **_ptr) { glib_autoptr_clear_GSubprocess (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSubprocess (void *_ptr) { (g_object_unref) ((GSubprocess *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSubprocess (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSubprocess); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSubprocess (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSubprocess); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSubprocess (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSubprocess); }
# 136 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GSubprocessLauncher *GSubprocessLauncher_autoptr; typedef GList *GSubprocessLauncher_listautoptr; typedef GSList *GSubprocessLauncher_slistautoptr; typedef GQueue *GSubprocessLauncher_queueautoptr;
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GSubprocessLauncher (GSubprocessLauncher *_ptr) { if (_ptr) (g_object_unref) ((GSubprocessLauncher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GSubprocessLauncher (GSubprocessLauncher **_ptr) { glib_autoptr_clear_GSubprocessLauncher (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GSubprocessLauncher (void *_ptr) { (g_object_unref) ((GSubprocessLauncher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GSubprocessLauncher (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GSubprocessLauncher); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GSubprocessLauncher (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GSubprocessLauncher); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GSubprocessLauncher (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GSubprocessLauncher); }
# 137 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTask *GTask_autoptr; typedef GList *GTask_listautoptr; typedef GSList *GTask_slistautoptr; typedef GQueue *GTask_queueautoptr;
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTask (GTask *_ptr) { if (_ptr) (g_object_unref) ((GTask *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTask (GTask **_ptr) { glib_autoptr_clear_GTask (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTask (void *_ptr) { (g_object_unref) ((GTask *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTask (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTask); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTask (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTask); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTask (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTask); }
# 138 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTcpConnection *GTcpConnection_autoptr; typedef GList *GTcpConnection_listautoptr; typedef GSList *GTcpConnection_slistautoptr; typedef GQueue *GTcpConnection_queueautoptr;
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTcpConnection (GTcpConnection *_ptr) { if (_ptr) (g_object_unref) ((GTcpConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTcpConnection (GTcpConnection **_ptr) { glib_autoptr_clear_GTcpConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTcpConnection (void *_ptr) { (g_object_unref) ((GTcpConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTcpConnection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTcpConnection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTcpConnection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTcpConnection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTcpConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTcpConnection); }
# 139 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTcpWrapperConnection *GTcpWrapperConnection_autoptr; typedef GList *GTcpWrapperConnection_listautoptr; typedef GSList *GTcpWrapperConnection_slistautoptr; typedef GQueue *GTcpWrapperConnection_queueautoptr;
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTcpWrapperConnection (GTcpWrapperConnection *_ptr) { if (_ptr) (g_object_unref) ((GTcpWrapperConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTcpWrapperConnection (GTcpWrapperConnection **_ptr) { glib_autoptr_clear_GTcpWrapperConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTcpWrapperConnection (void *_ptr) { (g_object_unref) ((GTcpWrapperConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTcpWrapperConnection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTcpWrapperConnection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTcpWrapperConnection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTcpWrapperConnection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTcpWrapperConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTcpWrapperConnection); }
# 140 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTestDBus *GTestDBus_autoptr; typedef GList *GTestDBus_listautoptr; typedef GSList *GTestDBus_slistautoptr; typedef GQueue *GTestDBus_queueautoptr;
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTestDBus (GTestDBus *_ptr) { if (_ptr) (g_object_unref) ((GTestDBus *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTestDBus (GTestDBus **_ptr) { glib_autoptr_clear_GTestDBus (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTestDBus (void *_ptr) { (g_object_unref) ((GTestDBus *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTestDBus (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTestDBus); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTestDBus (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTestDBus); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTestDBus (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTestDBus); }
# 141 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GThemedIcon *GThemedIcon_autoptr; typedef GList *GThemedIcon_listautoptr; typedef GSList *GThemedIcon_slistautoptr; typedef GQueue *GThemedIcon_queueautoptr;
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThemedIcon (GThemedIcon *_ptr) { if (_ptr) (g_object_unref) ((GThemedIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThemedIcon (GThemedIcon **_ptr) { glib_autoptr_clear_GThemedIcon (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GThemedIcon (void *_ptr) { (g_object_unref) ((GThemedIcon *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThemedIcon (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GThemedIcon); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThemedIcon (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GThemedIcon); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThemedIcon (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GThemedIcon); }
# 142 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GThreadedSocketService *GThreadedSocketService_autoptr; typedef GList *GThreadedSocketService_listautoptr; typedef GSList *GThreadedSocketService_slistautoptr; typedef GQueue *GThreadedSocketService_queueautoptr;
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GThreadedSocketService (GThreadedSocketService *_ptr) { if (_ptr) (g_object_unref) ((GThreadedSocketService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GThreadedSocketService (GThreadedSocketService **_ptr) { glib_autoptr_clear_GThreadedSocketService (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GThreadedSocketService (void *_ptr) { (g_object_unref) ((GThreadedSocketService *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GThreadedSocketService (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GThreadedSocketService); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GThreadedSocketService (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GThreadedSocketService); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GThreadedSocketService (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GThreadedSocketService); }
# 143 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsBackend *GTlsBackend_autoptr; typedef GList *GTlsBackend_listautoptr; typedef GSList *GTlsBackend_slistautoptr; typedef GQueue *GTlsBackend_queueautoptr;
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsBackend (GTlsBackend *_ptr) { if (_ptr) (g_object_unref) ((GTlsBackend *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsBackend (GTlsBackend **_ptr) { glib_autoptr_clear_GTlsBackend (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsBackend (void *_ptr) { (g_object_unref) ((GTlsBackend *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsBackend (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsBackend); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsBackend (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsBackend); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsBackend (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsBackend); }
# 144 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsCertificate *GTlsCertificate_autoptr; typedef GList *GTlsCertificate_listautoptr; typedef GSList *GTlsCertificate_slistautoptr; typedef GQueue *GTlsCertificate_queueautoptr;
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsCertificate (GTlsCertificate *_ptr) { if (_ptr) (g_object_unref) ((GTlsCertificate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsCertificate (GTlsCertificate **_ptr) { glib_autoptr_clear_GTlsCertificate (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsCertificate (void *_ptr) { (g_object_unref) ((GTlsCertificate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsCertificate (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsCertificate); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsCertificate (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsCertificate); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsCertificate (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsCertificate); }
# 145 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsClientConnection *GTlsClientConnection_autoptr; typedef GList *GTlsClientConnection_listautoptr; typedef GSList *GTlsClientConnection_slistautoptr; typedef GQueue *GTlsClientConnection_queueautoptr;
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsClientConnection (GTlsClientConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsClientConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsClientConnection (GTlsClientConnection **_ptr) { glib_autoptr_clear_GTlsClientConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsClientConnection (void *_ptr) { (g_object_unref) ((GTlsClientConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsClientConnection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsClientConnection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsClientConnection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsClientConnection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsClientConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsClientConnection); }
# 146 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsConnection *GTlsConnection_autoptr; typedef GList *GTlsConnection_listautoptr; typedef GSList *GTlsConnection_slistautoptr; typedef GQueue *GTlsConnection_queueautoptr;
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsConnection (GTlsConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsConnection (GTlsConnection **_ptr) { glib_autoptr_clear_GTlsConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsConnection (void *_ptr) { (g_object_unref) ((GTlsConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsConnection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsConnection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsConnection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsConnection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsConnection); }
# 147 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsDatabase *GTlsDatabase_autoptr; typedef GList *GTlsDatabase_listautoptr; typedef GSList *GTlsDatabase_slistautoptr; typedef GQueue *GTlsDatabase_queueautoptr;
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsDatabase (GTlsDatabase *_ptr) { if (_ptr) (g_object_unref) ((GTlsDatabase *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsDatabase (GTlsDatabase **_ptr) { glib_autoptr_clear_GTlsDatabase (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsDatabase (void *_ptr) { (g_object_unref) ((GTlsDatabase *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsDatabase (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsDatabase); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsDatabase (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsDatabase); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsDatabase (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsDatabase); }
# 148 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsFileDatabase *GTlsFileDatabase_autoptr; typedef GList *GTlsFileDatabase_listautoptr; typedef GSList *GTlsFileDatabase_slistautoptr; typedef GQueue *GTlsFileDatabase_queueautoptr;
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsFileDatabase (GTlsFileDatabase *_ptr) { if (_ptr) (g_object_unref) ((GTlsFileDatabase *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsFileDatabase (GTlsFileDatabase **_ptr) { glib_autoptr_clear_GTlsFileDatabase (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsFileDatabase (void *_ptr) { (g_object_unref) ((GTlsFileDatabase *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsFileDatabase (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsFileDatabase); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsFileDatabase (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsFileDatabase); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsFileDatabase (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsFileDatabase); }
# 149 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsInteraction *GTlsInteraction_autoptr; typedef GList *GTlsInteraction_listautoptr; typedef GSList *GTlsInteraction_slistautoptr; typedef GQueue *GTlsInteraction_queueautoptr;
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsInteraction (GTlsInteraction *_ptr) { if (_ptr) (g_object_unref) ((GTlsInteraction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsInteraction (GTlsInteraction **_ptr) { glib_autoptr_clear_GTlsInteraction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsInteraction (void *_ptr) { (g_object_unref) ((GTlsInteraction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsInteraction (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsInteraction); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsInteraction (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsInteraction); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsInteraction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsInteraction); }
# 150 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsPassword *GTlsPassword_autoptr; typedef GList *GTlsPassword_listautoptr; typedef GSList *GTlsPassword_slistautoptr; typedef GQueue *GTlsPassword_queueautoptr;
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsPassword (GTlsPassword *_ptr) { if (_ptr) (g_object_unref) ((GTlsPassword *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsPassword (GTlsPassword **_ptr) { glib_autoptr_clear_GTlsPassword (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsPassword (void *_ptr) { (g_object_unref) ((GTlsPassword *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsPassword (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsPassword); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsPassword (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsPassword); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsPassword (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsPassword); }
# 151 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GTlsServerConnection *GTlsServerConnection_autoptr; typedef GList *GTlsServerConnection_listautoptr; typedef GSList *GTlsServerConnection_slistautoptr; typedef GQueue *GTlsServerConnection_queueautoptr;
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GTlsServerConnection (GTlsServerConnection *_ptr) { if (_ptr) (g_object_unref) ((GTlsServerConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GTlsServerConnection (GTlsServerConnection **_ptr) { glib_autoptr_clear_GTlsServerConnection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GTlsServerConnection (void *_ptr) { (g_object_unref) ((GTlsServerConnection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GTlsServerConnection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GTlsServerConnection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GTlsServerConnection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GTlsServerConnection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GTlsServerConnection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GTlsServerConnection); }
# 152 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GVfs *GVfs_autoptr; typedef GList *GVfs_listautoptr; typedef GSList *GVfs_slistautoptr; typedef GQueue *GVfs_queueautoptr;
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVfs (GVfs *_ptr) { if (_ptr) (g_object_unref) ((GVfs *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVfs (GVfs **_ptr) { glib_autoptr_clear_GVfs (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GVfs (void *_ptr) { (g_object_unref) ((GVfs *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVfs (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GVfs); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVfs (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GVfs); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVfs (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GVfs); }
# 153 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GVolume *GVolume_autoptr; typedef GList *GVolume_listautoptr; typedef GSList *GVolume_slistautoptr; typedef GQueue *GVolume_queueautoptr;
# 154 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 154 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 154 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVolume (GVolume *_ptr) { if (_ptr) (g_object_unref) ((GVolume *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVolume (GVolume **_ptr) { glib_autoptr_clear_GVolume (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GVolume (void *_ptr) { (g_object_unref) ((GVolume *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVolume (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GVolume); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVolume (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GVolume); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVolume (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GVolume); }
# 154 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GVolumeMonitor *GVolumeMonitor_autoptr; typedef GList *GVolumeMonitor_listautoptr; typedef GSList *GVolumeMonitor_slistautoptr; typedef GQueue *GVolumeMonitor_queueautoptr;
# 155 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 155 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 155 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GVolumeMonitor (GVolumeMonitor *_ptr) { if (_ptr) (g_object_unref) ((GVolumeMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GVolumeMonitor (GVolumeMonitor **_ptr) { glib_autoptr_clear_GVolumeMonitor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GVolumeMonitor (void *_ptr) { (g_object_unref) ((GVolumeMonitor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GVolumeMonitor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GVolumeMonitor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GVolumeMonitor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GVolumeMonitor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GVolumeMonitor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GVolumeMonitor); }
# 155 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GZlibCompressor *GZlibCompressor_autoptr; typedef GList *GZlibCompressor_listautoptr; typedef GSList *GZlibCompressor_slistautoptr; typedef GQueue *GZlibCompressor_queueautoptr;
# 156 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 156 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 156 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GZlibCompressor (GZlibCompressor *_ptr) { if (_ptr) (g_object_unref) ((GZlibCompressor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GZlibCompressor (GZlibCompressor **_ptr) { glib_autoptr_clear_GZlibCompressor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GZlibCompressor (void *_ptr) { (g_object_unref) ((GZlibCompressor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GZlibCompressor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GZlibCompressor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GZlibCompressor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GZlibCompressor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GZlibCompressor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GZlibCompressor); }
# 156 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
typedef GZlibDecompressor *GZlibDecompressor_autoptr; typedef GList *GZlibDecompressor_listautoptr; typedef GSList *GZlibDecompressor_slistautoptr; typedef GQueue *GZlibDecompressor_queueautoptr;
# 157 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic push
# 157 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 157 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GZlibDecompressor (GZlibDecompressor *_ptr) { if (_ptr) (g_object_unref) ((GZlibDecompressor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GZlibDecompressor (GZlibDecompressor **_ptr) { glib_autoptr_clear_GZlibDecompressor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GZlibDecompressor (void *_ptr) { (g_object_unref) ((GZlibDecompressor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GZlibDecompressor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GZlibDecompressor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GZlibDecompressor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GZlibDecompressor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GZlibDecompressor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GZlibDecompressor); }
# 157 "/usr/include/glib-2.0/gio/gio-autocleanups.h"
#pragma clang diagnostic pop
# 183 "/usr/include/glib-2.0/gio/gio.h" 2
# 29 "/usr/include/gtk-3.0/gdk/gdkapplaunchcontext.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 30 "/usr/include/gtk-3.0/gdk/gdkapplaunchcontext.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdktypes.h" 1
# 35 "/usr/include/gtk-3.0/gdk/gdktypes.h"
# 1 "/usr/include/pango-1.0/pango/pango.h" 1
# 25 "/usr/include/pango-1.0/pango/pango.h"
# 1 "/usr/include/pango-1.0/pango/pango-attributes.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-attributes.h"
# 1 "/usr/include/pango-1.0/pango/pango-font.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-font.h"
# 1 "/usr/include/pango-1.0/pango/pango-coverage.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-coverage.h"
# 1 "/usr/include/pango-1.0/pango/pango-version-macros.h" 1
# 23 "/usr/include/pango-1.0/pango/pango-version-macros.h"
# 1 "/usr/include/pango-1.0/pango/pango-features.h" 1
# 24 "/usr/include/pango-1.0/pango/pango-version-macros.h" 2
# 28 "/usr/include/pango-1.0/pango/pango-coverage.h" 2
# 1 "/usr/include/harfbuzz/hb.h" 1
# 31 "/usr/include/harfbuzz/hb.h"
# 1 "/usr/include/harfbuzz/hb-blob.h" 1
# 34 "/usr/include/harfbuzz/hb-blob.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 66 "/usr/include/harfbuzz/hb-common.h"
# 1 "/usr/bin/../lib/clang/19/include/inttypes.h" 1 3
# 24 "/usr/bin/../lib/clang/19/include/inttypes.h" 3
# 1 "/usr/include/inttypes.h" 1 3 4
# 27 "/usr/include/inttypes.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stdint.h" 1 3 4
# 56 "/usr/bin/../lib/clang/19/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4



# 1 "/usr/include/bits/stdint-least.h" 1 3 4
# 25 "/usr/include/bits/stdint-least.h" 3 4
typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;
# 42 "/usr/include/stdint.h" 2 3 4





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 60 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 79 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 90 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 57 "/usr/bin/../lib/clang/19/include/stdint.h" 2 3 4
# 28 "/usr/include/inttypes.h" 2 3 4






typedef int __gwchar_t;
# 332 "/usr/include/inttypes.h" 3 4
typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 351 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ )) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ ));


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ ));


extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ ));


extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ ));
# 25 "/usr/bin/../lib/clang/19/include/inttypes.h" 2 3
# 67 "/usr/include/harfbuzz/hb-common.h" 2
# 94 "/usr/include/harfbuzz/hb-common.h"
typedef int hb_bool_t;
# 103 "/usr/include/harfbuzz/hb-common.h"
typedef uint32_t hb_codepoint_t;
# 122 "/usr/include/harfbuzz/hb-common.h"
typedef int32_t hb_position_t;






typedef uint32_t hb_mask_t;

typedef union _hb_var_int_t {
  uint32_t u32;
  int32_t i32;
  uint16_t u16[2];
  int16_t i16[2];
  uint8_t u8[4];
  int8_t i8[4];
} hb_var_int_t;

typedef union _hb_var_num_t {
  float f;
  uint32_t u32;
  int32_t i32;
  uint16_t u16[2];
  int16_t i16[2];
  uint8_t u8[4];
  int8_t i8[4];
} hb_var_num_t;
# 164 "/usr/include/harfbuzz/hb-common.h"
typedef uint32_t hb_tag_t;
# 213 "/usr/include/harfbuzz/hb-common.h"
extern hb_tag_t
hb_tag_from_string (const char *str, int len);


extern void
hb_tag_to_string (hb_tag_t tag, char *buf);
# 236 "/usr/include/harfbuzz/hb-common.h"
typedef enum {
  HB_DIRECTION_INVALID = 0,
  HB_DIRECTION_LTR = 4,
  HB_DIRECTION_RTL,
  HB_DIRECTION_TTB,
  HB_DIRECTION_BTT
} hb_direction_t;


extern hb_direction_t
hb_direction_from_string (const char *str, int len);

extern const char *
hb_direction_to_string (hb_direction_t direction);
# 316 "/usr/include/harfbuzz/hb-common.h"
typedef const struct hb_language_impl_t *hb_language_t;

extern hb_language_t
hb_language_from_string (const char *str, int len);

extern const char *
hb_language_to_string (hb_language_t language);
# 333 "/usr/include/harfbuzz/hb-common.h"
extern hb_language_t
hb_language_get_default (void);

extern hb_bool_t
hb_language_matches (hb_language_t language,
       hb_language_t specific);
# 517 "/usr/include/harfbuzz/hb-common.h"
typedef enum
{
  HB_SCRIPT_COMMON = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('y')&0xFF))),
  HB_SCRIPT_INHERITED = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
  HB_SCRIPT_UNKNOWN = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('z')&0xFF)<<16)|(((uint32_t)('z')&0xFF)<<8)|((uint32_t)('z')&0xFF))),

  HB_SCRIPT_ARABIC = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
  HB_SCRIPT_ARMENIAN = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('n')&0xFF))),
  HB_SCRIPT_BENGALI = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_CYRILLIC = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('l')&0xFF))),
  HB_SCRIPT_DEVANAGARI = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('v')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_GEORGIAN = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_GREEK = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('e')&0xFF)<<8)|((uint32_t)('k')&0xFF))),
  HB_SCRIPT_GUJARATI = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('j')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_GURMUKHI = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
  HB_SCRIPT_HANGUL = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_HAN = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_HEBREW = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('b')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_HIRAGANA = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_KANNADA = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('n')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_KATAKANA = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_LAO = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_LATIN = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('n')&0xFF))),
  HB_SCRIPT_MALAYALAM = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_ORIYA = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_TAMIL = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('l')&0xFF))),
  HB_SCRIPT_TELUGU = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
  HB_SCRIPT_THAI = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('i')&0xFF))),

  HB_SCRIPT_TIBETAN = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('b')&0xFF)<<8)|((uint32_t)('t')&0xFF))),

  HB_SCRIPT_BOPOMOFO = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('p')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_BRAILLE = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_CANADIAN_SYLLABICS = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
  HB_SCRIPT_CHEROKEE = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('e')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_ETHIOPIC = ((hb_tag_t)((((uint32_t)('E')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_KHMER = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_MONGOLIAN = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_MYANMAR = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_OGHAM = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_RUNIC = ((hb_tag_t)((((uint32_t)('R')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_SINHALA = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
  HB_SCRIPT_SYRIAC = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
  HB_SCRIPT_THAANA = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_YI = ((hb_tag_t)((((uint32_t)('Y')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('i')&0xFF)<<8)|((uint32_t)('i')&0xFF))),

  HB_SCRIPT_DESERET = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
  HB_SCRIPT_GOTHIC = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
  HB_SCRIPT_OLD_ITALIC = ((hb_tag_t)((((uint32_t)('I')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('l')&0xFF))),

  HB_SCRIPT_BUHID = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
  HB_SCRIPT_HANUNOO = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_TAGALOG = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_TAGBANWA = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('b')&0xFF))),

  HB_SCRIPT_CYPRIOT = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('p')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
  HB_SCRIPT_LIMBU = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
  HB_SCRIPT_LINEAR_B = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
  HB_SCRIPT_OSMANYA = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_SHAVIAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('w')&0xFF))),
  HB_SCRIPT_TAI_LE = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('e')&0xFF))),
  HB_SCRIPT_UGARITIC = ((hb_tag_t)((((uint32_t)('U')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('r')&0xFF))),

  HB_SCRIPT_BUGINESE = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_COPTIC = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('p')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
  HB_SCRIPT_GLAGOLITIC = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_KHAROSHTHI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_NEW_TAI_LUE = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
  HB_SCRIPT_OLD_PERSIAN = ((hb_tag_t)((((uint32_t)('X')&0xFF)<<24)|(((uint32_t)('p')&0xFF)<<16)|(((uint32_t)('e')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_SYLOTI_NAGRI = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_TIFINAGH = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('f')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),

  HB_SCRIPT_BALINESE = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_CUNEIFORM = ((hb_tag_t)((((uint32_t)('X')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('u')&0xFF)<<8)|((uint32_t)('x')&0xFF))),
  HB_SCRIPT_NKO = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('k')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_PHAGS_PA = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_PHOENICIAN = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('x')&0xFF))),

  HB_SCRIPT_CARIAN = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_CHAM = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_KAYAH_LI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_LEPCHA = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('p')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
  HB_SCRIPT_LYCIAN = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('c')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_LYDIAN = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('y')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_OL_CHIKI = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('c')&0xFF)<<8)|((uint32_t)('k')&0xFF))),
  HB_SCRIPT_REJANG = ((hb_tag_t)((((uint32_t)('R')&0xFF)<<24)|(((uint32_t)('j')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_SAURASHTRA = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('u')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_SUNDANESE = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
  HB_SCRIPT_VAI = ((hb_tag_t)((((uint32_t)('V')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('i')&0xFF)<<8)|((uint32_t)('i')&0xFF))),

  HB_SCRIPT_AVESTAN = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('v')&0xFF)<<16)|(((uint32_t)('s')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
  HB_SCRIPT_BAMUM = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
  HB_SCRIPT_EGYPTIAN_HIEROGLYPHS = ((hb_tag_t)((((uint32_t)('E')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('p')&0xFF))),
  HB_SCRIPT_IMPERIAL_ARAMAIC = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_INSCRIPTIONAL_PAHLAVI = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_INSCRIPTIONAL_PARTHIAN = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_JAVANESE = ((hb_tag_t)((((uint32_t)('J')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('v')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_KAITHI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_LISU = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('s')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
  HB_SCRIPT_MEETEI_MAYEK = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('e')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_OLD_SOUTH_ARABIAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
  HB_SCRIPT_OLD_TURKIC = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
  HB_SCRIPT_SAMARITAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_TAI_THAM = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_TAI_VIET = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('v')&0xFF)<<8)|((uint32_t)('t')&0xFF))),

  HB_SCRIPT_BATAK = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('k')&0xFF))),
  HB_SCRIPT_BRAHMI = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
  HB_SCRIPT_MANDAIC = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),

  HB_SCRIPT_CHAKMA = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_MEROITIC_CURSIVE = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
  HB_SCRIPT_MEROITIC_HIEROGLYPHS = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_MIAO = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
  HB_SCRIPT_SHARADA = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
  HB_SCRIPT_SORA_SOMPENG = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_TAKRI = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('r')&0xFF))),




  HB_SCRIPT_BASSA_VAH = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('s')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
  HB_SCRIPT_CAUCASIAN_ALBANIAN = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
  HB_SCRIPT_DUPLOYAN = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('p')&0xFF)<<8)|((uint32_t)('l')&0xFF))),
  HB_SCRIPT_ELBASAN = ((hb_tag_t)((((uint32_t)('E')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('b')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_GRANTHA = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('n')&0xFF))),
  HB_SCRIPT_KHOJKI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('j')&0xFF))),
  HB_SCRIPT_KHUDAWADI = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
  HB_SCRIPT_LINEAR_A = ((hb_tag_t)((((uint32_t)('L')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_MAHAJANI = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('j')&0xFF))),
  HB_SCRIPT_MANICHAEAN = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_MENDE_KIKAKUI = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
  HB_SCRIPT_MODI = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_MRO = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('r')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_NABATAEAN = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('b')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
  HB_SCRIPT_OLD_NORTH_ARABIAN = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('b')&0xFF))),
  HB_SCRIPT_OLD_PERMIC = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_PAHAWH_HMONG = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('m')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_PALMYRENE = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_PAU_CIN_HAU = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('u')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
  HB_SCRIPT_PSALTER_PAHLAVI = ((hb_tag_t)((((uint32_t)('P')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('p')&0xFF))),
  HB_SCRIPT_SIDDHAM = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
  HB_SCRIPT_TIRHUTA = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
  HB_SCRIPT_WARANG_CITI = ((hb_tag_t)((((uint32_t)('W')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('a')&0xFF))),

  HB_SCRIPT_AHOM = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('o')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_ANATOLIAN_HIEROGLYPHS = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('u')&0xFF)<<8)|((uint32_t)('w')&0xFF))),
  HB_SCRIPT_HATRAN = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_MULTANI = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
  HB_SCRIPT_OLD_HUNGARIAN = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_SIGNWRITING = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('w')&0xFF))),




  HB_SCRIPT_ADLAM = ((hb_tag_t)((((uint32_t)('A')&0xFF)<<24)|(((uint32_t)('d')&0xFF)<<16)|(((uint32_t)('l')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_BHAIKSUKI = ((hb_tag_t)((((uint32_t)('B')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
  HB_SCRIPT_MARCHEN = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('c')&0xFF))),
  HB_SCRIPT_OSAGE = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('e')&0xFF))),
  HB_SCRIPT_TANGUT = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_NEWA = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('w')&0xFF)<<8)|((uint32_t)('a')&0xFF))),




  HB_SCRIPT_MASARAM_GONDI = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_NUSHU = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('s')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('u')&0xFF))),
  HB_SCRIPT_SOYOMBO = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_ZANABAZAR_SQUARE = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('b')&0xFF))),




  HB_SCRIPT_DOGRA = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_GUNJALA_GONDI = ((hb_tag_t)((((uint32_t)('G')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_HANIFI_ROHINGYA = ((hb_tag_t)((((uint32_t)('R')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('g')&0xFF))),
  HB_SCRIPT_MAKASAR = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('k')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_MEDEFAIDRIN = ((hb_tag_t)((((uint32_t)('M')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('d')&0xFF)<<8)|((uint32_t)('f')&0xFF))),
  HB_SCRIPT_OLD_SOGDIAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_SOGDIAN = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('d')&0xFF))),




  HB_SCRIPT_ELYMAIC = ((hb_tag_t)((((uint32_t)('E')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('y')&0xFF)<<8)|((uint32_t)('m')&0xFF))),
  HB_SCRIPT_NANDINAGARI = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('d')&0xFF))),
  HB_SCRIPT_NYIAKENG_PUACHUE_HMONG = ((hb_tag_t)((((uint32_t)('H')&0xFF)<<24)|(((uint32_t)('m')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('p')&0xFF))),
  HB_SCRIPT_WANCHO = ((hb_tag_t)((((uint32_t)('W')&0xFF)<<24)|(((uint32_t)('c')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('o')&0xFF))),




  HB_SCRIPT_CHORASMIAN = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('h')&0xFF)<<16)|(((uint32_t)('r')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
  HB_SCRIPT_DIVES_AKURU = ((hb_tag_t)((((uint32_t)('D')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('k')&0xFF))),
  HB_SCRIPT_KHITAN_SMALL_SCRIPT = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('s')&0xFF))),
  HB_SCRIPT_YEZIDI = ((hb_tag_t)((((uint32_t)('Y')&0xFF)<<24)|(((uint32_t)('e')&0xFF)<<16)|(((uint32_t)('z')&0xFF)<<8)|((uint32_t)('i')&0xFF))),




  HB_SCRIPT_CYPRO_MINOAN = ((hb_tag_t)((((uint32_t)('C')&0xFF)<<24)|(((uint32_t)('p')&0xFF)<<16)|(((uint32_t)('m')&0xFF)<<8)|((uint32_t)('n')&0xFF))),
  HB_SCRIPT_OLD_UYGHUR = ((hb_tag_t)((((uint32_t)('O')&0xFF)<<24)|(((uint32_t)('u')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('r')&0xFF))),
  HB_SCRIPT_TANGSA = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('n')&0xFF)<<16)|(((uint32_t)('s')&0xFF)<<8)|((uint32_t)('a')&0xFF))),
  HB_SCRIPT_TOTO = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('o')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('o')&0xFF))),
  HB_SCRIPT_VITHKUQI = ((hb_tag_t)((((uint32_t)('V')&0xFF)<<24)|(((uint32_t)('i')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('h')&0xFF))),




  HB_SCRIPT_MATH = ((hb_tag_t)((((uint32_t)('Z')&0xFF)<<24)|(((uint32_t)('m')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('h')&0xFF))),




  HB_SCRIPT_KAWI = ((hb_tag_t)((((uint32_t)('K')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('w')&0xFF)<<8)|((uint32_t)('i')&0xFF))),
  HB_SCRIPT_NAG_MUNDARI = ((hb_tag_t)((((uint32_t)('N')&0xFF)<<24)|(((uint32_t)('a')&0xFF)<<16)|(((uint32_t)('g')&0xFF)<<8)|((uint32_t)('m')&0xFF))),


  HB_SCRIPT_INVALID = ((hb_tag_t)((((uint32_t)(0)&0xFF)<<24)|(((uint32_t)(0)&0xFF)<<16)|(((uint32_t)(0)&0xFF)<<8)|((uint32_t)(0)&0xFF))),
# 748 "/usr/include/harfbuzz/hb-common.h"
  _HB_SCRIPT_MAX_VALUE = ((hb_tag_t)((((uint32_t)(0x7f)&0xFF)<<24)|(((uint32_t)(0xff)&0xFF)<<16)|(((uint32_t)(0xff)&0xFF)<<8)|((uint32_t)(0xff)&0xFF))),
  _HB_SCRIPT_MAX_VALUE_SIGNED = ((hb_tag_t)((((uint32_t)(0x7f)&0xFF)<<24)|(((uint32_t)(0xff)&0xFF)<<16)|(((uint32_t)(0xff)&0xFF)<<8)|((uint32_t)(0xff)&0xFF)))

} hb_script_t;




extern hb_script_t
hb_script_from_iso15924_tag (hb_tag_t tag);

extern hb_script_t
hb_script_from_string (const char *str, int len);

extern hb_tag_t
hb_script_to_iso15924_tag (hb_script_t script);

extern hb_direction_t
hb_script_get_horizontal_direction (hb_script_t script);
# 777 "/usr/include/harfbuzz/hb-common.h"
typedef struct hb_user_data_key_t {

  char unused;
} hb_user_data_key_t;
# 789 "/usr/include/harfbuzz/hb-common.h"
typedef void (*hb_destroy_func_t) (void *user_data);
# 829 "/usr/include/harfbuzz/hb-common.h"
typedef struct hb_feature_t {
  hb_tag_t tag;
  uint32_t value;
  unsigned int start;
  unsigned int end;
} hb_feature_t;

extern hb_bool_t
hb_feature_from_string (const char *str, int len,
   hb_feature_t *feature);

extern void
hb_feature_to_string (hb_feature_t *feature,
        char *buf, unsigned int size);
# 855 "/usr/include/harfbuzz/hb-common.h"
typedef struct hb_variation_t {
  hb_tag_t tag;
  float value;
} hb_variation_t;

extern hb_bool_t
hb_variation_from_string (const char *str, int len,
     hb_variation_t *variation);

extern void
hb_variation_to_string (hb_variation_t *variation,
   char *buf, unsigned int size);
# 876 "/usr/include/harfbuzz/hb-common.h"
typedef uint32_t hb_color_t;
# 891 "/usr/include/harfbuzz/hb-common.h"
extern uint8_t
hb_color_get_alpha (hb_color_t color);


extern uint8_t
hb_color_get_red (hb_color_t color);


extern uint8_t
hb_color_get_green (hb_color_t color);


extern uint8_t
hb_color_get_blue (hb_color_t color);
# 918 "/usr/include/harfbuzz/hb-common.h"
typedef struct hb_glyph_extents_t {
  hb_position_t x_bearing;
  hb_position_t y_bearing;
  hb_position_t width;
  hb_position_t height;
} hb_glyph_extents_t;







typedef struct hb_font_t hb_font_t;
# 35 "/usr/include/harfbuzz/hb-blob.h" 2
# 69 "/usr/include/harfbuzz/hb-blob.h"
typedef enum {
  HB_MEMORY_MODE_DUPLICATE,
  HB_MEMORY_MODE_READONLY,
  HB_MEMORY_MODE_WRITABLE,
  HB_MEMORY_MODE_READONLY_MAY_MAKE_WRITABLE
} hb_memory_mode_t;
# 84 "/usr/include/harfbuzz/hb-blob.h"
typedef struct hb_blob_t hb_blob_t;

extern hb_blob_t *
hb_blob_create (const char *data,
  unsigned int length,
  hb_memory_mode_t mode,
  void *user_data,
  hb_destroy_func_t destroy);

extern hb_blob_t *
hb_blob_create_or_fail (const char *data,
   unsigned int length,
   hb_memory_mode_t mode,
   void *user_data,
   hb_destroy_func_t destroy);

extern hb_blob_t *
hb_blob_create_from_file (const char *file_name);

extern hb_blob_t *
hb_blob_create_from_file_or_fail (const char *file_name);







extern hb_blob_t *
hb_blob_create_sub_blob (hb_blob_t *parent,
    unsigned int offset,
    unsigned int length);

extern hb_blob_t *
hb_blob_copy_writable_or_fail (hb_blob_t *blob);

extern hb_blob_t *
hb_blob_get_empty (void);

extern hb_blob_t *
hb_blob_reference (hb_blob_t *blob);

extern void
hb_blob_destroy (hb_blob_t *blob);

extern hb_bool_t
hb_blob_set_user_data (hb_blob_t *blob,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


extern void *
hb_blob_get_user_data (const hb_blob_t *blob,
         hb_user_data_key_t *key);


extern void
hb_blob_make_immutable (hb_blob_t *blob);

extern hb_bool_t
hb_blob_is_immutable (hb_blob_t *blob);


extern unsigned int
hb_blob_get_length (hb_blob_t *blob);

extern const char *
hb_blob_get_data (hb_blob_t *blob, unsigned int *length);

extern char *
hb_blob_get_data_writable (hb_blob_t *blob, unsigned int *length);
# 32 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-buffer.h" 1
# 37 "/usr/include/harfbuzz/hb-buffer.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 38 "/usr/include/harfbuzz/hb-buffer.h" 2
# 1 "/usr/include/harfbuzz/hb-unicode.h" 1
# 38 "/usr/include/harfbuzz/hb-unicode.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 39 "/usr/include/harfbuzz/hb-unicode.h" 2
# 91 "/usr/include/harfbuzz/hb-unicode.h"
typedef enum
{
  HB_UNICODE_GENERAL_CATEGORY_CONTROL,
  HB_UNICODE_GENERAL_CATEGORY_FORMAT,
  HB_UNICODE_GENERAL_CATEGORY_UNASSIGNED,
  HB_UNICODE_GENERAL_CATEGORY_PRIVATE_USE,
  HB_UNICODE_GENERAL_CATEGORY_SURROGATE,
  HB_UNICODE_GENERAL_CATEGORY_LOWERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_TITLECASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_UPPERCASE_LETTER,
  HB_UNICODE_GENERAL_CATEGORY_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_ENCLOSING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_NON_SPACING_MARK,
  HB_UNICODE_GENERAL_CATEGORY_DECIMAL_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_LETTER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_NUMBER,
  HB_UNICODE_GENERAL_CATEGORY_CONNECT_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_DASH_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CLOSE_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_FINAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_INITIAL_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_OPEN_PUNCTUATION,
  HB_UNICODE_GENERAL_CATEGORY_CURRENCY_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MODIFIER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_MATH_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_OTHER_SYMBOL,
  HB_UNICODE_GENERAL_CATEGORY_LINE_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_PARAGRAPH_SEPARATOR,
  HB_UNICODE_GENERAL_CATEGORY_SPACE_SEPARATOR
} hb_unicode_general_category_t;
# 193 "/usr/include/harfbuzz/hb-unicode.h"
typedef enum
{
  HB_UNICODE_COMBINING_CLASS_NOT_REORDERED = 0,
  HB_UNICODE_COMBINING_CLASS_OVERLAY = 1,
  HB_UNICODE_COMBINING_CLASS_NUKTA = 7,
  HB_UNICODE_COMBINING_CLASS_KANA_VOICING = 8,
  HB_UNICODE_COMBINING_CLASS_VIRAMA = 9,


  HB_UNICODE_COMBINING_CLASS_CCC10 = 10,
  HB_UNICODE_COMBINING_CLASS_CCC11 = 11,
  HB_UNICODE_COMBINING_CLASS_CCC12 = 12,
  HB_UNICODE_COMBINING_CLASS_CCC13 = 13,
  HB_UNICODE_COMBINING_CLASS_CCC14 = 14,
  HB_UNICODE_COMBINING_CLASS_CCC15 = 15,
  HB_UNICODE_COMBINING_CLASS_CCC16 = 16,
  HB_UNICODE_COMBINING_CLASS_CCC17 = 17,
  HB_UNICODE_COMBINING_CLASS_CCC18 = 18,
  HB_UNICODE_COMBINING_CLASS_CCC19 = 19,
  HB_UNICODE_COMBINING_CLASS_CCC20 = 20,
  HB_UNICODE_COMBINING_CLASS_CCC21 = 21,
  HB_UNICODE_COMBINING_CLASS_CCC22 = 22,
  HB_UNICODE_COMBINING_CLASS_CCC23 = 23,
  HB_UNICODE_COMBINING_CLASS_CCC24 = 24,
  HB_UNICODE_COMBINING_CLASS_CCC25 = 25,
  HB_UNICODE_COMBINING_CLASS_CCC26 = 26,


  HB_UNICODE_COMBINING_CLASS_CCC27 = 27,
  HB_UNICODE_COMBINING_CLASS_CCC28 = 28,
  HB_UNICODE_COMBINING_CLASS_CCC29 = 29,
  HB_UNICODE_COMBINING_CLASS_CCC30 = 30,
  HB_UNICODE_COMBINING_CLASS_CCC31 = 31,
  HB_UNICODE_COMBINING_CLASS_CCC32 = 32,
  HB_UNICODE_COMBINING_CLASS_CCC33 = 33,
  HB_UNICODE_COMBINING_CLASS_CCC34 = 34,
  HB_UNICODE_COMBINING_CLASS_CCC35 = 35,


  HB_UNICODE_COMBINING_CLASS_CCC36 = 36,


  HB_UNICODE_COMBINING_CLASS_CCC84 = 84,
  HB_UNICODE_COMBINING_CLASS_CCC91 = 91,


  HB_UNICODE_COMBINING_CLASS_CCC103 = 103,
  HB_UNICODE_COMBINING_CLASS_CCC107 = 107,


  HB_UNICODE_COMBINING_CLASS_CCC118 = 118,
  HB_UNICODE_COMBINING_CLASS_CCC122 = 122,


  HB_UNICODE_COMBINING_CLASS_CCC129 = 129,
  HB_UNICODE_COMBINING_CLASS_CCC130 = 130,
  HB_UNICODE_COMBINING_CLASS_CCC132 = 132,


  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW_LEFT = 200,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_BELOW = 202,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE = 214,
  HB_UNICODE_COMBINING_CLASS_ATTACHED_ABOVE_RIGHT = 216,
  HB_UNICODE_COMBINING_CLASS_BELOW_LEFT = 218,
  HB_UNICODE_COMBINING_CLASS_BELOW = 220,
  HB_UNICODE_COMBINING_CLASS_BELOW_RIGHT = 222,
  HB_UNICODE_COMBINING_CLASS_LEFT = 224,
  HB_UNICODE_COMBINING_CLASS_RIGHT = 226,
  HB_UNICODE_COMBINING_CLASS_ABOVE_LEFT = 228,
  HB_UNICODE_COMBINING_CLASS_ABOVE = 230,
  HB_UNICODE_COMBINING_CLASS_ABOVE_RIGHT = 232,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_BELOW = 233,
  HB_UNICODE_COMBINING_CLASS_DOUBLE_ABOVE = 234,

  HB_UNICODE_COMBINING_CLASS_IOTA_SUBSCRIPT = 240,

  HB_UNICODE_COMBINING_CLASS_INVALID = 255
} hb_unicode_combining_class_t;
# 289 "/usr/include/harfbuzz/hb-unicode.h"
typedef struct hb_unicode_funcs_t hb_unicode_funcs_t;





extern hb_unicode_funcs_t *
hb_unicode_funcs_get_default (void);


extern hb_unicode_funcs_t *
hb_unicode_funcs_create (hb_unicode_funcs_t *parent);

extern hb_unicode_funcs_t *
hb_unicode_funcs_get_empty (void);

extern hb_unicode_funcs_t *
hb_unicode_funcs_reference (hb_unicode_funcs_t *ufuncs);

extern void
hb_unicode_funcs_destroy (hb_unicode_funcs_t *ufuncs);

extern hb_bool_t
hb_unicode_funcs_set_user_data (hb_unicode_funcs_t *ufuncs,
    hb_user_data_key_t *key,
    void * data,
    hb_destroy_func_t destroy,
    hb_bool_t replace);


extern void *
hb_unicode_funcs_get_user_data (const hb_unicode_funcs_t *ufuncs,
    hb_user_data_key_t *key);


extern void
hb_unicode_funcs_make_immutable (hb_unicode_funcs_t *ufuncs);

extern hb_bool_t
hb_unicode_funcs_is_immutable (hb_unicode_funcs_t *ufuncs);

extern hb_unicode_funcs_t *
hb_unicode_funcs_get_parent (hb_unicode_funcs_t *ufuncs);
# 354 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_unicode_combining_class_t (*hb_unicode_combining_class_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 372 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_unicode_general_category_t (*hb_unicode_general_category_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 394 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_codepoint_t (*hb_unicode_mirroring_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 412 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_script_t (*hb_unicode_script_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 435 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_bool_t (*hb_unicode_compose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t a,
           hb_codepoint_t b,
           hb_codepoint_t *ab,
           void *user_data);
# 459 "/usr/include/harfbuzz/hb-unicode.h"
typedef hb_bool_t (*hb_unicode_decompose_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t ab,
           hb_codepoint_t *a,
           hb_codepoint_t *b,
           void *user_data);
# 478 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_combining_class_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_combining_class_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 494 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_general_category_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_general_category_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 510 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_mirroring_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_mirroring_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 526 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_script_func (hb_unicode_funcs_t *ufuncs,
      hb_unicode_script_func_t func,
      void *user_data, hb_destroy_func_t destroy);
# 542 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_compose_func (hb_unicode_funcs_t *ufuncs,
       hb_unicode_compose_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 558 "/usr/include/harfbuzz/hb-unicode.h"
extern void
hb_unicode_funcs_set_decompose_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 577 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_unicode_combining_class_t
hb_unicode_combining_class (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);
# 593 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_unicode_general_category_t
hb_unicode_general_category (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);
# 609 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_codepoint_t
hb_unicode_mirroring (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t unicode);
# 625 "/usr/include/harfbuzz/hb-unicode.h"
extern hb_script_t
hb_unicode_script (hb_unicode_funcs_t *ufuncs,
     hb_codepoint_t unicode);

extern hb_bool_t
hb_unicode_compose (hb_unicode_funcs_t *ufuncs,
      hb_codepoint_t a,
      hb_codepoint_t b,
      hb_codepoint_t *ab);

extern hb_bool_t
hb_unicode_decompose (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t ab,
        hb_codepoint_t *a,
        hb_codepoint_t *b);
# 39 "/usr/include/harfbuzz/hb-buffer.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 34 "/usr/include/harfbuzz/hb-font.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-font.h" 2
# 1 "/usr/include/harfbuzz/hb-face.h" 1
# 34 "/usr/include/harfbuzz/hb-face.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-face.h" 2
# 1 "/usr/include/harfbuzz/hb-blob.h" 1
# 36 "/usr/include/harfbuzz/hb-face.h" 2
# 1 "/usr/include/harfbuzz/hb-map.h" 1
# 34 "/usr/include/harfbuzz/hb-map.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-map.h" 2
# 1 "/usr/include/harfbuzz/hb-set.h" 1
# 34 "/usr/include/harfbuzz/hb-set.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-set.h" 2
# 57 "/usr/include/harfbuzz/hb-set.h"
typedef struct hb_set_t hb_set_t;


extern hb_set_t *
hb_set_create (void);

extern hb_set_t *
hb_set_get_empty (void);

extern hb_set_t *
hb_set_reference (hb_set_t *set);

extern void
hb_set_destroy (hb_set_t *set);

extern hb_bool_t
hb_set_set_user_data (hb_set_t *set,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

extern void *
hb_set_get_user_data (const hb_set_t *set,
        hb_user_data_key_t *key);



extern hb_bool_t
hb_set_allocation_successful (const hb_set_t *set);

extern hb_set_t *
hb_set_copy (const hb_set_t *set);

extern void
hb_set_clear (hb_set_t *set);

extern hb_bool_t
hb_set_is_empty (const hb_set_t *set);

extern void
hb_set_invert (hb_set_t *set);

extern hb_bool_t
hb_set_is_inverted (const hb_set_t *set);

extern hb_bool_t
hb_set_has (const hb_set_t *set,
     hb_codepoint_t codepoint);

extern void
hb_set_add (hb_set_t *set,
     hb_codepoint_t codepoint);

extern void
hb_set_add_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

extern void
hb_set_add_sorted_array (hb_set_t *set,
           const hb_codepoint_t *sorted_codepoints,
           unsigned int num_codepoints);

extern void
hb_set_del (hb_set_t *set,
     hb_codepoint_t codepoint);

extern void
hb_set_del_range (hb_set_t *set,
    hb_codepoint_t first,
    hb_codepoint_t last);

extern hb_bool_t
hb_set_is_equal (const hb_set_t *set,
   const hb_set_t *other);

extern unsigned int
hb_set_hash (const hb_set_t *set);

extern hb_bool_t
hb_set_is_subset (const hb_set_t *set,
    const hb_set_t *larger_set);

extern void
hb_set_set (hb_set_t *set,
     const hb_set_t *other);

extern void
hb_set_union (hb_set_t *set,
       const hb_set_t *other);

extern void
hb_set_intersect (hb_set_t *set,
    const hb_set_t *other);

extern void
hb_set_subtract (hb_set_t *set,
   const hb_set_t *other);

extern void
hb_set_symmetric_difference (hb_set_t *set,
        const hb_set_t *other);

extern unsigned int
hb_set_get_population (const hb_set_t *set);


extern hb_codepoint_t
hb_set_get_min (const hb_set_t *set);


extern hb_codepoint_t
hb_set_get_max (const hb_set_t *set);


extern hb_bool_t
hb_set_next (const hb_set_t *set,
      hb_codepoint_t *codepoint);


extern hb_bool_t
hb_set_previous (const hb_set_t *set,
   hb_codepoint_t *codepoint);


extern hb_bool_t
hb_set_next_range (const hb_set_t *set,
     hb_codepoint_t *first,
     hb_codepoint_t *last);


extern hb_bool_t
hb_set_previous_range (const hb_set_t *set,
         hb_codepoint_t *first,
         hb_codepoint_t *last);


extern unsigned int
hb_set_next_many (const hb_set_t *set,
    hb_codepoint_t codepoint,
    hb_codepoint_t *out,
    unsigned int size);
# 36 "/usr/include/harfbuzz/hb-map.h" 2
# 55 "/usr/include/harfbuzz/hb-map.h"
typedef struct hb_map_t hb_map_t;


extern hb_map_t *
hb_map_create (void);

extern hb_map_t *
hb_map_get_empty (void);

extern hb_map_t *
hb_map_reference (hb_map_t *map);

extern void
hb_map_destroy (hb_map_t *map);

extern hb_bool_t
hb_map_set_user_data (hb_map_t *map,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

extern void *
hb_map_get_user_data (const hb_map_t *map,
        hb_user_data_key_t *key);



extern hb_bool_t
hb_map_allocation_successful (const hb_map_t *map);

extern hb_map_t *
hb_map_copy (const hb_map_t *map);

extern void
hb_map_clear (hb_map_t *map);

extern hb_bool_t
hb_map_is_empty (const hb_map_t *map);

extern unsigned int
hb_map_get_population (const hb_map_t *map);

extern hb_bool_t
hb_map_is_equal (const hb_map_t *map,
   const hb_map_t *other);

extern unsigned int
hb_map_hash (const hb_map_t *map);

extern void
hb_map_set (hb_map_t *map,
     hb_codepoint_t key,
     hb_codepoint_t value);

extern hb_codepoint_t
hb_map_get (const hb_map_t *map,
     hb_codepoint_t key);

extern void
hb_map_del (hb_map_t *map,
     hb_codepoint_t key);

extern hb_bool_t
hb_map_has (const hb_map_t *map,
     hb_codepoint_t key);

extern void
hb_map_update (hb_map_t *map,
        const hb_map_t *other);


extern hb_bool_t
hb_map_next (const hb_map_t *map,
      int *idx,
      hb_codepoint_t *key,
      hb_codepoint_t *value);

extern void
hb_map_keys (const hb_map_t *map,
      hb_set_t *keys);

extern void
hb_map_values (const hb_map_t *map,
        hb_set_t *values);
# 37 "/usr/include/harfbuzz/hb-face.h" 2
# 1 "/usr/include/harfbuzz/hb-set.h" 1
# 38 "/usr/include/harfbuzz/hb-face.h" 2




extern unsigned int
hb_face_count (hb_blob_t *blob);
# 56 "/usr/include/harfbuzz/hb-face.h"
typedef struct hb_face_t hb_face_t;

extern hb_face_t *
hb_face_create (hb_blob_t *blob,
  unsigned int index);
# 75 "/usr/include/harfbuzz/hb-face.h"
typedef hb_blob_t * (*hb_reference_table_func_t) (hb_face_t *face, hb_tag_t tag, void *user_data);


extern hb_face_t *
hb_face_create_for_tables (hb_reference_table_func_t reference_table_func,
      void *user_data,
      hb_destroy_func_t destroy);

extern hb_face_t *
hb_face_get_empty (void);

extern hb_face_t *
hb_face_reference (hb_face_t *face);

extern void
hb_face_destroy (hb_face_t *face);

extern hb_bool_t
hb_face_set_user_data (hb_face_t *face,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);

extern void *
hb_face_get_user_data (const hb_face_t *face,
         hb_user_data_key_t *key);

extern void
hb_face_make_immutable (hb_face_t *face);

extern hb_bool_t
hb_face_is_immutable (const hb_face_t *face);


extern hb_blob_t *
hb_face_reference_table (const hb_face_t *face,
    hb_tag_t tag);

extern hb_blob_t *
hb_face_reference_blob (hb_face_t *face);

extern void
hb_face_set_index (hb_face_t *face,
     unsigned int index);

extern unsigned int
hb_face_get_index (const hb_face_t *face);

extern void
hb_face_set_upem (hb_face_t *face,
    unsigned int upem);

extern unsigned int
hb_face_get_upem (const hb_face_t *face);

extern void
hb_face_set_glyph_count (hb_face_t *face,
    unsigned int glyph_count);

extern unsigned int
hb_face_get_glyph_count (const hb_face_t *face);

extern unsigned int
hb_face_get_table_tags (const hb_face_t *face,
   unsigned int start_offset,
   unsigned int *table_count,
   hb_tag_t *table_tags );






extern void
hb_face_collect_unicodes (hb_face_t *face,
     hb_set_t *out);

extern void
hb_face_collect_nominal_glyph_mapping (hb_face_t *face,
           hb_map_t *mapping,
           hb_set_t *unicodes);

extern void
hb_face_collect_variation_selectors (hb_face_t *face,
         hb_set_t *out);

extern void
hb_face_collect_variation_unicodes (hb_face_t *face,
        hb_codepoint_t variation_selector,
        hb_set_t *out);






extern hb_face_t *
hb_face_builder_create (void);

extern hb_bool_t
hb_face_builder_add_table (hb_face_t *face,
      hb_tag_t tag,
      hb_blob_t *blob);

extern void
hb_face_builder_sort_tables (hb_face_t *face,
                             const hb_tag_t *tags);
# 36 "/usr/include/harfbuzz/hb-font.h" 2
# 1 "/usr/include/harfbuzz/hb-draw.h" 1
# 32 "/usr/include/harfbuzz/hb-draw.h"
# 1 "/usr/include/harfbuzz/hb.h" 1
# 33 "/usr/include/harfbuzz/hb-draw.h" 2
# 49 "/usr/include/harfbuzz/hb-draw.h"
typedef struct hb_draw_state_t {
  hb_bool_t path_open;

  float path_start_x;
  float path_start_y;

  float current_x;
  float current_y;


  hb_var_num_t reserved1;
  hb_var_num_t reserved2;
  hb_var_num_t reserved3;
  hb_var_num_t reserved4;
  hb_var_num_t reserved5;
  hb_var_num_t reserved6;
  hb_var_num_t reserved7;
} hb_draw_state_t;
# 89 "/usr/include/harfbuzz/hb-draw.h"
typedef struct hb_draw_funcs_t hb_draw_funcs_t;
# 107 "/usr/include/harfbuzz/hb-draw.h"
typedef void (*hb_draw_move_to_func_t) (hb_draw_funcs_t *dfuncs, void *draw_data,
     hb_draw_state_t *st,
     float to_x, float to_y,
     void *user_data);
# 127 "/usr/include/harfbuzz/hb-draw.h"
typedef void (*hb_draw_line_to_func_t) (hb_draw_funcs_t *dfuncs, void *draw_data,
     hb_draw_state_t *st,
     float to_x, float to_y,
     void *user_data);
# 149 "/usr/include/harfbuzz/hb-draw.h"
typedef void (*hb_draw_quadratic_to_func_t) (hb_draw_funcs_t *dfuncs, void *draw_data,
          hb_draw_state_t *st,
          float control_x, float control_y,
          float to_x, float to_y,
          void *user_data);
# 174 "/usr/include/harfbuzz/hb-draw.h"
typedef void (*hb_draw_cubic_to_func_t) (hb_draw_funcs_t *dfuncs, void *draw_data,
      hb_draw_state_t *st,
      float control1_x, float control1_y,
      float control2_x, float control2_y,
      float to_x, float to_y,
      void *user_data);
# 194 "/usr/include/harfbuzz/hb-draw.h"
typedef void (*hb_draw_close_path_func_t) (hb_draw_funcs_t *dfuncs, void *draw_data,
        hb_draw_state_t *st,
        void *user_data);
# 209 "/usr/include/harfbuzz/hb-draw.h"
extern void
hb_draw_funcs_set_move_to_func (hb_draw_funcs_t *dfuncs,
    hb_draw_move_to_func_t func,
    void *user_data, hb_destroy_func_t destroy);
# 225 "/usr/include/harfbuzz/hb-draw.h"
extern void
hb_draw_funcs_set_line_to_func (hb_draw_funcs_t *dfuncs,
    hb_draw_line_to_func_t func,
    void *user_data, hb_destroy_func_t destroy);
# 241 "/usr/include/harfbuzz/hb-draw.h"
extern void
hb_draw_funcs_set_quadratic_to_func (hb_draw_funcs_t *dfuncs,
         hb_draw_quadratic_to_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 257 "/usr/include/harfbuzz/hb-draw.h"
extern void
hb_draw_funcs_set_cubic_to_func (hb_draw_funcs_t *dfuncs,
     hb_draw_cubic_to_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 273 "/usr/include/harfbuzz/hb-draw.h"
extern void
hb_draw_funcs_set_close_path_func (hb_draw_funcs_t *dfuncs,
       hb_draw_close_path_func_t func,
       void *user_data, hb_destroy_func_t destroy);


extern hb_draw_funcs_t *
hb_draw_funcs_create (void);

extern hb_draw_funcs_t *
hb_draw_funcs_get_empty (void);

extern hb_draw_funcs_t *
hb_draw_funcs_reference (hb_draw_funcs_t *dfuncs);

extern void
hb_draw_funcs_destroy (hb_draw_funcs_t *dfuncs);

extern hb_bool_t
hb_draw_funcs_set_user_data (hb_draw_funcs_t *dfuncs,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);


extern void *
hb_draw_funcs_get_user_data (const hb_draw_funcs_t *dfuncs,
        hb_user_data_key_t *key);

extern void
hb_draw_funcs_make_immutable (hb_draw_funcs_t *dfuncs);

extern hb_bool_t
hb_draw_funcs_is_immutable (hb_draw_funcs_t *dfuncs);


extern void
hb_draw_move_to (hb_draw_funcs_t *dfuncs, void *draw_data,
   hb_draw_state_t *st,
   float to_x, float to_y);

extern void
hb_draw_line_to (hb_draw_funcs_t *dfuncs, void *draw_data,
   hb_draw_state_t *st,
   float to_x, float to_y);

extern void
hb_draw_quadratic_to (hb_draw_funcs_t *dfuncs, void *draw_data,
        hb_draw_state_t *st,
        float control_x, float control_y,
        float to_x, float to_y);

extern void
hb_draw_cubic_to (hb_draw_funcs_t *dfuncs, void *draw_data,
    hb_draw_state_t *st,
    float control1_x, float control1_y,
    float control2_x, float control2_y,
    float to_x, float to_y);

extern void
hb_draw_close_path (hb_draw_funcs_t *dfuncs, void *draw_data,
      hb_draw_state_t *st);
# 37 "/usr/include/harfbuzz/hb-font.h" 2
# 1 "/usr/include/harfbuzz/hb-paint.h" 1
# 32 "/usr/include/harfbuzz/hb-paint.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 33 "/usr/include/harfbuzz/hb-paint.h" 2
# 63 "/usr/include/harfbuzz/hb-paint.h"
typedef struct hb_paint_funcs_t hb_paint_funcs_t;

extern hb_paint_funcs_t *
hb_paint_funcs_create (void);

extern hb_paint_funcs_t *
hb_paint_funcs_get_empty (void);

extern hb_paint_funcs_t *
hb_paint_funcs_reference (hb_paint_funcs_t *funcs);

extern void
hb_paint_funcs_destroy (hb_paint_funcs_t *funcs);

extern hb_bool_t
hb_paint_funcs_set_user_data (hb_paint_funcs_t *funcs,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


extern void *
hb_paint_funcs_get_user_data (const hb_paint_funcs_t *funcs,
         hb_user_data_key_t *key);

extern void
hb_paint_funcs_make_immutable (hb_paint_funcs_t *funcs);

extern hb_bool_t
hb_paint_funcs_is_immutable (hb_paint_funcs_t *funcs);
# 116 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_push_transform_func_t) (hb_paint_funcs_t *funcs,
                                                void *paint_data,
                                                float xx, float yx,
                                                float xy, float yy,
                                                float dx, float dy,
                                                void *user_data);
# 135 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_pop_transform_func_t) (hb_paint_funcs_t *funcs,
                                               void *paint_data,
                                               void *user_data);
# 153 "/usr/include/harfbuzz/hb-paint.h"
typedef hb_bool_t (*hb_paint_color_glyph_func_t) (hb_paint_funcs_t *funcs,
                                                  void *paint_data,
                                                  hb_codepoint_t glyph,
                                                  hb_font_t *font,
                                                  void *user_data);
# 179 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_push_clip_glyph_func_t) (hb_paint_funcs_t *funcs,
                                                 void *paint_data,
                                                 hb_codepoint_t glyph,
                                                 hb_font_t *font,
                                                 void *user_data);
# 207 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_push_clip_rectangle_func_t) (hb_paint_funcs_t *funcs,
                                                     void *paint_data,
                                                     float xmin, float ymin,
                                                     float xmax, float ymax,
                                                     void *user_data);
# 225 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_pop_clip_func_t) (hb_paint_funcs_t *funcs,
                                          void *paint_data,
                                          void *user_data);
# 242 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_color_func_t) (hb_paint_funcs_t *funcs,
                                       void *paint_data,
                                       hb_bool_t is_foreground,
                                       hb_color_t color,
                                       void *user_data);
# 302 "/usr/include/harfbuzz/hb-paint.h"
typedef hb_bool_t (*hb_paint_image_func_t) (hb_paint_funcs_t *funcs,
         void *paint_data,
         hb_blob_t *image,
         unsigned int width,
         unsigned int height,
         hb_tag_t format,
         float slant,
         hb_glyph_extents_t *extents,
         void *user_data);
# 330 "/usr/include/harfbuzz/hb-paint.h"
typedef struct {
  float offset;
  hb_bool_t is_foreground;
  hb_color_t color;
} hb_color_stop_t;
# 356 "/usr/include/harfbuzz/hb-paint.h"
typedef enum {
  HB_PAINT_EXTEND_PAD,
  HB_PAINT_EXTEND_REPEAT,
  HB_PAINT_EXTEND_REFLECT
} hb_paint_extend_t;

typedef struct hb_color_line_t hb_color_line_t;
# 380 "/usr/include/harfbuzz/hb-paint.h"
typedef unsigned int (*hb_color_line_get_color_stops_func_t) (hb_color_line_t *color_line,
             void *color_line_data,
             unsigned int start,
             unsigned int *count,
             hb_color_stop_t *color_stops,
             void *user_data);
# 399 "/usr/include/harfbuzz/hb-paint.h"
typedef hb_paint_extend_t (*hb_color_line_get_extend_func_t) (hb_color_line_t *color_line,
             void *color_line_data,
             void *user_data);
# 410 "/usr/include/harfbuzz/hb-paint.h"
struct hb_color_line_t {
  void *data;

  hb_color_line_get_color_stops_func_t get_color_stops;
  void *get_color_stops_user_data;

  hb_color_line_get_extend_func_t get_extend;
  void *get_extend_user_data;

  void *reserved0;
  void *reserved1;
  void *reserved2;
  void *reserved3;
  void *reserved5;
  void *reserved6;
  void *reserved7;
  void *reserved8;
};

extern unsigned int
hb_color_line_get_color_stops (hb_color_line_t *color_line,
                               unsigned int start,
                               unsigned int *count,
                               hb_color_stop_t *color_stops);

extern hb_paint_extend_t
hb_color_line_get_extend (hb_color_line_t *color_line);
# 466 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_linear_gradient_func_t) (hb_paint_funcs_t *funcs,
                                                 void *paint_data,
                                                 hb_color_line_t *color_line,
                                                 float x0, float y0,
                                                 float x1, float y1,
                                                 float x2, float y2,
                                                 void *user_data);
# 502 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_radial_gradient_func_t) (hb_paint_funcs_t *funcs,
                                                 void *paint_data,
                                                 hb_color_line_t *color_line,
                                                 float x0, float y0, float r0,
                                                 float x1, float y1, float r1,
                                                 void *user_data);
# 535 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_sweep_gradient_func_t) (hb_paint_funcs_t *funcs,
                                                 void *paint_data,
                                                 hb_color_line_t *color_line,
                                                 float x0, float y0,
                                                 float start_angle,
                                                 float end_angle,
                                                 void *user_data);
# 611 "/usr/include/harfbuzz/hb-paint.h"
typedef enum {
  HB_PAINT_COMPOSITE_MODE_CLEAR,
  HB_PAINT_COMPOSITE_MODE_SRC,
  HB_PAINT_COMPOSITE_MODE_DEST,
  HB_PAINT_COMPOSITE_MODE_SRC_OVER,
  HB_PAINT_COMPOSITE_MODE_DEST_OVER,
  HB_PAINT_COMPOSITE_MODE_SRC_IN,
  HB_PAINT_COMPOSITE_MODE_DEST_IN,
  HB_PAINT_COMPOSITE_MODE_SRC_OUT,
  HB_PAINT_COMPOSITE_MODE_DEST_OUT,
  HB_PAINT_COMPOSITE_MODE_SRC_ATOP,
  HB_PAINT_COMPOSITE_MODE_DEST_ATOP,
  HB_PAINT_COMPOSITE_MODE_XOR,
  HB_PAINT_COMPOSITE_MODE_PLUS,
  HB_PAINT_COMPOSITE_MODE_SCREEN,
  HB_PAINT_COMPOSITE_MODE_OVERLAY,
  HB_PAINT_COMPOSITE_MODE_DARKEN,
  HB_PAINT_COMPOSITE_MODE_LIGHTEN,
  HB_PAINT_COMPOSITE_MODE_COLOR_DODGE,
  HB_PAINT_COMPOSITE_MODE_COLOR_BURN,
  HB_PAINT_COMPOSITE_MODE_HARD_LIGHT,
  HB_PAINT_COMPOSITE_MODE_SOFT_LIGHT,
  HB_PAINT_COMPOSITE_MODE_DIFFERENCE,
  HB_PAINT_COMPOSITE_MODE_EXCLUSION,
  HB_PAINT_COMPOSITE_MODE_MULTIPLY,
  HB_PAINT_COMPOSITE_MODE_HSL_HUE,
  HB_PAINT_COMPOSITE_MODE_HSL_SATURATION,
  HB_PAINT_COMPOSITE_MODE_HSL_COLOR,
  HB_PAINT_COMPOSITE_MODE_HSL_LUMINOSITY
} hb_paint_composite_mode_t;
# 657 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_push_group_func_t) (hb_paint_funcs_t *funcs,
                                            void *paint_data,
                                            void *user_data);
# 678 "/usr/include/harfbuzz/hb-paint.h"
typedef void (*hb_paint_pop_group_func_t) (hb_paint_funcs_t *funcs,
                                           void *paint_data,
                                           hb_paint_composite_mode_t mode,
                                           void *user_data);
# 705 "/usr/include/harfbuzz/hb-paint.h"
typedef hb_bool_t (*hb_paint_custom_palette_color_func_t) (hb_paint_funcs_t *funcs,
                                                           void *paint_data,
                                                           unsigned int color_index,
                                                           hb_color_t *color,
                                                           void *user_data);
# 723 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_push_transform_func (hb_paint_funcs_t *funcs,
                                        hb_paint_push_transform_func_t func,
                                        void *user_data,
                                        hb_destroy_func_t destroy);
# 740 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_pop_transform_func (hb_paint_funcs_t *funcs,
                                       hb_paint_pop_transform_func_t func,
                                       void *user_data,
                                       hb_destroy_func_t destroy);
# 757 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_color_glyph_func (hb_paint_funcs_t *funcs,
         hb_paint_color_glyph_func_t func,
         void *user_data,
         hb_destroy_func_t destroy);
# 774 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_push_clip_glyph_func (hb_paint_funcs_t *funcs,
                                         hb_paint_push_clip_glyph_func_t func,
                                         void *user_data,
                                         hb_destroy_func_t destroy);
# 791 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_push_clip_rectangle_func (hb_paint_funcs_t *funcs,
                                             hb_paint_push_clip_rectangle_func_t func,
                                             void *user_data,
                                             hb_destroy_func_t destroy);
# 808 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_pop_clip_func (hb_paint_funcs_t *funcs,
                                  hb_paint_pop_clip_func_t func,
                                  void *user_data,
                                  hb_destroy_func_t destroy);
# 825 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_color_func (hb_paint_funcs_t *funcs,
                               hb_paint_color_func_t func,
                               void *user_data,
                               hb_destroy_func_t destroy);
# 842 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_image_func (hb_paint_funcs_t *funcs,
                               hb_paint_image_func_t func,
                               void *user_data,
                               hb_destroy_func_t destroy);
# 859 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_linear_gradient_func (hb_paint_funcs_t *funcs,
                                         hb_paint_linear_gradient_func_t func,
                                         void *user_data,
                                         hb_destroy_func_t destroy);
# 876 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_radial_gradient_func (hb_paint_funcs_t *funcs,
                                         hb_paint_radial_gradient_func_t func,
                                         void *user_data,
                                         hb_destroy_func_t destroy);
# 893 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_sweep_gradient_func (hb_paint_funcs_t *funcs,
                                        hb_paint_sweep_gradient_func_t func,
                                        void *user_data,
                                        hb_destroy_func_t destroy);
# 910 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_push_group_func (hb_paint_funcs_t *funcs,
                                    hb_paint_push_group_func_t func,
                                    void *user_data,
                                    hb_destroy_func_t destroy);
# 927 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_pop_group_func (hb_paint_funcs_t *funcs,
                                   hb_paint_pop_group_func_t func,
                                   void *user_data,
                                   hb_destroy_func_t destroy);
# 944 "/usr/include/harfbuzz/hb-paint.h"
extern void
hb_paint_funcs_set_custom_palette_color_func (hb_paint_funcs_t *funcs,
                                              hb_paint_custom_palette_color_func_t func,
                                              void *user_data,
                                              hb_destroy_func_t destroy);




extern void
hb_paint_push_transform (hb_paint_funcs_t *funcs, void *paint_data,
                         float xx, float yx,
                         float xy, float yy,
                         float dx, float dy);

extern void
hb_paint_pop_transform (hb_paint_funcs_t *funcs, void *paint_data);

extern hb_bool_t
hb_paint_color_glyph (hb_paint_funcs_t *funcs, void *paint_data,
                      hb_codepoint_t glyph,
                      hb_font_t *font);

extern void
hb_paint_push_clip_glyph (hb_paint_funcs_t *funcs, void *paint_data,
                          hb_codepoint_t glyph,
                          hb_font_t *font);

extern void
hb_paint_push_clip_rectangle (hb_paint_funcs_t *funcs, void *paint_data,
                              float xmin, float ymin,
                              float xmax, float ymax);

extern void
hb_paint_pop_clip (hb_paint_funcs_t *funcs, void *paint_data);

extern void
hb_paint_color (hb_paint_funcs_t *funcs, void *paint_data,
                hb_bool_t is_foreground,
                hb_color_t color);

extern void
hb_paint_image (hb_paint_funcs_t *funcs, void *paint_data,
                hb_blob_t *image,
                unsigned int width,
                unsigned int height,
                hb_tag_t format,
                float slant,
                hb_glyph_extents_t *extents);

extern void
hb_paint_linear_gradient (hb_paint_funcs_t *funcs, void *paint_data,
                          hb_color_line_t *color_line,
                          float x0, float y0,
                          float x1, float y1,
                          float x2, float y2);

extern void
hb_paint_radial_gradient (hb_paint_funcs_t *funcs, void *paint_data,
                          hb_color_line_t *color_line,
                          float x0, float y0,
                          float r0,
                          float x1, float y1,
                          float r1);

extern void
hb_paint_sweep_gradient (hb_paint_funcs_t *funcs, void *paint_data,
                         hb_color_line_t *color_line,
                         float x0, float y0,
                         float start_angle, float end_angle);

extern void
hb_paint_push_group (hb_paint_funcs_t *funcs, void *paint_data);

extern void
hb_paint_pop_group (hb_paint_funcs_t *funcs, void *paint_data,
                    hb_paint_composite_mode_t mode);

extern hb_bool_t
hb_paint_custom_palette_color (hb_paint_funcs_t *funcs, void *paint_data,
                               unsigned int color_index,
                               hb_color_t *color);
# 38 "/usr/include/harfbuzz/hb-font.h" 2
# 58 "/usr/include/harfbuzz/hb-font.h"
typedef struct hb_font_funcs_t hb_font_funcs_t;

extern hb_font_funcs_t *
hb_font_funcs_create (void);

extern hb_font_funcs_t *
hb_font_funcs_get_empty (void);

extern hb_font_funcs_t *
hb_font_funcs_reference (hb_font_funcs_t *ffuncs);

extern void
hb_font_funcs_destroy (hb_font_funcs_t *ffuncs);

extern hb_bool_t
hb_font_funcs_set_user_data (hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);


extern void *
hb_font_funcs_get_user_data (const hb_font_funcs_t *ffuncs,
        hb_user_data_key_t *key);


extern void
hb_font_funcs_make_immutable (hb_font_funcs_t *ffuncs);

extern hb_bool_t
hb_font_funcs_is_immutable (hb_font_funcs_t *ffuncs);
# 105 "/usr/include/harfbuzz/hb-font.h"
typedef struct hb_font_extents_t {
  hb_position_t ascender;
  hb_position_t descender;
  hb_position_t line_gap;

  hb_position_t reserved9;
  hb_position_t reserved8;
  hb_position_t reserved7;
  hb_position_t reserved6;
  hb_position_t reserved5;
  hb_position_t reserved4;
  hb_position_t reserved3;
  hb_position_t reserved2;
  hb_position_t reserved1;
} hb_font_extents_t;
# 133 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_font_extents_func_t) (hb_font_t *font, void *font_data,
             hb_font_extents_t *extents,
             void *user_data);
# 147 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_font_extents_func_t hb_font_get_font_h_extents_func_t;
# 159 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_font_extents_func_t hb_font_get_font_v_extents_func_t;
# 178 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_nominal_glyph_func_t) (hb_font_t *font, void *font_data,
             hb_codepoint_t unicode,
             hb_codepoint_t *glyph,
             void *user_data);
# 201 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_variation_glyph_func_t) (hb_font_t *font, void *font_data,
        hb_codepoint_t unicode, hb_codepoint_t variation_selector,
        hb_codepoint_t *glyph,
        void *user_data);
# 227 "/usr/include/harfbuzz/hb-font.h"
typedef unsigned int (*hb_font_get_nominal_glyphs_func_t) (hb_font_t *font, void *font_data,
          unsigned int count,
          const hb_codepoint_t *first_unicode,
          unsigned int unicode_stride,
          hb_codepoint_t *first_glyph,
          unsigned int glyph_stride,
          void *user_data);
# 250 "/usr/include/harfbuzz/hb-font.h"
typedef hb_position_t (*hb_font_get_glyph_advance_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          void *user_data);
# 264 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_h_advance_func_t;
# 276 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_advance_func_t hb_font_get_glyph_v_advance_func_t;
# 294 "/usr/include/harfbuzz/hb-font.h"
typedef void (*hb_font_get_glyph_advances_func_t) (hb_font_t* font, void* font_data,
         unsigned int count,
         const hb_codepoint_t *first_glyph,
         unsigned glyph_stride,
         hb_position_t *first_advance,
         unsigned advance_stride,
         void *user_data);
# 311 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_advances_func_t hb_font_get_glyph_h_advances_func_t;
# 322 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_advances_func_t hb_font_get_glyph_v_advances_func_t;
# 342 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_origin_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph,
            hb_position_t *x, hb_position_t *y,
            void *user_data);
# 357 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_h_origin_func_t;
# 369 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_origin_func_t hb_font_get_glyph_v_origin_func_t;
# 383 "/usr/include/harfbuzz/hb-font.h"
typedef hb_position_t (*hb_font_get_glyph_kerning_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
          void *user_data);
# 395 "/usr/include/harfbuzz/hb-font.h"
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_h_kerning_func_t;
# 414 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_extents_func_t) (hb_font_t *font, void *font_data,
             hb_codepoint_t glyph,
             hb_glyph_extents_t *extents,
             void *user_data);
# 438 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_contour_point_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t glyph, unsigned int point_index,
            hb_position_t *x, hb_position_t *y,
            void *user_data);
# 461 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_name_func_t) (hb_font_t *font, void *font_data,
          hb_codepoint_t glyph,
          char *name, unsigned int size,
          void *user_data);
# 483 "/usr/include/harfbuzz/hb-font.h"
typedef hb_bool_t (*hb_font_get_glyph_from_name_func_t) (hb_font_t *font, void *font_data,
        const char *name, int len,
        hb_codepoint_t *glyph,
        void *user_data);
# 502 "/usr/include/harfbuzz/hb-font.h"
typedef void (*hb_font_draw_glyph_func_t) (hb_font_t *font, void *font_data,
                                           hb_codepoint_t glyph,
                                           hb_draw_funcs_t *draw_funcs, void *draw_data,
                                           void *user_data);
# 522 "/usr/include/harfbuzz/hb-font.h"
typedef void (*hb_font_paint_glyph_func_t) (hb_font_t *font, void *font_data,
                                            hb_codepoint_t glyph,
                                            hb_paint_funcs_t *paint_funcs, void *paint_data,
                                            unsigned int palette_index,
                                            hb_color_t foreground,
                                            void *user_data);
# 542 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_font_h_extents_func (hb_font_funcs_t *ffuncs,
           hb_font_get_font_h_extents_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 558 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_font_v_extents_func (hb_font_funcs_t *ffuncs,
           hb_font_get_font_v_extents_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 574 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_nominal_glyph_func (hb_font_funcs_t *ffuncs,
          hb_font_get_nominal_glyph_func_t func,
          void *user_data, hb_destroy_func_t destroy);
# 590 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_nominal_glyphs_func (hb_font_funcs_t *ffuncs,
           hb_font_get_nominal_glyphs_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 606 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_variation_glyph_func (hb_font_funcs_t *ffuncs,
     hb_font_get_variation_glyph_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 622 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_h_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 638 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_v_advance_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_advance_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 654 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_h_advances_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_advances_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 670 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_v_advances_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_advances_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 686 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_h_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_h_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 702 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_v_origin_func (hb_font_funcs_t *ffuncs,
           hb_font_get_glyph_v_origin_func_t func,
           void *user_data, hb_destroy_func_t destroy);
# 718 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_h_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_h_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 734 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_extents_func (hb_font_funcs_t *ffuncs,
          hb_font_get_glyph_extents_func_t func,
          void *user_data, hb_destroy_func_t destroy);
# 750 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_contour_point_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_contour_point_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 766 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_name_func (hb_font_funcs_t *ffuncs,
       hb_font_get_glyph_name_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 782 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_glyph_from_name_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_from_name_func_t func,
     void *user_data, hb_destroy_func_t destroy);
# 798 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_draw_glyph_func (hb_font_funcs_t *ffuncs,
                                   hb_font_draw_glyph_func_t func,
                                   void *user_data, hb_destroy_func_t destroy);
# 814 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_funcs_set_paint_glyph_func (hb_font_funcs_t *ffuncs,
                                    hb_font_paint_glyph_func_t func,
                                    void *user_data, hb_destroy_func_t destroy);



extern hb_bool_t
hb_font_get_h_extents (hb_font_t *font,
         hb_font_extents_t *extents);
extern hb_bool_t
hb_font_get_v_extents (hb_font_t *font,
         hb_font_extents_t *extents);

extern hb_bool_t
hb_font_get_nominal_glyph (hb_font_t *font,
      hb_codepoint_t unicode,
      hb_codepoint_t *glyph);
extern hb_bool_t
hb_font_get_variation_glyph (hb_font_t *font,
        hb_codepoint_t unicode, hb_codepoint_t variation_selector,
        hb_codepoint_t *glyph);

extern unsigned int
hb_font_get_nominal_glyphs (hb_font_t *font,
       unsigned int count,
       const hb_codepoint_t *first_unicode,
       unsigned int unicode_stride,
       hb_codepoint_t *first_glyph,
       unsigned int glyph_stride);

extern hb_position_t
hb_font_get_glyph_h_advance (hb_font_t *font,
        hb_codepoint_t glyph);
extern hb_position_t
hb_font_get_glyph_v_advance (hb_font_t *font,
        hb_codepoint_t glyph);

extern void
hb_font_get_glyph_h_advances (hb_font_t* font,
         unsigned int count,
         const hb_codepoint_t *first_glyph,
         unsigned glyph_stride,
         hb_position_t *first_advance,
         unsigned advance_stride);
extern void
hb_font_get_glyph_v_advances (hb_font_t* font,
         unsigned int count,
         const hb_codepoint_t *first_glyph,
         unsigned glyph_stride,
         hb_position_t *first_advance,
         unsigned advance_stride);

extern hb_bool_t
hb_font_get_glyph_h_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);
extern hb_bool_t
hb_font_get_glyph_v_origin (hb_font_t *font,
       hb_codepoint_t glyph,
       hb_position_t *x, hb_position_t *y);

extern hb_position_t
hb_font_get_glyph_h_kerning (hb_font_t *font,
        hb_codepoint_t left_glyph, hb_codepoint_t right_glyph);

extern hb_bool_t
hb_font_get_glyph_extents (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_glyph_extents_t *extents);

extern hb_bool_t
hb_font_get_glyph_contour_point (hb_font_t *font,
     hb_codepoint_t glyph, unsigned int point_index,
     hb_position_t *x, hb_position_t *y);

extern hb_bool_t
hb_font_get_glyph_name (hb_font_t *font,
   hb_codepoint_t glyph,
   char *name, unsigned int size);
extern hb_bool_t
hb_font_get_glyph_from_name (hb_font_t *font,
        const char *name, int len,
        hb_codepoint_t *glyph);

extern void
hb_font_draw_glyph (hb_font_t *font,
                    hb_codepoint_t glyph,
                    hb_draw_funcs_t *dfuncs, void *draw_data);

extern void
hb_font_paint_glyph (hb_font_t *font,
                     hb_codepoint_t glyph,
                     hb_paint_funcs_t *pfuncs, void *paint_data,
                     unsigned int palette_index,
                     hb_color_t foreground);





extern hb_bool_t
hb_font_get_glyph (hb_font_t *font,
     hb_codepoint_t unicode, hb_codepoint_t variation_selector,
     hb_codepoint_t *glyph);

extern void
hb_font_get_extents_for_direction (hb_font_t *font,
       hb_direction_t direction,
       hb_font_extents_t *extents);
extern void
hb_font_get_glyph_advance_for_direction (hb_font_t *font,
      hb_codepoint_t glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);
extern void
hb_font_get_glyph_advances_for_direction (hb_font_t* font,
       hb_direction_t direction,
       unsigned int count,
       const hb_codepoint_t *first_glyph,
       unsigned glyph_stride,
       hb_position_t *first_advance,
       unsigned advance_stride);
extern void
hb_font_get_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
extern void
hb_font_add_glyph_origin_for_direction (hb_font_t *font,
     hb_codepoint_t glyph,
     hb_direction_t direction,
     hb_position_t *x, hb_position_t *y);
extern void
hb_font_subtract_glyph_origin_for_direction (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_position_t *x, hb_position_t *y);

extern void
hb_font_get_glyph_kerning_for_direction (hb_font_t *font,
      hb_codepoint_t first_glyph, hb_codepoint_t second_glyph,
      hb_direction_t direction,
      hb_position_t *x, hb_position_t *y);

extern hb_bool_t
hb_font_get_glyph_extents_for_origin (hb_font_t *font,
          hb_codepoint_t glyph,
          hb_direction_t direction,
          hb_glyph_extents_t *extents);

extern hb_bool_t
hb_font_get_glyph_contour_point_for_origin (hb_font_t *font,
         hb_codepoint_t glyph, unsigned int point_index,
         hb_direction_t direction,
         hb_position_t *x, hb_position_t *y);


extern void
hb_font_glyph_to_string (hb_font_t *font,
    hb_codepoint_t glyph,
    char *s, unsigned int size);

extern hb_bool_t
hb_font_glyph_from_string (hb_font_t *font,
      const char *s, int len,
      hb_codepoint_t *glyph);
# 989 "/usr/include/harfbuzz/hb-font.h"
extern hb_font_t *
hb_font_create (hb_face_t *face);

extern hb_font_t *
hb_font_create_sub_font (hb_font_t *parent);

extern hb_font_t *
hb_font_get_empty (void);

extern hb_font_t *
hb_font_reference (hb_font_t *font);

extern void
hb_font_destroy (hb_font_t *font);

extern hb_bool_t
hb_font_set_user_data (hb_font_t *font,
         hb_user_data_key_t *key,
         void * data,
         hb_destroy_func_t destroy,
         hb_bool_t replace);


extern void *
hb_font_get_user_data (const hb_font_t *font,
         hb_user_data_key_t *key);

extern void
hb_font_make_immutable (hb_font_t *font);

extern hb_bool_t
hb_font_is_immutable (hb_font_t *font);

extern unsigned int
hb_font_get_serial (hb_font_t *font);

extern void
hb_font_changed (hb_font_t *font);

extern void
hb_font_set_parent (hb_font_t *font,
      hb_font_t *parent);

extern hb_font_t *
hb_font_get_parent (hb_font_t *font);

extern void
hb_font_set_face (hb_font_t *font,
    hb_face_t *face);

extern hb_face_t *
hb_font_get_face (hb_font_t *font);


extern void
hb_font_set_funcs (hb_font_t *font,
     hb_font_funcs_t *klass,
     void *font_data,
     hb_destroy_func_t destroy);


extern void
hb_font_set_funcs_data (hb_font_t *font,
   void *font_data,
   hb_destroy_func_t destroy);


extern void
hb_font_set_scale (hb_font_t *font,
     int x_scale,
     int y_scale);

extern void
hb_font_get_scale (hb_font_t *font,
     int *x_scale,
     int *y_scale);




extern void
hb_font_set_ppem (hb_font_t *font,
    unsigned int x_ppem,
    unsigned int y_ppem);

extern void
hb_font_get_ppem (hb_font_t *font,
    unsigned int *x_ppem,
    unsigned int *y_ppem);





extern void
hb_font_set_ptem (hb_font_t *font, float ptem);

extern float
hb_font_get_ptem (hb_font_t *font);

extern void
hb_font_set_synthetic_bold (hb_font_t *font,
       float x_embolden, float y_embolden,
       hb_bool_t in_place);

extern void
hb_font_get_synthetic_bold (hb_font_t *font,
       float *x_embolden, float *y_embolden,
       hb_bool_t *in_place);

extern void
hb_font_set_synthetic_slant (hb_font_t *font, float slant);

extern float
hb_font_get_synthetic_slant (hb_font_t *font);

extern void
hb_font_set_variations (hb_font_t *font,
   const hb_variation_t *variations,
   unsigned int variations_length);

extern void
hb_font_set_variation (hb_font_t *font,
         hb_tag_t tag,
         float value);

extern void
hb_font_set_var_coords_design (hb_font_t *font,
          const float *coords,
          unsigned int coords_length);

extern const float *
hb_font_get_var_coords_design (hb_font_t *font,
          unsigned int *length);

extern void
hb_font_set_var_coords_normalized (hb_font_t *font,
       const int *coords,
       unsigned int coords_length);

extern const int *
hb_font_get_var_coords_normalized (hb_font_t *font,
       unsigned int *length);
# 1144 "/usr/include/harfbuzz/hb-font.h"
extern void
hb_font_set_var_named_instance (hb_font_t *font,
    unsigned int instance_index);

extern unsigned int
hb_font_get_var_named_instance (hb_font_t *font);
# 40 "/usr/include/harfbuzz/hb-buffer.h" 2
# 62 "/usr/include/harfbuzz/hb-buffer.h"
typedef struct hb_glyph_info_t {
  hb_codepoint_t codepoint;

  hb_mask_t mask;

  uint32_t cluster;


  hb_var_int_t var1;
  hb_var_int_t var2;
} hb_glyph_info_t;
# 160 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_GLYPH_FLAG_UNSAFE_TO_BREAK = 0x00000001,
  HB_GLYPH_FLAG_UNSAFE_TO_CONCAT = 0x00000002,
  HB_GLYPH_FLAG_SAFE_TO_INSERT_TATWEEL = 0x00000004,

  HB_GLYPH_FLAG_DEFINED = 0x00000007
} hb_glyph_flags_t;

extern hb_glyph_flags_t
hb_glyph_info_get_glyph_flags (const hb_glyph_info_t *info);
# 191 "/usr/include/harfbuzz/hb-buffer.h"
typedef struct hb_glyph_position_t {
  hb_position_t x_advance;
  hb_position_t y_advance;
  hb_position_t x_offset;
  hb_position_t y_offset;


  hb_var_int_t var;
} hb_glyph_position_t;
# 211 "/usr/include/harfbuzz/hb-buffer.h"
typedef struct hb_segment_properties_t {
  hb_direction_t direction;
  hb_script_t script;
  hb_language_t language;

  void *reserved1;
  void *reserved2;
} hb_segment_properties_t;
# 231 "/usr/include/harfbuzz/hb-buffer.h"
extern hb_bool_t
hb_segment_properties_equal (const hb_segment_properties_t *a,
        const hb_segment_properties_t *b);

extern unsigned int
hb_segment_properties_hash (const hb_segment_properties_t *p);

extern void
hb_segment_properties_overlay (hb_segment_properties_t *p,
          const hb_segment_properties_t *src);
# 250 "/usr/include/harfbuzz/hb-buffer.h"
typedef struct hb_buffer_t hb_buffer_t;

extern hb_buffer_t *
hb_buffer_create (void);

extern hb_buffer_t *
hb_buffer_create_similar (const hb_buffer_t *src);

extern void
hb_buffer_reset (hb_buffer_t *buffer);


extern hb_buffer_t *
hb_buffer_get_empty (void);

extern hb_buffer_t *
hb_buffer_reference (hb_buffer_t *buffer);

extern void
hb_buffer_destroy (hb_buffer_t *buffer);

extern hb_bool_t
hb_buffer_set_user_data (hb_buffer_t *buffer,
    hb_user_data_key_t *key,
    void * data,
    hb_destroy_func_t destroy,
    hb_bool_t replace);

extern void *
hb_buffer_get_user_data (const hb_buffer_t *buffer,
    hb_user_data_key_t *key);
# 291 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_CONTENT_TYPE_INVALID = 0,
  HB_BUFFER_CONTENT_TYPE_UNICODE,
  HB_BUFFER_CONTENT_TYPE_GLYPHS
} hb_buffer_content_type_t;

extern void
hb_buffer_set_content_type (hb_buffer_t *buffer,
       hb_buffer_content_type_t content_type);

extern hb_buffer_content_type_t
hb_buffer_get_content_type (const hb_buffer_t *buffer);


extern void
hb_buffer_set_unicode_funcs (hb_buffer_t *buffer,
        hb_unicode_funcs_t *unicode_funcs);

extern hb_unicode_funcs_t *
hb_buffer_get_unicode_funcs (const hb_buffer_t *buffer);

extern void
hb_buffer_set_direction (hb_buffer_t *buffer,
    hb_direction_t direction);

extern hb_direction_t
hb_buffer_get_direction (const hb_buffer_t *buffer);

extern void
hb_buffer_set_script (hb_buffer_t *buffer,
        hb_script_t script);

extern hb_script_t
hb_buffer_get_script (const hb_buffer_t *buffer);

extern void
hb_buffer_set_language (hb_buffer_t *buffer,
   hb_language_t language);


extern hb_language_t
hb_buffer_get_language (const hb_buffer_t *buffer);

extern void
hb_buffer_set_segment_properties (hb_buffer_t *buffer,
      const hb_segment_properties_t *props);

extern void
hb_buffer_get_segment_properties (const hb_buffer_t *buffer,
      hb_segment_properties_t *props);

extern void
hb_buffer_guess_segment_properties (hb_buffer_t *buffer);
# 396 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_FLAG_BOT = 0x00000001u,
  HB_BUFFER_FLAG_EOT = 0x00000002u,
  HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES = 0x00000004u,
  HB_BUFFER_FLAG_REMOVE_DEFAULT_IGNORABLES = 0x00000008u,
  HB_BUFFER_FLAG_DO_NOT_INSERT_DOTTED_CIRCLE = 0x00000010u,
  HB_BUFFER_FLAG_VERIFY = 0x00000020u,
  HB_BUFFER_FLAG_PRODUCE_UNSAFE_TO_CONCAT = 0x00000040u,
  HB_BUFFER_FLAG_PRODUCE_SAFE_TO_INSERT_TATWEEL = 0x00000080u,

  HB_BUFFER_FLAG_DEFINED = 0x000000FFu
} hb_buffer_flags_t;

extern void
hb_buffer_set_flags (hb_buffer_t *buffer,
       hb_buffer_flags_t flags);

extern hb_buffer_flags_t
hb_buffer_get_flags (const hb_buffer_t *buffer);
# 445 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES = 0,
  HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS = 1,
  HB_BUFFER_CLUSTER_LEVEL_CHARACTERS = 2,
  HB_BUFFER_CLUSTER_LEVEL_DEFAULT = HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES
} hb_buffer_cluster_level_t;

extern void
hb_buffer_set_cluster_level (hb_buffer_t *buffer,
        hb_buffer_cluster_level_t cluster_level);

extern hb_buffer_cluster_level_t
hb_buffer_get_cluster_level (const hb_buffer_t *buffer);
# 469 "/usr/include/harfbuzz/hb-buffer.h"
extern void
hb_buffer_set_replacement_codepoint (hb_buffer_t *buffer,
         hb_codepoint_t replacement);

extern hb_codepoint_t
hb_buffer_get_replacement_codepoint (const hb_buffer_t *buffer);

extern void
hb_buffer_set_invisible_glyph (hb_buffer_t *buffer,
          hb_codepoint_t invisible);

extern hb_codepoint_t
hb_buffer_get_invisible_glyph (const hb_buffer_t *buffer);

extern void
hb_buffer_set_not_found_glyph (hb_buffer_t *buffer,
          hb_codepoint_t not_found);

extern hb_codepoint_t
hb_buffer_get_not_found_glyph (const hb_buffer_t *buffer);

extern void
hb_buffer_set_random_state (hb_buffer_t *buffer,
       unsigned state);

extern unsigned
hb_buffer_get_random_state (const hb_buffer_t *buffer);





extern void
hb_buffer_clear_contents (hb_buffer_t *buffer);

extern hb_bool_t
hb_buffer_pre_allocate (hb_buffer_t *buffer,
   unsigned int size);


extern hb_bool_t
hb_buffer_allocation_successful (hb_buffer_t *buffer);

extern void
hb_buffer_reverse (hb_buffer_t *buffer);

extern void
hb_buffer_reverse_range (hb_buffer_t *buffer,
    unsigned int start, unsigned int end);

extern void
hb_buffer_reverse_clusters (hb_buffer_t *buffer);




extern void
hb_buffer_add (hb_buffer_t *buffer,
        hb_codepoint_t codepoint,
        unsigned int cluster);

extern void
hb_buffer_add_utf8 (hb_buffer_t *buffer,
      const char *text,
      int text_length,
      unsigned int item_offset,
      int item_length);

extern void
hb_buffer_add_utf16 (hb_buffer_t *buffer,
       const uint16_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);

extern void
hb_buffer_add_utf32 (hb_buffer_t *buffer,
       const uint32_t *text,
       int text_length,
       unsigned int item_offset,
       int item_length);

extern void
hb_buffer_add_latin1 (hb_buffer_t *buffer,
        const uint8_t *text,
        int text_length,
        unsigned int item_offset,
        int item_length);

extern void
hb_buffer_add_codepoints (hb_buffer_t *buffer,
     const hb_codepoint_t *text,
     int text_length,
     unsigned int item_offset,
     int item_length);

extern void
hb_buffer_append (hb_buffer_t *buffer,
    const hb_buffer_t *source,
    unsigned int start,
    unsigned int end);

extern hb_bool_t
hb_buffer_set_length (hb_buffer_t *buffer,
        unsigned int length);

extern unsigned int
hb_buffer_get_length (const hb_buffer_t *buffer);



extern hb_glyph_info_t *
hb_buffer_get_glyph_infos (hb_buffer_t *buffer,
      unsigned int *length);

extern hb_glyph_position_t *
hb_buffer_get_glyph_positions (hb_buffer_t *buffer,
          unsigned int *length);

extern hb_bool_t
hb_buffer_has_positions (hb_buffer_t *buffer);


extern void
hb_buffer_normalize_glyphs (hb_buffer_t *buffer);
# 616 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_SERIALIZE_FLAG_DEFAULT = 0x00000000u,
  HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS = 0x00000001u,
  HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS = 0x00000002u,
  HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES = 0x00000004u,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS = 0x00000008u,
  HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS = 0x00000010u,
  HB_BUFFER_SERIALIZE_FLAG_NO_ADVANCES = 0x00000020u,

  HB_BUFFER_SERIALIZE_FLAG_DEFINED = 0x0000003Fu
} hb_buffer_serialize_flags_t;
# 639 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_SERIALIZE_FORMAT_TEXT = ((hb_tag_t)((((uint32_t)('T')&0xFF)<<24)|(((uint32_t)('E')&0xFF)<<16)|(((uint32_t)('X')&0xFF)<<8)|((uint32_t)('T')&0xFF))),
  HB_BUFFER_SERIALIZE_FORMAT_JSON = ((hb_tag_t)((((uint32_t)('J')&0xFF)<<24)|(((uint32_t)('S')&0xFF)<<16)|(((uint32_t)('O')&0xFF)<<8)|((uint32_t)('N')&0xFF))),
  HB_BUFFER_SERIALIZE_FORMAT_INVALID = ((hb_tag_t)((((uint32_t)(0)&0xFF)<<24)|(((uint32_t)(0)&0xFF)<<16)|(((uint32_t)(0)&0xFF)<<8)|((uint32_t)(0)&0xFF)))
} hb_buffer_serialize_format_t;

extern hb_buffer_serialize_format_t
hb_buffer_serialize_format_from_string (const char *str, int len);

extern const char *
hb_buffer_serialize_format_to_string (hb_buffer_serialize_format_t format);

extern const char **
hb_buffer_serialize_list_formats (void);

extern unsigned int
hb_buffer_serialize_glyphs (hb_buffer_t *buffer,
       unsigned int start,
       unsigned int end,
       char *buf,
       unsigned int buf_size,
       unsigned int *buf_consumed,
       hb_font_t *font,
       hb_buffer_serialize_format_t format,
       hb_buffer_serialize_flags_t flags);

extern unsigned int
hb_buffer_serialize_unicode (hb_buffer_t *buffer,
        unsigned int start,
        unsigned int end,
        char *buf,
        unsigned int buf_size,
        unsigned int *buf_consumed,
        hb_buffer_serialize_format_t format,
        hb_buffer_serialize_flags_t flags);

extern unsigned int
hb_buffer_serialize (hb_buffer_t *buffer,
       unsigned int start,
       unsigned int end,
       char *buf,
       unsigned int buf_size,
       unsigned int *buf_consumed,
       hb_font_t *font,
       hb_buffer_serialize_format_t format,
       hb_buffer_serialize_flags_t flags);

extern hb_bool_t
hb_buffer_deserialize_glyphs (hb_buffer_t *buffer,
         const char *buf,
         int buf_len,
         const char **end_ptr,
         hb_font_t *font,
         hb_buffer_serialize_format_t format);

extern hb_bool_t
hb_buffer_deserialize_unicode (hb_buffer_t *buffer,
          const char *buf,
          int buf_len,
          const char **end_ptr,
          hb_buffer_serialize_format_t format);
# 736 "/usr/include/harfbuzz/hb-buffer.h"
typedef enum {
  HB_BUFFER_DIFF_FLAG_EQUAL = 0x0000,



  HB_BUFFER_DIFF_FLAG_CONTENT_TYPE_MISMATCH = 0x0001,




  HB_BUFFER_DIFF_FLAG_LENGTH_MISMATCH = 0x0002,




  HB_BUFFER_DIFF_FLAG_NOTDEF_PRESENT = 0x0004,
  HB_BUFFER_DIFF_FLAG_DOTTED_CIRCLE_PRESENT = 0x0008,



  HB_BUFFER_DIFF_FLAG_CODEPOINT_MISMATCH = 0x0010,
  HB_BUFFER_DIFF_FLAG_CLUSTER_MISMATCH = 0x0020,
  HB_BUFFER_DIFF_FLAG_GLYPH_FLAGS_MISMATCH = 0x0040,
  HB_BUFFER_DIFF_FLAG_POSITION_MISMATCH = 0x0080

} hb_buffer_diff_flags_t;


extern hb_buffer_diff_flags_t
hb_buffer_diff (hb_buffer_t *buffer,
  hb_buffer_t *reference,
  hb_codepoint_t dottedcircle_glyph,
  unsigned int position_fuzz);
# 792 "/usr/include/harfbuzz/hb-buffer.h"
typedef hb_bool_t (*hb_buffer_message_func_t) (hb_buffer_t *buffer,
        hb_font_t *font,
        const char *message,
        void *user_data);

extern void
hb_buffer_set_message_func (hb_buffer_t *buffer,
       hb_buffer_message_func_t func,
       void *user_data, hb_destroy_func_t destroy);
# 33 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 34 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-deprecated.h" 1
# 34 "/usr/include/harfbuzz/hb-deprecated.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-deprecated.h" 2
# 1 "/usr/include/harfbuzz/hb-unicode.h" 1
# 36 "/usr/include/harfbuzz/hb-deprecated.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 37 "/usr/include/harfbuzz/hb-deprecated.h" 2
# 1 "/usr/include/harfbuzz/hb-set.h" 1
# 38 "/usr/include/harfbuzz/hb-deprecated.h" 2
# 100 "/usr/include/harfbuzz/hb-deprecated.h"
typedef hb_bool_t (*hb_font_get_glyph_func_t) (hb_font_t *font, void *font_data,
            hb_codepoint_t unicode, hb_codepoint_t variation_selector,
            hb_codepoint_t *glyph,
            void *user_data);

__attribute__((__deprecated__))
extern void
hb_font_funcs_set_glyph_func (hb_font_funcs_t *ffuncs,
         hb_font_get_glyph_func_t func,
         void *user_data, hb_destroy_func_t destroy);
# 131 "/usr/include/harfbuzz/hb-deprecated.h"
typedef unsigned int (*hb_unicode_eastasian_width_func_t) (hb_unicode_funcs_t *ufuncs,
           hb_codepoint_t unicode,
           void *user_data);
# 147 "/usr/include/harfbuzz/hb-deprecated.h"
extern __attribute__((__deprecated__)) void
hb_unicode_funcs_set_eastasian_width_func (hb_unicode_funcs_t *ufuncs,
        hb_unicode_eastasian_width_func_t func,
        void *user_data, hb_destroy_func_t destroy);
# 162 "/usr/include/harfbuzz/hb-deprecated.h"
extern __attribute__((__deprecated__)) unsigned int
hb_unicode_eastasian_width (hb_unicode_funcs_t *ufuncs,
       hb_codepoint_t unicode);
# 187 "/usr/include/harfbuzz/hb-deprecated.h"
typedef unsigned int (*hb_unicode_decompose_compatibility_func_t) (hb_unicode_funcs_t *ufuncs,
            hb_codepoint_t u,
            hb_codepoint_t *decomposed,
            void *user_data);
# 215 "/usr/include/harfbuzz/hb-deprecated.h"
extern __attribute__((__deprecated__)) void
hb_unicode_funcs_set_decompose_compatibility_func (hb_unicode_funcs_t *ufuncs,
         hb_unicode_decompose_compatibility_func_t func,
         void *user_data, hb_destroy_func_t destroy);

extern __attribute__((__deprecated__)) unsigned int
hb_unicode_decompose_compatibility (hb_unicode_funcs_t *ufuncs,
        hb_codepoint_t u,
        hb_codepoint_t *decomposed);
# 235 "/usr/include/harfbuzz/hb-deprecated.h"
typedef hb_font_get_glyph_kerning_func_t hb_font_get_glyph_v_kerning_func_t;
# 249 "/usr/include/harfbuzz/hb-deprecated.h"
extern void
hb_font_funcs_set_glyph_v_kerning_func (hb_font_funcs_t *ffuncs,
     hb_font_get_glyph_v_kerning_func_t func,
     void *user_data, hb_destroy_func_t destroy);

extern hb_position_t
hb_font_get_glyph_v_kerning (hb_font_t *font,
        hb_codepoint_t top_glyph, hb_codepoint_t bottom_glyph);
# 273 "/usr/include/harfbuzz/hb-deprecated.h"
typedef void (*hb_font_get_glyph_shape_func_t) (hb_font_t *font, void *font_data,
      hb_codepoint_t glyph,
      hb_draw_funcs_t *draw_funcs, void *draw_data,
      void *user_data);
# 291 "/usr/include/harfbuzz/hb-deprecated.h"
__attribute__((__deprecated__))
extern void
hb_font_funcs_set_glyph_shape_func (hb_font_funcs_t *ffuncs,
        hb_font_get_glyph_shape_func_t func,
        void *user_data, hb_destroy_func_t destroy);

__attribute__((__deprecated__))
extern void
hb_font_get_glyph_shape (hb_font_t *font,
    hb_codepoint_t glyph,
    hb_draw_funcs_t *dfuncs, void *draw_data);
# 35 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-draw.h" 1
# 36 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-face.h" 1
# 37 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 38 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-map.h" 1
# 39 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-paint.h" 1
# 40 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-set.h" 1
# 41 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-shape.h" 1
# 36 "/usr/include/harfbuzz/hb-shape.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 37 "/usr/include/harfbuzz/hb-shape.h" 2
# 1 "/usr/include/harfbuzz/hb-buffer.h" 1
# 38 "/usr/include/harfbuzz/hb-shape.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 39 "/usr/include/harfbuzz/hb-shape.h" 2




extern void
hb_shape (hb_font_t *font,
   hb_buffer_t *buffer,
   const hb_feature_t *features,
   unsigned int num_features);

extern hb_bool_t
hb_shape_full (hb_font_t *font,
        hb_buffer_t *buffer,
        const hb_feature_t *features,
        unsigned int num_features,
        const char * const *shaper_list);

extern hb_bool_t
hb_shape_justify (hb_font_t *font,
    hb_buffer_t *buffer,
    const hb_feature_t *features,
    unsigned int num_features,
    const char * const *shaper_list,
    float min_target_advance,
    float max_target_advance,
    float *advance,
    hb_tag_t *var_tag,
    float *var_value );

extern const char **
hb_shape_list_shapers (void);
# 42 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-shape-plan.h" 1
# 34 "/usr/include/harfbuzz/hb-shape-plan.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-shape-plan.h" 2
# 1 "/usr/include/harfbuzz/hb-font.h" 1
# 36 "/usr/include/harfbuzz/hb-shape-plan.h" 2
# 53 "/usr/include/harfbuzz/hb-shape-plan.h"
typedef struct hb_shape_plan_t hb_shape_plan_t;

extern hb_shape_plan_t *
hb_shape_plan_create (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

extern hb_shape_plan_t *
hb_shape_plan_create_cached (hb_face_t *face,
        const hb_segment_properties_t *props,
        const hb_feature_t *user_features,
        unsigned int num_user_features,
        const char * const *shaper_list);

extern hb_shape_plan_t *
hb_shape_plan_create2 (hb_face_t *face,
         const hb_segment_properties_t *props,
         const hb_feature_t *user_features,
         unsigned int num_user_features,
         const int *coords,
         unsigned int num_coords,
         const char * const *shaper_list);

extern hb_shape_plan_t *
hb_shape_plan_create_cached2 (hb_face_t *face,
         const hb_segment_properties_t *props,
         const hb_feature_t *user_features,
         unsigned int num_user_features,
         const int *coords,
         unsigned int num_coords,
         const char * const *shaper_list);


extern hb_shape_plan_t *
hb_shape_plan_get_empty (void);

extern hb_shape_plan_t *
hb_shape_plan_reference (hb_shape_plan_t *shape_plan);

extern void
hb_shape_plan_destroy (hb_shape_plan_t *shape_plan);

extern hb_bool_t
hb_shape_plan_set_user_data (hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key,
        void * data,
        hb_destroy_func_t destroy,
        hb_bool_t replace);

extern void *
hb_shape_plan_get_user_data (const hb_shape_plan_t *shape_plan,
        hb_user_data_key_t *key);


extern hb_bool_t
hb_shape_plan_execute (hb_shape_plan_t *shape_plan,
         hb_font_t *font,
         hb_buffer_t *buffer,
         const hb_feature_t *features,
         unsigned int num_features);

extern const char *
hb_shape_plan_get_shaper (hb_shape_plan_t *shape_plan);
# 43 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-style.h" 1
# 32 "/usr/include/harfbuzz/hb-style.h"
# 1 "/usr/include/harfbuzz/hb.h" 1
# 33 "/usr/include/harfbuzz/hb-style.h" 2
# 62 "/usr/include/harfbuzz/hb-style.h"
typedef enum
{
  HB_STYLE_TAG_ITALIC = ((hb_tag_t)((((uint32_t)('i')&0xFF)<<24)|(((uint32_t)('t')&0xFF)<<16)|(((uint32_t)('a')&0xFF)<<8)|((uint32_t)('l')&0xFF))),
  HB_STYLE_TAG_OPTICAL_SIZE = ((hb_tag_t)((((uint32_t)('o')&0xFF)<<24)|(((uint32_t)('p')&0xFF)<<16)|(((uint32_t)('s')&0xFF)<<8)|((uint32_t)('z')&0xFF))),
  HB_STYLE_TAG_SLANT_ANGLE = ((hb_tag_t)((((uint32_t)('s')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
  HB_STYLE_TAG_SLANT_RATIO = ((hb_tag_t)((((uint32_t)('S')&0xFF)<<24)|(((uint32_t)('l')&0xFF)<<16)|(((uint32_t)('n')&0xFF)<<8)|((uint32_t)('t')&0xFF))),
  HB_STYLE_TAG_WIDTH = ((hb_tag_t)((((uint32_t)('w')&0xFF)<<24)|(((uint32_t)('d')&0xFF)<<16)|(((uint32_t)('t')&0xFF)<<8)|((uint32_t)('h')&0xFF))),
  HB_STYLE_TAG_WEIGHT = ((hb_tag_t)((((uint32_t)('w')&0xFF)<<24)|(((uint32_t)('g')&0xFF)<<16)|(((uint32_t)('h')&0xFF)<<8)|((uint32_t)('t')&0xFF))),


  _HB_STYLE_TAG_MAX_VALUE = ((hb_tag_t)((((uint32_t)(0x7f)&0xFF)<<24)|(((uint32_t)(0xff)&0xFF)<<16)|(((uint32_t)(0xff)&0xFF)<<8)|((uint32_t)(0xff)&0xFF)))
} hb_style_tag_t;


extern float
hb_style_get_value (hb_font_t *font, hb_style_tag_t style_tag);
# 44 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-unicode.h" 1
# 45 "/usr/include/harfbuzz/hb.h" 2
# 1 "/usr/include/harfbuzz/hb-version.h" 1
# 34 "/usr/include/harfbuzz/hb-version.h"
# 1 "/usr/include/harfbuzz/hb-common.h" 1
# 35 "/usr/include/harfbuzz/hb-version.h" 2
# 79 "/usr/include/harfbuzz/hb-version.h"
extern void
hb_version (unsigned int *major,
     unsigned int *minor,
     unsigned int *micro);

extern const char *
hb_version_string (void);

extern hb_bool_t
hb_version_atleast (unsigned int major,
      unsigned int minor,
      unsigned int micro);
# 46 "/usr/include/harfbuzz/hb.h" 2
# 29 "/usr/include/pango-1.0/pango/pango-coverage.h" 2
# 44 "/usr/include/pango-1.0/pango/pango-coverage.h"
typedef struct _PangoCoverage PangoCoverage;
# 67 "/usr/include/pango-1.0/pango/pango-coverage.h"
typedef enum {
  PANGO_COVERAGE_NONE,
  PANGO_COVERAGE_FALLBACK,
  PANGO_COVERAGE_APPROXIMATE,
  PANGO_COVERAGE_EXACT
} PangoCoverageLevel;

extern
GType pango_coverage_get_type (void) __attribute__ ((__const__));

extern
PangoCoverage * pango_coverage_new (void);
__attribute__((__deprecated__("Use '" "g_object_ref" "' instead"))) extern
PangoCoverage * pango_coverage_ref (PangoCoverage *coverage);
__attribute__((__deprecated__("Use '" "g_object_unref" "' instead"))) extern
void pango_coverage_unref (PangoCoverage *coverage);
extern
PangoCoverage * pango_coverage_copy (PangoCoverage *coverage);
extern
PangoCoverageLevel pango_coverage_get (PangoCoverage *coverage,
        int index_);
extern
void pango_coverage_set (PangoCoverage *coverage,
        int index_,
        PangoCoverageLevel level);
__attribute__((__deprecated__)) extern
void pango_coverage_max (PangoCoverage *coverage,
        PangoCoverage *other);

__attribute__((__deprecated__)) extern
void pango_coverage_to_bytes (PangoCoverage *coverage,
       guchar **bytes,
       int *n_bytes);
__attribute__((__deprecated__)) extern
PangoCoverage *pango_coverage_from_bytes (guchar *bytes,
       int n_bytes);

typedef PangoCoverage *PangoCoverage_autoptr; typedef GList *PangoCoverage_listautoptr; typedef GSList *PangoCoverage_slistautoptr; typedef GQueue *PangoCoverage_queueautoptr;
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"
#pragma clang diagnostic push
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoCoverage (PangoCoverage *_ptr) { if (_ptr) (g_object_unref) ((PangoCoverage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoCoverage (PangoCoverage **_ptr) { glib_autoptr_clear_PangoCoverage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoCoverage (void *_ptr) { (g_object_unref) ((PangoCoverage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoCoverage (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoCoverage); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoCoverage (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoCoverage); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoCoverage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoCoverage); }
# 104 "/usr/include/pango-1.0/pango/pango-coverage.h"
#pragma clang diagnostic pop
# 26 "/usr/include/pango-1.0/pango/pango-font.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-types.h" 1
# 32 "/usr/include/pango-1.0/pango/pango-types.h"
typedef struct _PangoLogAttr PangoLogAttr;


typedef struct _PangoEngineLang PangoEngineLang;
typedef struct _PangoEngineShape PangoEngineShape;


typedef struct _PangoFont PangoFont;
typedef struct _PangoFontMap PangoFontMap;

typedef struct _PangoRectangle PangoRectangle;

typedef struct _PangoContext PangoContext;

typedef struct _PangoLanguage PangoLanguage;







typedef guint32 PangoGlyph;
# 149 "/usr/include/pango-1.0/pango/pango-types.h"
extern
int pango_units_from_double (double d) __attribute__ ((__const__));
extern
double pango_units_to_double (int i) __attribute__ ((__const__));
# 169 "/usr/include/pango-1.0/pango/pango-types.h"
struct _PangoRectangle
{
  int x;
  int y;
  int width;
  int height;
};
# 230 "/usr/include/pango-1.0/pango/pango-types.h"
extern
void pango_extents_to_pixels (PangoRectangle *inclusive,
         PangoRectangle *nearest);


# 1 "/usr/include/pango-1.0/pango/pango-gravity.h" 1
# 53 "/usr/include/pango-1.0/pango/pango-gravity.h"
typedef enum {
  PANGO_GRAVITY_SOUTH,
  PANGO_GRAVITY_EAST,
  PANGO_GRAVITY_NORTH,
  PANGO_GRAVITY_WEST,
  PANGO_GRAVITY_AUTO
} PangoGravity;
# 81 "/usr/include/pango-1.0/pango/pango-gravity.h"
typedef enum {
  PANGO_GRAVITY_HINT_NATURAL,
  PANGO_GRAVITY_HINT_STRONG,
  PANGO_GRAVITY_HINT_LINE
} PangoGravityHint;
# 116 "/usr/include/pango-1.0/pango/pango-gravity.h"
# 1 "/usr/include/pango-1.0/pango/pango-matrix.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-matrix.h"
typedef struct _PangoMatrix PangoMatrix;
# 53 "/usr/include/pango-1.0/pango/pango-matrix.h"
struct _PangoMatrix
{
  double xx;
  double xy;
  double yx;
  double yy;
  double x0;
  double y0;
};
# 81 "/usr/include/pango-1.0/pango/pango-matrix.h"
# 1 "/usr/include/pango-1.0/pango/pango-types.h" 1
# 82 "/usr/include/pango-1.0/pango/pango-matrix.h" 2

extern
GType pango_matrix_get_type (void) __attribute__ ((__const__));

extern
PangoMatrix *pango_matrix_copy (const PangoMatrix *matrix);
extern
void pango_matrix_free (PangoMatrix *matrix);

extern
void pango_matrix_translate (PangoMatrix *matrix,
        double tx,
        double ty);
extern
void pango_matrix_scale (PangoMatrix *matrix,
        double scale_x,
        double scale_y);
extern
void pango_matrix_rotate (PangoMatrix *matrix,
        double degrees);
extern
void pango_matrix_concat (PangoMatrix *matrix,
        const PangoMatrix *new_matrix);
extern
void pango_matrix_transform_point (const PangoMatrix *matrix,
          double *x,
          double *y);
extern
void pango_matrix_transform_distance (const PangoMatrix *matrix,
          double *dx,
          double *dy);
extern
void pango_matrix_transform_rectangle (const PangoMatrix *matrix,
           PangoRectangle *rect);
extern
void pango_matrix_transform_pixel_rectangle (const PangoMatrix *matrix,
          PangoRectangle *rect);
extern
double pango_matrix_get_font_scale_factor (const PangoMatrix *matrix) __attribute__((__pure__));
extern
void pango_matrix_get_font_scale_factors (const PangoMatrix *matrix,
       double *xscale, double *yscale);
extern
double pango_matrix_get_slant_ratio (const PangoMatrix *matrix) __attribute__((__pure__));
# 117 "/usr/include/pango-1.0/pango/pango-gravity.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-script.h" 1
# 35 "/usr/include/pango-1.0/pango/pango-script.h"
typedef struct _PangoScriptIter PangoScriptIter;
# 170 "/usr/include/pango-1.0/pango/pango-script.h"
typedef enum {
      PANGO_SCRIPT_INVALID_CODE = -1,
      PANGO_SCRIPT_COMMON = 0,
      PANGO_SCRIPT_INHERITED,
      PANGO_SCRIPT_ARABIC,
      PANGO_SCRIPT_ARMENIAN,
      PANGO_SCRIPT_BENGALI,
      PANGO_SCRIPT_BOPOMOFO,
      PANGO_SCRIPT_CHEROKEE,
      PANGO_SCRIPT_COPTIC,
      PANGO_SCRIPT_CYRILLIC,
      PANGO_SCRIPT_DESERET,
      PANGO_SCRIPT_DEVANAGARI,
      PANGO_SCRIPT_ETHIOPIC,
      PANGO_SCRIPT_GEORGIAN,
      PANGO_SCRIPT_GOTHIC,
      PANGO_SCRIPT_GREEK,
      PANGO_SCRIPT_GUJARATI,
      PANGO_SCRIPT_GURMUKHI,
      PANGO_SCRIPT_HAN,
      PANGO_SCRIPT_HANGUL,
      PANGO_SCRIPT_HEBREW,
      PANGO_SCRIPT_HIRAGANA,
      PANGO_SCRIPT_KANNADA,
      PANGO_SCRIPT_KATAKANA,
      PANGO_SCRIPT_KHMER,
      PANGO_SCRIPT_LAO,
      PANGO_SCRIPT_LATIN,
      PANGO_SCRIPT_MALAYALAM,
      PANGO_SCRIPT_MONGOLIAN,
      PANGO_SCRIPT_MYANMAR,
      PANGO_SCRIPT_OGHAM,
      PANGO_SCRIPT_OLD_ITALIC,
      PANGO_SCRIPT_ORIYA,
      PANGO_SCRIPT_RUNIC,
      PANGO_SCRIPT_SINHALA,
      PANGO_SCRIPT_SYRIAC,
      PANGO_SCRIPT_TAMIL,
      PANGO_SCRIPT_TELUGU,
      PANGO_SCRIPT_THAANA,
      PANGO_SCRIPT_THAI,
      PANGO_SCRIPT_TIBETAN,
      PANGO_SCRIPT_CANADIAN_ABORIGINAL,
      PANGO_SCRIPT_YI,
      PANGO_SCRIPT_TAGALOG,
      PANGO_SCRIPT_HANUNOO,
      PANGO_SCRIPT_BUHID,
      PANGO_SCRIPT_TAGBANWA,


      PANGO_SCRIPT_BRAILLE,
      PANGO_SCRIPT_CYPRIOT,
      PANGO_SCRIPT_LIMBU,
      PANGO_SCRIPT_OSMANYA,
      PANGO_SCRIPT_SHAVIAN,
      PANGO_SCRIPT_LINEAR_B,
      PANGO_SCRIPT_TAI_LE,
      PANGO_SCRIPT_UGARITIC,


      PANGO_SCRIPT_NEW_TAI_LUE,
      PANGO_SCRIPT_BUGINESE,
      PANGO_SCRIPT_GLAGOLITIC,
      PANGO_SCRIPT_TIFINAGH,
      PANGO_SCRIPT_SYLOTI_NAGRI,
      PANGO_SCRIPT_OLD_PERSIAN,
      PANGO_SCRIPT_KHAROSHTHI,


      PANGO_SCRIPT_UNKNOWN,
      PANGO_SCRIPT_BALINESE,
      PANGO_SCRIPT_CUNEIFORM,
      PANGO_SCRIPT_PHOENICIAN,
      PANGO_SCRIPT_PHAGS_PA,
      PANGO_SCRIPT_NKO,


      PANGO_SCRIPT_KAYAH_LI,
      PANGO_SCRIPT_LEPCHA,
      PANGO_SCRIPT_REJANG,
      PANGO_SCRIPT_SUNDANESE,
      PANGO_SCRIPT_SAURASHTRA,
      PANGO_SCRIPT_CHAM,
      PANGO_SCRIPT_OL_CHIKI,
      PANGO_SCRIPT_VAI,
      PANGO_SCRIPT_CARIAN,
      PANGO_SCRIPT_LYCIAN,
      PANGO_SCRIPT_LYDIAN,


      PANGO_SCRIPT_BATAK,
      PANGO_SCRIPT_BRAHMI,
      PANGO_SCRIPT_MANDAIC,


      PANGO_SCRIPT_CHAKMA,
      PANGO_SCRIPT_MEROITIC_CURSIVE,
      PANGO_SCRIPT_MEROITIC_HIEROGLYPHS,
      PANGO_SCRIPT_MIAO,
      PANGO_SCRIPT_SHARADA,
      PANGO_SCRIPT_SORA_SOMPENG,
      PANGO_SCRIPT_TAKRI,


      PANGO_SCRIPT_BASSA_VAH,
      PANGO_SCRIPT_CAUCASIAN_ALBANIAN,
      PANGO_SCRIPT_DUPLOYAN,
      PANGO_SCRIPT_ELBASAN,
      PANGO_SCRIPT_GRANTHA,
      PANGO_SCRIPT_KHOJKI,
      PANGO_SCRIPT_KHUDAWADI,
      PANGO_SCRIPT_LINEAR_A,
      PANGO_SCRIPT_MAHAJANI,
      PANGO_SCRIPT_MANICHAEAN,
      PANGO_SCRIPT_MENDE_KIKAKUI,
      PANGO_SCRIPT_MODI,
      PANGO_SCRIPT_MRO,
      PANGO_SCRIPT_NABATAEAN,
      PANGO_SCRIPT_OLD_NORTH_ARABIAN,
      PANGO_SCRIPT_OLD_PERMIC,
      PANGO_SCRIPT_PAHAWH_HMONG,
      PANGO_SCRIPT_PALMYRENE,
      PANGO_SCRIPT_PAU_CIN_HAU,
      PANGO_SCRIPT_PSALTER_PAHLAVI,
      PANGO_SCRIPT_SIDDHAM,
      PANGO_SCRIPT_TIRHUTA,
      PANGO_SCRIPT_WARANG_CITI,


      PANGO_SCRIPT_AHOM,
      PANGO_SCRIPT_ANATOLIAN_HIEROGLYPHS,
      PANGO_SCRIPT_HATRAN,
      PANGO_SCRIPT_MULTANI,
      PANGO_SCRIPT_OLD_HUNGARIAN,
      PANGO_SCRIPT_SIGNWRITING
} PangoScript;



__attribute__((__deprecated__("Use '" "g_unichar_get_script" "' instead"))) extern
PangoScript pango_script_for_unichar (gunichar ch) __attribute__ ((__const__));

extern
GType pango_script_iter_get_type (void) __attribute__ ((__const__));

extern
PangoScriptIter *pango_script_iter_new (const char *text,
           int length);
extern
void pango_script_iter_get_range (PangoScriptIter *iter,
                                              const char **start,
                                              const char **end,
                                              PangoScript *script);
extern
gboolean pango_script_iter_next (PangoScriptIter *iter);
extern
void pango_script_iter_free (PangoScriptIter *iter);

# 1 "/usr/include/pango-1.0/pango/pango-language.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-language.h"
# 1 "/usr/include/pango-1.0/pango/pango-types.h" 1
# 29 "/usr/include/pango-1.0/pango/pango-language.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-script.h" 1
# 31 "/usr/include/pango-1.0/pango/pango-language.h" 2





extern
GType pango_language_get_type (void) __attribute__ ((__const__));

extern
PangoLanguage * pango_language_get_default (void) __attribute__ ((__const__));

extern
PangoLanguage ** pango_language_get_preferred (void) __attribute__ ((__const__));

extern
PangoLanguage * pango_language_from_string (const char *language);

extern
const char * pango_language_to_string (PangoLanguage *language) __attribute__ ((__const__));




extern
const char * pango_language_get_sample_string (PangoLanguage *language) __attribute__ ((__const__));

extern
gboolean pango_language_matches (PangoLanguage *language,
                                                                 const char *range_list) __attribute__((__pure__));

extern
gboolean pango_language_includes_script (PangoLanguage *language,
                                                                 PangoScript script) __attribute__((__pure__));
extern
const PangoScript * pango_language_get_scripts (PangoLanguage *language,
                                                                 int *num_scripts);
# 329 "/usr/include/pango-1.0/pango/pango-script.h" 2

extern
PangoLanguage *pango_script_get_sample_language (PangoScript script) __attribute__((__pure__));
# 118 "/usr/include/pango-1.0/pango/pango-gravity.h" 2

extern
double pango_gravity_to_rotation (PangoGravity gravity) __attribute__ ((__const__));
extern
PangoGravity pango_gravity_get_for_matrix (const PangoMatrix *matrix) __attribute__((__pure__));
extern
PangoGravity pango_gravity_get_for_script (PangoScript script,
        PangoGravity base_gravity,
        PangoGravityHint hint) __attribute__ ((__const__));
extern
PangoGravity pango_gravity_get_for_script_and_width
       (PangoScript script,
        gboolean wide,
        PangoGravity base_gravity,
        PangoGravityHint hint) __attribute__ ((__const__));
# 236 "/usr/include/pango-1.0/pango/pango-types.h" 2



# 1 "/usr/include/pango-1.0/pango/pango-bidi-type.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-bidi-type.h"
# 1 "/usr/include/pango-1.0/pango/pango-direction.h" 1
# 60 "/usr/include/pango-1.0/pango/pango-direction.h"
typedef enum {
  PANGO_DIRECTION_LTR,
  PANGO_DIRECTION_RTL,
  PANGO_DIRECTION_TTB_LTR,
  PANGO_DIRECTION_TTB_RTL,
  PANGO_DIRECTION_WEAK_LTR,
  PANGO_DIRECTION_WEAK_RTL,
  PANGO_DIRECTION_NEUTRAL
} PangoDirection;
# 29 "/usr/include/pango-1.0/pango/pango-bidi-type.h" 2
# 68 "/usr/include/pango-1.0/pango/pango-bidi-type.h"
typedef enum {

  PANGO_BIDI_TYPE_L,
  PANGO_BIDI_TYPE_LRE,
  PANGO_BIDI_TYPE_LRO,
  PANGO_BIDI_TYPE_R,
  PANGO_BIDI_TYPE_AL,
  PANGO_BIDI_TYPE_RLE,
  PANGO_BIDI_TYPE_RLO,


  PANGO_BIDI_TYPE_PDF,
  PANGO_BIDI_TYPE_EN,
  PANGO_BIDI_TYPE_ES,
  PANGO_BIDI_TYPE_ET,
  PANGO_BIDI_TYPE_AN,
  PANGO_BIDI_TYPE_CS,
  PANGO_BIDI_TYPE_NSM,
  PANGO_BIDI_TYPE_BN,


  PANGO_BIDI_TYPE_B,
  PANGO_BIDI_TYPE_S,
  PANGO_BIDI_TYPE_WS,
  PANGO_BIDI_TYPE_ON,


  PANGO_BIDI_TYPE_LRI,
  PANGO_BIDI_TYPE_RLI,
  PANGO_BIDI_TYPE_FSI,
  PANGO_BIDI_TYPE_PDI
} PangoBidiType;

__attribute__((__deprecated__)) extern
PangoBidiType pango_bidi_type_for_unichar (gunichar ch) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
PangoDirection pango_unichar_direction (gunichar ch) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
PangoDirection pango_find_base_dir (const gchar *text,
          gint length);

__attribute__((__deprecated__("Use '" "g_unichar_get_mirror_char" "' instead"))) extern
gboolean pango_get_mirror_char (gunichar ch,
          gunichar *mirrored_ch);
# 240 "/usr/include/pango-1.0/pango/pango-types.h" 2
# 27 "/usr/include/pango-1.0/pango/pango-font.h" 2
# 43 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontDescription PangoFontDescription;
# 64 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontMetrics PangoFontMetrics;
# 74 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_STYLE_NORMAL,
  PANGO_STYLE_OBLIQUE,
  PANGO_STYLE_ITALIC
} PangoStyle;
# 100 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_VARIANT_NORMAL,
  PANGO_VARIANT_SMALL_CAPS,
  PANGO_VARIANT_ALL_SMALL_CAPS,
  PANGO_VARIANT_PETITE_CAPS,
  PANGO_VARIANT_ALL_PETITE_CAPS,
  PANGO_VARIANT_UNICASE,
  PANGO_VARIANT_TITLE_CAPS
} PangoVariant;
# 130 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_WEIGHT_THIN = 100,
  PANGO_WEIGHT_ULTRALIGHT = 200,
  PANGO_WEIGHT_LIGHT = 300,
  PANGO_WEIGHT_SEMILIGHT = 350,
  PANGO_WEIGHT_BOOK = 380,
  PANGO_WEIGHT_NORMAL = 400,
  PANGO_WEIGHT_MEDIUM = 500,
  PANGO_WEIGHT_SEMIBOLD = 600,
  PANGO_WEIGHT_BOLD = 700,
  PANGO_WEIGHT_ULTRABOLD = 800,
  PANGO_WEIGHT_HEAVY = 900,
  PANGO_WEIGHT_ULTRAHEAVY = 1000
} PangoWeight;
# 160 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_STRETCH_ULTRA_CONDENSED,
  PANGO_STRETCH_EXTRA_CONDENSED,
  PANGO_STRETCH_CONDENSED,
  PANGO_STRETCH_SEMI_CONDENSED,
  PANGO_STRETCH_NORMAL,
  PANGO_STRETCH_SEMI_EXPANDED,
  PANGO_STRETCH_EXPANDED,
  PANGO_STRETCH_EXTRA_EXPANDED,
  PANGO_STRETCH_ULTRA_EXPANDED
} PangoStretch;
# 186 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_FONT_MASK_FAMILY = 1 << 0,
  PANGO_FONT_MASK_STYLE = 1 << 1,
  PANGO_FONT_MASK_VARIANT = 1 << 2,
  PANGO_FONT_MASK_WEIGHT = 1 << 3,
  PANGO_FONT_MASK_STRETCH = 1 << 4,
  PANGO_FONT_MASK_SIZE = 1 << 5,
  PANGO_FONT_MASK_GRAVITY = 1 << 6,
  PANGO_FONT_MASK_VARIATIONS = 1 << 7,
} PangoFontMask;
# 247 "/usr/include/pango-1.0/pango/pango-font.h"
extern
GType pango_font_description_get_type (void) __attribute__ ((__const__));
extern
PangoFontDescription *pango_font_description_new (void);
extern
PangoFontDescription *pango_font_description_copy (const PangoFontDescription *desc);
extern
PangoFontDescription *pango_font_description_copy_static (const PangoFontDescription *desc);
extern
guint pango_font_description_hash (const PangoFontDescription *desc) __attribute__((__pure__));
extern
gboolean pango_font_description_equal (const PangoFontDescription *desc1,
                                                          const PangoFontDescription *desc2) __attribute__((__pure__));
extern
void pango_font_description_free (PangoFontDescription *desc);
extern
void pango_font_descriptions_free (PangoFontDescription **descs,
                                                          int n_descs);

extern
void pango_font_description_set_family (PangoFontDescription *desc,
                                                               const char *family);
extern
void pango_font_description_set_family_static (PangoFontDescription *desc,
                                                               const char *family);
extern
const char *pango_font_description_get_family (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_style (PangoFontDescription *desc,
                                                               PangoStyle style);
extern
PangoStyle pango_font_description_get_style (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_variant (PangoFontDescription *desc,
                                                               PangoVariant variant);
extern
PangoVariant pango_font_description_get_variant (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_weight (PangoFontDescription *desc,
                                                               PangoWeight weight);
extern
PangoWeight pango_font_description_get_weight (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_stretch (PangoFontDescription *desc,
                                                               PangoStretch stretch);
extern
PangoStretch pango_font_description_get_stretch (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_size (PangoFontDescription *desc,
                                                               gint size);
extern
gint pango_font_description_get_size (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_absolute_size (PangoFontDescription *desc,
                                                               double size);
extern
gboolean pango_font_description_get_size_is_absolute (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_set_gravity (PangoFontDescription *desc,
                                                               PangoGravity gravity);
extern
PangoGravity pango_font_description_get_gravity (const PangoFontDescription *desc) __attribute__((__pure__));

extern
void pango_font_description_set_variations_static (PangoFontDescription *desc,
                                                                   const char *variations);
extern
void pango_font_description_set_variations (PangoFontDescription *desc,
                                                               const char *variations);
extern
const char *pango_font_description_get_variations (const PangoFontDescription *desc) __attribute__((__pure__));

extern
PangoFontMask pango_font_description_get_set_fields (const PangoFontDescription *desc) __attribute__((__pure__));
extern
void pango_font_description_unset_fields (PangoFontDescription *desc,
                                                     PangoFontMask to_unset);

extern
void pango_font_description_merge (PangoFontDescription *desc,
                                          const PangoFontDescription *desc_to_merge,
                                          gboolean replace_existing);
extern
void pango_font_description_merge_static (PangoFontDescription *desc,
                                          const PangoFontDescription *desc_to_merge,
                                          gboolean replace_existing);

extern
gboolean pango_font_description_better_match (const PangoFontDescription *desc,
                                              const PangoFontDescription *old_match,
                                              const PangoFontDescription *new_match) __attribute__((__pure__));

extern
PangoFontDescription *pango_font_description_from_string (const char *str);
extern
char * pango_font_description_to_string (const PangoFontDescription *desc);
extern
char * pango_font_description_to_filename (const PangoFontDescription *desc);







struct _PangoFontMetrics
{

  guint ref_count;

  int ascent;
  int descent;
  int height;
  int approximate_char_width;
  int approximate_digit_width;
  int underline_position;
  int underline_thickness;
  int strikethrough_position;
  int strikethrough_thickness;
};

extern
GType pango_font_metrics_get_type (void) __attribute__ ((__const__));
extern
PangoFontMetrics *pango_font_metrics_ref (PangoFontMetrics *metrics);
extern
void pango_font_metrics_unref (PangoFontMetrics *metrics);
extern
int pango_font_metrics_get_ascent (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_descent (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_height (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_approximate_char_width (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_approximate_digit_width (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_underline_position (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_underline_thickness (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_strikethrough_position (PangoFontMetrics *metrics) __attribute__((__pure__));
extern
int pango_font_metrics_get_strikethrough_thickness (PangoFontMetrics *metrics) __attribute__((__pure__));
# 405 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontFace PangoFontFace;
typedef struct _PangoFontFamily PangoFontFamily;
typedef struct _PangoFontFamilyClass PangoFontFamilyClass;
# 420 "/usr/include/pango-1.0/pango/pango-font.h"
struct _PangoFontFamily
{
  GObject parent_instance;
};

struct _PangoFontFamilyClass
{
  GObjectClass parent_class;



  void (*list_faces) (PangoFontFamily *family,
                            PangoFontFace ***faces,
                            int *n_faces);
  const char * (*get_name) (PangoFontFamily *family);
  gboolean (*is_monospace) (PangoFontFamily *family);
  gboolean (*is_variable) (PangoFontFamily *family);

  PangoFontFace * (*get_face) (PangoFontFamily *family,
                               const char *name);





  void (*_pango_reserved2) (void);
};



extern
GType pango_font_family_get_type (void) __attribute__ ((__const__));

extern
void pango_font_family_list_faces (PangoFontFamily *family,
                                                   PangoFontFace ***faces,
                                                   int *n_faces);
extern
const char *pango_font_family_get_name (PangoFontFamily *family) __attribute__((__pure__));
extern
gboolean pango_font_family_is_monospace (PangoFontFamily *family) __attribute__((__pure__));
extern
gboolean pango_font_family_is_variable (PangoFontFamily *family) __attribute__((__pure__));

extern
PangoFontFace *pango_font_family_get_face (PangoFontFamily *family,
                                           const char *name);
# 480 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontFaceClass PangoFontFaceClass;
# 490 "/usr/include/pango-1.0/pango/pango-font.h"
struct _PangoFontFace
{
  GObject parent_instance;
};

struct _PangoFontFaceClass
{
  GObjectClass parent_class;



  const char * (*get_face_name) (PangoFontFace *face);
  PangoFontDescription * (*describe) (PangoFontFace *face);
  void (*list_sizes) (PangoFontFace *face,
                                            int **sizes,
                                            int *n_sizes);
  gboolean (*is_synthesized) (PangoFontFace *face);
  PangoFontFamily * (*get_family) (PangoFontFace *face);




  void (*_pango_reserved3) (void);
  void (*_pango_reserved4) (void);
};



extern
GType pango_font_face_get_type (void) __attribute__ ((__const__));

extern
PangoFontDescription *pango_font_face_describe (PangoFontFace *face);
extern
const char *pango_font_face_get_face_name (PangoFontFace *face) __attribute__((__pure__));
extern
void pango_font_face_list_sizes (PangoFontFace *face,
                                                      int **sizes,
                                                      int *n_sizes);
extern
gboolean pango_font_face_is_synthesized (PangoFontFace *face) __attribute__((__pure__));

extern
PangoFontFamily * pango_font_face_get_family (PangoFontFace *face);
# 556 "/usr/include/pango-1.0/pango/pango-font.h"
struct _PangoFont
{
  GObject parent_instance;
};

typedef struct _PangoFontClass PangoFontClass;
struct _PangoFontClass
{
  GObjectClass parent_class;



  PangoFontDescription *(*describe) (PangoFont *font);
  PangoCoverage * (*get_coverage) (PangoFont *font,
                                               PangoLanguage *language);
  void (*get_glyph_extents) (PangoFont *font,
                                               PangoGlyph glyph,
                                               PangoRectangle *ink_rect,
                                               PangoRectangle *logical_rect);
  PangoFontMetrics * (*get_metrics) (PangoFont *font,
                                               PangoLanguage *language);
  PangoFontMap * (*get_font_map) (PangoFont *font);
  PangoFontDescription *(*describe_absolute) (PangoFont *font);
  void (*get_features) (PangoFont *font,
                                               hb_feature_t *features,
                                               guint len,
                                               guint *num_features);
  hb_font_t * (*create_hb_font) (PangoFont *font);
};



extern
GType pango_font_get_type (void) __attribute__ ((__const__));

extern
PangoFontDescription *pango_font_describe (PangoFont *font);
extern
PangoFontDescription *pango_font_describe_with_absolute_size (PangoFont *font);
extern
PangoCoverage * pango_font_get_coverage (PangoFont *font,
                                                    PangoLanguage *language);

__attribute__((__deprecated__)) extern
PangoEngineShape * pango_font_find_shaper (PangoFont *font,
                                                    PangoLanguage *language,
                                                    guint32 ch);

extern
PangoFontMetrics * pango_font_get_metrics (PangoFont *font,
                                                    PangoLanguage *language);
extern
void pango_font_get_glyph_extents (PangoFont *font,
                                                    PangoGlyph glyph,
                                                    PangoRectangle *ink_rect,
                                                    PangoRectangle *logical_rect);
extern
PangoFontMap *pango_font_get_font_map (PangoFont *font);

extern
PangoFontFace * pango_font_get_face (PangoFont *font);

extern
gboolean pango_font_has_char (PangoFont *font,
                                                    gunichar wc);
extern
void pango_font_get_features (PangoFont *font,
                                                    hb_feature_t *features,
                                                    guint len,
                                                    guint *num_features);
extern
hb_font_t * pango_font_get_hb_font (PangoFont *font);

extern
PangoLanguage ** pango_font_get_languages (PangoFont *font);

extern
GBytes * pango_font_serialize (PangoFont *font);

extern
PangoFont * pango_font_deserialize (PangoContext *context,
                                                    GBytes *bytes,
                                                    GError **error);
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
typedef PangoFontFamily *PangoFontFamily_autoptr; typedef GList *PangoFontFamily_listautoptr; typedef GSList *PangoFontFamily_slistautoptr; typedef GQueue *PangoFontFamily_queueautoptr;
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic push
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFontFamily (PangoFontFamily *_ptr) { if (_ptr) (g_object_unref) ((PangoFontFamily *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFontFamily (PangoFontFamily **_ptr) { glib_autoptr_clear_PangoFontFamily (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoFontFamily (void *_ptr) { (g_object_unref) ((PangoFontFamily *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFontFamily (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoFontFamily); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFontFamily (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoFontFamily); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFontFamily (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoFontFamily); }
# 692 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic pop
typedef PangoFontFace *PangoFontFace_autoptr; typedef GList *PangoFontFace_listautoptr; typedef GSList *PangoFontFace_slistautoptr; typedef GQueue *PangoFontFace_queueautoptr;
# 693 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic push
# 693 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 693 "/usr/include/pango-1.0/pango/pango-font.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFontFace (PangoFontFace *_ptr) { if (_ptr) (g_object_unref) ((PangoFontFace *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFontFace (PangoFontFace **_ptr) { glib_autoptr_clear_PangoFontFace (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoFontFace (void *_ptr) { (g_object_unref) ((PangoFontFace *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFontFace (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoFontFace); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFontFace (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoFontFace); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFontFace (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoFontFace); }
# 693 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic pop
typedef PangoFont *PangoFont_autoptr; typedef GList *PangoFont_listautoptr; typedef GSList *PangoFont_slistautoptr; typedef GQueue *PangoFont_queueautoptr;
# 694 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic push
# 694 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 694 "/usr/include/pango-1.0/pango/pango-font.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFont (PangoFont *_ptr) { if (_ptr) (g_object_unref) ((PangoFont *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFont (PangoFont **_ptr) { glib_autoptr_clear_PangoFont (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoFont (void *_ptr) { (g_object_unref) ((PangoFont *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFont (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoFont); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFont (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoFont); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFont (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoFont); }
# 694 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic pop
typedef PangoFontDescription *PangoFontDescription_autoptr; typedef GList *PangoFontDescription_listautoptr; typedef GSList *PangoFontDescription_slistautoptr; typedef GQueue *PangoFontDescription_queueautoptr;
# 695 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic push
# 695 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 695 "/usr/include/pango-1.0/pango/pango-font.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFontDescription (PangoFontDescription *_ptr) { if (_ptr) (pango_font_description_free) ((PangoFontDescription *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFontDescription (PangoFontDescription **_ptr) { glib_autoptr_clear_PangoFontDescription (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoFontDescription (void *_ptr) { (pango_font_description_free) ((PangoFontDescription *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFontDescription (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoFontDescription); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFontDescription (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoFontDescription); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFontDescription (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoFontDescription); }
# 695 "/usr/include/pango-1.0/pango/pango-font.h"
#pragma clang diagnostic pop
# 26 "/usr/include/pango-1.0/pango/pango-attributes.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-color.h" 1
# 31 "/usr/include/pango-1.0/pango/pango-color.h"
typedef struct _PangoColor PangoColor;
# 42 "/usr/include/pango-1.0/pango/pango-color.h"
struct _PangoColor
{
  guint16 red;
  guint16 green;
  guint16 blue;
};



extern
GType pango_color_get_type (void) __attribute__ ((__const__));

extern
PangoColor *pango_color_copy (const PangoColor *src);

extern
void pango_color_free (PangoColor *color);

extern
gboolean pango_color_parse (PangoColor *color,
                                          const char *spec);

extern
gboolean pango_color_parse_with_alpha (PangoColor *color,
                                          guint16 *alpha,
                                          const char *spec);

extern
char *pango_color_to_string (const PangoColor *color);
# 27 "/usr/include/pango-1.0/pango/pango-attributes.h" 2





typedef struct _PangoAttribute PangoAttribute;
typedef struct _PangoAttrClass PangoAttrClass;

typedef struct _PangoAttrString PangoAttrString;
typedef struct _PangoAttrLanguage PangoAttrLanguage;
typedef struct _PangoAttrInt PangoAttrInt;
typedef struct _PangoAttrSize PangoAttrSize;
typedef struct _PangoAttrFloat PangoAttrFloat;
typedef struct _PangoAttrColor PangoAttrColor;
typedef struct _PangoAttrFontDesc PangoAttrFontDesc;
typedef struct _PangoAttrShape PangoAttrShape;
typedef struct _PangoAttrFontFeatures PangoAttrFontFeatures;
# 92 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum
{
  PANGO_ATTR_INVALID,
  PANGO_ATTR_LANGUAGE,
  PANGO_ATTR_FAMILY,
  PANGO_ATTR_STYLE,
  PANGO_ATTR_WEIGHT,
  PANGO_ATTR_VARIANT,
  PANGO_ATTR_STRETCH,
  PANGO_ATTR_SIZE,
  PANGO_ATTR_FONT_DESC,
  PANGO_ATTR_FOREGROUND,
  PANGO_ATTR_BACKGROUND,
  PANGO_ATTR_UNDERLINE,
  PANGO_ATTR_STRIKETHROUGH,
  PANGO_ATTR_RISE,
  PANGO_ATTR_SHAPE,
  PANGO_ATTR_SCALE,
  PANGO_ATTR_FALLBACK,
  PANGO_ATTR_LETTER_SPACING,
  PANGO_ATTR_UNDERLINE_COLOR,
  PANGO_ATTR_STRIKETHROUGH_COLOR,
  PANGO_ATTR_ABSOLUTE_SIZE,
  PANGO_ATTR_GRAVITY,
  PANGO_ATTR_GRAVITY_HINT,
  PANGO_ATTR_FONT_FEATURES,
  PANGO_ATTR_FOREGROUND_ALPHA,
  PANGO_ATTR_BACKGROUND_ALPHA,
  PANGO_ATTR_ALLOW_BREAKS,
  PANGO_ATTR_SHOW,
  PANGO_ATTR_INSERT_HYPHENS,
  PANGO_ATTR_OVERLINE,
  PANGO_ATTR_OVERLINE_COLOR,
  PANGO_ATTR_LINE_HEIGHT,
  PANGO_ATTR_ABSOLUTE_LINE_HEIGHT,
  PANGO_ATTR_TEXT_TRANSFORM,
  PANGO_ATTR_WORD,
  PANGO_ATTR_SENTENCE,
  PANGO_ATTR_BASELINE_SHIFT,
  PANGO_ATTR_FONT_SCALE,
} PangoAttrType;
# 166 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_UNDERLINE_NONE,
  PANGO_UNDERLINE_SINGLE,
  PANGO_UNDERLINE_DOUBLE,
  PANGO_UNDERLINE_LOW,
  PANGO_UNDERLINE_ERROR,
  PANGO_UNDERLINE_SINGLE_LINE,
  PANGO_UNDERLINE_DOUBLE_LINE,
  PANGO_UNDERLINE_ERROR_LINE
} PangoUnderline;
# 189 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_OVERLINE_NONE,
  PANGO_OVERLINE_SINGLE
} PangoOverline;
# 207 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_SHOW_NONE = 0,
  PANGO_SHOW_SPACES = 1 << 0,
  PANGO_SHOW_LINE_BREAKS = 1 << 1,
  PANGO_SHOW_IGNORABLES = 1 << 2
} PangoShowFlags;
# 226 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_TEXT_TRANSFORM_NONE,
  PANGO_TEXT_TRANSFORM_LOWERCASE,
  PANGO_TEXT_TRANSFORM_UPPERCASE,
  PANGO_TEXT_TRANSFORM_CAPITALIZE,
} PangoTextTransform;
# 245 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_BASELINE_SHIFT_NONE,
  PANGO_BASELINE_SHIFT_SUPERSCRIPT,
  PANGO_BASELINE_SHIFT_SUBSCRIPT,
} PangoBaselineShift;
# 263 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef enum {
  PANGO_FONT_SCALE_NONE,
  PANGO_FONT_SCALE_SUPERSCRIPT,
  PANGO_FONT_SCALE_SUBSCRIPT,
  PANGO_FONT_SCALE_SMALL_CAPS,
} PangoFontScale;
# 306 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttribute
{
  const PangoAttrClass *klass;
  guint start_index;
  guint end_index;
};
# 323 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef gboolean (*PangoAttrFilterFunc) (PangoAttribute *attribute,
                                         gpointer user_data);
# 334 "/usr/include/pango-1.0/pango/pango-attributes.h"
typedef gpointer (*PangoAttrDataCopyFunc) (gconstpointer user_data);
# 352 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrClass
{

  PangoAttrType type;
  PangoAttribute * (*copy) (const PangoAttribute *attr);
  void (*destroy) (PangoAttribute *attr);
  gboolean (*equal) (const PangoAttribute *attr1, const PangoAttribute *attr2);
};
# 369 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrString
{
  PangoAttribute attr;
  char *value;
};
# 382 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrLanguage
{
  PangoAttribute attr;
  PangoLanguage *value;
};
# 395 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrInt
{
  PangoAttribute attr;
  int value;
};
# 408 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrFloat
{
  PangoAttribute attr;
  double value;
};
# 421 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrColor
{
  PangoAttribute attr;
  PangoColor color;
};
# 440 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrSize
{
  PangoAttribute attr;
  int size;
  guint absolute : 1;
};
# 459 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrShape
{
  PangoAttribute attr;
  PangoRectangle ink_rect;
  PangoRectangle logical_rect;

  gpointer data;
  PangoAttrDataCopyFunc copy_func;
  GDestroyNotify destroy_func;
};
# 478 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrFontDesc
{
  PangoAttribute attr;
  PangoFontDescription *desc;
};
# 494 "/usr/include/pango-1.0/pango/pango-attributes.h"
struct _PangoAttrFontFeatures
{
  PangoAttribute attr;
  gchar *features;
};

extern
GType pango_attribute_get_type (void) __attribute__ ((__const__));

extern
PangoAttrType pango_attr_type_register (const char *name);
extern
const char * pango_attr_type_get_name (PangoAttrType type) __attribute__ ((__const__));
extern
void pango_attribute_init (PangoAttribute *attr,
                                                                 const PangoAttrClass *klass);
extern
PangoAttribute * pango_attribute_copy (const PangoAttribute *attr);
extern
void pango_attribute_destroy (PangoAttribute *attr);
extern
gboolean pango_attribute_equal (const PangoAttribute *attr1,
                                                                 const PangoAttribute *attr2) __attribute__((__pure__));

extern
PangoAttribute * pango_attr_language_new (PangoLanguage *language);
extern
PangoAttribute * pango_attr_family_new (const char *family);
extern
PangoAttribute * pango_attr_foreground_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_background_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_size_new (int size);
extern
PangoAttribute * pango_attr_size_new_absolute (int size);
extern
PangoAttribute * pango_attr_style_new (PangoStyle style);
extern
PangoAttribute * pango_attr_weight_new (PangoWeight weight);
extern
PangoAttribute * pango_attr_variant_new (PangoVariant variant);
extern
PangoAttribute * pango_attr_stretch_new (PangoStretch stretch);
extern
PangoAttribute * pango_attr_font_desc_new (const PangoFontDescription *desc);

extern
PangoAttribute * pango_attr_underline_new (PangoUnderline underline);
extern
PangoAttribute * pango_attr_underline_color_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_strikethrough_new (gboolean strikethrough);
extern
PangoAttribute * pango_attr_strikethrough_color_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_rise_new (int rise);
extern
PangoAttribute * pango_attr_baseline_shift_new (int shift);
extern
PangoAttribute * pango_attr_font_scale_new (PangoFontScale scale);
extern
PangoAttribute * pango_attr_scale_new (double scale_factor);
extern
PangoAttribute * pango_attr_fallback_new (gboolean enable_fallback);
extern
PangoAttribute * pango_attr_letter_spacing_new (int letter_spacing);
extern
PangoAttribute * pango_attr_shape_new (const PangoRectangle *ink_rect,
                                                                 const PangoRectangle *logical_rect);
extern
PangoAttribute * pango_attr_shape_new_with_data (const PangoRectangle *ink_rect,
                                                                 const PangoRectangle *logical_rect,
                                                                 gpointer data,
                                                                 PangoAttrDataCopyFunc copy_func,
                                                                 GDestroyNotify destroy_func);
extern
PangoAttribute * pango_attr_gravity_new (PangoGravity gravity);
extern
PangoAttribute * pango_attr_gravity_hint_new (PangoGravityHint hint);
extern
PangoAttribute * pango_attr_font_features_new (const char *features);
extern
PangoAttribute * pango_attr_foreground_alpha_new (guint16 alpha);
extern
PangoAttribute * pango_attr_background_alpha_new (guint16 alpha);
extern
PangoAttribute * pango_attr_allow_breaks_new (gboolean allow_breaks);

extern
PangoAttribute * pango_attr_word_new (void);
extern
PangoAttribute * pango_attr_sentence_new (void);

extern
PangoAttribute * pango_attr_insert_hyphens_new (gboolean insert_hyphens);
extern
PangoAttribute * pango_attr_overline_new (PangoOverline overline);
extern
PangoAttribute * pango_attr_overline_color_new (guint16 red,
                                                                 guint16 green,
                                                                 guint16 blue);
extern
PangoAttribute * pango_attr_show_new (PangoShowFlags flags);
extern
PangoAttribute * pango_attr_line_height_new (double factor);
extern
PangoAttribute * pango_attr_line_height_new_absolute (int height);
extern
PangoAttribute * pango_attr_text_transform_new (PangoTextTransform transform);

extern
PangoAttrString * pango_attribute_as_string (PangoAttribute *attr);
extern
PangoAttrLanguage * pango_attribute_as_language (PangoAttribute *attr);
extern
PangoAttrInt * pango_attribute_as_int (PangoAttribute *attr);
extern
PangoAttrSize * pango_attribute_as_size (PangoAttribute *attr);
extern
PangoAttrFloat * pango_attribute_as_float (PangoAttribute *attr);
extern
PangoAttrColor * pango_attribute_as_color (PangoAttribute *attr);
extern
PangoAttrFontDesc * pango_attribute_as_font_desc (PangoAttribute *attr);
extern
PangoAttrShape * pango_attribute_as_shape (PangoAttribute *attr);
extern
PangoAttrFontFeatures * pango_attribute_as_font_features (PangoAttribute *attr);



typedef struct _PangoAttrList PangoAttrList;
typedef struct _PangoAttrIterator PangoAttrIterator;
# 667 "/usr/include/pango-1.0/pango/pango-attributes.h"
extern
GType pango_attr_list_get_type (void) __attribute__ ((__const__));

extern
PangoAttrList * pango_attr_list_new (void);
extern
PangoAttrList * pango_attr_list_ref (PangoAttrList *list);
extern
void pango_attr_list_unref (PangoAttrList *list);
extern
PangoAttrList * pango_attr_list_copy (PangoAttrList *list);
extern
void pango_attr_list_insert (PangoAttrList *list,
                                                         PangoAttribute *attr);
extern
void pango_attr_list_insert_before (PangoAttrList *list,
                                                         PangoAttribute *attr);
extern
void pango_attr_list_change (PangoAttrList *list,
                                                         PangoAttribute *attr);
extern
void pango_attr_list_splice (PangoAttrList *list,
                                                         PangoAttrList *other,
                                                         int pos,
                                                         int len);
extern
void pango_attr_list_update (PangoAttrList *list,
                                                         int pos,
                                                         int remove,
                                                         int add);

extern
PangoAttrList * pango_attr_list_filter (PangoAttrList *list,
                                                         PangoAttrFilterFunc func,
                                                         gpointer data);

extern
GSList * pango_attr_list_get_attributes (PangoAttrList *list);

extern
gboolean pango_attr_list_equal (PangoAttrList *list,
                                                         PangoAttrList *other_list);

extern
char * pango_attr_list_to_string (PangoAttrList *list);
extern
PangoAttrList * pango_attr_list_from_string (const char *text);

extern
GType pango_attr_iterator_get_type (void) __attribute__ ((__const__));

extern
PangoAttrIterator * pango_attr_list_get_iterator (PangoAttrList *list);

extern
void pango_attr_iterator_range (PangoAttrIterator *iterator,
                                                         int *start,
                                                         int *end);
extern
gboolean pango_attr_iterator_next (PangoAttrIterator *iterator);
extern
PangoAttrIterator * pango_attr_iterator_copy (PangoAttrIterator *iterator);
extern
void pango_attr_iterator_destroy (PangoAttrIterator *iterator);
extern
PangoAttribute * pango_attr_iterator_get (PangoAttrIterator *iterator,
                                                         PangoAttrType type);
extern
void pango_attr_iterator_get_font (PangoAttrIterator *iterator,
                                                         PangoFontDescription *desc,
                                                         PangoLanguage **language,
                                                         GSList **extra_attrs);
extern
GSList * pango_attr_iterator_get_attrs (PangoAttrIterator *iterator);

typedef PangoAttribute *PangoAttribute_autoptr; typedef GList *PangoAttribute_listautoptr; typedef GSList *PangoAttribute_slistautoptr; typedef GQueue *PangoAttribute_queueautoptr;
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic push
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoAttribute (PangoAttribute *_ptr) { if (_ptr) (pango_attribute_destroy) ((PangoAttribute *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoAttribute (PangoAttribute **_ptr) { glib_autoptr_clear_PangoAttribute (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoAttribute (void *_ptr) { (pango_attribute_destroy) ((PangoAttribute *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoAttribute (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoAttribute); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoAttribute (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoAttribute); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoAttribute (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoAttribute); }
# 742 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic pop
typedef PangoAttrList *PangoAttrList_autoptr; typedef GList *PangoAttrList_listautoptr; typedef GSList *PangoAttrList_slistautoptr; typedef GQueue *PangoAttrList_queueautoptr;
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic push
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoAttrList (PangoAttrList *_ptr) { if (_ptr) (pango_attr_list_unref) ((PangoAttrList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoAttrList (PangoAttrList **_ptr) { glib_autoptr_clear_PangoAttrList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoAttrList (void *_ptr) { (pango_attr_list_unref) ((PangoAttrList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoAttrList (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoAttrList); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoAttrList (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoAttrList); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoAttrList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoAttrList); }
# 743 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic pop
typedef PangoAttrIterator *PangoAttrIterator_autoptr; typedef GList *PangoAttrIterator_listautoptr; typedef GSList *PangoAttrIterator_slistautoptr; typedef GQueue *PangoAttrIterator_queueautoptr;
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic push
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoAttrIterator (PangoAttrIterator *_ptr) { if (_ptr) (pango_attr_iterator_destroy) ((PangoAttrIterator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoAttrIterator (PangoAttrIterator **_ptr) { glib_autoptr_clear_PangoAttrIterator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoAttrIterator (void *_ptr) { (pango_attr_iterator_destroy) ((PangoAttrIterator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoAttrIterator (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoAttrIterator); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoAttrIterator (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoAttrIterator); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoAttrIterator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoAttrIterator); }
# 744 "/usr/include/pango-1.0/pango/pango-attributes.h"
#pragma clang diagnostic pop
# 26 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-break.h" 1
# 29 "/usr/include/pango-1.0/pango/pango-break.h"
# 1 "/usr/include/pango-1.0/pango/pango-item.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-item.h"
typedef struct _PangoAnalysis PangoAnalysis;
typedef struct _PangoItem PangoItem;
# 77 "/usr/include/pango-1.0/pango/pango-item.h"
struct _PangoAnalysis
{

  PangoEngineShape *shape_engine;
  PangoEngineLang *lang_engine;




  PangoFont *font;

  guint8 level;
  guint8 gravity;
  guint8 flags;

  guint8 script;
  PangoLanguage *language;

  GSList *extra_attrs;
};
# 110 "/usr/include/pango-1.0/pango/pango-item.h"
struct _PangoItem
{
  int offset;
  int length;
  int num_chars;
  PangoAnalysis analysis;
};



extern
GType pango_item_get_type (void) __attribute__ ((__const__));

extern
PangoItem * pango_item_new (void);
extern
PangoItem * pango_item_copy (PangoItem *item);
extern
void pango_item_free (PangoItem *item);


extern
int pango_item_get_char_offset (PangoItem *item);

extern
PangoItem * pango_item_split (PangoItem *orig,
                                                      int split_index,
                                                      int split_offset);

extern
void pango_item_apply_attrs (PangoItem *item,
                                                      PangoAttrIterator *iter);

extern
GList * pango_reorder_items (GList *items);



extern
GList * pango_itemize (PangoContext *context,
                                                      const char *text,
                                                      int start_index,
                                                      int length,
                                                      PangoAttrList *attrs,
                                                      PangoAttrIterator *cached_iter);

extern
GList * pango_itemize_with_base_dir (PangoContext *context,
                                                      PangoDirection base_dir,
                                                      const char *text,
                                                      int start_index,
                                                      int length,
                                                      PangoAttrList *attrs,
                                                      PangoAttrIterator *cached_iter);
# 30 "/usr/include/pango-1.0/pango/pango-break.h" 2
# 83 "/usr/include/pango-1.0/pango/pango-break.h"
struct _PangoLogAttr
{
  guint is_line_break : 1;
  guint is_mandatory_break : 1;
  guint is_char_break : 1;
  guint is_white : 1;
  guint is_cursor_position : 1;
  guint is_word_start : 1;
  guint is_word_end : 1;
  guint is_sentence_boundary : 1;
  guint is_sentence_start : 1;
  guint is_sentence_end : 1;
  guint backspace_deletes_character : 1;
  guint is_expandable_space : 1;
  guint is_word_boundary : 1;
  guint break_inserts_hyphen : 1;
  guint break_removes_preceding : 1;

  guint reserved : 17;
};

__attribute__((__deprecated__)) extern
void pango_break (const char *text,
                                                 int length,
                                                 PangoAnalysis *analysis,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);

extern
void pango_get_log_attrs (const char *text,
                                                 int length,
                                                 int level,
                                                 PangoLanguage *language,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);

extern
void pango_default_break (const char *text,
                                                 int length,
                                                 PangoAnalysis *analysis,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);

extern
void pango_tailor_break (const char *text,
                                                 int length,
                                                 PangoAnalysis *analysis,
                                                 int offset,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);

extern
void pango_attr_break (const char *text,
                                                 int length,
                                                 PangoAttrList *attr_list,
                                                 int offset,
                                                 PangoLogAttr *attrs,
                                                 int attrs_len);
# 28 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-context.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-context.h"
# 1 "/usr/include/pango-1.0/pango/pango-fontmap.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-fontmap.h"
# 1 "/usr/include/pango-1.0/pango/pango-fontset.h" 1
# 44 "/usr/include/pango-1.0/pango/pango-fontset.h"
extern
GType pango_fontset_get_type (void) __attribute__ ((__const__));

typedef struct _PangoFontset PangoFontset;
typedef struct _PangoFontsetClass PangoFontsetClass;
# 64 "/usr/include/pango-1.0/pango/pango-fontset.h"
typedef gboolean (*PangoFontsetForeachFunc) (PangoFontset *fontset,
                                             PangoFont *font,
                                             gpointer user_data);
# 78 "/usr/include/pango-1.0/pango/pango-fontset.h"
struct _PangoFontset
{
  GObject parent_instance;
};
# 97 "/usr/include/pango-1.0/pango/pango-fontset.h"
struct _PangoFontsetClass
{
  GObjectClass parent_class;



  PangoFont * (*get_font) (PangoFontset *fontset,
                                     guint wc);

  PangoFontMetrics *(*get_metrics) (PangoFontset *fontset);
  PangoLanguage * (*get_language) (PangoFontset *fontset);
  void (*foreach) (PangoFontset *fontset,
                                     PangoFontsetForeachFunc func,
                                     gpointer data);




  void (*_pango_reserved1) (void);
  void (*_pango_reserved2) (void);
  void (*_pango_reserved3) (void);
  void (*_pango_reserved4) (void);
};

extern
PangoFont * pango_fontset_get_font (PangoFontset *fontset,
                                                         guint wc);
extern
PangoFontMetrics * pango_fontset_get_metrics (PangoFontset *fontset);
extern
void pango_fontset_foreach (PangoFontset *fontset,
                                                         PangoFontsetForeachFunc func,
                                                         gpointer data);
# 28 "/usr/include/pango-1.0/pango/pango-fontmap.h" 2
# 38 "/usr/include/pango-1.0/pango/pango-fontmap.h"
typedef struct _PangoFontMapClass PangoFontMapClass;
# 49 "/usr/include/pango-1.0/pango/pango-fontmap.h"
struct _PangoFontMap
{
  GObject parent_instance;
};
# 72 "/usr/include/pango-1.0/pango/pango-fontmap.h"
struct _PangoFontMapClass
{
  GObjectClass parent_class;



  PangoFont * (*load_font) (PangoFontMap *fontmap,
                                  PangoContext *context,
                                  const PangoFontDescription *desc);
  void (*list_families) (PangoFontMap *fontmap,
                                  PangoFontFamily ***families,
                                  int *n_families);
  PangoFontset *(*load_fontset) (PangoFontMap *fontmap,
                                  PangoContext *context,
                                  const PangoFontDescription *desc,
                                  PangoLanguage *language);

  const char *shape_engine_type;

  guint (*get_serial) (PangoFontMap *fontmap);
  void (*changed) (PangoFontMap *fontmap);

  PangoFontFamily * (*get_family) (PangoFontMap *fontmap,
                                   const char *name);

  PangoFontFace * (*get_face) (PangoFontMap *fontmap,
                                   PangoFont *font);
};

extern
GType pango_font_map_get_type (void) __attribute__ ((__const__));
extern
PangoContext * pango_font_map_create_context (PangoFontMap *fontmap);
extern
PangoFont * pango_font_map_load_font (PangoFontMap *fontmap,
         PangoContext *context,
         const PangoFontDescription *desc);
extern
PangoFontset *pango_font_map_load_fontset (PangoFontMap *fontmap,
         PangoContext *context,
         const PangoFontDescription *desc,
         PangoLanguage *language);
extern
void pango_font_map_list_families (PangoFontMap *fontmap,
         PangoFontFamily ***families,
         int *n_families);
extern
guint pango_font_map_get_serial (PangoFontMap *fontmap);
extern
void pango_font_map_changed (PangoFontMap *fontmap);

extern
PangoFontFamily *pango_font_map_get_family (PangoFontMap *fontmap,
                                            const char *name);

extern
PangoFont * pango_font_map_reload_font (PangoFontMap *fontmap,
                                            PangoFont *font,
                                            double scale,
                                            PangoContext *context,
                                            const char *variations);


typedef PangoFontMap *PangoFontMap_autoptr; typedef GList *PangoFontMap_listautoptr; typedef GSList *PangoFontMap_slistautoptr; typedef GQueue *PangoFontMap_queueautoptr;
# 135 "/usr/include/pango-1.0/pango/pango-fontmap.h"
#pragma clang diagnostic push
# 135 "/usr/include/pango-1.0/pango/pango-fontmap.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 135 "/usr/include/pango-1.0/pango/pango-fontmap.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoFontMap (PangoFontMap *_ptr) { if (_ptr) (g_object_unref) ((PangoFontMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoFontMap (PangoFontMap **_ptr) { glib_autoptr_clear_PangoFontMap (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoFontMap (void *_ptr) { (g_object_unref) ((PangoFontMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoFontMap (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoFontMap); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoFontMap (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoFontMap); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoFontMap (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoFontMap); }
# 135 "/usr/include/pango-1.0/pango/pango-fontmap.h"
#pragma clang diagnostic pop
# 28 "/usr/include/pango-1.0/pango/pango-context.h" 2





typedef struct _PangoContextClass PangoContextClass;
# 43 "/usr/include/pango-1.0/pango/pango-context.h"
extern
GType pango_context_get_type (void) __attribute__ ((__const__));

extern
PangoContext * pango_context_new (void);
extern
void pango_context_changed (PangoContext *context);
extern
void pango_context_set_font_map (PangoContext *context,
                                                                 PangoFontMap *font_map);
extern
PangoFontMap * pango_context_get_font_map (PangoContext *context);
extern
guint pango_context_get_serial (PangoContext *context);
extern
void pango_context_list_families (PangoContext *context,
                                                                 PangoFontFamily ***families,
                                                                 int *n_families);
extern
PangoFont * pango_context_load_font (PangoContext *context,
                                                                 const PangoFontDescription *desc);
extern
PangoFontset * pango_context_load_fontset (PangoContext *context,
                                                                 const PangoFontDescription *desc,
                                                                 PangoLanguage *language);

extern
PangoFontMetrics * pango_context_get_metrics (PangoContext *context,
                                                                 const PangoFontDescription *desc,
                                                                 PangoLanguage *language);

extern
void pango_context_set_font_description (PangoContext *context,
                                                                 const PangoFontDescription *desc);
extern
PangoFontDescription * pango_context_get_font_description (PangoContext *context);
extern
PangoLanguage * pango_context_get_language (PangoContext *context);
extern
void pango_context_set_language (PangoContext *context,
                                                                 PangoLanguage *language);
extern
void pango_context_set_base_dir (PangoContext *context,
                                                                 PangoDirection direction);
extern
PangoDirection pango_context_get_base_dir (PangoContext *context);
extern
void pango_context_set_base_gravity (PangoContext *context,
                                                                 PangoGravity gravity);
extern
PangoGravity pango_context_get_base_gravity (PangoContext *context);
extern
PangoGravity pango_context_get_gravity (PangoContext *context);
extern
void pango_context_set_gravity_hint (PangoContext *context,
                                                                 PangoGravityHint hint);
extern
PangoGravityHint pango_context_get_gravity_hint (PangoContext *context);

extern
void pango_context_set_matrix (PangoContext *context,
                                                                 const PangoMatrix *matrix);
extern
const PangoMatrix * pango_context_get_matrix (PangoContext *context);

extern
void pango_context_set_round_glyph_positions (PangoContext *context,
                                                                 gboolean round_positions);
extern
gboolean pango_context_get_round_glyph_positions (PangoContext *context);
# 30 "/usr/include/pango-1.0/pango/pango.h" 2


# 1 "/usr/include/pango-1.0/pango/pango-engine.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-engine.h"
# 1 "/usr/include/pango-1.0/pango/pango-glyph.h" 1
# 31 "/usr/include/pango-1.0/pango/pango-glyph.h"
typedef struct _PangoGlyphGeometry PangoGlyphGeometry;
typedef struct _PangoGlyphVisAttr PangoGlyphVisAttr;
typedef struct _PangoGlyphInfo PangoGlyphInfo;
typedef struct _PangoGlyphString PangoGlyphString;
# 52 "/usr/include/pango-1.0/pango/pango-glyph.h"
typedef gint32 PangoGlyphUnit;
# 78 "/usr/include/pango-1.0/pango/pango-glyph.h"
struct _PangoGlyphGeometry
{
  PangoGlyphUnit width;
  PangoGlyphUnit x_offset;
  PangoGlyphUnit y_offset;
};
# 103 "/usr/include/pango-1.0/pango/pango-glyph.h"
struct _PangoGlyphVisAttr
{
  guint is_cluster_start : 1;
  guint is_color : 1;
};
# 120 "/usr/include/pango-1.0/pango/pango-glyph.h"
struct _PangoGlyphInfo
{
  PangoGlyph glyph;
  PangoGlyphGeometry geometry;
  PangoGlyphVisAttr attr;
};
# 140 "/usr/include/pango-1.0/pango/pango-glyph.h"
struct _PangoGlyphString {
  int num_glyphs;

  PangoGlyphInfo *glyphs;
  int *log_clusters;


  int space;
};



extern
GType pango_glyph_string_get_type (void) __attribute__ ((__const__));

extern
PangoGlyphString * pango_glyph_string_new (void);
extern
void pango_glyph_string_set_size (PangoGlyphString *string,
                                                                 int new_len);

extern
PangoGlyphString * pango_glyph_string_copy (PangoGlyphString *string);
extern
void pango_glyph_string_free (PangoGlyphString *string);

extern
void pango_glyph_string_extents (PangoGlyphString *glyphs,
                                                                 PangoFont *font,
                                                                 PangoRectangle *ink_rect,
                                                                 PangoRectangle *logical_rect);
extern
int pango_glyph_string_get_width (PangoGlyphString *glyphs);

extern
void pango_glyph_string_extents_range (PangoGlyphString *glyphs,
                                                                 int start,
                                                                 int end,
                                                                 PangoFont *font,
                                                                 PangoRectangle *ink_rect,
                                                                 PangoRectangle *logical_rect);

extern
void pango_glyph_string_get_logical_widths (PangoGlyphString *glyphs,
                                                                 const char *text,
                                                                 int length,
                                                                 int embedding_level,
                                                                 int *logical_widths);

extern
void pango_glyph_string_index_to_x (PangoGlyphString *glyphs,
                                                                 const char *text,
                                                                 int length,
                                                                 PangoAnalysis *analysis,
                                                                 int index_,
                                                                 gboolean trailing,
                                                                 int *x_pos);
extern
void pango_glyph_string_x_to_index (PangoGlyphString *glyphs,
                                                                 const char *text,
                                                                 int length,
                                                                 PangoAnalysis *analysis,
                                                                 int x_pos,
                                                                 int *index_,
                                                                 int *trailing);

extern
void pango_glyph_string_index_to_x_full (PangoGlyphString *glyphs,
                                                                 const char *text,
                                                                 int length,
                                                                 PangoAnalysis *analysis,
                                                                 PangoLogAttr *attrs,
                                                                 int index_,
                                                                 gboolean trailing,
                                                                 int *x_pos);
# 230 "/usr/include/pango-1.0/pango/pango-glyph.h"
typedef enum {
  PANGO_SHAPE_NONE = 0,
  PANGO_SHAPE_ROUND_POSITIONS = 1 << 0,
} PangoShapeFlags;

extern
void pango_shape (const char *text,
                                                                 int length,
                                                                 const PangoAnalysis *analysis,
                                                                 PangoGlyphString *glyphs);

extern
void pango_shape_full (const char *item_text,
                                                                 int item_length,
                                                                 const char *paragraph_text,
                                                                 int paragraph_length,
                                                                 const PangoAnalysis *analysis,
                                                                 PangoGlyphString *glyphs);

extern
void pango_shape_with_flags (const char *item_text,
                                                                 int item_length,
                                                                 const char *paragraph_text,
                                                                 int paragraph_length,
                                                                 const PangoAnalysis *analysis,
                                                                 PangoGlyphString *glyphs,
                                                                 PangoShapeFlags flags);


extern
void pango_shape_item (PangoItem *item,
                                                                 const char *paragraph_text,
                                                                 int paragraph_length,
                                                                 PangoLogAttr *log_attrs,
                                                                 PangoGlyphString *glyphs,
                                                                 PangoShapeFlags flags);
# 29 "/usr/include/pango-1.0/pango/pango-engine.h" 2
# 57 "/usr/include/pango-1.0/pango/pango-engine.h"
typedef struct _PangoEngine PangoEngine;
typedef struct _PangoEngineClass PangoEngineClass;
# 68 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngine
{

  GObject parent_instance;
};
# 81 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineClass
{

  GObjectClass parent_class;
};

__attribute__((__deprecated__)) extern
GType pango_engine_get_type (void) __attribute__ ((__const__));
# 107 "/usr/include/pango-1.0/pango/pango-engine.h"
typedef struct _PangoEngineLangClass PangoEngineLangClass;
# 121 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineLang
{

  PangoEngine parent_instance;
};
# 140 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineLangClass
{

  PangoEngineClass parent_class;


  void (*script_break) (PangoEngineLang *engine,
   const char *text,
   int len,
   PangoAnalysis *analysis,
   PangoLogAttr *attrs,
   int attrs_len);
};

__attribute__((__deprecated__)) extern
GType pango_engine_lang_get_type (void) __attribute__ ((__const__));
# 174 "/usr/include/pango-1.0/pango/pango-engine.h"
typedef struct _PangoEngineShapeClass PangoEngineShapeClass;
# 190 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineShape
{
  PangoEngine parent_instance;
};
# 222 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineShapeClass
{

  PangoEngineClass parent_class;


  void (*script_shape) (PangoEngineShape *engine,
   PangoFont *font,
   const char *item_text,
   unsigned int item_length,
   const PangoAnalysis *analysis,
   PangoGlyphString *glyphs,
   const char *paragraph_text,
   unsigned int paragraph_length);
  PangoCoverageLevel (*covers) (PangoEngineShape *engine,
      PangoFont *font,
      PangoLanguage *language,
      gunichar wc);
};

__attribute__((__deprecated__)) extern
GType pango_engine_shape_get_type (void) __attribute__ ((__const__));

typedef struct _PangoEngineInfo PangoEngineInfo;
typedef struct _PangoEngineScriptInfo PangoEngineScriptInfo;
# 267 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineScriptInfo
{
  PangoScript script;
  const gchar *langs;
};
# 286 "/usr/include/pango-1.0/pango/pango-engine.h"
struct _PangoEngineInfo
{
  const gchar *id;
  const gchar *engine_type;
  const gchar *render_type;
  PangoEngineScriptInfo *scripts;
  gint n_scripts;
};
# 304 "/usr/include/pango-1.0/pango/pango-engine.h"
__attribute__((__deprecated__)) extern
void script_engine_list (PangoEngineInfo **engines,
    int *n_engines);
# 317 "/usr/include/pango-1.0/pango/pango-engine.h"
__attribute__((__deprecated__)) extern
void script_engine_init (GTypeModule *module);
# 328 "/usr/include/pango-1.0/pango/pango-engine.h"
__attribute__((__deprecated__)) extern
void script_engine_exit (void);
# 339 "/usr/include/pango-1.0/pango/pango-engine.h"
__attribute__((__deprecated__)) extern
PangoEngine *script_engine_create (const char *id);
# 33 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-enum-types.h" 1
# 14 "/usr/include/pango-1.0/pango/pango-enum-types.h"
extern
GType pango_attr_type_get_type (void) __attribute__ ((__const__));

extern
GType pango_underline_get_type (void) __attribute__ ((__const__));

extern
GType pango_overline_get_type (void) __attribute__ ((__const__));

extern
GType pango_show_flags_get_type (void) __attribute__ ((__const__));

extern
GType pango_text_transform_get_type (void) __attribute__ ((__const__));

extern
GType pango_baseline_shift_get_type (void) __attribute__ ((__const__));

extern
GType pango_font_scale_get_type (void) __attribute__ ((__const__));



extern
GType pango_bidi_type_get_type (void) __attribute__ ((__const__));



extern
GType pango_coverage_level_get_type (void) __attribute__ ((__const__));



extern
GType pango_direction_get_type (void) __attribute__ ((__const__));



extern
GType pango_style_get_type (void) __attribute__ ((__const__));

extern
GType pango_variant_get_type (void) __attribute__ ((__const__));

extern
GType pango_weight_get_type (void) __attribute__ ((__const__));

extern
GType pango_stretch_get_type (void) __attribute__ ((__const__));

extern
GType pango_font_mask_get_type (void) __attribute__ ((__const__));



extern
GType pango_shape_flags_get_type (void) __attribute__ ((__const__));



extern
GType pango_gravity_get_type (void) __attribute__ ((__const__));

extern
GType pango_gravity_hint_get_type (void) __attribute__ ((__const__));



extern
GType pango_alignment_get_type (void) __attribute__ ((__const__));

extern
GType pango_wrap_mode_get_type (void) __attribute__ ((__const__));

extern
GType pango_ellipsize_mode_get_type (void) __attribute__ ((__const__));

extern
GType pango_layout_serialize_flags_get_type (void) __attribute__ ((__const__));

extern
GType pango_layout_deserialize_error_get_type (void) __attribute__ ((__const__));

extern
GType pango_layout_deserialize_flags_get_type (void) __attribute__ ((__const__));



extern
GType pango_render_part_get_type (void) __attribute__ ((__const__));



extern
GType pango_script_get_type (void) __attribute__ ((__const__));



extern
GType pango_tab_align_get_type (void) __attribute__ ((__const__));
# 34 "/usr/include/pango-1.0/pango/pango.h" 2




# 1 "/usr/include/pango-1.0/pango/pango-fontset-simple.h" 1
# 46 "/usr/include/pango-1.0/pango/pango-fontset-simple.h"
typedef struct _PangoFontsetSimple PangoFontsetSimple;
typedef struct _PangoFontsetSimpleClass PangoFontsetSimpleClass;


extern
GType pango_fontset_simple_get_type (void) __attribute__ ((__const__));

extern
PangoFontsetSimple * pango_fontset_simple_new (PangoLanguage *language);
extern
void pango_fontset_simple_append (PangoFontsetSimple *fontset,
                                                     PangoFont *font);
extern
int pango_fontset_simple_size (PangoFontsetSimple *fontset);
# 39 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-glyph-item.h" 1
# 50 "/usr/include/pango-1.0/pango/pango-glyph-item.h"
typedef struct _PangoGlyphItem PangoGlyphItem;

struct _PangoGlyphItem
{
  PangoItem *item;
  PangoGlyphString *glyphs;
  int y_offset;
  int start_x_offset;
  int end_x_offset;
};



extern
GType pango_glyph_item_get_type (void) __attribute__ ((__const__));

extern
PangoGlyphItem *pango_glyph_item_split (PangoGlyphItem *orig,
            const char *text,
            int split_index);
extern
PangoGlyphItem *pango_glyph_item_copy (PangoGlyphItem *orig);
extern
void pango_glyph_item_free (PangoGlyphItem *glyph_item);
extern
GSList * pango_glyph_item_apply_attrs (PangoGlyphItem *glyph_item,
            const char *text,
            PangoAttrList *list);
extern
void pango_glyph_item_letter_space (PangoGlyphItem *glyph_item,
            const char *text,
            PangoLogAttr *log_attrs,
            int letter_spacing);
extern
void pango_glyph_item_get_logical_widths (PangoGlyphItem *glyph_item,
            const char *text,
            int *logical_widths);
# 135 "/usr/include/pango-1.0/pango/pango-glyph-item.h"
typedef struct _PangoGlyphItemIter PangoGlyphItemIter;

struct _PangoGlyphItemIter
{
  PangoGlyphItem *glyph_item;
  const gchar *text;

  int start_glyph;
  int start_index;
  int start_char;

  int end_glyph;
  int end_index;
  int end_char;
};



extern
GType pango_glyph_item_iter_get_type (void) __attribute__ ((__const__));
extern
PangoGlyphItemIter *pango_glyph_item_iter_copy (PangoGlyphItemIter *orig);
extern
void pango_glyph_item_iter_free (PangoGlyphItemIter *iter);

extern
gboolean pango_glyph_item_iter_init_start (PangoGlyphItemIter *iter,
          PangoGlyphItem *glyph_item,
          const char *text);
extern
gboolean pango_glyph_item_iter_init_end (PangoGlyphItemIter *iter,
          PangoGlyphItem *glyph_item,
          const char *text);
extern
gboolean pango_glyph_item_iter_next_cluster (PangoGlyphItemIter *iter);
extern
gboolean pango_glyph_item_iter_prev_cluster (PangoGlyphItemIter *iter);
# 41 "/usr/include/pango-1.0/pango/pango.h" 2



# 1 "/usr/include/pango-1.0/pango/pango-layout.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-layout.h"
# 1 "/usr/include/pango-1.0/pango/pango-tabs.h" 1
# 29 "/usr/include/pango-1.0/pango/pango-tabs.h"
typedef struct _PangoTabArray PangoTabArray;
# 45 "/usr/include/pango-1.0/pango/pango-tabs.h"
typedef enum
{
  PANGO_TAB_LEFT,
  PANGO_TAB_RIGHT,
  PANGO_TAB_CENTER,
  PANGO_TAB_DECIMAL
} PangoTabAlign;



extern
PangoTabArray *pango_tab_array_new (gint initial_size,
           gboolean positions_in_pixels);
extern
PangoTabArray *pango_tab_array_new_with_positions (gint size,
           gboolean positions_in_pixels,
           PangoTabAlign first_alignment,
           gint first_position,
           ...);
extern
GType pango_tab_array_get_type (void) __attribute__ ((__const__));
extern
PangoTabArray *pango_tab_array_copy (PangoTabArray *src);
extern
void pango_tab_array_free (PangoTabArray *tab_array);
extern
gint pango_tab_array_get_size (PangoTabArray *tab_array);
extern
void pango_tab_array_resize (PangoTabArray *tab_array,
           gint new_size);
extern
void pango_tab_array_set_tab (PangoTabArray *tab_array,
           gint tab_index,
           PangoTabAlign alignment,
           gint location);
extern
void pango_tab_array_get_tab (PangoTabArray *tab_array,
           gint tab_index,
           PangoTabAlign *alignment,
           gint *location);
extern
void pango_tab_array_get_tabs (PangoTabArray *tab_array,
           PangoTabAlign **alignments,
           gint **locations);

extern
gboolean pango_tab_array_get_positions_in_pixels (PangoTabArray *tab_array);

extern
void pango_tab_array_set_positions_in_pixels (PangoTabArray *tab_array,
                                                         gboolean positions_in_pixels);

extern
char * pango_tab_array_to_string (PangoTabArray *tab_array);
extern
PangoTabArray * pango_tab_array_from_string (const char *text);

extern
void pango_tab_array_set_decimal_point (PangoTabArray *tab_array,
                                                     int tab_index,
                                                     gunichar decimal_point);
extern
gunichar pango_tab_array_get_decimal_point (PangoTabArray *tab_array,
                                                     int tab_index);

extern
void pango_tab_array_sort (PangoTabArray *tab_array);

typedef PangoTabArray *PangoTabArray_autoptr; typedef GList *PangoTabArray_listautoptr; typedef GSList *PangoTabArray_slistautoptr; typedef GQueue *PangoTabArray_queueautoptr;
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"
#pragma clang diagnostic push
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoTabArray (PangoTabArray *_ptr) { if (_ptr) (pango_tab_array_free) ((PangoTabArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoTabArray (PangoTabArray **_ptr) { glib_autoptr_clear_PangoTabArray (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoTabArray (void *_ptr) { (pango_tab_array_free) ((PangoTabArray *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoTabArray (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoTabArray); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoTabArray (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoTabArray); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoTabArray (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoTabArray); }
# 113 "/usr/include/pango-1.0/pango/pango-tabs.h"
#pragma clang diagnostic pop
# 29 "/usr/include/pango-1.0/pango/pango-layout.h" 2



typedef struct _PangoLayout PangoLayout;
typedef struct _PangoLayoutClass PangoLayoutClass;
typedef struct _PangoLayoutLine PangoLayoutLine;
# 44 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef PangoGlyphItem PangoLayoutRun;
# 61 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_ALIGN_LEFT,
  PANGO_ALIGN_CENTER,
  PANGO_ALIGN_RIGHT
} PangoAlignment;
# 82 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_WRAP_WORD,
  PANGO_WRAP_CHAR,
  PANGO_WRAP_WORD_CHAR
} PangoWrapMode;
# 102 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_ELLIPSIZE_NONE,
  PANGO_ELLIPSIZE_START,
  PANGO_ELLIPSIZE_MIDDLE,
  PANGO_ELLIPSIZE_END
} PangoEllipsizeMode;
# 126 "/usr/include/pango-1.0/pango/pango-layout.h"
struct _PangoLayoutLine
{
  PangoLayout *layout;
  gint start_index;
  gint length;
  GSList *runs;
  guint is_paragraph_start : 1;
  guint resolved_dir : 3;
};
# 147 "/usr/include/pango-1.0/pango/pango-layout.h"
extern
GType pango_layout_get_type (void) __attribute__ ((__const__));
extern
PangoLayout *pango_layout_new (PangoContext *context);
extern
PangoLayout *pango_layout_copy (PangoLayout *src);

extern
PangoContext *pango_layout_get_context (PangoLayout *layout);

extern
void pango_layout_set_attributes (PangoLayout *layout,
         PangoAttrList *attrs);
extern
PangoAttrList *pango_layout_get_attributes (PangoLayout *layout);

extern
void pango_layout_set_text (PangoLayout *layout,
         const char *text,
         int length);
extern
const char *pango_layout_get_text (PangoLayout *layout);

extern
gint pango_layout_get_character_count (PangoLayout *layout);

extern
void pango_layout_set_markup (PangoLayout *layout,
         const char *markup,
         int length);

extern
void pango_layout_set_markup_with_accel (PangoLayout *layout,
         const char *markup,
         int length,
         gunichar accel_marker,
         gunichar *accel_char);

extern
void pango_layout_set_font_description (PangoLayout *layout,
        const PangoFontDescription *desc);

extern
const PangoFontDescription *pango_layout_get_font_description (PangoLayout *layout);

extern
void pango_layout_set_width (PangoLayout *layout,
        int width);
extern
int pango_layout_get_width (PangoLayout *layout);
extern
void pango_layout_set_height (PangoLayout *layout,
        int height);
extern
int pango_layout_get_height (PangoLayout *layout);
extern
void pango_layout_set_wrap (PangoLayout *layout,
        PangoWrapMode wrap);
extern
PangoWrapMode pango_layout_get_wrap (PangoLayout *layout);
extern
gboolean pango_layout_is_wrapped (PangoLayout *layout);
extern
void pango_layout_set_indent (PangoLayout *layout,
        int indent);
extern
int pango_layout_get_indent (PangoLayout *layout);
extern
void pango_layout_set_spacing (PangoLayout *layout,
        int spacing);
extern
int pango_layout_get_spacing (PangoLayout *layout);
extern
void pango_layout_set_line_spacing (PangoLayout *layout,
                                                  float factor);
extern
float pango_layout_get_line_spacing (PangoLayout *layout);
extern
void pango_layout_set_justify (PangoLayout *layout,
                                                  gboolean justify);
extern
gboolean pango_layout_get_justify (PangoLayout *layout);
extern
void pango_layout_set_justify_last_line (PangoLayout *layout,
                                                   gboolean justify);
extern
gboolean pango_layout_get_justify_last_line (PangoLayout *layout);
extern
void pango_layout_set_auto_dir (PangoLayout *layout,
        gboolean auto_dir);
extern
gboolean pango_layout_get_auto_dir (PangoLayout *layout);
extern
void pango_layout_set_alignment (PangoLayout *layout,
        PangoAlignment alignment);
extern
PangoAlignment pango_layout_get_alignment (PangoLayout *layout);

extern
void pango_layout_set_tabs (PangoLayout *layout,
        PangoTabArray *tabs);
extern
PangoTabArray* pango_layout_get_tabs (PangoLayout *layout);

extern
void pango_layout_set_single_paragraph_mode (PangoLayout *layout,
             gboolean setting);
extern
gboolean pango_layout_get_single_paragraph_mode (PangoLayout *layout);

extern
void pango_layout_set_ellipsize (PangoLayout *layout,
            PangoEllipsizeMode ellipsize);
extern
PangoEllipsizeMode pango_layout_get_ellipsize (PangoLayout *layout);
extern
gboolean pango_layout_is_ellipsized (PangoLayout *layout);

extern
int pango_layout_get_unknown_glyphs_count (PangoLayout *layout);

extern
PangoDirection pango_layout_get_direction (PangoLayout *layout,
                                           int index);

extern
void pango_layout_context_changed (PangoLayout *layout);
extern
guint pango_layout_get_serial (PangoLayout *layout);

extern
void pango_layout_get_log_attrs (PangoLayout *layout,
         PangoLogAttr **attrs,
         gint *n_attrs);

extern
const PangoLogAttr *pango_layout_get_log_attrs_readonly (PangoLayout *layout,
        gint *n_attrs);

extern
void pango_layout_index_to_pos (PangoLayout *layout,
         int index_,
         PangoRectangle *pos);
extern
void pango_layout_index_to_line_x (PangoLayout *layout,
         int index_,
         gboolean trailing,
         int *line,
         int *x_pos);
extern
void pango_layout_get_cursor_pos (PangoLayout *layout,
         int index_,
         PangoRectangle *strong_pos,
         PangoRectangle *weak_pos);

extern
void pango_layout_get_caret_pos (PangoLayout *layout,
                                            int index_,
                                            PangoRectangle *strong_pos,
                                            PangoRectangle *weak_pos);

extern
void pango_layout_move_cursor_visually (PangoLayout *layout,
         gboolean strong,
         int old_index,
         int old_trailing,
         int direction,
         int *new_index,
         int *new_trailing);
extern
gboolean pango_layout_xy_to_index (PangoLayout *layout,
         int x,
         int y,
         int *index_,
         int *trailing);
extern
void pango_layout_get_extents (PangoLayout *layout,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
void pango_layout_get_pixel_extents (PangoLayout *layout,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
void pango_layout_get_size (PangoLayout *layout,
         int *width,
         int *height);
extern
void pango_layout_get_pixel_size (PangoLayout *layout,
         int *width,
         int *height);
extern
int pango_layout_get_baseline (PangoLayout *layout);

extern
int pango_layout_get_line_count (PangoLayout *layout);
extern
PangoLayoutLine *pango_layout_get_line (PangoLayout *layout,
          int line);
extern
PangoLayoutLine *pango_layout_get_line_readonly (PangoLayout *layout,
          int line);
extern
GSList * pango_layout_get_lines (PangoLayout *layout);
extern
GSList * pango_layout_get_lines_readonly (PangoLayout *layout);
# 366 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_LAYOUT_SERIALIZE_DEFAULT = 0,
  PANGO_LAYOUT_SERIALIZE_CONTEXT = 1 << 0,
  PANGO_LAYOUT_SERIALIZE_OUTPUT = 1 << 1,
} PangoLayoutSerializeFlags;

extern
GBytes * pango_layout_serialize (PangoLayout *layout,
                                                    PangoLayoutSerializeFlags flags);

extern
gboolean pango_layout_write_to_file (PangoLayout *layout,
                                                    PangoLayoutSerializeFlags flags,

                                                    const char *filename,
                                                    GError **error);
# 397 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_LAYOUT_DESERIALIZE_INVALID,
  PANGO_LAYOUT_DESERIALIZE_INVALID_VALUE,
  PANGO_LAYOUT_DESERIALIZE_MISSING_VALUE,
} PangoLayoutDeserializeError;

extern
GQuark pango_layout_deserialize_error_quark (void);
# 418 "/usr/include/pango-1.0/pango/pango-layout.h"
typedef enum {
  PANGO_LAYOUT_DESERIALIZE_DEFAULT = 0,
  PANGO_LAYOUT_DESERIALIZE_CONTEXT = 1 << 0,
} PangoLayoutDeserializeFlags;

extern
PangoLayout * pango_layout_deserialize (PangoContext *context,
                                                    GBytes *bytes,
                                                    PangoLayoutDeserializeFlags flags,
                                                    GError **error);




extern
GType pango_layout_line_get_type (void) __attribute__ ((__const__));

extern
PangoLayoutLine *pango_layout_line_ref (PangoLayoutLine *line);
extern
void pango_layout_line_unref (PangoLayoutLine *line);

extern
int pango_layout_line_get_start_index (PangoLayoutLine *line);
extern
int pango_layout_line_get_length (PangoLayoutLine *line);
extern
gboolean pango_layout_line_is_paragraph_start (PangoLayoutLine *line);
extern
PangoDirection pango_layout_line_get_resolved_direction (PangoLayoutLine *line);

extern
gboolean pango_layout_line_x_to_index (PangoLayoutLine *line,
      int x_pos,
      int *index_,
      int *trailing);
extern
void pango_layout_line_index_to_x (PangoLayoutLine *line,
      int index_,
      gboolean trailing,
      int *x_pos);
extern
void pango_layout_line_get_x_ranges (PangoLayoutLine *line,
      int start_index,
      int end_index,
      int **ranges,
      int *n_ranges);
extern
void pango_layout_line_get_extents (PangoLayoutLine *line,
      PangoRectangle *ink_rect,
      PangoRectangle *logical_rect);
extern
void pango_layout_line_get_height (PangoLayoutLine *line,
      int *height);

extern
void pango_layout_line_get_pixel_extents (PangoLayoutLine *layout_line,
           PangoRectangle *ink_rect,
           PangoRectangle *logical_rect);

typedef struct _PangoLayoutIter PangoLayoutIter;



extern
GType pango_layout_iter_get_type (void) __attribute__ ((__const__));

extern
PangoLayoutIter *pango_layout_get_iter (PangoLayout *layout);
extern
PangoLayoutIter *pango_layout_iter_copy (PangoLayoutIter *iter);
extern
void pango_layout_iter_free (PangoLayoutIter *iter);

extern
int pango_layout_iter_get_index (PangoLayoutIter *iter);
extern
PangoLayoutRun *pango_layout_iter_get_run (PangoLayoutIter *iter);
extern
PangoLayoutRun *pango_layout_iter_get_run_readonly (PangoLayoutIter *iter);
extern
PangoLayoutLine *pango_layout_iter_get_line (PangoLayoutIter *iter);
extern
PangoLayoutLine *pango_layout_iter_get_line_readonly (PangoLayoutIter *iter);
extern
gboolean pango_layout_iter_at_last_line (PangoLayoutIter *iter);
extern
PangoLayout *pango_layout_iter_get_layout (PangoLayoutIter *iter);

extern
gboolean pango_layout_iter_next_char (PangoLayoutIter *iter);
extern
gboolean pango_layout_iter_next_cluster (PangoLayoutIter *iter);
extern
gboolean pango_layout_iter_next_run (PangoLayoutIter *iter);
extern
gboolean pango_layout_iter_next_line (PangoLayoutIter *iter);

extern
void pango_layout_iter_get_char_extents (PangoLayoutIter *iter,
         PangoRectangle *logical_rect);
extern
void pango_layout_iter_get_cluster_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
void pango_layout_iter_get_run_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
void pango_layout_iter_get_line_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);



extern
void pango_layout_iter_get_line_yrange (PangoLayoutIter *iter,
         int *y0_,
         int *y1_);
extern
void pango_layout_iter_get_layout_extents (PangoLayoutIter *iter,
         PangoRectangle *ink_rect,
         PangoRectangle *logical_rect);
extern
int pango_layout_iter_get_baseline (PangoLayoutIter *iter);
extern
int pango_layout_iter_get_run_baseline (PangoLayoutIter *iter);


typedef PangoLayout *PangoLayout_autoptr; typedef GList *PangoLayout_listautoptr; typedef GSList *PangoLayout_slistautoptr; typedef GQueue *PangoLayout_queueautoptr;
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma clang diagnostic push
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoLayout (PangoLayout *_ptr) { if (_ptr) (g_object_unref) ((PangoLayout *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoLayout (PangoLayout **_ptr) { glib_autoptr_clear_PangoLayout (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoLayout (void *_ptr) { (g_object_unref) ((PangoLayout *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoLayout (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoLayout); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoLayout (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoLayout); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoLayout (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoLayout); }
# 548 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma clang diagnostic pop
typedef PangoLayoutIter *PangoLayoutIter_autoptr; typedef GList *PangoLayoutIter_listautoptr; typedef GSList *PangoLayoutIter_slistautoptr; typedef GQueue *PangoLayoutIter_queueautoptr;
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma clang diagnostic push
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_PangoLayoutIter (PangoLayoutIter *_ptr) { if (_ptr) (pango_layout_iter_free) ((PangoLayoutIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_PangoLayoutIter (PangoLayoutIter **_ptr) { glib_autoptr_clear_PangoLayoutIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_PangoLayoutIter (void *_ptr) { (pango_layout_iter_free) ((PangoLayoutIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_PangoLayoutIter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_PangoLayoutIter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_PangoLayoutIter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_PangoLayoutIter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_PangoLayoutIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_PangoLayoutIter); }
# 549 "/usr/include/pango-1.0/pango/pango-layout.h"
#pragma clang diagnostic pop
# 45 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-markup.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-markup.h"
extern
GMarkupParseContext * pango_markup_parser_new (gunichar accel_marker);

extern
gboolean pango_markup_parser_finish (GMarkupParseContext *context,
                                                  PangoAttrList **attr_list,
                                                  char **text,
                                                  gunichar *accel_char,
                                                  GError **error);

extern
gboolean pango_parse_markup (const char *markup_text,
                                                  int length,
                                                  gunichar accel_marker,
                                                  PangoAttrList **attr_list,
                                                  char **text,
                                                  gunichar *accel_char,
                                                  GError **error);
# 47 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-renderer.h" 1
# 35 "/usr/include/pango-1.0/pango/pango-renderer.h"
typedef struct _PangoRenderer PangoRenderer;
typedef struct _PangoRendererClass PangoRendererClass;
typedef struct _PangoRendererPrivate PangoRendererPrivate;
# 53 "/usr/include/pango-1.0/pango/pango-renderer.h"
typedef enum
{
  PANGO_RENDER_PART_FOREGROUND,
  PANGO_RENDER_PART_BACKGROUND,
  PANGO_RENDER_PART_UNDERLINE,
  PANGO_RENDER_PART_STRIKETHROUGH,
  PANGO_RENDER_PART_OVERLINE
} PangoRenderPart;
# 77 "/usr/include/pango-1.0/pango/pango-renderer.h"
struct _PangoRenderer
{

  GObject parent_instance;

  PangoUnderline underline;
  gboolean strikethrough;
  int active_count;


  PangoMatrix *matrix;


  PangoRendererPrivate *priv;
};
# 131 "/usr/include/pango-1.0/pango/pango-renderer.h"
struct _PangoRendererClass
{

  GObjectClass parent_class;




  void (*draw_glyphs) (PangoRenderer *renderer,
                                PangoFont *font,
                                PangoGlyphString *glyphs,
                                int x,
                                int y);
  void (*draw_rectangle) (PangoRenderer *renderer,
                                PangoRenderPart part,
                                int x,
                                int y,
                                int width,
                                int height);
  void (*draw_error_underline) (PangoRenderer *renderer,
                                int x,
                                int y,
                                int width,
                                int height);
  void (*draw_shape) (PangoRenderer *renderer,
                                PangoAttrShape *attr,
                                int x,
                                int y);

  void (*draw_trapezoid) (PangoRenderer *renderer,
                                PangoRenderPart part,
                                double y1_,
                                double x11,
                                double x21,
                                double y2,
                                double x12,
                                double x22);
  void (*draw_glyph) (PangoRenderer *renderer,
                                PangoFont *font,
                                PangoGlyph glyph,
                                double x,
                                double y);

  void (*part_changed) (PangoRenderer *renderer,
                                PangoRenderPart part);

  void (*begin) (PangoRenderer *renderer);
  void (*end) (PangoRenderer *renderer);

  void (*prepare_run) (PangoRenderer *renderer,
                                PangoLayoutRun *run);

  void (*draw_glyph_item) (PangoRenderer *renderer,
                                const char *text,
                                PangoGlyphItem *glyph_item,
                                int x,
                                int y);




  void (*_pango_reserved2) (void);
  void (*_pango_reserved3) (void);
  void (*_pango_reserved4) (void);
};

extern
GType pango_renderer_get_type (void) __attribute__ ((__const__));

extern
void pango_renderer_draw_layout (PangoRenderer *renderer,
                                          PangoLayout *layout,
                                          int x,
                                          int y);
extern
void pango_renderer_draw_layout_line (PangoRenderer *renderer,
                                          PangoLayoutLine *line,
                                          int x,
                                          int y);
extern
void pango_renderer_draw_glyphs (PangoRenderer *renderer,
                                          PangoFont *font,
                                          PangoGlyphString *glyphs,
                                          int x,
                                          int y);
extern
void pango_renderer_draw_glyph_item (PangoRenderer *renderer,
                                          const char *text,
                                          PangoGlyphItem *glyph_item,
                                          int x,
                                          int y);
extern
void pango_renderer_draw_rectangle (PangoRenderer *renderer,
                                          PangoRenderPart part,
                                          int x,
                                          int y,
                                          int width,
                                          int height);
extern
void pango_renderer_draw_error_underline (PangoRenderer *renderer,
                                          int x,
                                          int y,
                                          int width,
                                          int height);
extern
void pango_renderer_draw_trapezoid (PangoRenderer *renderer,
                                          PangoRenderPart part,
                                          double y1_,
                                          double x11,
                                          double x21,
                                          double y2,
                                          double x12,
                                          double x22);
extern
void pango_renderer_draw_glyph (PangoRenderer *renderer,
                                          PangoFont *font,
                                          PangoGlyph glyph,
                                          double x,
                                          double y);

extern
void pango_renderer_activate (PangoRenderer *renderer);
extern
void pango_renderer_deactivate (PangoRenderer *renderer);

extern
void pango_renderer_part_changed (PangoRenderer *renderer,
                                          PangoRenderPart part);

extern
void pango_renderer_set_color (PangoRenderer *renderer,
                                          PangoRenderPart part,
                                          const PangoColor *color);
extern
PangoColor *pango_renderer_get_color (PangoRenderer *renderer,
                                          PangoRenderPart part);

extern
void pango_renderer_set_alpha (PangoRenderer *renderer,
                                          PangoRenderPart part,
                                          guint16 alpha);
extern
guint16 pango_renderer_get_alpha (PangoRenderer *renderer,
                                          PangoRenderPart part);

extern
void pango_renderer_set_matrix (PangoRenderer *renderer,
                                                   const PangoMatrix *matrix);
extern
const PangoMatrix *pango_renderer_get_matrix (PangoRenderer *renderer);

extern
PangoLayout *pango_renderer_get_layout (PangoRenderer *renderer);
extern
PangoLayoutLine *pango_renderer_get_layout_line (PangoRenderer *renderer);
# 48 "/usr/include/pango-1.0/pango/pango.h" 2



# 1 "/usr/include/pango-1.0/pango/pango-utils.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-utils.h"
# 1 "/usr/include/stdio.h" 1 3 4
# 28 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 29 "/usr/include/stdio.h" 2 3 4





# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 93 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_size_t.h" 1 3 4
# 94 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 108 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3 4
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 35 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/bin/../lib/clang/19/include/stdarg.h" 1 3 4
# 38 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 44 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  struct _IO_FILE **_prevchain;
  int _mode;

  char _unused2[15 * sizeof (int) - 5 * sizeof (void *)];
};
# 45 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 48 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 85 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;
# 129 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 130 "/usr/include/stdio.h" 2 3 4
# 149 "/usr/include/stdio.h" 3 4
extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) __attribute__ ((__nothrow__ ));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ ));



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ ));
# 184 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 194 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) ;
# 211 "/usr/include/stdio.h" 3 4
extern char *tmpnam (char[20]) __attribute__ ((__nothrow__ )) ;




extern char *tmpnam_r (char __s[20]) __attribute__ ((__nothrow__ )) ;
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;






extern int fflush (FILE *__stream);
# 245 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 264 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__nonnull__ (3)));
# 299 "/usr/include/stdio.h" 3 4
extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ ))
  __attribute__ ((__malloc__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ ))
  __attribute__ ((__malloc__)) ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ )) __attribute__ ((__malloc__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ ))
  __attribute__ ((__malloc__)) ;
# 334 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ ))
  __attribute__ ((__nonnull__ (1)));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...) __attribute__ ((__nonnull__ (1)));




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nonnull__ (1)));




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__nonnull__ (1)));




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ ));
# 463 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf") __attribute__ ((__nonnull__ (1)));


extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf") ;

extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) __asm__ ("" "__isoc99_sscanf") __attribute__ ((__nothrow__ ));
# 490 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__nonnull__ (1)));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 540 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__nonnull__ (1)));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vsscanf") __attribute__ ((__nothrow__ ))



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 575 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream) __attribute__ ((__nonnull__ (1)));
extern int getc (FILE *__stream) __attribute__ ((__nonnull__ (1)));





extern int getchar (void);






extern int getc_unlocked (FILE *__stream) __attribute__ ((__nonnull__ (1)));
extern int getchar_unlocked (void);
# 600 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 611 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));
extern int putc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));





extern int putchar (int __c);
# 627 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));







extern int putc_unlocked (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream) __attribute__ ((__nonnull__ (1)));


extern int putw (int __w, FILE *__stream) __attribute__ ((__nonnull__ (2)));







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
                                                          __attribute__ ((__nonnull__ (3)));
# 689 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) __attribute__ ((__nonnull__ (4)));
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) __attribute__ ((__nonnull__ (4)));


extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) __attribute__ ((__nonnull__ (3)));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (2)));





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (4)));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) __attribute__ ((__nonnull__ (4)));
# 756 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (4)));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (4)));







extern int fseek (FILE *__stream, long int __off, int __whence)
  __attribute__ ((__nonnull__ (1)));




extern long int ftell (FILE *__stream) __attribute__ ((__nonnull__ (1)));




extern void rewind (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 793 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence)
  __attribute__ ((__nonnull__ (1)));




extern __off_t ftello (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 819 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos)
  __attribute__ ((__nonnull__ (1)));




extern int fsetpos (FILE *__stream, const fpos_t *__pos) __attribute__ ((__nonnull__ (1)));
# 850 "/usr/include/stdio.h" 3 4
extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));







extern void perror (const char *__s) __attribute__ ((__cold__));




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 887 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream) __attribute__ ((__nonnull__ (1)));





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) ;






extern char *ctermid (char *__s) __attribute__ ((__nothrow__ ))
                                     ;
# 931 "/usr/include/stdio.h" 3 4
extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ )) __attribute__ ((__nonnull__ (1)));
# 949 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 966 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio.h" 1 3 4
# 38 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}
# 127 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ )) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ )) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 967 "/usr/include/stdio.h" 2 3 4
# 26 "/usr/include/pango-1.0/pango/pango-utils.h" 2





__attribute__((__deprecated__)) extern
char ** pango_split_file_list (const char *str);

__attribute__((__deprecated__)) extern
char *pango_trim_string (const char *str);
__attribute__((__deprecated__)) extern
gint pango_read_line (FILE *stream,
          GString *str);
__attribute__((__deprecated__)) extern
gboolean pango_skip_space (const char **pos);
__attribute__((__deprecated__)) extern
gboolean pango_scan_word (const char **pos,
          GString *out);
__attribute__((__deprecated__)) extern
gboolean pango_scan_string (const char **pos,
          GString *out);
__attribute__((__deprecated__)) extern
gboolean pango_scan_int (const char **pos,
          int *out);

__attribute__((__deprecated__)) extern
gboolean pango_parse_enum (GType type,
          const char *str,
          int *value,
          gboolean warn,
          char **possible_values);
# 65 "/usr/include/pango-1.0/pango/pango-utils.h"
extern
gboolean pango_parse_style (const char *str,
         PangoStyle *style,
         gboolean warn);
extern
gboolean pango_parse_variant (const char *str,
         PangoVariant *variant,
         gboolean warn);
extern
gboolean pango_parse_weight (const char *str,
         PangoWeight *weight,
         gboolean warn);
extern
gboolean pango_parse_stretch (const char *str,
         PangoStretch *stretch,
         gboolean warn);




extern
void pango_quantize_line_geometry (int *thickness,
       int *position);



extern
guint8 * pango_log2vis_get_embedding_levels (const gchar *text,
          int length,
          PangoDirection *pbase_dir);




extern
gboolean pango_is_zero_width (gunichar ch) __attribute__ ((__const__));

extern
void pango_find_paragraph_boundary (const char *text,
                                        int length,
                                        int *paragraph_delimiter_index,
                                        int *next_paragraph_start);
# 172 "/usr/include/pango-1.0/pango/pango-utils.h"
extern
int pango_version (void) __attribute__ ((__const__));


extern
const char * pango_version_string (void) __attribute__ ((__const__));


extern
const char * pango_version_check (int required_major,
                                  int required_minor,
                                  int required_micro) __attribute__ ((__const__));
# 52 "/usr/include/pango-1.0/pango/pango.h" 2
# 36 "/usr/include/gtk-3.0/gdk/gdktypes.h" 2

# 1 "/usr/include/cairo/cairo.h" 1
# 41 "/usr/include/cairo/cairo.h"
# 1 "/usr/include/cairo/cairo-version.h" 1
# 42 "/usr/include/cairo/cairo.h" 2
# 1 "/usr/include/cairo/cairo-features.h" 1
# 43 "/usr/include/cairo/cairo.h" 2
# 1 "/usr/include/cairo/cairo-deprecated.h" 1
# 44 "/usr/include/cairo/cairo.h" 2
# 96 "/usr/include/cairo/cairo.h"
 extern int
cairo_version (void);

 extern const char*
cairo_version_string (void);
# 118 "/usr/include/cairo/cairo.h"
typedef int cairo_bool_t;
# 135 "/usr/include/cairo/cairo.h"
typedef struct _cairo cairo_t;
# 164 "/usr/include/cairo/cairo.h"
typedef struct _cairo_surface cairo_surface_t;
# 180 "/usr/include/cairo/cairo.h"
typedef struct _cairo_device cairo_device_t;
# 201 "/usr/include/cairo/cairo.h"
typedef struct _cairo_matrix {
    double xx; double yx;
    double xy; double yy;
    double x0; double y0;
} cairo_matrix_t;
# 229 "/usr/include/cairo/cairo.h"
typedef struct _cairo_pattern cairo_pattern_t;
# 241 "/usr/include/cairo/cairo.h"
typedef void (*cairo_destroy_func_t) (void *data);
# 255 "/usr/include/cairo/cairo.h"
typedef struct _cairo_user_data_key {
    int unused;
} cairo_user_data_key_t;
# 325 "/usr/include/cairo/cairo.h"
typedef enum _cairo_status {
    CAIRO_STATUS_SUCCESS = 0,

    CAIRO_STATUS_NO_MEMORY,
    CAIRO_STATUS_INVALID_RESTORE,
    CAIRO_STATUS_INVALID_POP_GROUP,
    CAIRO_STATUS_NO_CURRENT_POINT,
    CAIRO_STATUS_INVALID_MATRIX,
    CAIRO_STATUS_INVALID_STATUS,
    CAIRO_STATUS_NULL_POINTER,
    CAIRO_STATUS_INVALID_STRING,
    CAIRO_STATUS_INVALID_PATH_DATA,
    CAIRO_STATUS_READ_ERROR,
    CAIRO_STATUS_WRITE_ERROR,
    CAIRO_STATUS_SURFACE_FINISHED,
    CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
    CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
    CAIRO_STATUS_INVALID_CONTENT,
    CAIRO_STATUS_INVALID_FORMAT,
    CAIRO_STATUS_INVALID_VISUAL,
    CAIRO_STATUS_FILE_NOT_FOUND,
    CAIRO_STATUS_INVALID_DASH,
    CAIRO_STATUS_INVALID_DSC_COMMENT,
    CAIRO_STATUS_INVALID_INDEX,
    CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
    CAIRO_STATUS_TEMP_FILE_ERROR,
    CAIRO_STATUS_INVALID_STRIDE,
    CAIRO_STATUS_FONT_TYPE_MISMATCH,
    CAIRO_STATUS_USER_FONT_IMMUTABLE,
    CAIRO_STATUS_USER_FONT_ERROR,
    CAIRO_STATUS_NEGATIVE_COUNT,
    CAIRO_STATUS_INVALID_CLUSTERS,
    CAIRO_STATUS_INVALID_SLANT,
    CAIRO_STATUS_INVALID_WEIGHT,
    CAIRO_STATUS_INVALID_SIZE,
    CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
    CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
    CAIRO_STATUS_DEVICE_ERROR,
    CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,
    CAIRO_STATUS_DEVICE_FINISHED,
    CAIRO_STATUS_JBIG2_GLOBAL_MISSING,
    CAIRO_STATUS_PNG_ERROR,
    CAIRO_STATUS_FREETYPE_ERROR,
    CAIRO_STATUS_WIN32_GDI_ERROR,
    CAIRO_STATUS_TAG_ERROR,
    CAIRO_STATUS_DWRITE_ERROR,
    CAIRO_STATUS_SVG_FONT_ERROR,

    CAIRO_STATUS_LAST_STATUS
} cairo_status_t;
# 392 "/usr/include/cairo/cairo.h"
typedef enum _cairo_content {
    CAIRO_CONTENT_COLOR = 0x1000,
    CAIRO_CONTENT_ALPHA = 0x2000,
    CAIRO_CONTENT_COLOR_ALPHA = 0x3000
} cairo_content_t;
# 431 "/usr/include/cairo/cairo.h"
typedef enum _cairo_format {
    CAIRO_FORMAT_INVALID = -1,
    CAIRO_FORMAT_ARGB32 = 0,
    CAIRO_FORMAT_RGB24 = 1,
    CAIRO_FORMAT_A8 = 2,
    CAIRO_FORMAT_A1 = 3,
    CAIRO_FORMAT_RGB16_565 = 4,
    CAIRO_FORMAT_RGB30 = 5,
    CAIRO_FORMAT_RGB96F = 6,
    CAIRO_FORMAT_RGBA128F = 7
} cairo_format_t;
# 462 "/usr/include/cairo/cairo.h"
typedef enum _cairo_dither {
    CAIRO_DITHER_NONE,
    CAIRO_DITHER_DEFAULT,
    CAIRO_DITHER_FAST,
    CAIRO_DITHER_GOOD,
    CAIRO_DITHER_BEST
} cairo_dither_t;

 extern void
cairo_pattern_set_dither (cairo_pattern_t *pattern, cairo_dither_t dither);

 extern cairo_dither_t
cairo_pattern_get_dither (cairo_pattern_t *pattern);
# 494 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_write_func_t) (void *closure,
           const unsigned char *data,
           unsigned int length);
# 516 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_read_func_t) (void *closure,
          unsigned char *data,
          unsigned int length);
# 532 "/usr/include/cairo/cairo.h"
typedef struct _cairo_rectangle_int {
    int x, y;
    int width, height;
} cairo_rectangle_int_t;



 extern cairo_t *
cairo_create (cairo_surface_t *target);

 extern cairo_t *
cairo_reference (cairo_t *cr);

 extern void
cairo_destroy (cairo_t *cr);

 extern unsigned int
cairo_get_reference_count (cairo_t *cr);

 extern void *
cairo_get_user_data (cairo_t *cr,
       const cairo_user_data_key_t *key);

 extern cairo_status_t
cairo_set_user_data (cairo_t *cr,
       const cairo_user_data_key_t *key,
       void *user_data,
       cairo_destroy_func_t destroy);

 extern void
cairo_save (cairo_t *cr);

 extern void
cairo_restore (cairo_t *cr);

 extern void
cairo_push_group (cairo_t *cr);

 extern void
cairo_push_group_with_content (cairo_t *cr, cairo_content_t content);

 extern cairo_pattern_t *
cairo_pop_group (cairo_t *cr);

 extern void
cairo_pop_group_to_source (cairo_t *cr);
# 662 "/usr/include/cairo/cairo.h"
typedef enum _cairo_operator {
    CAIRO_OPERATOR_CLEAR,

    CAIRO_OPERATOR_SOURCE,
    CAIRO_OPERATOR_OVER,
    CAIRO_OPERATOR_IN,
    CAIRO_OPERATOR_OUT,
    CAIRO_OPERATOR_ATOP,

    CAIRO_OPERATOR_DEST,
    CAIRO_OPERATOR_DEST_OVER,
    CAIRO_OPERATOR_DEST_IN,
    CAIRO_OPERATOR_DEST_OUT,
    CAIRO_OPERATOR_DEST_ATOP,

    CAIRO_OPERATOR_XOR,
    CAIRO_OPERATOR_ADD,
    CAIRO_OPERATOR_SATURATE,

    CAIRO_OPERATOR_MULTIPLY,
    CAIRO_OPERATOR_SCREEN,
    CAIRO_OPERATOR_OVERLAY,
    CAIRO_OPERATOR_DARKEN,
    CAIRO_OPERATOR_LIGHTEN,
    CAIRO_OPERATOR_COLOR_DODGE,
    CAIRO_OPERATOR_COLOR_BURN,
    CAIRO_OPERATOR_HARD_LIGHT,
    CAIRO_OPERATOR_SOFT_LIGHT,
    CAIRO_OPERATOR_DIFFERENCE,
    CAIRO_OPERATOR_EXCLUSION,
    CAIRO_OPERATOR_HSL_HUE,
    CAIRO_OPERATOR_HSL_SATURATION,
    CAIRO_OPERATOR_HSL_COLOR,
    CAIRO_OPERATOR_HSL_LUMINOSITY
} cairo_operator_t;

 extern void
cairo_set_operator (cairo_t *cr, cairo_operator_t op);

 extern void
cairo_set_source (cairo_t *cr, cairo_pattern_t *source);

 extern void
cairo_set_source_rgb (cairo_t *cr, double red, double green, double blue);

 extern void
cairo_set_source_rgba (cairo_t *cr,
         double red, double green, double blue,
         double alpha);

 extern void
cairo_set_source_surface (cairo_t *cr,
     cairo_surface_t *surface,
     double x,
     double y);

 extern void
cairo_set_tolerance (cairo_t *cr, double tolerance);
# 758 "/usr/include/cairo/cairo.h"
typedef enum _cairo_antialias {
    CAIRO_ANTIALIAS_DEFAULT,


    CAIRO_ANTIALIAS_NONE,
    CAIRO_ANTIALIAS_GRAY,
    CAIRO_ANTIALIAS_SUBPIXEL,


    CAIRO_ANTIALIAS_FAST,
    CAIRO_ANTIALIAS_GOOD,
    CAIRO_ANTIALIAS_BEST
} cairo_antialias_t;

 extern void
cairo_set_antialias (cairo_t *cr, cairo_antialias_t antialias);
# 802 "/usr/include/cairo/cairo.h"
typedef enum _cairo_fill_rule {
    CAIRO_FILL_RULE_WINDING,
    CAIRO_FILL_RULE_EVEN_ODD
} cairo_fill_rule_t;

 extern void
cairo_set_fill_rule (cairo_t *cr, cairo_fill_rule_t fill_rule);

 extern void
cairo_set_line_width (cairo_t *cr, double width);

 extern void
cairo_set_hairline (cairo_t *cr, cairo_bool_t set_hairline);
# 828 "/usr/include/cairo/cairo.h"
typedef enum _cairo_line_cap {
    CAIRO_LINE_CAP_BUTT,
    CAIRO_LINE_CAP_ROUND,
    CAIRO_LINE_CAP_SQUARE
} cairo_line_cap_t;

 extern void
cairo_set_line_cap (cairo_t *cr, cairo_line_cap_t line_cap);
# 852 "/usr/include/cairo/cairo.h"
typedef enum _cairo_line_join {
    CAIRO_LINE_JOIN_MITER,
    CAIRO_LINE_JOIN_ROUND,
    CAIRO_LINE_JOIN_BEVEL
} cairo_line_join_t;

 extern void
cairo_set_line_join (cairo_t *cr, cairo_line_join_t line_join);

 extern void
cairo_set_dash (cairo_t *cr,
  const double *dashes,
  int num_dashes,
  double offset);

 extern void
cairo_set_miter_limit (cairo_t *cr, double limit);

 extern void
cairo_translate (cairo_t *cr, double tx, double ty);

 extern void
cairo_scale (cairo_t *cr, double sx, double sy);

 extern void
cairo_rotate (cairo_t *cr, double angle);

 extern void
cairo_transform (cairo_t *cr,
   const cairo_matrix_t *matrix);

 extern void
cairo_set_matrix (cairo_t *cr,
    const cairo_matrix_t *matrix);

 extern void
cairo_identity_matrix (cairo_t *cr);

 extern void
cairo_user_to_device (cairo_t *cr, double *x, double *y);

 extern void
cairo_user_to_device_distance (cairo_t *cr, double *dx, double *dy);

 extern void
cairo_device_to_user (cairo_t *cr, double *x, double *y);

 extern void
cairo_device_to_user_distance (cairo_t *cr, double *dx, double *dy);


 extern void
cairo_new_path (cairo_t *cr);

 extern void
cairo_move_to (cairo_t *cr, double x, double y);

 extern void
cairo_new_sub_path (cairo_t *cr);

 extern void
cairo_line_to (cairo_t *cr, double x, double y);

 extern void
cairo_curve_to (cairo_t *cr,
  double x1, double y1,
  double x2, double y2,
  double x3, double y3);

 extern void
cairo_arc (cairo_t *cr,
    double xc, double yc,
    double radius,
    double angle1, double angle2);

 extern void
cairo_arc_negative (cairo_t *cr,
      double xc, double yc,
      double radius,
      double angle1, double angle2);
# 941 "/usr/include/cairo/cairo.h"
 extern void
cairo_rel_move_to (cairo_t *cr, double dx, double dy);

 extern void
cairo_rel_line_to (cairo_t *cr, double dx, double dy);

 extern void
cairo_rel_curve_to (cairo_t *cr,
      double dx1, double dy1,
      double dx2, double dy2,
      double dx3, double dy3);

 extern void
cairo_rectangle (cairo_t *cr,
   double x, double y,
   double width, double height);






 extern void
cairo_close_path (cairo_t *cr);

 extern void
cairo_path_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);


 extern void
cairo_paint (cairo_t *cr);

 extern void
cairo_paint_with_alpha (cairo_t *cr,
   double alpha);

 extern void
cairo_mask (cairo_t *cr,
     cairo_pattern_t *pattern);

 extern void
cairo_mask_surface (cairo_t *cr,
      cairo_surface_t *surface,
      double surface_x,
      double surface_y);

 extern void
cairo_stroke (cairo_t *cr);

 extern void
cairo_stroke_preserve (cairo_t *cr);

 extern void
cairo_fill (cairo_t *cr);

 extern void
cairo_fill_preserve (cairo_t *cr);

 extern void
cairo_copy_page (cairo_t *cr);

 extern void
cairo_show_page (cairo_t *cr);


 extern cairo_bool_t
cairo_in_stroke (cairo_t *cr, double x, double y);

 extern cairo_bool_t
cairo_in_fill (cairo_t *cr, double x, double y);

 extern cairo_bool_t
cairo_in_clip (cairo_t *cr, double x, double y);


 extern void
cairo_stroke_extents (cairo_t *cr,
        double *x1, double *y1,
        double *x2, double *y2);

 extern void
cairo_fill_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);


 extern void
cairo_reset_clip (cairo_t *cr);

 extern void
cairo_clip (cairo_t *cr);

 extern void
cairo_clip_preserve (cairo_t *cr);

 extern void
cairo_clip_extents (cairo_t *cr,
      double *x1, double *y1,
      double *x2, double *y2);
# 1054 "/usr/include/cairo/cairo.h"
typedef struct _cairo_rectangle {
    double x, y, width, height;
} cairo_rectangle_t;
# 1069 "/usr/include/cairo/cairo.h"
typedef struct _cairo_rectangle_list {
    cairo_status_t status;
    cairo_rectangle_t *rectangles;
    int num_rectangles;
} cairo_rectangle_list_t;

 extern cairo_rectangle_list_t *
cairo_copy_clip_rectangle_list (cairo_t *cr);

 extern void
cairo_rectangle_list_destroy (cairo_rectangle_list_t *rectangle_list);
# 1088 "/usr/include/cairo/cairo.h"
 extern void
cairo_tag_begin (cairo_t *cr, const char *tag_name, const char *attributes);

 extern void
cairo_tag_end (cairo_t *cr, const char *tag_name);
# 1113 "/usr/include/cairo/cairo.h"
typedef struct _cairo_scaled_font cairo_scaled_font_t;
# 1134 "/usr/include/cairo/cairo.h"
typedef struct _cairo_font_face cairo_font_face_t;
# 1162 "/usr/include/cairo/cairo.h"
typedef struct {
    unsigned long index;
    double x;
    double y;
} cairo_glyph_t;

 extern cairo_glyph_t *
cairo_glyph_allocate (int num_glyphs);

 extern void
cairo_glyph_free (cairo_glyph_t *glyphs);
# 1194 "/usr/include/cairo/cairo.h"
typedef struct {
    int num_bytes;
    int num_glyphs;
} cairo_text_cluster_t;

 extern cairo_text_cluster_t *
cairo_text_cluster_allocate (int num_clusters);

 extern void
cairo_text_cluster_free (cairo_text_cluster_t *clusters);
# 1214 "/usr/include/cairo/cairo.h"
typedef enum _cairo_text_cluster_flags {
    CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 0x00000001
} cairo_text_cluster_flags_t;
# 1247 "/usr/include/cairo/cairo.h"
typedef struct {
    double x_bearing;
    double y_bearing;
    double width;
    double height;
    double x_advance;
    double y_advance;
} cairo_text_extents_t;
# 1299 "/usr/include/cairo/cairo.h"
typedef struct {
    double ascent;
    double descent;
    double height;
    double max_x_advance;
    double max_y_advance;
} cairo_font_extents_t;
# 1317 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_slant {
    CAIRO_FONT_SLANT_NORMAL,
    CAIRO_FONT_SLANT_ITALIC,
    CAIRO_FONT_SLANT_OBLIQUE
} cairo_font_slant_t;
# 1332 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_weight {
    CAIRO_FONT_WEIGHT_NORMAL,
    CAIRO_FONT_WEIGHT_BOLD
} cairo_font_weight_t;
# 1356 "/usr/include/cairo/cairo.h"
typedef enum _cairo_subpixel_order {
    CAIRO_SUBPIXEL_ORDER_DEFAULT,
    CAIRO_SUBPIXEL_ORDER_RGB,
    CAIRO_SUBPIXEL_ORDER_BGR,
    CAIRO_SUBPIXEL_ORDER_VRGB,
    CAIRO_SUBPIXEL_ORDER_VBGR
} cairo_subpixel_order_t;
# 1388 "/usr/include/cairo/cairo.h"
typedef enum _cairo_hint_style {
    CAIRO_HINT_STYLE_DEFAULT,
    CAIRO_HINT_STYLE_NONE,
    CAIRO_HINT_STYLE_SLIGHT,
    CAIRO_HINT_STYLE_MEDIUM,
    CAIRO_HINT_STYLE_FULL
} cairo_hint_style_t;
# 1411 "/usr/include/cairo/cairo.h"
typedef enum _cairo_hint_metrics {
    CAIRO_HINT_METRICS_DEFAULT,
    CAIRO_HINT_METRICS_OFF,
    CAIRO_HINT_METRICS_ON
} cairo_hint_metrics_t;
# 1434 "/usr/include/cairo/cairo.h"
typedef enum _cairo_color_mode {
    CAIRO_COLOR_MODE_DEFAULT,
    CAIRO_COLOR_MODE_NO_COLOR,
    CAIRO_COLOR_MODE_COLOR
} cairo_color_mode_t;
# 1462 "/usr/include/cairo/cairo.h"
typedef struct _cairo_font_options cairo_font_options_t;

 extern cairo_font_options_t *
cairo_font_options_create (void);

 extern cairo_font_options_t *
cairo_font_options_copy (const cairo_font_options_t *original);

 extern void
cairo_font_options_destroy (cairo_font_options_t *options);

 extern cairo_status_t
cairo_font_options_status (cairo_font_options_t *options);

 extern void
cairo_font_options_merge (cairo_font_options_t *options,
     const cairo_font_options_t *other);
 extern cairo_bool_t
cairo_font_options_equal (const cairo_font_options_t *options,
     const cairo_font_options_t *other);

 extern unsigned long
cairo_font_options_hash (const cairo_font_options_t *options);

 extern void
cairo_font_options_set_antialias (cairo_font_options_t *options,
      cairo_antialias_t antialias);
 extern cairo_antialias_t
cairo_font_options_get_antialias (const cairo_font_options_t *options);

 extern void
cairo_font_options_set_subpixel_order (cairo_font_options_t *options,
           cairo_subpixel_order_t subpixel_order);
 extern cairo_subpixel_order_t
cairo_font_options_get_subpixel_order (const cairo_font_options_t *options);

 extern void
cairo_font_options_set_hint_style (cairo_font_options_t *options,
       cairo_hint_style_t hint_style);
 extern cairo_hint_style_t
cairo_font_options_get_hint_style (const cairo_font_options_t *options);

 extern void
cairo_font_options_set_hint_metrics (cairo_font_options_t *options,
         cairo_hint_metrics_t hint_metrics);
 extern cairo_hint_metrics_t
cairo_font_options_get_hint_metrics (const cairo_font_options_t *options);

 extern const char *
cairo_font_options_get_variations (cairo_font_options_t *options);

 extern void
cairo_font_options_set_variations (cairo_font_options_t *options,
                                   const char *variations);



 extern void
cairo_font_options_set_color_mode (cairo_font_options_t *options,
                                   cairo_color_mode_t color_mode);

 extern cairo_color_mode_t
cairo_font_options_get_color_mode (const cairo_font_options_t *options);

 extern unsigned int
cairo_font_options_get_color_palette (const cairo_font_options_t *options);

 extern void
cairo_font_options_set_color_palette (cairo_font_options_t *options,
                                      unsigned int palette_index);

 extern void
cairo_font_options_set_custom_palette_color (cairo_font_options_t *options,
                                             unsigned int index,
                                             double red, double green,
                                             double blue, double alpha);

 extern cairo_status_t
cairo_font_options_get_custom_palette_color (cairo_font_options_t *options,
                                             unsigned int index,
                                             double *red, double *green,
                                             double *blue, double *alpha);




 extern void
cairo_select_font_face (cairo_t *cr,
   const char *family,
   cairo_font_slant_t slant,
   cairo_font_weight_t weight);

 extern void
cairo_set_font_size (cairo_t *cr, double size);

 extern void
cairo_set_font_matrix (cairo_t *cr,
         const cairo_matrix_t *matrix);

 extern void
cairo_get_font_matrix (cairo_t *cr,
         cairo_matrix_t *matrix);

 extern void
cairo_set_font_options (cairo_t *cr,
   const cairo_font_options_t *options);

 extern void
cairo_get_font_options (cairo_t *cr,
   cairo_font_options_t *options);

 extern void
cairo_set_font_face (cairo_t *cr, cairo_font_face_t *font_face);

 extern cairo_font_face_t *
cairo_get_font_face (cairo_t *cr);

 extern void
cairo_set_scaled_font (cairo_t *cr,
         const cairo_scaled_font_t *scaled_font);

 extern cairo_scaled_font_t *
cairo_get_scaled_font (cairo_t *cr);

 extern void
cairo_show_text (cairo_t *cr, const char *utf8);

 extern void
cairo_show_glyphs (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);

 extern void
cairo_show_text_glyphs (cairo_t *cr,
   const char *utf8,
   int utf8_len,
   const cairo_glyph_t *glyphs,
   int num_glyphs,
   const cairo_text_cluster_t *clusters,
   int num_clusters,
   cairo_text_cluster_flags_t cluster_flags);

 extern void
cairo_text_path (cairo_t *cr, const char *utf8);

 extern void
cairo_glyph_path (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);

 extern void
cairo_text_extents (cairo_t *cr,
      const char *utf8,
      cairo_text_extents_t *extents);

 extern void
cairo_glyph_extents (cairo_t *cr,
       const cairo_glyph_t *glyphs,
       int num_glyphs,
       cairo_text_extents_t *extents);

 extern void
cairo_font_extents (cairo_t *cr,
      cairo_font_extents_t *extents);



 extern cairo_font_face_t *
cairo_font_face_reference (cairo_font_face_t *font_face);

 extern void
cairo_font_face_destroy (cairo_font_face_t *font_face);

 extern unsigned int
cairo_font_face_get_reference_count (cairo_font_face_t *font_face);

 extern cairo_status_t
cairo_font_face_status (cairo_font_face_t *font_face);
# 1678 "/usr/include/cairo/cairo.h"
typedef enum _cairo_font_type {
    CAIRO_FONT_TYPE_TOY,
    CAIRO_FONT_TYPE_FT,
    CAIRO_FONT_TYPE_WIN32,
    CAIRO_FONT_TYPE_QUARTZ,
    CAIRO_FONT_TYPE_USER,
    CAIRO_FONT_TYPE_DWRITE
} cairo_font_type_t;

 extern cairo_font_type_t
cairo_font_face_get_type (cairo_font_face_t *font_face);

 extern void *
cairo_font_face_get_user_data (cairo_font_face_t *font_face,
          const cairo_user_data_key_t *key);

 extern cairo_status_t
cairo_font_face_set_user_data (cairo_font_face_t *font_face,
          const cairo_user_data_key_t *key,
          void *user_data,
          cairo_destroy_func_t destroy);



 extern cairo_scaled_font_t *
cairo_scaled_font_create (cairo_font_face_t *font_face,
     const cairo_matrix_t *font_matrix,
     const cairo_matrix_t *ctm,
     const cairo_font_options_t *options);

 extern cairo_scaled_font_t *
cairo_scaled_font_reference (cairo_scaled_font_t *scaled_font);

 extern void
cairo_scaled_font_destroy (cairo_scaled_font_t *scaled_font);

 extern unsigned int
cairo_scaled_font_get_reference_count (cairo_scaled_font_t *scaled_font);

 extern cairo_status_t
cairo_scaled_font_status (cairo_scaled_font_t *scaled_font);

 extern cairo_font_type_t
cairo_scaled_font_get_type (cairo_scaled_font_t *scaled_font);

 extern void *
cairo_scaled_font_get_user_data (cairo_scaled_font_t *scaled_font,
     const cairo_user_data_key_t *key);

 extern cairo_status_t
cairo_scaled_font_set_user_data (cairo_scaled_font_t *scaled_font,
     const cairo_user_data_key_t *key,
     void *user_data,
     cairo_destroy_func_t destroy);

 extern void
cairo_scaled_font_extents (cairo_scaled_font_t *scaled_font,
      cairo_font_extents_t *extents);

 extern void
cairo_scaled_font_text_extents (cairo_scaled_font_t *scaled_font,
    const char *utf8,
    cairo_text_extents_t *extents);

 extern void
cairo_scaled_font_glyph_extents (cairo_scaled_font_t *scaled_font,
     const cairo_glyph_t *glyphs,
     int num_glyphs,
     cairo_text_extents_t *extents);

 extern cairo_status_t
cairo_scaled_font_text_to_glyphs (cairo_scaled_font_t *scaled_font,
      double x,
      double y,
      const char *utf8,
      int utf8_len,
      cairo_glyph_t **glyphs,
      int *num_glyphs,
      cairo_text_cluster_t **clusters,
      int *num_clusters,
      cairo_text_cluster_flags_t *cluster_flags);

 extern cairo_font_face_t *
cairo_scaled_font_get_font_face (cairo_scaled_font_t *scaled_font);

 extern void
cairo_scaled_font_get_font_matrix (cairo_scaled_font_t *scaled_font,
       cairo_matrix_t *font_matrix);

 extern void
cairo_scaled_font_get_ctm (cairo_scaled_font_t *scaled_font,
      cairo_matrix_t *ctm);

 extern void
cairo_scaled_font_get_scale_matrix (cairo_scaled_font_t *scaled_font,
        cairo_matrix_t *scale_matrix);

 extern void
cairo_scaled_font_get_font_options (cairo_scaled_font_t *scaled_font,
        cairo_font_options_t *options);




 extern cairo_font_face_t *
cairo_toy_font_face_create (const char *family,
       cairo_font_slant_t slant,
       cairo_font_weight_t weight);

 extern const char *
cairo_toy_font_face_get_family (cairo_font_face_t *font_face);

 extern cairo_font_slant_t
cairo_toy_font_face_get_slant (cairo_font_face_t *font_face);

 extern cairo_font_weight_t
cairo_toy_font_face_get_weight (cairo_font_face_t *font_face);




 extern cairo_font_face_t *
cairo_user_font_face_create (void);
# 1836 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_init_func_t) (cairo_scaled_font_t *scaled_font,
             cairo_t *cr,
             cairo_font_extents_t *extents);
# 1906 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_render_glyph_func_t) (cairo_scaled_font_t *scaled_font,
              unsigned long glyph,
              cairo_t *cr,
              cairo_text_extents_t *extents);
# 1976 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_text_to_glyphs_func_t) (cairo_scaled_font_t *scaled_font,
         const char *utf8,
         int utf8_len,
         cairo_glyph_t **glyphs,
         int *num_glyphs,
         cairo_text_cluster_t **clusters,
         int *num_clusters,
         cairo_text_cluster_flags_t *cluster_flags);
# 2023 "/usr/include/cairo/cairo.h"
typedef cairo_status_t (*cairo_user_scaled_font_unicode_to_glyph_func_t) (cairo_scaled_font_t *scaled_font,
           unsigned long unicode,
           unsigned long *glyph_index);



 extern void
cairo_user_font_face_set_init_func (cairo_font_face_t *font_face,
        cairo_user_scaled_font_init_func_t init_func);

 extern void
cairo_user_font_face_set_render_glyph_func (cairo_font_face_t *font_face,
         cairo_user_scaled_font_render_glyph_func_t render_glyph_func);

 extern void
cairo_user_font_face_set_render_color_glyph_func (cairo_font_face_t *font_face,
                                                  cairo_user_scaled_font_render_glyph_func_t render_glyph_func);

 extern void
cairo_user_font_face_set_text_to_glyphs_func (cairo_font_face_t *font_face,
           cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func);

 extern void
cairo_user_font_face_set_unicode_to_glyph_func (cairo_font_face_t *font_face,
             cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func);



 extern cairo_user_scaled_font_init_func_t
cairo_user_font_face_get_init_func (cairo_font_face_t *font_face);

 extern cairo_user_scaled_font_render_glyph_func_t
cairo_user_font_face_get_render_glyph_func (cairo_font_face_t *font_face);

 extern cairo_user_scaled_font_render_glyph_func_t
cairo_user_font_face_get_render_color_glyph_func (cairo_font_face_t *font_face);

 extern cairo_user_scaled_font_text_to_glyphs_func_t
cairo_user_font_face_get_text_to_glyphs_func (cairo_font_face_t *font_face);

 extern cairo_user_scaled_font_unicode_to_glyph_func_t
cairo_user_font_face_get_unicode_to_glyph_func (cairo_font_face_t *font_face);

 extern cairo_pattern_t *
cairo_user_scaled_font_get_foreground_marker (cairo_scaled_font_t *scaled_font);

 extern cairo_pattern_t *
cairo_user_scaled_font_get_foreground_source (cairo_scaled_font_t *scaled_font);



 extern cairo_operator_t
cairo_get_operator (cairo_t *cr);

 extern cairo_pattern_t *
cairo_get_source (cairo_t *cr);

 extern double
cairo_get_tolerance (cairo_t *cr);

 extern cairo_antialias_t
cairo_get_antialias (cairo_t *cr);

 extern cairo_bool_t
cairo_has_current_point (cairo_t *cr);

 extern void
cairo_get_current_point (cairo_t *cr, double *x, double *y);

 extern cairo_fill_rule_t
cairo_get_fill_rule (cairo_t *cr);

 extern double
cairo_get_line_width (cairo_t *cr);

 extern cairo_bool_t
cairo_get_hairline (cairo_t *cr);

 extern cairo_line_cap_t
cairo_get_line_cap (cairo_t *cr);

 extern cairo_line_join_t
cairo_get_line_join (cairo_t *cr);

 extern double
cairo_get_miter_limit (cairo_t *cr);

 extern int
cairo_get_dash_count (cairo_t *cr);

 extern void
cairo_get_dash (cairo_t *cr, double *dashes, double *offset);

 extern void
cairo_get_matrix (cairo_t *cr, cairo_matrix_t *matrix);

 extern cairo_surface_t *
cairo_get_target (cairo_t *cr);

 extern cairo_surface_t *
cairo_get_group_target (cairo_t *cr);
# 2138 "/usr/include/cairo/cairo.h"
typedef enum _cairo_path_data_type {
    CAIRO_PATH_MOVE_TO,
    CAIRO_PATH_LINE_TO,
    CAIRO_PATH_CURVE_TO,
    CAIRO_PATH_CLOSE_PATH
} cairo_path_data_type_t;
# 2213 "/usr/include/cairo/cairo.h"
typedef union _cairo_path_data_t cairo_path_data_t;
union _cairo_path_data_t {
    struct {
 cairo_path_data_type_t type;
 int length;
    } header;
    struct {
 double x, y;
    } point;
};
# 2245 "/usr/include/cairo/cairo.h"
typedef struct cairo_path {
    cairo_status_t status;
    cairo_path_data_t *data;
    int num_data;
} cairo_path_t;

 extern cairo_path_t *
cairo_copy_path (cairo_t *cr);

 extern cairo_path_t *
cairo_copy_path_flat (cairo_t *cr);

 extern void
cairo_append_path (cairo_t *cr,
     const cairo_path_t *path);

 extern void
cairo_path_destroy (cairo_path_t *path);



 extern cairo_status_t
cairo_status (cairo_t *cr);

 extern const char *
cairo_status_to_string (cairo_status_t status);



 extern cairo_device_t *
cairo_device_reference (cairo_device_t *device);
# 2308 "/usr/include/cairo/cairo.h"
typedef enum _cairo_device_type {
    CAIRO_DEVICE_TYPE_DRM,
    CAIRO_DEVICE_TYPE_GL,
    CAIRO_DEVICE_TYPE_SCRIPT,
    CAIRO_DEVICE_TYPE_XCB,
    CAIRO_DEVICE_TYPE_XLIB,
    CAIRO_DEVICE_TYPE_XML,
    CAIRO_DEVICE_TYPE_COGL,
    CAIRO_DEVICE_TYPE_WIN32,

    CAIRO_DEVICE_TYPE_INVALID = -1
} cairo_device_type_t;

 extern cairo_device_type_t
cairo_device_get_type (cairo_device_t *device);

 extern cairo_status_t
cairo_device_status (cairo_device_t *device);

 extern cairo_status_t
cairo_device_acquire (cairo_device_t *device);

 extern void
cairo_device_release (cairo_device_t *device);

 extern void
cairo_device_flush (cairo_device_t *device);

 extern void
cairo_device_finish (cairo_device_t *device);

 extern void
cairo_device_destroy (cairo_device_t *device);

 extern unsigned int
cairo_device_get_reference_count (cairo_device_t *device);

 extern void *
cairo_device_get_user_data (cairo_device_t *device,
       const cairo_user_data_key_t *key);

 extern cairo_status_t
cairo_device_set_user_data (cairo_device_t *device,
       const cairo_user_data_key_t *key,
       void *user_data,
       cairo_destroy_func_t destroy);




 extern cairo_surface_t *
cairo_surface_create_similar (cairo_surface_t *other,
         cairo_content_t content,
         int width,
         int height);

 extern cairo_surface_t *
cairo_surface_create_similar_image (cairo_surface_t *other,
        cairo_format_t format,
        int width,
        int height);

 extern cairo_surface_t *
cairo_surface_map_to_image (cairo_surface_t *surface,
       const cairo_rectangle_int_t *extents);

 extern void
cairo_surface_unmap_image (cairo_surface_t *surface,
      cairo_surface_t *image);

 extern cairo_surface_t *
cairo_surface_create_for_rectangle (cairo_surface_t *target,
                                    double x,
                                    double y,
                                    double width,
                                    double height);
# 2394 "/usr/include/cairo/cairo.h"
typedef enum {
 CAIRO_SURFACE_OBSERVER_NORMAL = 0,
 CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 0x1
} cairo_surface_observer_mode_t;

 extern cairo_surface_t *
cairo_surface_create_observer (cairo_surface_t *target,
          cairo_surface_observer_mode_t mode);
# 2413 "/usr/include/cairo/cairo.h"
typedef void (*cairo_surface_observer_callback_t) (cairo_surface_t *observer,
         cairo_surface_t *target,
         void *data);

 extern cairo_status_t
cairo_surface_observer_add_paint_callback (cairo_surface_t *abstract_surface,
        cairo_surface_observer_callback_t func,
        void *data);

 extern cairo_status_t
cairo_surface_observer_add_mask_callback (cairo_surface_t *abstract_surface,
       cairo_surface_observer_callback_t func,
       void *data);

 extern cairo_status_t
cairo_surface_observer_add_fill_callback (cairo_surface_t *abstract_surface,
       cairo_surface_observer_callback_t func,
       void *data);

 extern cairo_status_t
cairo_surface_observer_add_stroke_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);

 extern cairo_status_t
cairo_surface_observer_add_glyphs_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);

 extern cairo_status_t
cairo_surface_observer_add_flush_callback (cairo_surface_t *abstract_surface,
        cairo_surface_observer_callback_t func,
        void *data);

 extern cairo_status_t
cairo_surface_observer_add_finish_callback (cairo_surface_t *abstract_surface,
         cairo_surface_observer_callback_t func,
         void *data);

 extern cairo_status_t
cairo_surface_observer_print (cairo_surface_t *abstract_surface,
         cairo_write_func_t write_func,
         void *closure);
 extern double
cairo_surface_observer_elapsed (cairo_surface_t *abstract_surface);

 extern cairo_status_t
cairo_device_observer_print (cairo_device_t *abstract_device,
        cairo_write_func_t write_func,
        void *closure);

 extern double
cairo_device_observer_elapsed (cairo_device_t *abstract_device);

 extern double
cairo_device_observer_paint_elapsed (cairo_device_t *abstract_device);

 extern double
cairo_device_observer_mask_elapsed (cairo_device_t *abstract_device);

 extern double
cairo_device_observer_fill_elapsed (cairo_device_t *abstract_device);

 extern double
cairo_device_observer_stroke_elapsed (cairo_device_t *abstract_device);

 extern double
cairo_device_observer_glyphs_elapsed (cairo_device_t *abstract_device);

 extern cairo_surface_t *
cairo_surface_reference (cairo_surface_t *surface);

 extern void
cairo_surface_finish (cairo_surface_t *surface);

 extern void
cairo_surface_destroy (cairo_surface_t *surface);

 extern cairo_device_t *
cairo_surface_get_device (cairo_surface_t *surface);

 extern unsigned int
cairo_surface_get_reference_count (cairo_surface_t *surface);

 extern cairo_status_t
cairo_surface_status (cairo_surface_t *surface);
# 2563 "/usr/include/cairo/cairo.h"
typedef enum _cairo_surface_type {
    CAIRO_SURFACE_TYPE_IMAGE,
    CAIRO_SURFACE_TYPE_PDF,
    CAIRO_SURFACE_TYPE_PS,
    CAIRO_SURFACE_TYPE_XLIB,
    CAIRO_SURFACE_TYPE_XCB,
    CAIRO_SURFACE_TYPE_GLITZ,
    CAIRO_SURFACE_TYPE_QUARTZ,
    CAIRO_SURFACE_TYPE_WIN32,
    CAIRO_SURFACE_TYPE_BEOS,
    CAIRO_SURFACE_TYPE_DIRECTFB,
    CAIRO_SURFACE_TYPE_SVG,
    CAIRO_SURFACE_TYPE_OS2,
    CAIRO_SURFACE_TYPE_WIN32_PRINTING,
    CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
    CAIRO_SURFACE_TYPE_SCRIPT,
    CAIRO_SURFACE_TYPE_QT,
    CAIRO_SURFACE_TYPE_RECORDING,
    CAIRO_SURFACE_TYPE_VG,
    CAIRO_SURFACE_TYPE_GL,
    CAIRO_SURFACE_TYPE_DRM,
    CAIRO_SURFACE_TYPE_TEE,
    CAIRO_SURFACE_TYPE_XML,
    CAIRO_SURFACE_TYPE_SKIA,
    CAIRO_SURFACE_TYPE_SUBSURFACE,
    CAIRO_SURFACE_TYPE_COGL
} cairo_surface_type_t;

 extern cairo_surface_type_t
cairo_surface_get_type (cairo_surface_t *surface);

 extern cairo_content_t
cairo_surface_get_content (cairo_surface_t *surface);



 extern cairo_status_t
cairo_surface_write_to_png (cairo_surface_t *surface,
       const char *filename);

 extern cairo_status_t
cairo_surface_write_to_png_stream (cairo_surface_t *surface,
       cairo_write_func_t write_func,
       void *closure);



 extern void *
cairo_surface_get_user_data (cairo_surface_t *surface,
        const cairo_user_data_key_t *key);

 extern cairo_status_t
cairo_surface_set_user_data (cairo_surface_t *surface,
        const cairo_user_data_key_t *key,
        void *user_data,
        cairo_destroy_func_t destroy);
# 2633 "/usr/include/cairo/cairo.h"
 extern void
cairo_surface_get_mime_data (cairo_surface_t *surface,
                             const char *mime_type,
                             const unsigned char **data,
                             unsigned long *length);

 extern cairo_status_t
cairo_surface_set_mime_data (cairo_surface_t *surface,
                             const char *mime_type,
                             const unsigned char *data,
                             unsigned long length,
        cairo_destroy_func_t destroy,
        void *closure);

 extern cairo_bool_t
cairo_surface_supports_mime_type (cairo_surface_t *surface,
      const char *mime_type);

 extern void
cairo_surface_get_font_options (cairo_surface_t *surface,
    cairo_font_options_t *options);

 extern void
cairo_surface_flush (cairo_surface_t *surface);

 extern void
cairo_surface_mark_dirty (cairo_surface_t *surface);

 extern void
cairo_surface_mark_dirty_rectangle (cairo_surface_t *surface,
        int x,
        int y,
        int width,
        int height);

 extern void
cairo_surface_set_device_scale (cairo_surface_t *surface,
    double x_scale,
    double y_scale);

 extern void
cairo_surface_get_device_scale (cairo_surface_t *surface,
    double *x_scale,
    double *y_scale);

 extern void
cairo_surface_set_device_offset (cairo_surface_t *surface,
     double x_offset,
     double y_offset);

 extern void
cairo_surface_get_device_offset (cairo_surface_t *surface,
     double *x_offset,
     double *y_offset);

 extern void
cairo_surface_set_fallback_resolution (cairo_surface_t *surface,
           double x_pixels_per_inch,
           double y_pixels_per_inch);

 extern void
cairo_surface_get_fallback_resolution (cairo_surface_t *surface,
           double *x_pixels_per_inch,
           double *y_pixels_per_inch);

 extern void
cairo_surface_copy_page (cairo_surface_t *surface);

 extern void
cairo_surface_show_page (cairo_surface_t *surface);

 extern cairo_bool_t
cairo_surface_has_show_text_glyphs (cairo_surface_t *surface);



 extern cairo_surface_t *
cairo_image_surface_create (cairo_format_t format,
       int width,
       int height);

 extern int
cairo_format_stride_for_width (cairo_format_t format,
          int width);

 extern cairo_surface_t *
cairo_image_surface_create_for_data (unsigned char *data,
         cairo_format_t format,
         int width,
         int height,
         int stride);

 extern unsigned char *
cairo_image_surface_get_data (cairo_surface_t *surface);

 extern cairo_format_t
cairo_image_surface_get_format (cairo_surface_t *surface);

 extern int
cairo_image_surface_get_width (cairo_surface_t *surface);

 extern int
cairo_image_surface_get_height (cairo_surface_t *surface);

 extern int
cairo_image_surface_get_stride (cairo_surface_t *surface);



 extern cairo_surface_t *
cairo_image_surface_create_from_png (const char *filename);

 extern cairo_surface_t *
cairo_image_surface_create_from_png_stream (cairo_read_func_t read_func,
         void *closure);





 extern cairo_surface_t *
cairo_recording_surface_create (cairo_content_t content,
                                const cairo_rectangle_t *extents);

 extern void
cairo_recording_surface_ink_extents (cairo_surface_t *surface,
                                     double *x0,
                                     double *y0,
                                     double *width,
                                     double *height);

 extern cairo_bool_t
cairo_recording_surface_get_extents (cairo_surface_t *surface,
         cairo_rectangle_t *extents);
# 2794 "/usr/include/cairo/cairo.h"
typedef cairo_surface_t *
(*cairo_raster_source_acquire_func_t) (cairo_pattern_t *pattern,
           void *callback_data,
           cairo_surface_t *target,
           const cairo_rectangle_int_t *extents);
# 2813 "/usr/include/cairo/cairo.h"
typedef void
(*cairo_raster_source_release_func_t) (cairo_pattern_t *pattern,
           void *callback_data,
           cairo_surface_t *surface);
# 2834 "/usr/include/cairo/cairo.h"
typedef cairo_status_t
(*cairo_raster_source_snapshot_func_t) (cairo_pattern_t *pattern,
     void *callback_data);
# 2852 "/usr/include/cairo/cairo.h"
typedef cairo_status_t
(*cairo_raster_source_copy_func_t) (cairo_pattern_t *pattern,
        void *callback_data,
        const cairo_pattern_t *other);
# 2867 "/usr/include/cairo/cairo.h"
typedef void
(*cairo_raster_source_finish_func_t) (cairo_pattern_t *pattern,
          void *callback_data);

 extern cairo_pattern_t *
cairo_pattern_create_raster_source (void *user_data,
        cairo_content_t content,
        int width, int height);

 extern void
cairo_raster_source_pattern_set_callback_data (cairo_pattern_t *pattern,
            void *data);

 extern void *
cairo_raster_source_pattern_get_callback_data (cairo_pattern_t *pattern);

 extern void
cairo_raster_source_pattern_set_acquire (cairo_pattern_t *pattern,
      cairo_raster_source_acquire_func_t acquire,
      cairo_raster_source_release_func_t release);

 extern void
cairo_raster_source_pattern_get_acquire (cairo_pattern_t *pattern,
      cairo_raster_source_acquire_func_t *acquire,
      cairo_raster_source_release_func_t *release);
 extern void
cairo_raster_source_pattern_set_snapshot (cairo_pattern_t *pattern,
       cairo_raster_source_snapshot_func_t snapshot);

 extern cairo_raster_source_snapshot_func_t
cairo_raster_source_pattern_get_snapshot (cairo_pattern_t *pattern);

 extern void
cairo_raster_source_pattern_set_copy (cairo_pattern_t *pattern,
          cairo_raster_source_copy_func_t copy);

 extern cairo_raster_source_copy_func_t
cairo_raster_source_pattern_get_copy (cairo_pattern_t *pattern);

 extern void
cairo_raster_source_pattern_set_finish (cairo_pattern_t *pattern,
     cairo_raster_source_finish_func_t finish);

 extern cairo_raster_source_finish_func_t
cairo_raster_source_pattern_get_finish (cairo_pattern_t *pattern);



 extern cairo_pattern_t *
cairo_pattern_create_rgb (double red, double green, double blue);

 extern cairo_pattern_t *
cairo_pattern_create_rgba (double red, double green, double blue,
      double alpha);

 extern cairo_pattern_t *
cairo_pattern_create_for_surface (cairo_surface_t *surface);

 extern cairo_pattern_t *
cairo_pattern_create_linear (double x0, double y0,
        double x1, double y1);

 extern cairo_pattern_t *
cairo_pattern_create_radial (double cx0, double cy0, double radius0,
        double cx1, double cy1, double radius1);

 extern cairo_pattern_t *
cairo_pattern_create_mesh (void);

 extern cairo_pattern_t *
cairo_pattern_reference (cairo_pattern_t *pattern);

 extern void
cairo_pattern_destroy (cairo_pattern_t *pattern);

 extern unsigned int
cairo_pattern_get_reference_count (cairo_pattern_t *pattern);

 extern cairo_status_t
cairo_pattern_status (cairo_pattern_t *pattern);

 extern void *
cairo_pattern_get_user_data (cairo_pattern_t *pattern,
        const cairo_user_data_key_t *key);

 extern cairo_status_t
cairo_pattern_set_user_data (cairo_pattern_t *pattern,
        const cairo_user_data_key_t *key,
        void *user_data,
        cairo_destroy_func_t destroy);
# 2990 "/usr/include/cairo/cairo.h"
typedef enum _cairo_pattern_type {
    CAIRO_PATTERN_TYPE_SOLID,
    CAIRO_PATTERN_TYPE_SURFACE,
    CAIRO_PATTERN_TYPE_LINEAR,
    CAIRO_PATTERN_TYPE_RADIAL,
    CAIRO_PATTERN_TYPE_MESH,
    CAIRO_PATTERN_TYPE_RASTER_SOURCE
} cairo_pattern_type_t;

 extern cairo_pattern_type_t
cairo_pattern_get_type (cairo_pattern_t *pattern);

 extern void
cairo_pattern_add_color_stop_rgb (cairo_pattern_t *pattern,
      double offset,
      double red, double green, double blue);

 extern void
cairo_pattern_add_color_stop_rgba (cairo_pattern_t *pattern,
       double offset,
       double red, double green, double blue,
       double alpha);

 extern void
cairo_mesh_pattern_begin_patch (cairo_pattern_t *pattern);

 extern void
cairo_mesh_pattern_end_patch (cairo_pattern_t *pattern);

 extern void
cairo_mesh_pattern_curve_to (cairo_pattern_t *pattern,
        double x1, double y1,
        double x2, double y2,
        double x3, double y3);

 extern void
cairo_mesh_pattern_line_to (cairo_pattern_t *pattern,
       double x, double y);

 extern void
cairo_mesh_pattern_move_to (cairo_pattern_t *pattern,
       double x, double y);

 extern void
cairo_mesh_pattern_set_control_point (cairo_pattern_t *pattern,
          unsigned int point_num,
          double x, double y);

 extern void
cairo_mesh_pattern_set_corner_color_rgb (cairo_pattern_t *pattern,
      unsigned int corner_num,
      double red, double green, double blue);

 extern void
cairo_mesh_pattern_set_corner_color_rgba (cairo_pattern_t *pattern,
       unsigned int corner_num,
       double red, double green, double blue,
       double alpha);

 extern void
cairo_pattern_set_matrix (cairo_pattern_t *pattern,
     const cairo_matrix_t *matrix);

 extern void
cairo_pattern_get_matrix (cairo_pattern_t *pattern,
     cairo_matrix_t *matrix);
# 3082 "/usr/include/cairo/cairo.h"
typedef enum _cairo_extend {
    CAIRO_EXTEND_NONE,
    CAIRO_EXTEND_REPEAT,
    CAIRO_EXTEND_REFLECT,
    CAIRO_EXTEND_PAD
} cairo_extend_t;

 extern void
cairo_pattern_set_extend (cairo_pattern_t *pattern, cairo_extend_t extend);

 extern cairo_extend_t
cairo_pattern_get_extend (cairo_pattern_t *pattern);
# 3115 "/usr/include/cairo/cairo.h"
typedef enum _cairo_filter {
    CAIRO_FILTER_FAST,
    CAIRO_FILTER_GOOD,
    CAIRO_FILTER_BEST,
    CAIRO_FILTER_NEAREST,
    CAIRO_FILTER_BILINEAR,
    CAIRO_FILTER_GAUSSIAN
} cairo_filter_t;

 extern void
cairo_pattern_set_filter (cairo_pattern_t *pattern, cairo_filter_t filter);

 extern cairo_filter_t
cairo_pattern_get_filter (cairo_pattern_t *pattern);

 extern cairo_status_t
cairo_pattern_get_rgba (cairo_pattern_t *pattern,
   double *red, double *green,
   double *blue, double *alpha);

 extern cairo_status_t
cairo_pattern_get_surface (cairo_pattern_t *pattern,
      cairo_surface_t **surface);


 extern cairo_status_t
cairo_pattern_get_color_stop_rgba (cairo_pattern_t *pattern,
       int index, double *offset,
       double *red, double *green,
       double *blue, double *alpha);

 extern cairo_status_t
cairo_pattern_get_color_stop_count (cairo_pattern_t *pattern,
        int *count);

 extern cairo_status_t
cairo_pattern_get_linear_points (cairo_pattern_t *pattern,
     double *x0, double *y0,
     double *x1, double *y1);

 extern cairo_status_t
cairo_pattern_get_radial_circles (cairo_pattern_t *pattern,
      double *x0, double *y0, double *r0,
      double *x1, double *y1, double *r1);

 extern cairo_status_t
cairo_mesh_pattern_get_patch_count (cairo_pattern_t *pattern,
        unsigned int *count);

 extern cairo_path_t *
cairo_mesh_pattern_get_path (cairo_pattern_t *pattern,
        unsigned int patch_num);

 extern cairo_status_t
cairo_mesh_pattern_get_corner_color_rgba (cairo_pattern_t *pattern,
       unsigned int patch_num,
       unsigned int corner_num,
       double *red, double *green,
       double *blue, double *alpha);

 extern cairo_status_t
cairo_mesh_pattern_get_control_point (cairo_pattern_t *pattern,
          unsigned int patch_num,
          unsigned int point_num,
          double *x, double *y);



 extern void
cairo_matrix_init (cairo_matrix_t *matrix,
     double xx, double yx,
     double xy, double yy,
     double x0, double y0);

 extern void
cairo_matrix_init_identity (cairo_matrix_t *matrix);

 extern void
cairo_matrix_init_translate (cairo_matrix_t *matrix,
        double tx, double ty);

 extern void
cairo_matrix_init_scale (cairo_matrix_t *matrix,
    double sx, double sy);

 extern void
cairo_matrix_init_rotate (cairo_matrix_t *matrix,
     double radians);

 extern void
cairo_matrix_translate (cairo_matrix_t *matrix, double tx, double ty);

 extern void
cairo_matrix_scale (cairo_matrix_t *matrix, double sx, double sy);

 extern void
cairo_matrix_rotate (cairo_matrix_t *matrix, double radians);

 extern cairo_status_t
cairo_matrix_invert (cairo_matrix_t *matrix);

 extern void
cairo_matrix_multiply (cairo_matrix_t *result,
         const cairo_matrix_t *a,
         const cairo_matrix_t *b);

 extern void
cairo_matrix_transform_distance (const cairo_matrix_t *matrix,
     double *dx, double *dy);

 extern void
cairo_matrix_transform_point (const cairo_matrix_t *matrix,
         double *x, double *y);
# 3244 "/usr/include/cairo/cairo.h"
typedef struct _cairo_region cairo_region_t;
# 3257 "/usr/include/cairo/cairo.h"
typedef enum _cairo_region_overlap {
    CAIRO_REGION_OVERLAP_IN,
    CAIRO_REGION_OVERLAP_OUT,
    CAIRO_REGION_OVERLAP_PART
} cairo_region_overlap_t;

 extern cairo_region_t *
cairo_region_create (void);

 extern cairo_region_t *
cairo_region_create_rectangle (const cairo_rectangle_int_t *rectangle);

 extern cairo_region_t *
cairo_region_create_rectangles (const cairo_rectangle_int_t *rects,
    int count);

 extern cairo_region_t *
cairo_region_copy (const cairo_region_t *original);

 extern cairo_region_t *
cairo_region_reference (cairo_region_t *region);

 extern void
cairo_region_destroy (cairo_region_t *region);

 extern cairo_bool_t
cairo_region_equal (const cairo_region_t *a, const cairo_region_t *b);

 extern cairo_status_t
cairo_region_status (const cairo_region_t *region);

 extern void
cairo_region_get_extents (const cairo_region_t *region,
     cairo_rectangle_int_t *extents);

 extern int
cairo_region_num_rectangles (const cairo_region_t *region);

 extern void
cairo_region_get_rectangle (const cairo_region_t *region,
       int nth,
       cairo_rectangle_int_t *rectangle);

 extern cairo_bool_t
cairo_region_is_empty (const cairo_region_t *region);

 extern cairo_region_overlap_t
cairo_region_contains_rectangle (const cairo_region_t *region,
     const cairo_rectangle_int_t *rectangle);

 extern cairo_bool_t
cairo_region_contains_point (const cairo_region_t *region, int x, int y);

 extern void
cairo_region_translate (cairo_region_t *region, int dx, int dy);

 extern cairo_status_t
cairo_region_subtract (cairo_region_t *dst, const cairo_region_t *other);

 extern cairo_status_t
cairo_region_subtract_rectangle (cairo_region_t *dst,
     const cairo_rectangle_int_t *rectangle);

 extern cairo_status_t
cairo_region_intersect (cairo_region_t *dst, const cairo_region_t *other);

 extern cairo_status_t
cairo_region_intersect_rectangle (cairo_region_t *dst,
      const cairo_rectangle_int_t *rectangle);

 extern cairo_status_t
cairo_region_union (cairo_region_t *dst, const cairo_region_t *other);

 extern cairo_status_t
cairo_region_union_rectangle (cairo_region_t *dst,
         const cairo_rectangle_int_t *rectangle);

 extern cairo_status_t
cairo_region_xor (cairo_region_t *dst, const cairo_region_t *other);

 extern cairo_status_t
cairo_region_xor_rectangle (cairo_region_t *dst,
       const cairo_rectangle_int_t *rectangle);


 extern void
cairo_debug_reset_static_data (void);
# 38 "/usr/include/gtk-3.0/gdk/gdktypes.h" 2
# 70 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef struct _GdkPoint GdkPoint;
# 93 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef cairo_rectangle_int_t GdkRectangle;
# 102 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef struct _GdkAtom *GdkAtom;
# 132 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef struct _GdkColor GdkColor;
typedef struct _GdkRGBA GdkRGBA;
typedef struct _GdkCursor GdkCursor;
typedef struct _GdkVisual GdkVisual;
typedef struct _GdkDevice GdkDevice;
typedef struct _GdkDragContext GdkDragContext;

typedef struct _GdkDisplayManager GdkDisplayManager;
typedef struct _GdkDeviceManager GdkDeviceManager;
typedef struct _GdkDisplay GdkDisplay;
typedef struct _GdkScreen GdkScreen;
typedef struct _GdkWindow GdkWindow;
typedef struct _GdkKeymap GdkKeymap;
typedef struct _GdkAppLaunchContext GdkAppLaunchContext;
typedef struct _GdkSeat GdkSeat;

typedef struct _GdkGLContext GdkGLContext;
# 162 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_LSB_FIRST,
  GDK_MSB_FIRST
} GdkByteOrder;
# 232 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_SHIFT_MASK = 1 << 0,
  GDK_LOCK_MASK = 1 << 1,
  GDK_CONTROL_MASK = 1 << 2,
  GDK_MOD1_MASK = 1 << 3,
  GDK_MOD2_MASK = 1 << 4,
  GDK_MOD3_MASK = 1 << 5,
  GDK_MOD4_MASK = 1 << 6,
  GDK_MOD5_MASK = 1 << 7,
  GDK_BUTTON1_MASK = 1 << 8,
  GDK_BUTTON2_MASK = 1 << 9,
  GDK_BUTTON3_MASK = 1 << 10,
  GDK_BUTTON4_MASK = 1 << 11,
  GDK_BUTTON5_MASK = 1 << 12,

  GDK_MODIFIER_RESERVED_13_MASK = 1 << 13,
  GDK_MODIFIER_RESERVED_14_MASK = 1 << 14,
  GDK_MODIFIER_RESERVED_15_MASK = 1 << 15,
  GDK_MODIFIER_RESERVED_16_MASK = 1 << 16,
  GDK_MODIFIER_RESERVED_17_MASK = 1 << 17,
  GDK_MODIFIER_RESERVED_18_MASK = 1 << 18,
  GDK_MODIFIER_RESERVED_19_MASK = 1 << 19,
  GDK_MODIFIER_RESERVED_20_MASK = 1 << 20,
  GDK_MODIFIER_RESERVED_21_MASK = 1 << 21,
  GDK_MODIFIER_RESERVED_22_MASK = 1 << 22,
  GDK_MODIFIER_RESERVED_23_MASK = 1 << 23,
  GDK_MODIFIER_RESERVED_24_MASK = 1 << 24,
  GDK_MODIFIER_RESERVED_25_MASK = 1 << 25,





  GDK_SUPER_MASK = 1 << 26,
  GDK_HYPER_MASK = 1 << 27,
  GDK_META_MASK = 1 << 28,

  GDK_MODIFIER_RESERVED_29_MASK = 1 << 29,

  GDK_RELEASE_MASK = 1 << 30,



  GDK_MODIFIER_MASK = 0x5c001fff
} GdkModifierType;
# 311 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR,
  GDK_MODIFIER_INTENT_CONTEXT_MENU,
  GDK_MODIFIER_INTENT_EXTEND_SELECTION,
  GDK_MODIFIER_INTENT_MODIFY_SELECTION,
  GDK_MODIFIER_INTENT_NO_TEXT_INPUT,
  GDK_MODIFIER_INTENT_SHIFT_GROUP,
  GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK,
} GdkModifierIntent;

typedef enum
{
  GDK_OK = 0,
  GDK_ERROR = -1,
  GDK_ERROR_PARAM = -2,
  GDK_ERROR_FILE = -3,
  GDK_ERROR_MEM = -4
} GdkStatus;
# 345 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_GRAB_SUCCESS = 0,
  GDK_GRAB_ALREADY_GRABBED = 1,
  GDK_GRAB_INVALID_TIME = 2,
  GDK_GRAB_NOT_VIEWABLE = 3,
  GDK_GRAB_FROZEN = 4,
  GDK_GRAB_FAILED = 5
} GdkGrabStatus;
# 363 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_OWNERSHIP_NONE,
  GDK_OWNERSHIP_WINDOW,
  GDK_OWNERSHIP_APPLICATION
} GdkGrabOwnership;
# 427 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_EXPOSURE_MASK = 1 << 1,
  GDK_POINTER_MOTION_MASK = 1 << 2,
  GDK_POINTER_MOTION_HINT_MASK = 1 << 3,
  GDK_BUTTON_MOTION_MASK = 1 << 4,
  GDK_BUTTON1_MOTION_MASK = 1 << 5,
  GDK_BUTTON2_MOTION_MASK = 1 << 6,
  GDK_BUTTON3_MOTION_MASK = 1 << 7,
  GDK_BUTTON_PRESS_MASK = 1 << 8,
  GDK_BUTTON_RELEASE_MASK = 1 << 9,
  GDK_KEY_PRESS_MASK = 1 << 10,
  GDK_KEY_RELEASE_MASK = 1 << 11,
  GDK_ENTER_NOTIFY_MASK = 1 << 12,
  GDK_LEAVE_NOTIFY_MASK = 1 << 13,
  GDK_FOCUS_CHANGE_MASK = 1 << 14,
  GDK_STRUCTURE_MASK = 1 << 15,
  GDK_PROPERTY_CHANGE_MASK = 1 << 16,
  GDK_VISIBILITY_NOTIFY_MASK = 1 << 17,
  GDK_PROXIMITY_IN_MASK = 1 << 18,
  GDK_PROXIMITY_OUT_MASK = 1 << 19,
  GDK_SUBSTRUCTURE_MASK = 1 << 20,
  GDK_SCROLL_MASK = 1 << 21,
  GDK_TOUCH_MASK = 1 << 22,
  GDK_SMOOTH_SCROLL_MASK = 1 << 23,
  GDK_TOUCHPAD_GESTURE_MASK = 1 << 24,
  GDK_TABLET_PAD_MASK = 1 << 25,
  GDK_ALL_EVENTS_MASK = 0x3FFFFFE
} GdkEventMask;
# 464 "/usr/include/gtk-3.0/gdk/gdktypes.h"
struct _GdkPoint
{
  gint x;
  gint y;
};
# 480 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum {
  GDK_GL_ERROR_NOT_AVAILABLE,
  GDK_GL_ERROR_UNSUPPORTED_FORMAT,
  GDK_GL_ERROR_UNSUPPORTED_PROFILE
} GdkGLError;
# 516 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_WINDOW_TYPE_HINT_NORMAL,
  GDK_WINDOW_TYPE_HINT_DIALOG,
  GDK_WINDOW_TYPE_HINT_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLBAR,
  GDK_WINDOW_TYPE_HINT_SPLASHSCREEN,
  GDK_WINDOW_TYPE_HINT_UTILITY,
  GDK_WINDOW_TYPE_HINT_DOCK,
  GDK_WINDOW_TYPE_HINT_DESKTOP,
  GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU,
  GDK_WINDOW_TYPE_HINT_POPUP_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLTIP,
  GDK_WINDOW_TYPE_HINT_NOTIFICATION,
  GDK_WINDOW_TYPE_HINT_COMBO,
  GDK_WINDOW_TYPE_HINT_DND
} GdkWindowTypeHint;
# 556 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_AXIS_IGNORE,
  GDK_AXIS_X,
  GDK_AXIS_Y,
  GDK_AXIS_PRESSURE,
  GDK_AXIS_XTILT,
  GDK_AXIS_YTILT,
  GDK_AXIS_WHEEL,
  GDK_AXIS_DISTANCE,
  GDK_AXIS_ROTATION,
  GDK_AXIS_SLIDER,
  GDK_AXIS_LAST
} GdkAxisUse;
# 587 "/usr/include/gtk-3.0/gdk/gdktypes.h"
typedef enum
{
  GDK_AXIS_FLAG_X = 1 << GDK_AXIS_X,
  GDK_AXIS_FLAG_Y = 1 << GDK_AXIS_Y,
  GDK_AXIS_FLAG_PRESSURE = 1 << GDK_AXIS_PRESSURE,
  GDK_AXIS_FLAG_XTILT = 1 << GDK_AXIS_XTILT,
  GDK_AXIS_FLAG_YTILT = 1 << GDK_AXIS_YTILT,
  GDK_AXIS_FLAG_WHEEL = 1 << GDK_AXIS_WHEEL,
  GDK_AXIS_FLAG_DISTANCE = 1 << GDK_AXIS_DISTANCE,
  GDK_AXIS_FLAG_ROTATION = 1 << GDK_AXIS_ROTATION,
  GDK_AXIS_FLAG_SLIDER = 1 << GDK_AXIS_SLIDER,
} GdkAxisFlags;
# 31 "/usr/include/gtk-3.0/gdk/gdkapplaunchcontext.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkscreen.h" 1
# 30 "/usr/include/gtk-3.0/gdk/gdkscreen.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 31 "/usr/include/gtk-3.0/gdk/gdkscreen.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkdisplay.h" 1
# 29 "/usr/include/gtk-3.0/gdk/gdkdisplay.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 30 "/usr/include/gtk-3.0/gdk/gdkdisplay.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkevents.h" 1
# 32 "/usr/include/gtk-3.0/gdk/gdkevents.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkevents.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkdnd.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkdnd.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkdevice.h" 1
# 25 "/usr/include/gtk-3.0/gdk/gdkdevice.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 26 "/usr/include/gtk-3.0/gdk/gdkdevice.h" 2
# 35 "/usr/include/gtk-3.0/gdk/gdkdevice.h"
typedef struct _GdkTimeCoord GdkTimeCoord;
# 58 "/usr/include/gtk-3.0/gdk/gdkdevice.h"
typedef enum
{
  GDK_SOURCE_MOUSE,
  GDK_SOURCE_PEN,
  GDK_SOURCE_ERASER,
  GDK_SOURCE_CURSOR,
  GDK_SOURCE_KEYBOARD,
  GDK_SOURCE_TOUCHSCREEN,
  GDK_SOURCE_TOUCHPAD,
  GDK_SOURCE_TRACKPOINT,
  GDK_SOURCE_TABLET_PAD
} GdkInputSource;
# 83 "/usr/include/gtk-3.0/gdk/gdkdevice.h"
typedef enum
{
  GDK_MODE_DISABLED,
  GDK_MODE_SCREEN,
  GDK_MODE_WINDOW
} GdkInputMode;
# 101 "/usr/include/gtk-3.0/gdk/gdkdevice.h"
typedef enum {
  GDK_DEVICE_TYPE_MASTER,
  GDK_DEVICE_TYPE_SLAVE,
  GDK_DEVICE_TYPE_FLOATING
} GdkDeviceType;
# 119 "/usr/include/gtk-3.0/gdk/gdkdevice.h"
struct _GdkTimeCoord
{
  guint32 time;
  gdouble axes[128];
};

extern
GType gdk_device_get_type (void) __attribute__ ((__const__));

extern
const gchar * gdk_device_get_name (GdkDevice *device);
extern
gboolean gdk_device_get_has_cursor (GdkDevice *device);


extern
GdkInputSource gdk_device_get_source (GdkDevice *device);

extern
GdkInputMode gdk_device_get_mode (GdkDevice *device);
extern
gboolean gdk_device_set_mode (GdkDevice *device,
                                         GdkInputMode mode);

extern
gint gdk_device_get_n_keys (GdkDevice *device);
extern
gboolean gdk_device_get_key (GdkDevice *device,
                                         guint index_,
                                         guint *keyval,
                                         GdkModifierType *modifiers);
extern
void gdk_device_set_key (GdkDevice *device,
                                         guint index_,
                                         guint keyval,
                                         GdkModifierType modifiers);

extern
GdkAxisUse gdk_device_get_axis_use (GdkDevice *device,
                                         guint index_);
extern
void gdk_device_set_axis_use (GdkDevice *device,
                                         guint index_,
                                         GdkAxisUse use);


extern
void gdk_device_get_state (GdkDevice *device,
                                  GdkWindow *window,
                                  gdouble *axes,
                                  GdkModifierType *mask);
extern
void gdk_device_get_position (GdkDevice *device,
                                  GdkScreen **screen,
                                  gint *x,
                                  gint *y);
extern
GdkWindow *
         gdk_device_get_window_at_position
                                 (GdkDevice *device,
                                  gint *win_x,
                                  gint *win_y);
extern
void gdk_device_get_position_double (GdkDevice *device,
                                         GdkScreen **screen,
                                         gdouble *x,
                                         gdouble *y);
extern
GdkWindow *
         gdk_device_get_window_at_position_double
                                 (GdkDevice *device,
                                  gdouble *win_x,
                                  gdouble *win_y);
extern
gboolean gdk_device_get_history (GdkDevice *device,
                                  GdkWindow *window,
                                  guint32 start,
                                  guint32 stop,
                                  GdkTimeCoord ***events,
                                  gint *n_events);
extern
void gdk_device_free_history (GdkTimeCoord **events,
                                  gint n_events);

extern
gint gdk_device_get_n_axes (GdkDevice *device);
extern
GList * gdk_device_list_axes (GdkDevice *device);
extern
gboolean gdk_device_get_axis_value (GdkDevice *device,
                                    gdouble *axes,
                                    GdkAtom axis_label,
                                    gdouble *value);

extern
gboolean gdk_device_get_axis (GdkDevice *device,
                                  gdouble *axes,
                                  GdkAxisUse use,
                                  gdouble *value);
extern
GdkDisplay * gdk_device_get_display (GdkDevice *device);

extern
GdkDevice * gdk_device_get_associated_device (GdkDevice *device);
extern
GList * gdk_device_list_slave_devices (GdkDevice *device);

extern
GdkDeviceType gdk_device_get_device_type (GdkDevice *device);

__attribute__((__deprecated__("Use '" "gdk_seat_grab" "' instead"))) extern
GdkGrabStatus gdk_device_grab (GdkDevice *device,
                                      GdkWindow *window,
                                      GdkGrabOwnership grab_ownership,
                                      gboolean owner_events,
                                      GdkEventMask event_mask,
                                      GdkCursor *cursor,
                                      guint32 time_);

__attribute__((__deprecated__("Use '" "gdk_seat_ungrab" "' instead"))) extern
void gdk_device_ungrab (GdkDevice *device,
                                      guint32 time_);

extern
void gdk_device_warp (GdkDevice *device,
                                      GdkScreen *screen,
                                      gint x,
                                      gint y);

__attribute__((__deprecated__)) extern
gboolean gdk_device_grab_info_libgtk_only (GdkDisplay *display,
                                           GdkDevice *device,
                                           GdkWindow **grab_window,
                                           gboolean *owner_events);

extern
GdkWindow *gdk_device_get_last_event_window (GdkDevice *device);

extern
const gchar *gdk_device_get_vendor_id (GdkDevice *device);
extern
const gchar *gdk_device_get_product_id (GdkDevice *device);

extern
GdkSeat *gdk_device_get_seat (GdkDevice *device);

extern
GdkAxisFlags gdk_device_get_axes (GdkDevice *device);
# 34 "/usr/include/gtk-3.0/gdk/gdkdnd.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkevents.h" 1
# 35 "/usr/include/gtk-3.0/gdk/gdkdnd.h" 2
# 57 "/usr/include/gtk-3.0/gdk/gdkdnd.h"
typedef enum
{
  GDK_ACTION_DEFAULT = 1 << 0,
  GDK_ACTION_COPY = 1 << 1,
  GDK_ACTION_MOVE = 1 << 2,
  GDK_ACTION_LINK = 1 << 3,
  GDK_ACTION_PRIVATE = 1 << 4,
  GDK_ACTION_ASK = 1 << 5
} GdkDragAction;
# 77 "/usr/include/gtk-3.0/gdk/gdkdnd.h"
typedef enum {
  GDK_DRAG_CANCEL_NO_TARGET,
  GDK_DRAG_CANCEL_USER_CANCELLED,
  GDK_DRAG_CANCEL_ERROR
} GdkDragCancelReason;
# 98 "/usr/include/gtk-3.0/gdk/gdkdnd.h"
typedef enum
{
  GDK_DRAG_PROTO_NONE = 0,
  GDK_DRAG_PROTO_MOTIF,
  GDK_DRAG_PROTO_XDND,
  GDK_DRAG_PROTO_ROOTWIN,
  GDK_DRAG_PROTO_WIN32_DROPFILES,
  GDK_DRAG_PROTO_OLE2,
  GDK_DRAG_PROTO_LOCAL,
  GDK_DRAG_PROTO_WAYLAND
} GdkDragProtocol;


extern
GType gdk_drag_context_get_type (void) __attribute__ ((__const__));

extern
void gdk_drag_context_set_device (GdkDragContext *context,
                                                        GdkDevice *device);
extern
GdkDevice * gdk_drag_context_get_device (GdkDragContext *context);

extern
GList *gdk_drag_context_list_targets (GdkDragContext *context);
extern
GdkDragAction gdk_drag_context_get_actions (GdkDragContext *context);
extern
GdkDragAction gdk_drag_context_get_suggested_action (GdkDragContext *context);
extern
GdkDragAction gdk_drag_context_get_selected_action (GdkDragContext *context);

extern
GdkWindow *gdk_drag_context_get_source_window (GdkDragContext *context);
extern
GdkWindow *gdk_drag_context_get_dest_window (GdkDragContext *context);
extern
GdkDragProtocol gdk_drag_context_get_protocol (GdkDragContext *context);



extern
void gdk_drag_status (GdkDragContext *context,
                                         GdkDragAction action,
                                         guint32 time_);
extern
void gdk_drop_reply (GdkDragContext *context,
                                         gboolean accepted,
                                         guint32 time_);
extern
void gdk_drop_finish (GdkDragContext *context,
                                         gboolean success,
                                         guint32 time_);
extern
GdkAtom gdk_drag_get_selection (GdkDragContext *context);



extern
GdkDragContext * gdk_drag_begin (GdkWindow *window,
                                            GList *targets);

extern
GdkDragContext * gdk_drag_begin_for_device (GdkWindow *window,
                                            GdkDevice *device,
                                            GList *targets);
extern
GdkDragContext * gdk_drag_begin_from_point (GdkWindow *window,
                                             GdkDevice *device,
                                             GList *targets,
                                             gint x_root,
                                             gint y_root);

extern
void gdk_drag_find_window_for_screen (GdkDragContext *context,
                                           GdkWindow *drag_window,
                                           GdkScreen *screen,
                                           gint x_root,
                                           gint y_root,
                                           GdkWindow **dest_window,
                                           GdkDragProtocol *protocol);

extern
gboolean gdk_drag_motion (GdkDragContext *context,
                                      GdkWindow *dest_window,
                                      GdkDragProtocol protocol,
                                      gint x_root,
                                      gint y_root,
                                      GdkDragAction suggested_action,
                                      GdkDragAction possible_actions,
                                      guint32 time_);
extern
void gdk_drag_drop (GdkDragContext *context,
                                      guint32 time_);
extern
void gdk_drag_abort (GdkDragContext *context,
                                      guint32 time_);
extern
gboolean gdk_drag_drop_succeeded (GdkDragContext *context);

extern
void gdk_drag_drop_done (GdkDragContext *context,
                                      gboolean success);

extern
GdkWindow *gdk_drag_context_get_drag_window (GdkDragContext *context);

extern
void gdk_drag_context_set_hotspot (GdkDragContext *context,
                                              gint hot_x,
                                              gint hot_y);

extern
gboolean gdk_drag_context_manage_dnd (GdkDragContext *context,
                                             GdkWindow *ipc_window,
                                             GdkDragAction actions);
# 35 "/usr/include/gtk-3.0/gdk/gdkevents.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkdevicetool.h" 1
# 25 "/usr/include/gtk-3.0/gdk/gdkdevicetool.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 26 "/usr/include/gtk-3.0/gdk/gdkdevicetool.h" 2
# 35 "/usr/include/gtk-3.0/gdk/gdkdevicetool.h"
typedef struct _GdkDeviceTool GdkDeviceTool;
# 53 "/usr/include/gtk-3.0/gdk/gdkdevicetool.h"
typedef enum {
  GDK_DEVICE_TOOL_TYPE_UNKNOWN,
  GDK_DEVICE_TOOL_TYPE_PEN,
  GDK_DEVICE_TOOL_TYPE_ERASER,
  GDK_DEVICE_TOOL_TYPE_BRUSH,
  GDK_DEVICE_TOOL_TYPE_PENCIL,
  GDK_DEVICE_TOOL_TYPE_AIRBRUSH,
  GDK_DEVICE_TOOL_TYPE_MOUSE,
  GDK_DEVICE_TOOL_TYPE_LENS,
} GdkDeviceToolType;

extern
GType gdk_device_tool_get_type (void) __attribute__ ((__const__));

extern
guint64 gdk_device_tool_get_serial (GdkDeviceTool *tool);

extern
guint64 gdk_device_tool_get_hardware_id (GdkDeviceTool *tool);

extern
GdkDeviceToolType gdk_device_tool_get_tool_type (GdkDeviceTool *tool);
# 37 "/usr/include/gtk-3.0/gdk/gdkevents.h" 2
# 124 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef struct _GdkEventAny GdkEventAny;
typedef struct _GdkEventExpose GdkEventExpose;
typedef struct _GdkEventVisibility GdkEventVisibility;
typedef struct _GdkEventMotion GdkEventMotion;
typedef struct _GdkEventButton GdkEventButton;
typedef struct _GdkEventTouch GdkEventTouch;
typedef struct _GdkEventScroll GdkEventScroll;
typedef struct _GdkEventKey GdkEventKey;
typedef struct _GdkEventFocus GdkEventFocus;
typedef struct _GdkEventCrossing GdkEventCrossing;
typedef struct _GdkEventConfigure GdkEventConfigure;
typedef struct _GdkEventProperty GdkEventProperty;
typedef struct _GdkEventSelection GdkEventSelection;
typedef struct _GdkEventOwnerChange GdkEventOwnerChange;
typedef struct _GdkEventProximity GdkEventProximity;
typedef struct _GdkEventDND GdkEventDND;
typedef struct _GdkEventWindowState GdkEventWindowState;
typedef struct _GdkEventSetting GdkEventSetting;
typedef struct _GdkEventGrabBroken GdkEventGrabBroken;
typedef struct _GdkEventTouchpadSwipe GdkEventTouchpadSwipe;
typedef struct _GdkEventTouchpadPinch GdkEventTouchpadPinch;
typedef struct _GdkEventPadButton GdkEventPadButton;
typedef struct _GdkEventPadAxis GdkEventPadAxis;
typedef struct _GdkEventPadGroupMode GdkEventPadGroupMode;

typedef struct _GdkEventSequence GdkEventSequence;

typedef union _GdkEvent GdkEvent;
# 162 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef void (*GdkEventFunc) (GdkEvent *event,
         gpointer data);
# 173 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef void GdkXEvent;
# 186 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum {
  GDK_FILTER_CONTINUE,
  GDK_FILTER_TRANSLATE,


  GDK_FILTER_REMOVE
} GdkFilterReturn;
# 211 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef GdkFilterReturn (*GdkFilterFunc) (GdkXEvent *xevent,
       GdkEvent *event,
       gpointer data);
# 309 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_NOTHING = -1,
  GDK_DELETE = 0,
  GDK_DESTROY = 1,
  GDK_EXPOSE = 2,
  GDK_MOTION_NOTIFY = 3,
  GDK_BUTTON_PRESS = 4,
  GDK_2BUTTON_PRESS = 5,
  GDK_DOUBLE_BUTTON_PRESS = GDK_2BUTTON_PRESS,
  GDK_3BUTTON_PRESS = 6,
  GDK_TRIPLE_BUTTON_PRESS = GDK_3BUTTON_PRESS,
  GDK_BUTTON_RELEASE = 7,
  GDK_KEY_PRESS = 8,
  GDK_KEY_RELEASE = 9,
  GDK_ENTER_NOTIFY = 10,
  GDK_LEAVE_NOTIFY = 11,
  GDK_FOCUS_CHANGE = 12,
  GDK_CONFIGURE = 13,
  GDK_MAP = 14,
  GDK_UNMAP = 15,
  GDK_PROPERTY_NOTIFY = 16,
  GDK_SELECTION_CLEAR = 17,
  GDK_SELECTION_REQUEST = 18,
  GDK_SELECTION_NOTIFY = 19,
  GDK_PROXIMITY_IN = 20,
  GDK_PROXIMITY_OUT = 21,
  GDK_DRAG_ENTER = 22,
  GDK_DRAG_LEAVE = 23,
  GDK_DRAG_MOTION = 24,
  GDK_DRAG_STATUS = 25,
  GDK_DROP_START = 26,
  GDK_DROP_FINISHED = 27,
  GDK_CLIENT_EVENT = 28,
  GDK_VISIBILITY_NOTIFY = 29,
  GDK_SCROLL = 31,
  GDK_WINDOW_STATE = 32,
  GDK_SETTING = 33,
  GDK_OWNER_CHANGE = 34,
  GDK_GRAB_BROKEN = 35,
  GDK_DAMAGE = 36,
  GDK_TOUCH_BEGIN = 37,
  GDK_TOUCH_UPDATE = 38,
  GDK_TOUCH_END = 39,
  GDK_TOUCH_CANCEL = 40,
  GDK_TOUCHPAD_SWIPE = 41,
  GDK_TOUCHPAD_PINCH = 42,
  GDK_PAD_BUTTON_PRESS = 43,
  GDK_PAD_BUTTON_RELEASE = 44,
  GDK_PAD_RING = 45,
  GDK_PAD_STRIP = 46,
  GDK_PAD_GROUP_MODE = 47,
  GDK_EVENT_LAST
} GdkEventType;
# 372 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_VISIBILITY_UNOBSCURED,
  GDK_VISIBILITY_PARTIAL,
  GDK_VISIBILITY_FULLY_OBSCURED
} GdkVisibilityState;
# 408 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_TOUCHPAD_GESTURE_PHASE_BEGIN,
  GDK_TOUCHPAD_GESTURE_PHASE_UPDATE,
  GDK_TOUCHPAD_GESTURE_PHASE_END,
  GDK_TOUCHPAD_GESTURE_PHASE_CANCEL
} GdkTouchpadGesturePhase;
# 427 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_SCROLL_UP,
  GDK_SCROLL_DOWN,
  GDK_SCROLL_LEFT,
  GDK_SCROLL_RIGHT,
  GDK_SCROLL_SMOOTH
} GdkScrollDirection;
# 457 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_NOTIFY_ANCESTOR = 0,
  GDK_NOTIFY_VIRTUAL = 1,
  GDK_NOTIFY_INFERIOR = 2,
  GDK_NOTIFY_NONLINEAR = 3,
  GDK_NOTIFY_NONLINEAR_VIRTUAL = 4,
  GDK_NOTIFY_UNKNOWN = 5
} GdkNotifyType;
# 486 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_CROSSING_NORMAL,
  GDK_CROSSING_GRAB,
  GDK_CROSSING_UNGRAB,
  GDK_CROSSING_GTK_GRAB,
  GDK_CROSSING_GTK_UNGRAB,
  GDK_CROSSING_STATE_CHANGED,
  GDK_CROSSING_TOUCH_BEGIN,
  GDK_CROSSING_TOUCH_END,
  GDK_CROSSING_DEVICE_SWITCH
} GdkCrossingMode;
# 506 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_PROPERTY_NEW_VALUE,
  GDK_PROPERTY_DELETE
} GdkPropertyState;
# 536 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_WINDOW_STATE_WITHDRAWN = 1 << 0,
  GDK_WINDOW_STATE_ICONIFIED = 1 << 1,
  GDK_WINDOW_STATE_MAXIMIZED = 1 << 2,
  GDK_WINDOW_STATE_STICKY = 1 << 3,
  GDK_WINDOW_STATE_FULLSCREEN = 1 << 4,
  GDK_WINDOW_STATE_ABOVE = 1 << 5,
  GDK_WINDOW_STATE_BELOW = 1 << 6,
  GDK_WINDOW_STATE_FOCUSED = 1 << 7,
  GDK_WINDOW_STATE_TILED = 1 << 8,
  GDK_WINDOW_STATE_TOP_TILED = 1 << 9,
  GDK_WINDOW_STATE_TOP_RESIZABLE = 1 << 10,
  GDK_WINDOW_STATE_RIGHT_TILED = 1 << 11,
  GDK_WINDOW_STATE_RIGHT_RESIZABLE = 1 << 12,
  GDK_WINDOW_STATE_BOTTOM_TILED = 1 << 13,
  GDK_WINDOW_STATE_BOTTOM_RESIZABLE = 1 << 14,
  GDK_WINDOW_STATE_LEFT_TILED = 1 << 15,
  GDK_WINDOW_STATE_LEFT_RESIZABLE = 1 << 16
} GdkWindowState;
# 566 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_SETTING_ACTION_NEW,
  GDK_SETTING_ACTION_CHANGED,
  GDK_SETTING_ACTION_DELETED
} GdkSettingAction;
# 581 "/usr/include/gtk-3.0/gdk/gdkevents.h"
typedef enum
{
  GDK_OWNER_CHANGE_NEW_OWNER,
  GDK_OWNER_CHANGE_DESTROY,
  GDK_OWNER_CHANGE_CLOSE
} GdkOwnerChange;
# 598 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventAny
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
};
# 620 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventExpose
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkRectangle area;
  cairo_region_t *region;
  gint count;
};
# 645 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventVisibility
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkVisibilityState state;
};
# 677 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventMotion
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  gint16 is_hint;
  GdkDevice *device;
  gdouble x_root, y_root;
};
# 751 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventButton
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  guint button;
  GdkDevice *device;
  gdouble x_root, y_root;
};
# 801 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventTouch
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  GdkEventSequence *sequence;
  gboolean emulating_pointer;
  GdkDevice *device;
  gdouble x_root, y_root;
};
# 849 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventScroll
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  guint state;
  GdkScrollDirection direction;
  GdkDevice *device;
  gdouble x_root, y_root;
  gdouble delta_x;
  gdouble delta_y;
  guint is_stop : 1;
};
# 897 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventKey
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 hardware_keycode;
  guint8 group;
  guint is_modifier : 1;
};
# 938 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventCrossing
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindow *subwindow;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble x_root;
  gdouble y_root;
  GdkCrossingMode mode;
  GdkNotifyType detail;
  gboolean focus;
  guint state;
};
# 965 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventFocus
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint16 in;
};
# 985 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventConfigure
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint x, y;
  gint width;
  gint height;
};
# 1007 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventProperty
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom atom;
  guint32 time;
  guint state;
};
# 1032 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventSelection
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom selection;
  GdkAtom target;
  GdkAtom property;
  guint32 time;
  GdkWindow *requestor;
};
# 1062 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventOwnerChange
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindow *owner;
  GdkOwnerChange reason;
  GdkAtom selection;
  guint32 time;
  guint32 selection_time;
};
# 1093 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventProximity
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  GdkDevice *device;
};
# 1113 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventSetting
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkSettingAction action;
  char *name;
};
# 1133 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventWindowState
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindowState changed_mask;
  GdkWindowState new_window_state;
};
# 1163 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventGrabBroken {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gboolean keyboard;
  gboolean implicit;
  GdkWindow *grab_window;
};
# 1188 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventDND {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkDragContext *context;

  guint32 time;
  gshort x_root, y_root;
};
# 1220 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventTouchpadSwipe {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint8 phase;
  gint8 n_fingers;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble dx;
  gdouble dy;
  gdouble x_root, y_root;
  guint state;
};
# 1261 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventTouchpadPinch {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint8 phase;
  gint8 n_fingers;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble dx;
  gdouble dy;
  gdouble angle_delta;
  gdouble scale;
  gdouble x_root, y_root;
  guint state;
};
# 1294 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventPadButton {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  guint group;
  guint button;
  guint mode;
};
# 1322 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventPadAxis {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  guint group;
  guint index;
  guint mode;
  gdouble value;
};
# 1349 "/usr/include/gtk-3.0/gdk/gdkevents.h"
struct _GdkEventPadGroupMode {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  guint group;
  guint mode;
};
# 1417 "/usr/include/gtk-3.0/gdk/gdkevents.h"
union _GdkEvent
{
  GdkEventType type;
  GdkEventAny any;
  GdkEventExpose expose;
  GdkEventVisibility visibility;
  GdkEventMotion motion;
  GdkEventButton button;
  GdkEventTouch touch;
  GdkEventScroll scroll;
  GdkEventKey key;
  GdkEventCrossing crossing;
  GdkEventFocus focus_change;
  GdkEventConfigure configure;
  GdkEventProperty property;
  GdkEventSelection selection;
  GdkEventOwnerChange owner_change;
  GdkEventProximity proximity;
  GdkEventDND dnd;
  GdkEventWindowState window_state;
  GdkEventSetting setting;
  GdkEventGrabBroken grab_broken;
  GdkEventTouchpadSwipe touchpad_swipe;
  GdkEventTouchpadPinch touchpad_pinch;
  GdkEventPadButton pad_button;
  GdkEventPadAxis pad_axis;
  GdkEventPadGroupMode pad_group_mode;
};

extern
GType gdk_event_get_type (void) __attribute__ ((__const__));

extern
GType gdk_event_sequence_get_type (void) __attribute__ ((__const__));

extern
gboolean gdk_events_pending (void);
extern
GdkEvent* gdk_event_get (void);

extern
GdkEvent* gdk_event_peek (void);
extern
void gdk_event_put (const GdkEvent *event);

extern
GdkEvent* gdk_event_new (GdkEventType type);
extern
GdkEvent* gdk_event_copy (const GdkEvent *event);
extern
void gdk_event_free (GdkEvent *event);

extern
GdkWindow *gdk_event_get_window (const GdkEvent *event);

extern
guint32 gdk_event_get_time (const GdkEvent *event);
extern
gboolean gdk_event_get_state (const GdkEvent *event,
                                         GdkModifierType *state);
extern
gboolean gdk_event_get_coords (const GdkEvent *event,
      gdouble *x_win,
      gdouble *y_win);
extern
gboolean gdk_event_get_root_coords (const GdkEvent *event,
      gdouble *x_root,
      gdouble *y_root);
extern
gboolean gdk_event_get_button (const GdkEvent *event,
                                         guint *button);
extern
gboolean gdk_event_get_click_count (const GdkEvent *event,
                                         guint *click_count);
extern
gboolean gdk_event_get_keyval (const GdkEvent *event,
                                         guint *keyval);
extern
gboolean gdk_event_get_keycode (const GdkEvent *event,
                                         guint16 *keycode);
extern
gboolean gdk_event_get_scroll_direction (const GdkEvent *event,
                                         GdkScrollDirection *direction);
extern
gboolean gdk_event_get_scroll_deltas (const GdkEvent *event,
                                         gdouble *delta_x,
                                         gdouble *delta_y);

extern
gboolean gdk_event_is_scroll_stop_event (const GdkEvent *event);

extern
gboolean gdk_event_get_axis (const GdkEvent *event,
                                         GdkAxisUse axis_use,
                                         gdouble *value);
extern
void gdk_event_set_device (GdkEvent *event,
                                         GdkDevice *device);
extern
GdkDevice* gdk_event_get_device (const GdkEvent *event);
extern
void gdk_event_set_source_device (GdkEvent *event,
                                         GdkDevice *device);
extern
GdkDevice* gdk_event_get_source_device (const GdkEvent *event);
extern
void gdk_event_request_motions (const GdkEventMotion *event);
extern
gboolean gdk_event_triggers_context_menu (const GdkEvent *event);

extern
gboolean gdk_events_get_distance (GdkEvent *event1,
                                         GdkEvent *event2,
                                         gdouble *distance);
extern
gboolean gdk_events_get_angle (GdkEvent *event1,
                                         GdkEvent *event2,
                                         gdouble *angle);
extern
gboolean gdk_events_get_center (GdkEvent *event1,
                                         GdkEvent *event2,
                                         gdouble *x,
                                         gdouble *y);

extern
void gdk_event_handler_set (GdkEventFunc func,
      gpointer data,
      GDestroyNotify notify);

extern
void gdk_event_set_screen (GdkEvent *event,
                                         GdkScreen *screen);
extern
GdkScreen *gdk_event_get_screen (const GdkEvent *event);

extern
GdkEventSequence *gdk_event_get_event_sequence (const GdkEvent *event);

extern
GdkEventType gdk_event_get_event_type (const GdkEvent *event);

extern
GdkSeat *gdk_event_get_seat (const GdkEvent *event);

extern
void gdk_set_show_events (gboolean show_events);
extern
gboolean gdk_get_show_events (void);

extern
gboolean gdk_setting_get (const gchar *name,
                                         GValue *value);

extern
GdkDeviceTool *gdk_event_get_device_tool (const GdkEvent *event);

extern
void gdk_event_set_device_tool (GdkEvent *event,
                                          GdkDeviceTool *tool);

extern
int gdk_event_get_scancode (GdkEvent *event);

extern
gboolean gdk_event_get_pointer_emulated (GdkEvent *event);
# 32 "/usr/include/gtk-3.0/gdk/gdkdisplay.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkdevicemanager.h" 1
# 35 "/usr/include/gtk-3.0/gdk/gdkdevicemanager.h"
extern
GType gdk_device_manager_get_type (void) __attribute__ ((__const__));

extern
GdkDisplay * gdk_device_manager_get_display (GdkDeviceManager *device_manager);
__attribute__((__deprecated__)) extern
GList * gdk_device_manager_list_devices (GdkDeviceManager *device_manager,
                                                    GdkDeviceType type);
__attribute__((__deprecated__)) extern
GdkDevice * gdk_device_manager_get_client_pointer (GdkDeviceManager *device_manager);
# 33 "/usr/include/gtk-3.0/gdk/gdkdisplay.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkseat.h" 1
# 28 "/usr/include/gtk-3.0/gdk/gdkseat.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkwindow.h" 1
# 32 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkwindow.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkdrawingcontext.h" 1
# 24 "/usr/include/gtk-3.0/gdk/gdkdrawingcontext.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 25 "/usr/include/gtk-3.0/gdk/gdkdrawingcontext.h" 2
# 34 "/usr/include/gtk-3.0/gdk/gdkdrawingcontext.h"
typedef struct _GdkDrawingContext GdkDrawingContext;
typedef struct _GdkDrawingContextClass GdkDrawingContextClass;

extern
GType gdk_drawing_context_get_type (void) __attribute__ ((__const__));

extern
GdkWindow * gdk_drawing_context_get_window (GdkDrawingContext *context);
extern
cairo_region_t *gdk_drawing_context_get_clip (GdkDrawingContext *context);

extern
gboolean gdk_drawing_context_is_valid (GdkDrawingContext *context);

extern
cairo_t * gdk_drawing_context_get_cairo_context (GdkDrawingContext *context);
# 35 "/usr/include/gtk-3.0/gdk/gdkwindow.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkframeclock.h" 1
# 32 "/usr/include/gtk-3.0/gdk/gdkframeclock.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkframetimings.h" 1
# 26 "/usr/include/gtk-3.0/gdk/gdkframetimings.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 27 "/usr/include/gtk-3.0/gdk/gdkframetimings.h" 2



typedef struct _GdkFrameTimings GdkFrameTimings;

extern
GType gdk_frame_timings_get_type (void) __attribute__ ((__const__));

extern
GdkFrameTimings *gdk_frame_timings_ref (GdkFrameTimings *timings);
extern
void gdk_frame_timings_unref (GdkFrameTimings *timings);

extern
gint64 gdk_frame_timings_get_frame_counter (GdkFrameTimings *timings);
extern
gboolean gdk_frame_timings_get_complete (GdkFrameTimings *timings);
extern
gint64 gdk_frame_timings_get_frame_time (GdkFrameTimings *timings);
extern
gint64 gdk_frame_timings_get_presentation_time (GdkFrameTimings *timings);
extern
gint64 gdk_frame_timings_get_refresh_interval (GdkFrameTimings *timings);

extern
gint64 gdk_frame_timings_get_predicted_presentation_time (GdkFrameTimings *timings);
# 33 "/usr/include/gtk-3.0/gdk/gdkframeclock.h" 2
# 43 "/usr/include/gtk-3.0/gdk/gdkframeclock.h"
typedef struct _GdkFrameClock GdkFrameClock;
typedef struct _GdkFrameClockPrivate GdkFrameClockPrivate;
typedef struct _GdkFrameClockClass GdkFrameClockClass;
# 64 "/usr/include/gtk-3.0/gdk/gdkframeclock.h"
typedef enum {
  GDK_FRAME_CLOCK_PHASE_NONE = 0,
  GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS = 1 << 0,
  GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT = 1 << 1,
  GDK_FRAME_CLOCK_PHASE_UPDATE = 1 << 2,
  GDK_FRAME_CLOCK_PHASE_LAYOUT = 1 << 3,
  GDK_FRAME_CLOCK_PHASE_PAINT = 1 << 4,
  GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS = 1 << 5,
  GDK_FRAME_CLOCK_PHASE_AFTER_PAINT = 1 << 6
} GdkFrameClockPhase;

extern
GType gdk_frame_clock_get_type (void) __attribute__ ((__const__));

extern
gint64 gdk_frame_clock_get_frame_time (GdkFrameClock *frame_clock);

extern
void gdk_frame_clock_request_phase (GdkFrameClock *frame_clock,
                                                  GdkFrameClockPhase phase);

extern
void gdk_frame_clock_begin_updating (GdkFrameClock *frame_clock);
extern
void gdk_frame_clock_end_updating (GdkFrameClock *frame_clock);


extern
gint64 gdk_frame_clock_get_frame_counter (GdkFrameClock *frame_clock);
extern
gint64 gdk_frame_clock_get_history_start (GdkFrameClock *frame_clock);
extern
GdkFrameTimings *gdk_frame_clock_get_timings (GdkFrameClock *frame_clock,
                                                    gint64 frame_counter);

extern
GdkFrameTimings *gdk_frame_clock_get_current_timings (GdkFrameClock *frame_clock);

extern
void gdk_frame_clock_get_refresh_info (GdkFrameClock *frame_clock,
                                       gint64 base_time,
                                       gint64 *refresh_interval_return,
                                       gint64 *presentation_time_return);
# 37 "/usr/include/gtk-3.0/gdk/gdkwindow.h" 2



typedef struct _GdkGeometry GdkGeometry;
typedef struct _GdkWindowAttr GdkWindowAttr;
typedef struct _GdkWindowRedirect GdkWindowRedirect;
# 55 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_INPUT_OUTPUT,
  GDK_INPUT_ONLY
} GdkWindowWindowClass;
# 78 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WINDOW_ROOT,
  GDK_WINDOW_TOPLEVEL,
  GDK_WINDOW_CHILD,
  GDK_WINDOW_TEMP,
  GDK_WINDOW_FOREIGN,
  GDK_WINDOW_OFFSCREEN,
  GDK_WINDOW_SUBSURFACE
} GdkWindowType;
# 107 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WA_TITLE = 1 << 1,
  GDK_WA_X = 1 << 2,
  GDK_WA_Y = 1 << 3,
  GDK_WA_CURSOR = 1 << 4,
  GDK_WA_VISUAL = 1 << 5,
  GDK_WA_WMCLASS = 1 << 6,
  GDK_WA_NOREDIR = 1 << 7,
  GDK_WA_TYPE_HINT = 1 << 8
} GdkWindowAttributesType;
# 144 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_HINT_POS = 1 << 0,
  GDK_HINT_MIN_SIZE = 1 << 1,
  GDK_HINT_MAX_SIZE = 1 << 2,
  GDK_HINT_BASE_SIZE = 1 << 3,
  GDK_HINT_ASPECT = 1 << 4,
  GDK_HINT_RESIZE_INC = 1 << 5,
  GDK_HINT_WIN_GRAVITY = 1 << 6,
  GDK_HINT_USER_POS = 1 << 7,
  GDK_HINT_USER_SIZE = 1 << 8
} GdkWindowHints;
# 176 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_DECOR_ALL = 1 << 0,
  GDK_DECOR_BORDER = 1 << 1,
  GDK_DECOR_RESIZEH = 1 << 2,
  GDK_DECOR_TITLE = 1 << 3,
  GDK_DECOR_MENU = 1 << 4,
  GDK_DECOR_MINIMIZE = 1 << 5,
  GDK_DECOR_MAXIMIZE = 1 << 6
} GdkWMDecoration;
# 200 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_FUNC_ALL = 1 << 0,
  GDK_FUNC_RESIZE = 1 << 1,
  GDK_FUNC_MOVE = 1 << 2,
  GDK_FUNC_MINIMIZE = 1 << 3,
  GDK_FUNC_MAXIMIZE = 1 << 4,
  GDK_FUNC_CLOSE = 1 << 5
} GdkWMFunction;
# 234 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_GRAVITY_NORTH_WEST = 1,
  GDK_GRAVITY_NORTH,
  GDK_GRAVITY_NORTH_EAST,
  GDK_GRAVITY_WEST,
  GDK_GRAVITY_CENTER,
  GDK_GRAVITY_EAST,
  GDK_GRAVITY_SOUTH_WEST,
  GDK_GRAVITY_SOUTH,
  GDK_GRAVITY_SOUTH_EAST,
  GDK_GRAVITY_STATIC
} GdkGravity;
# 279 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_ANCHOR_FLIP_X = 1 << 0,
  GDK_ANCHOR_FLIP_Y = 1 << 1,
  GDK_ANCHOR_SLIDE_X = 1 << 2,
  GDK_ANCHOR_SLIDE_Y = 1 << 3,
  GDK_ANCHOR_RESIZE_X = 1 << 4,
  GDK_ANCHOR_RESIZE_Y = 1 << 5,
  GDK_ANCHOR_FLIP = GDK_ANCHOR_FLIP_X | GDK_ANCHOR_FLIP_Y,
  GDK_ANCHOR_SLIDE = GDK_ANCHOR_SLIDE_X | GDK_ANCHOR_SLIDE_Y,
  GDK_ANCHOR_RESIZE = GDK_ANCHOR_RESIZE_X | GDK_ANCHOR_RESIZE_Y
} GdkAnchorHints;
# 305 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WINDOW_EDGE_NORTH_WEST,
  GDK_WINDOW_EDGE_NORTH,
  GDK_WINDOW_EDGE_NORTH_EAST,
  GDK_WINDOW_EDGE_WEST,
  GDK_WINDOW_EDGE_EAST,
  GDK_WINDOW_EDGE_SOUTH_WEST,
  GDK_WINDOW_EDGE_SOUTH,
  GDK_WINDOW_EDGE_SOUTH_EAST
} GdkWindowEdge;
# 327 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_FULLSCREEN_ON_CURRENT_MONITOR,
  GDK_FULLSCREEN_ON_ALL_MONITORS
} GdkFullscreenMode;
# 353 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
struct _GdkWindowAttr
{
  gchar *title;
  gint event_mask;
  gint x, y;
  gint width;
  gint height;
  GdkWindowWindowClass wclass;
  GdkVisual *visual;
  GdkWindowType window_type;
  GdkCursor *cursor;
  gchar *wmclass_name;
  gchar *wmclass_class;
  gboolean override_redirect;
  GdkWindowTypeHint type_hint;
};
# 446 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
struct _GdkGeometry
{
  gint min_width;
  gint min_height;
  gint max_width;
  gint max_height;
  gint base_width;
  gint base_height;
  gint width_inc;
  gint height_inc;
  gdouble min_aspect;
  gdouble max_aspect;
  GdkGravity win_gravity;
};

typedef struct _GdkWindowClass GdkWindowClass;
# 471 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
struct _GdkWindowClass
{
  GObjectClass parent_class;

  GdkWindow * (* pick_embedded_child) (GdkWindow *window,
                                             gdouble x,
                                             gdouble y);


  void (* to_embedder) (GdkWindow *window,
                                             gdouble offscreen_x,
                                             gdouble offscreen_y,
                                             gdouble *embedder_x,
                                             gdouble *embedder_y);
  void (* from_embedder) (GdkWindow *window,
                                             gdouble embedder_x,
                                             gdouble embedder_y,
                                             gdouble *offscreen_x,
                                             gdouble *offscreen_y);
  cairo_surface_t * (* create_surface) (GdkWindow *window,
                                             gint width,
                                             gint height);


  void (*_gdk_reserved1) (void);
  void (*_gdk_reserved2) (void);
  void (*_gdk_reserved3) (void);
  void (*_gdk_reserved4) (void);
  void (*_gdk_reserved5) (void);
  void (*_gdk_reserved6) (void);
  void (*_gdk_reserved7) (void);
  void (*_gdk_reserved8) (void);
};



extern
GType gdk_window_get_type (void) __attribute__ ((__const__));
extern
GdkWindow* gdk_window_new (GdkWindow *parent,
                                                GdkWindowAttr *attributes,
                                                gint attributes_mask);
extern
void gdk_window_destroy (GdkWindow *window);
extern
GdkWindowType gdk_window_get_window_type (GdkWindow *window);
extern
gboolean gdk_window_is_destroyed (GdkWindow *window);

extern
GdkVisual * gdk_window_get_visual (GdkWindow *window);
extern
GdkScreen * gdk_window_get_screen (GdkWindow *window);
extern
GdkDisplay * gdk_window_get_display (GdkWindow *window);

__attribute__((__deprecated__("Use '" "gdk_device_get_window_at_position" "' instead"))) extern
GdkWindow* gdk_window_at_pointer (gint *win_x,
                                                gint *win_y);

extern
void gdk_window_show (GdkWindow *window);
extern
void gdk_window_hide (GdkWindow *window);
extern
void gdk_window_withdraw (GdkWindow *window);
extern
void gdk_window_show_unraised (GdkWindow *window);
extern
void gdk_window_move (GdkWindow *window,
                                                gint x,
                                                gint y);
extern
void gdk_window_resize (GdkWindow *window,
                                                gint width,
                                                gint height);
extern
void gdk_window_move_resize (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);

extern
void gdk_window_move_to_rect (GdkWindow *window,
                                                const GdkRectangle *rect,
                                                GdkGravity rect_anchor,
                                                GdkGravity window_anchor,
                                                GdkAnchorHints anchor_hints,
                                                gint rect_anchor_dx,
                                                gint rect_anchor_dy);
extern
void gdk_window_reparent (GdkWindow *window,
                                                GdkWindow *new_parent,
                                                gint x,
                                                gint y);
extern
void gdk_window_raise (GdkWindow *window);
extern
void gdk_window_lower (GdkWindow *window);
extern
void gdk_window_restack (GdkWindow *window,
      GdkWindow *sibling,
      gboolean above);
extern
void gdk_window_focus (GdkWindow *window,
                                                guint32 timestamp);
extern
void gdk_window_set_user_data (GdkWindow *window,
                                                gpointer user_data);
extern
void gdk_window_set_override_redirect (GdkWindow *window,
                                                gboolean override_redirect);
extern
gboolean gdk_window_get_accept_focus (GdkWindow *window);
extern
void gdk_window_set_accept_focus (GdkWindow *window,
             gboolean accept_focus);
extern
gboolean gdk_window_get_focus_on_map (GdkWindow *window);
extern
void gdk_window_set_focus_on_map (GdkWindow *window,
             gboolean focus_on_map);
extern
void gdk_window_add_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
extern
void gdk_window_remove_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
extern
void gdk_window_scroll (GdkWindow *window,
                                                gint dx,
                                                gint dy);
extern
void gdk_window_move_region (GdkWindow *window,
      const cairo_region_t *region,
      gint dx,
      gint dy);
extern
gboolean gdk_window_ensure_native (GdkWindow *window);





extern
void gdk_window_shape_combine_region (GdkWindow *window,
                                      const cairo_region_t *shape_region,
                                      gint offset_x,
                                      gint offset_y);
# 631 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
extern
void gdk_window_set_child_shapes (GdkWindow *window);

__attribute__((__deprecated__)) extern
gboolean gdk_window_get_composited (GdkWindow *window);
__attribute__((__deprecated__)) extern
void gdk_window_set_composited (GdkWindow *window,
                                  gboolean composited);
# 647 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
extern
void gdk_window_merge_child_shapes (GdkWindow *window);

extern
void gdk_window_input_shape_combine_region (GdkWindow *window,
                                            const cairo_region_t *shape_region,
                                            gint offset_x,
                                            gint offset_y);
extern
void gdk_window_set_child_input_shapes (GdkWindow *window);
extern
void gdk_window_merge_child_input_shapes (GdkWindow *window);


extern
void gdk_window_set_pass_through (GdkWindow *window,
                                  gboolean pass_through);
extern
gboolean gdk_window_get_pass_through (GdkWindow *window);







extern
gboolean gdk_window_is_visible (GdkWindow *window);
extern
gboolean gdk_window_is_viewable (GdkWindow *window);
extern
gboolean gdk_window_is_input_only (GdkWindow *window);
extern
gboolean gdk_window_is_shaped (GdkWindow *window);

extern
GdkWindowState gdk_window_get_state (GdkWindow *window);




__attribute__((__deprecated__)) extern
gboolean gdk_window_set_static_gravities (GdkWindow *window,
                                          gboolean use_static);
# 708 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef void (*GdkWindowInvalidateHandlerFunc) (GdkWindow *window,
       cairo_region_t *region);
extern
void gdk_window_set_invalidate_handler (GdkWindow *window,
     GdkWindowInvalidateHandlerFunc handler);

extern
gboolean gdk_window_has_native (GdkWindow *window);
extern
void gdk_window_set_type_hint (GdkWindow *window,
                                            GdkWindowTypeHint hint);
extern
GdkWindowTypeHint gdk_window_get_type_hint (GdkWindow *window);

extern
gboolean gdk_window_get_modal_hint (GdkWindow *window);
extern
void gdk_window_set_modal_hint (GdkWindow *window,
                                           gboolean modal);

extern
void gdk_window_set_skip_taskbar_hint (GdkWindow *window,
                                       gboolean skips_taskbar);
extern
void gdk_window_set_skip_pager_hint (GdkWindow *window,
                                       gboolean skips_pager);
extern
void gdk_window_set_urgency_hint (GdkWindow *window,
           gboolean urgent);

extern
void gdk_window_set_geometry_hints (GdkWindow *window,
          const GdkGeometry *geometry,
          GdkWindowHints geom_mask);

extern
cairo_region_t *gdk_window_get_clip_region (GdkWindow *window);
extern
cairo_region_t *gdk_window_get_visible_region(GdkWindow *window);


__attribute__((__deprecated__("Use '" "gdk_window_begin_draw_frame" "' instead"))) extern
void gdk_window_begin_paint_rect (GdkWindow *window,
          const GdkRectangle *rectangle);
extern
void gdk_window_mark_paint_from_clip (GdkWindow *window,
            cairo_t *cr);
__attribute__((__deprecated__("Use '" "gdk_window_begin_draw_frame" "' instead"))) extern
void gdk_window_begin_paint_region (GdkWindow *window,
          const cairo_region_t *region);
__attribute__((__deprecated__("Use '" "gdk_window_end_draw_frame" "' instead"))) extern
void gdk_window_end_paint (GdkWindow *window);

extern
GdkDrawingContext *gdk_window_begin_draw_frame (GdkWindow *window,
                                                 const cairo_region_t *region);
extern
void gdk_window_end_draw_frame (GdkWindow *window,
                                            GdkDrawingContext *context);

__attribute__((__deprecated__)) extern
void gdk_window_flush (GdkWindow *window);

extern
void gdk_window_set_title (GdkWindow *window,
         const gchar *title);
extern
void gdk_window_set_role (GdkWindow *window,
         const gchar *role);
extern
void gdk_window_set_startup_id (GdkWindow *window,
         const gchar *startup_id);
extern
void gdk_window_set_transient_for (GdkWindow *window,
         GdkWindow *parent);
__attribute__((__deprecated__)) extern
void gdk_window_set_background (GdkWindow *window,
       const GdkColor *color);
__attribute__((__deprecated__)) extern
void gdk_window_set_background_rgba (GdkWindow *window,
                                              const GdkRGBA *rgba);
__attribute__((__deprecated__)) extern
void gdk_window_set_background_pattern (GdkWindow *window,
                                                 cairo_pattern_t *pattern);
__attribute__((__deprecated__)) extern
cairo_pattern_t *gdk_window_get_background_pattern (GdkWindow *window);

extern
void gdk_window_set_cursor (GdkWindow *window,
       GdkCursor *cursor);
extern
GdkCursor *gdk_window_get_cursor (GdkWindow *window);
extern
void gdk_window_set_device_cursor (GdkWindow *window,
                                            GdkDevice *device,
                                            GdkCursor *cursor);
extern
GdkCursor *gdk_window_get_device_cursor (GdkWindow *window,
                                            GdkDevice *device);
extern
void gdk_window_get_user_data (GdkWindow *window,
       gpointer *data);
extern
void gdk_window_get_geometry (GdkWindow *window,
       gint *x,
       gint *y,
       gint *width,
       gint *height);
extern
int gdk_window_get_width (GdkWindow *window);
extern
int gdk_window_get_height (GdkWindow *window);
extern
void gdk_window_get_position (GdkWindow *window,
       gint *x,
       gint *y);
extern
gint gdk_window_get_origin (GdkWindow *window,
       gint *x,
       gint *y);
extern
void gdk_window_get_root_coords (GdkWindow *window,
       gint x,
       gint y,
       gint *root_x,
       gint *root_y);
extern
void gdk_window_coords_to_parent (GdkWindow *window,
                                          gdouble x,
                                          gdouble y,
                                          gdouble *parent_x,
                                          gdouble *parent_y);
extern
void gdk_window_coords_from_parent (GdkWindow *window,
                                          gdouble parent_x,
                                          gdouble parent_y,
                                          gdouble *x,
                                          gdouble *y);

extern
void gdk_window_get_root_origin (GdkWindow *window,
       gint *x,
       gint *y);
extern
void gdk_window_get_frame_extents (GdkWindow *window,
                                            GdkRectangle *rect);

extern
gint gdk_window_get_scale_factor (GdkWindow *window);


__attribute__((__deprecated__("Use '" "gdk_window_get_device_position" "' instead"))) extern
GdkWindow * gdk_window_get_pointer (GdkWindow *window,
                                          gint *x,
                                          gint *y,
                                          GdkModifierType *mask);

extern
GdkWindow * gdk_window_get_device_position (GdkWindow *window,
                                              GdkDevice *device,
                                              gint *x,
                                              gint *y,
                                              GdkModifierType *mask);
extern
GdkWindow * gdk_window_get_device_position_double (GdkWindow *window,
                                                     GdkDevice *device,
                                                     gdouble *x,
                                                     gdouble *y,
                                                     GdkModifierType *mask);
extern
GdkWindow * gdk_window_get_parent (GdkWindow *window);
extern
GdkWindow * gdk_window_get_toplevel (GdkWindow *window);

extern
GdkWindow * gdk_window_get_effective_parent (GdkWindow *window);
extern
GdkWindow * gdk_window_get_effective_toplevel (GdkWindow *window);

extern
GList * gdk_window_get_children (GdkWindow *window);
extern
GList * gdk_window_peek_children (GdkWindow *window);
extern
GList * gdk_window_get_children_with_user_data (GdkWindow *window,
            gpointer user_data);

extern
GdkEventMask gdk_window_get_events (GdkWindow *window);
extern
void gdk_window_set_events (GdkWindow *window,
       GdkEventMask event_mask);
extern
void gdk_window_set_device_events (GdkWindow *window,
                                            GdkDevice *device,
                                            GdkEventMask event_mask);
extern
GdkEventMask gdk_window_get_device_events (GdkWindow *window,
                                            GdkDevice *device);

extern
void gdk_window_set_source_events (GdkWindow *window,
                                            GdkInputSource source,
                                            GdkEventMask event_mask);
extern
GdkEventMask gdk_window_get_source_events (GdkWindow *window,
                                            GdkInputSource source);

extern
void gdk_window_set_icon_list (GdkWindow *window,
       GList *pixbufs);
extern
void gdk_window_set_icon_name (GdkWindow *window,
       const gchar *name);
extern
void gdk_window_set_group (GdkWindow *window,
       GdkWindow *leader);
extern
GdkWindow* gdk_window_get_group (GdkWindow *window);
extern
void gdk_window_set_decorations (GdkWindow *window,
       GdkWMDecoration decorations);
extern
gboolean gdk_window_get_decorations (GdkWindow *window,
       GdkWMDecoration *decorations);
extern
void gdk_window_set_functions (GdkWindow *window,
       GdkWMFunction functions);

extern
cairo_surface_t *
              gdk_window_create_similar_surface (GdkWindow *window,
                                          cairo_content_t content,
                                          int width,
                                          int height);
extern
cairo_surface_t *
              gdk_window_create_similar_image_surface (GdkWindow *window,
             cairo_format_t format,
             int width,
             int height,
             int scale);

extern
void gdk_window_beep (GdkWindow *window);
extern
void gdk_window_iconify (GdkWindow *window);
extern
void gdk_window_deiconify (GdkWindow *window);
extern
void gdk_window_stick (GdkWindow *window);
extern
void gdk_window_unstick (GdkWindow *window);
extern
void gdk_window_maximize (GdkWindow *window);
extern
void gdk_window_unmaximize (GdkWindow *window);
extern
void gdk_window_fullscreen (GdkWindow *window);
extern
void gdk_window_fullscreen_on_monitor (GdkWindow *window,
                                                gint monitor);
extern
void gdk_window_set_fullscreen_mode (GdkWindow *window,
                                          GdkFullscreenMode mode);
extern
GdkFullscreenMode
              gdk_window_get_fullscreen_mode (GdkWindow *window);
extern
void gdk_window_unfullscreen (GdkWindow *window);
extern
void gdk_window_set_keep_above (GdkWindow *window,
                                          gboolean setting);
extern
void gdk_window_set_keep_below (GdkWindow *window,
                                          gboolean setting);
extern
void gdk_window_set_opacity (GdkWindow *window,
                                          gdouble opacity);
extern
void gdk_window_register_dnd (GdkWindow *window);

extern
GdkDragProtocol
              gdk_window_get_drag_protocol(GdkWindow *window,
                                           GdkWindow **target);

extern
void gdk_window_begin_resize_drag (GdkWindow *window,
                                              GdkWindowEdge edge,
                                              gint button,
                                              gint root_x,
                                              gint root_y,
                                              guint32 timestamp);
extern
void gdk_window_begin_resize_drag_for_device (GdkWindow *window,
                                              GdkWindowEdge edge,
                                              GdkDevice *device,
                                              gint button,
                                              gint root_x,
                                              gint root_y,
                                              guint32 timestamp);
extern
void gdk_window_begin_move_drag (GdkWindow *window,
                                              gint button,
                                              gint root_x,
                                              gint root_y,
                                              guint32 timestamp);
extern
void gdk_window_begin_move_drag_for_device (GdkWindow *window,
                                              GdkDevice *device,
                                              gint button,
                                              gint root_x,
                                              gint root_y,
                                              guint32 timestamp);


extern
void gdk_window_invalidate_rect (GdkWindow *window,
              const GdkRectangle *rect,
              gboolean invalidate_children);
extern
void gdk_window_invalidate_region (GdkWindow *window,
              const cairo_region_t *region,
              gboolean invalidate_children);
# 1045 "/usr/include/gtk-3.0/gdk/gdkwindow.h"
typedef gboolean (*GdkWindowChildFunc) (GdkWindow *window,
                                                 gpointer user_data);

extern
void gdk_window_invalidate_maybe_recurse (GdkWindow *window,
       const cairo_region_t *region,
       GdkWindowChildFunc child_func,
       gpointer user_data);
extern
cairo_region_t *gdk_window_get_update_area (GdkWindow *window);

extern
void gdk_window_freeze_updates (GdkWindow *window);
extern
void gdk_window_thaw_updates (GdkWindow *window);

__attribute__((__deprecated__)) extern
void gdk_window_freeze_toplevel_updates_libgtk_only (GdkWindow *window);
__attribute__((__deprecated__)) extern
void gdk_window_thaw_toplevel_updates_libgtk_only (GdkWindow *window);

__attribute__((__deprecated__)) extern
void gdk_window_process_all_updates (void);
__attribute__((__deprecated__)) extern
void gdk_window_process_updates (GdkWindow *window,
        gboolean update_children);


__attribute__((__deprecated__)) extern
void gdk_window_set_debug_updates (gboolean setting);

extern
void gdk_window_constrain_size (GdkGeometry *geometry,
                                           GdkWindowHints flags,
                                           gint width,
                                           gint height,
                                           gint *new_width,
                                           gint *new_height);

__attribute__((__deprecated__)) extern
void gdk_window_enable_synchronized_configure (GdkWindow *window);
__attribute__((__deprecated__)) extern
void gdk_window_configure_finished (GdkWindow *window);

extern
GdkWindow *gdk_get_default_root_window (void);


extern
cairo_surface_t *
           gdk_offscreen_window_get_surface (GdkWindow *window);
extern
void gdk_offscreen_window_set_embedder (GdkWindow *window,
      GdkWindow *embedder);
extern
GdkWindow *gdk_offscreen_window_get_embedder (GdkWindow *window);
extern
void gdk_window_geometry_changed (GdkWindow *window);


extern
void gdk_window_set_support_multidevice (GdkWindow *window,
                                               gboolean support_multidevice);
extern
gboolean gdk_window_get_support_multidevice (GdkWindow *window);


extern
GdkFrameClock* gdk_window_get_frame_clock (GdkWindow *window);

extern
void gdk_window_set_opaque_region (GdkWindow *window,
                                                cairo_region_t *region);

extern
void gdk_window_set_event_compression (GdkWindow *window,
                                                gboolean event_compression);
extern
gboolean gdk_window_get_event_compression (GdkWindow *window);

extern
void gdk_window_set_shadow_width (GdkWindow *window,
                                                gint left,
                                                gint right,
                                                gint top,
                                                gint bottom);
extern
gboolean gdk_window_show_window_menu (GdkWindow *window,
                                                GdkEvent *event);

extern
GdkGLContext * gdk_window_create_gl_context (GdkWindow *window,
                                                GError **error);
# 29 "/usr/include/gtk-3.0/gdk/gdkseat.h" 2
# 52 "/usr/include/gtk-3.0/gdk/gdkseat.h"
typedef enum {
  GDK_SEAT_CAPABILITY_NONE = 0,
  GDK_SEAT_CAPABILITY_POINTER = 1 << 0,
  GDK_SEAT_CAPABILITY_TOUCH = 1 << 1,
  GDK_SEAT_CAPABILITY_TABLET_STYLUS = 1 << 2,
  GDK_SEAT_CAPABILITY_KEYBOARD = 1 << 3,
  GDK_SEAT_CAPABILITY_ALL_POINTING = (GDK_SEAT_CAPABILITY_POINTER | GDK_SEAT_CAPABILITY_TOUCH | GDK_SEAT_CAPABILITY_TABLET_STYLUS),
  GDK_SEAT_CAPABILITY_ALL = (GDK_SEAT_CAPABILITY_ALL_POINTING | GDK_SEAT_CAPABILITY_KEYBOARD)
} GdkSeatCapabilities;
# 75 "/usr/include/gtk-3.0/gdk/gdkseat.h"
typedef void (* GdkSeatGrabPrepareFunc) (GdkSeat *seat,
                                         GdkWindow *window,
                                         gpointer user_data);

struct _GdkSeat
{
  GObject parent_instance;
};

extern
GType gdk_seat_get_type (void) __attribute__ ((__const__));

extern
GdkGrabStatus gdk_seat_grab (GdkSeat *seat,
                                          GdkWindow *window,
                                          GdkSeatCapabilities capabilities,
                                          gboolean owner_events,
                                          GdkCursor *cursor,
                                          const GdkEvent *event,
                                          GdkSeatGrabPrepareFunc prepare_func,
                                          gpointer prepare_func_data);
extern
void gdk_seat_ungrab (GdkSeat *seat);

extern
GdkDisplay * gdk_seat_get_display (GdkSeat *seat);

extern
GdkSeatCapabilities
               gdk_seat_get_capabilities (GdkSeat *seat);

extern
GList * gdk_seat_get_slaves (GdkSeat *seat,
                                          GdkSeatCapabilities capabilities);

extern
GdkDevice * gdk_seat_get_pointer (GdkSeat *seat);
extern
GdkDevice * gdk_seat_get_keyboard (GdkSeat *seat);
# 34 "/usr/include/gtk-3.0/gdk/gdkdisplay.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkmonitor.h" 1
# 29 "/usr/include/gtk-3.0/gdk/gdkmonitor.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 30 "/usr/include/gtk-3.0/gdk/gdkmonitor.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkrectangle.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkrectangle.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 34 "/usr/include/gtk-3.0/gdk/gdkrectangle.h" 2





extern
gboolean gdk_rectangle_intersect (const GdkRectangle *src1,
                                  const GdkRectangle *src2,
                                  GdkRectangle *dest);
extern
void gdk_rectangle_union (const GdkRectangle *src1,
                                  const GdkRectangle *src2,
                                  GdkRectangle *dest);

extern
gboolean gdk_rectangle_equal (const GdkRectangle *rect1,
                                  const GdkRectangle *rect2);

extern
GType gdk_rectangle_get_type (void) __attribute__ ((__const__));
# 31 "/usr/include/gtk-3.0/gdk/gdkmonitor.h" 2








typedef struct _GdkMonitor GdkMonitor;
typedef struct _GdkMonitorClass GdkMonitorClass;
# 56 "/usr/include/gtk-3.0/gdk/gdkmonitor.h"
typedef enum {
  GDK_SUBPIXEL_LAYOUT_UNKNOWN,
  GDK_SUBPIXEL_LAYOUT_NONE,
  GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB,
  GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR,
  GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB,
  GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR
} GdkSubpixelLayout;

extern
GType gdk_monitor_get_type (void) __attribute__ ((__const__));

extern
GdkDisplay * gdk_monitor_get_display (GdkMonitor *monitor);
extern
void gdk_monitor_get_geometry (GdkMonitor *monitor,
                                                   GdkRectangle *geometry);
extern
void gdk_monitor_get_workarea (GdkMonitor *monitor,
                                                   GdkRectangle *workarea);
extern
int gdk_monitor_get_width_mm (GdkMonitor *monitor);
extern
int gdk_monitor_get_height_mm (GdkMonitor *monitor);
extern
const char * gdk_monitor_get_manufacturer (GdkMonitor *monitor);
extern
const char * gdk_monitor_get_model (GdkMonitor *monitor);
extern
int gdk_monitor_get_scale_factor (GdkMonitor *monitor);
extern
int gdk_monitor_get_refresh_rate (GdkMonitor *monitor);
extern
GdkSubpixelLayout gdk_monitor_get_subpixel_layout (GdkMonitor *monitor);
extern
gboolean gdk_monitor_is_primary (GdkMonitor *monitor);
# 35 "/usr/include/gtk-3.0/gdk/gdkdisplay.h" 2
# 45 "/usr/include/gtk-3.0/gdk/gdkdisplay.h"
extern
GType gdk_display_get_type (void) __attribute__ ((__const__));
extern
GdkDisplay *gdk_display_open (const gchar *display_name);

extern
const gchar * gdk_display_get_name (GdkDisplay *display);

__attribute__((__deprecated__)) extern
gint gdk_display_get_n_screens (GdkDisplay *display);
__attribute__((__deprecated__)) extern
GdkScreen * gdk_display_get_screen (GdkDisplay *display,
                                            gint screen_num);
extern
GdkScreen * gdk_display_get_default_screen (GdkDisplay *display);


__attribute__((__deprecated__("Use '" "gdk_device_ungrab" "' instead"))) extern
void gdk_display_pointer_ungrab (GdkDisplay *display,
                                            guint32 time_);
__attribute__((__deprecated__("Use '" "gdk_device_ungrab" "' instead"))) extern
void gdk_display_keyboard_ungrab (GdkDisplay *display,
                                            guint32 time_);
__attribute__((__deprecated__("Use '" "gdk_display_device_is_grabbed" "' instead"))) extern
gboolean gdk_display_pointer_is_grabbed (GdkDisplay *display);


extern
gboolean gdk_display_device_is_grabbed (GdkDisplay *display,
                                            GdkDevice *device);
extern
void gdk_display_beep (GdkDisplay *display);
extern
void gdk_display_sync (GdkDisplay *display);
extern
void gdk_display_flush (GdkDisplay *display);

extern
void gdk_display_close (GdkDisplay *display);
extern
gboolean gdk_display_is_closed (GdkDisplay *display);

__attribute__((__deprecated__("Use '" "gdk_device_manager_list_devices" "' instead"))) extern
GList * gdk_display_list_devices (GdkDisplay *display);

extern
GdkEvent* gdk_display_get_event (GdkDisplay *display);
extern
GdkEvent* gdk_display_peek_event (GdkDisplay *display);
extern
void gdk_display_put_event (GdkDisplay *display,
                                  const GdkEvent *event);
extern
gboolean gdk_display_has_pending (GdkDisplay *display);

extern
void gdk_display_set_double_click_time (GdkDisplay *display,
                                            guint msec);
extern
void gdk_display_set_double_click_distance (GdkDisplay *display,
                                            guint distance);

extern
GdkDisplay *gdk_display_get_default (void);


__attribute__((__deprecated__("Use '" "gdk_device_get_position" "' instead"))) extern
void gdk_display_get_pointer (GdkDisplay *display,
                                                    GdkScreen **screen,
                                                    gint *x,
                                                    gint *y,
                                                    GdkModifierType *mask);
__attribute__((__deprecated__("Use '" "gdk_device_get_window_at_position" "' instead"))) extern
GdkWindow * gdk_display_get_window_at_pointer (GdkDisplay *display,
                                                    gint *win_x,
                                                    gint *win_y);
__attribute__((__deprecated__("Use '" "gdk_device_warp" "' instead"))) extern
void gdk_display_warp_pointer (GdkDisplay *display,
                                                    GdkScreen *screen,
                                                    gint x,
                                                    gint y);


__attribute__((__deprecated__)) extern
GdkDisplay *gdk_display_open_default_libgtk_only (void);

extern
gboolean gdk_display_supports_cursor_alpha (GdkDisplay *display);
extern
gboolean gdk_display_supports_cursor_color (GdkDisplay *display);
extern
guint gdk_display_get_default_cursor_size (GdkDisplay *display);
extern
void gdk_display_get_maximal_cursor_size (GdkDisplay *display,
                                                guint *width,
                                                guint *height);

extern
GdkWindow *gdk_display_get_default_group (GdkDisplay *display);

extern
gboolean gdk_display_supports_selection_notification (GdkDisplay *display);
extern
gboolean gdk_display_request_selection_notification (GdkDisplay *display,
                                                      GdkAtom selection);

extern
gboolean gdk_display_supports_clipboard_persistence (GdkDisplay *display);
extern
void gdk_display_store_clipboard (GdkDisplay *display,
                                                     GdkWindow *clipboard_window,
                                                     guint32 time_,
                                                     const GdkAtom *targets,
                                                     gint n_targets);

extern
gboolean gdk_display_supports_shapes (GdkDisplay *display);
extern
gboolean gdk_display_supports_input_shapes (GdkDisplay *display);
__attribute__((__deprecated__)) extern
gboolean gdk_display_supports_composite (GdkDisplay *display);
extern
void gdk_display_notify_startup_complete (GdkDisplay *display,
                                                const gchar *startup_id);

__attribute__((__deprecated__("Use '" "gdk_display_get_default_seat" "' instead"))) extern
GdkDeviceManager * gdk_display_get_device_manager (GdkDisplay *display);

extern
GdkAppLaunchContext *gdk_display_get_app_launch_context (GdkDisplay *display);

extern
GdkSeat * gdk_display_get_default_seat (GdkDisplay *display);

extern
GList * gdk_display_list_seats (GdkDisplay *display);

extern
int gdk_display_get_n_monitors (GdkDisplay *display);
extern
GdkMonitor * gdk_display_get_monitor (GdkDisplay *display,
                                                int monitor_num);
extern
GdkMonitor * gdk_display_get_primary_monitor (GdkDisplay *display);
extern
GdkMonitor * gdk_display_get_monitor_at_point (GdkDisplay *display,
                                                int x,
                                                int y);
extern
GdkMonitor * gdk_display_get_monitor_at_window (GdkDisplay *display,
                                                GdkWindow *window);
# 33 "/usr/include/gtk-3.0/gdk/gdkscreen.h" 2








extern
GType gdk_screen_get_type (void) __attribute__ ((__const__));

extern
GdkVisual * gdk_screen_get_system_visual (GdkScreen *screen);
extern
GdkVisual * gdk_screen_get_rgba_visual (GdkScreen *screen);
extern
gboolean gdk_screen_is_composited (GdkScreen *screen);

extern
GdkWindow * gdk_screen_get_root_window (GdkScreen *screen);
extern
GdkDisplay * gdk_screen_get_display (GdkScreen *screen);
__attribute__((__deprecated__)) extern
gint gdk_screen_get_number (GdkScreen *screen);
__attribute__((__deprecated__)) extern
gint gdk_screen_get_width (GdkScreen *screen);
__attribute__((__deprecated__)) extern
gint gdk_screen_get_height (GdkScreen *screen);
__attribute__((__deprecated__)) extern
gint gdk_screen_get_width_mm (GdkScreen *screen);
__attribute__((__deprecated__)) extern
gint gdk_screen_get_height_mm (GdkScreen *screen);

extern
GList * gdk_screen_list_visuals (GdkScreen *screen);
extern
GList * gdk_screen_get_toplevel_windows (GdkScreen *screen);
__attribute__((__deprecated__)) extern
gchar * gdk_screen_make_display_name (GdkScreen *screen);

__attribute__((__deprecated__("Use '" "gdk_display_get_n_monitors" "' instead"))) extern
gint gdk_screen_get_n_monitors (GdkScreen *screen);
__attribute__((__deprecated__("Use '" "gdk_display_get_primary_monitor" "' instead"))) extern
gint gdk_screen_get_primary_monitor (GdkScreen *screen);
__attribute__((__deprecated__("Use '" "gdk_monitor_get_geometry" "' instead"))) extern
void gdk_screen_get_monitor_geometry (GdkScreen *screen,
                                               gint monitor_num,
                                               GdkRectangle *dest);
__attribute__((__deprecated__("Use '" "gdk_monitor_get_workarea" "' instead"))) extern
void gdk_screen_get_monitor_workarea (GdkScreen *screen,
                                               gint monitor_num,
                                               GdkRectangle *dest);

__attribute__((__deprecated__("Use '" "gdk_display_get_monitor_at_point" "' instead"))) extern
gint gdk_screen_get_monitor_at_point (GdkScreen *screen,
                                                gint x,
                                                gint y);
__attribute__((__deprecated__("Use '" "gdk_display_get_monitor_at_window" "' instead"))) extern
gint gdk_screen_get_monitor_at_window (GdkScreen *screen,
                                                GdkWindow *window);
__attribute__((__deprecated__("Use '" "gdk_monitor_get_width_mm" "' instead"))) extern
gint gdk_screen_get_monitor_width_mm (GdkScreen *screen,
                                                gint monitor_num);
__attribute__((__deprecated__("Use '" "gdk_monitor_get_height_mm" "' instead"))) extern
gint gdk_screen_get_monitor_height_mm (GdkScreen *screen,
                                                gint monitor_num);
__attribute__((__deprecated__("Use '" "gdk_monitor_get_model" "' instead"))) extern
gchar * gdk_screen_get_monitor_plug_name (GdkScreen *screen,
                                                gint monitor_num);
__attribute__((__deprecated__("Use '" "gdk_monitor_get_scale_factor" "' instead"))) extern
gint gdk_screen_get_monitor_scale_factor (GdkScreen *screen,
                                                   gint monitor_num);

extern
GdkScreen *gdk_screen_get_default (void);

extern
gboolean gdk_screen_get_setting (GdkScreen *screen,
                                   const gchar *name,
                                   GValue *value);

extern
void gdk_screen_set_font_options (GdkScreen *screen,
                                                         const cairo_font_options_t *options);
extern
const cairo_font_options_t *gdk_screen_get_font_options (GdkScreen *screen);

extern
void gdk_screen_set_resolution (GdkScreen *screen,
                                   gdouble dpi);
extern
gdouble gdk_screen_get_resolution (GdkScreen *screen);

__attribute__((__deprecated__)) extern
GdkWindow *gdk_screen_get_active_window (GdkScreen *screen);
extern
GList *gdk_screen_get_window_stack (GdkScreen *screen);
# 32 "/usr/include/gtk-3.0/gdk/gdkapplaunchcontext.h" 2








extern
GType gdk_app_launch_context_get_type (void);

__attribute__((__deprecated__("Use '" "gdk_display_get_app_launch_context" "' instead"))) extern
GdkAppLaunchContext *gdk_app_launch_context_new (void);
__attribute__((__deprecated__("Use '" "gdk_display_get_app_launch_context" "' instead"))) extern
void gdk_app_launch_context_set_display (GdkAppLaunchContext *context,
                                                           GdkDisplay *display);
extern
void gdk_app_launch_context_set_screen (GdkAppLaunchContext *context,
                                                           GdkScreen *screen);
extern
void gdk_app_launch_context_set_desktop (GdkAppLaunchContext *context,
                                                           gint desktop);
extern
void gdk_app_launch_context_set_timestamp (GdkAppLaunchContext *context,
                                                           guint32 timestamp);
extern
void gdk_app_launch_context_set_icon (GdkAppLaunchContext *context,
                                                           GIcon *icon);
extern
void gdk_app_launch_context_set_icon_name (GdkAppLaunchContext *context,
                                                           const char *icon_name);
# 33 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkcairo.h" 1
# 25 "/usr/include/gtk-3.0/gdk/gdkcairo.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 26 "/usr/include/gtk-3.0/gdk/gdkcairo.h" 2
# 1 "/usr/include/gtk-3.0/gdk/deprecated/gdkcolor.h" 1
# 34 "/usr/include/gtk-3.0/gdk/deprecated/gdkcolor.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 35 "/usr/include/gtk-3.0/gdk/deprecated/gdkcolor.h" 2
# 54 "/usr/include/gtk-3.0/gdk/deprecated/gdkcolor.h"
struct _GdkColor
{
  guint32 pixel;
  guint16 red;
  guint16 green;
  guint16 blue;
};



__attribute__((__deprecated__("Use '" "gdk_rgba_get_type" "' instead"))) extern
GType gdk_color_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "gdk_rgba_copy" "' instead"))) extern
GdkColor *gdk_color_copy (const GdkColor *color);
__attribute__((__deprecated__("Use '" "gdk_rgba_free" "' instead"))) extern
void gdk_color_free (GdkColor *color);

__attribute__((__deprecated__("Use '" "gdk_rgba_hash" "' instead"))) extern
guint gdk_color_hash (const GdkColor *color);
__attribute__((__deprecated__("Use '" "gdk_rgba_equal" "' instead"))) extern
gboolean gdk_color_equal (const GdkColor *colora,
                               const GdkColor *colorb);

__attribute__((__deprecated__("Use '" "gdk_rgba_parse" "' instead"))) extern
gboolean gdk_color_parse (const gchar *spec,
                               GdkColor *color);
__attribute__((__deprecated__("Use '" "gdk_rgba_to_string" "' instead"))) extern
gchar * gdk_color_to_string (const GdkColor *color);
# 27 "/usr/include/gtk-3.0/gdk/gdkcairo.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkrgba.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkrgba.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 34 "/usr/include/gtk-3.0/gdk/gdkrgba.h" 2



struct _GdkRGBA
{
  gdouble red;
  gdouble green;
  gdouble blue;
  gdouble alpha;
};



extern
GType gdk_rgba_get_type (void) __attribute__ ((__const__));

extern
GdkRGBA * gdk_rgba_copy (const GdkRGBA *rgba);
extern
void gdk_rgba_free (GdkRGBA *rgba);

extern
guint gdk_rgba_hash (gconstpointer p);
extern
gboolean gdk_rgba_equal (gconstpointer p1,
                              gconstpointer p2);

extern
gboolean gdk_rgba_parse (GdkRGBA *rgba,
                              const gchar *spec);
extern
gchar * gdk_rgba_to_string (const GdkRGBA *rgba);
# 28 "/usr/include/gtk-3.0/gdk/gdkcairo.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkpixbuf.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkpixbuf.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 1
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h" 1
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-features.h" 1
# 110 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-features.h"
extern const guint gdk_pixbuf_major_version;
extern const guint gdk_pixbuf_minor_version;
extern const guint gdk_pixbuf_micro_version;
extern const char *gdk_pixbuf_version;
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h" 2
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2



# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 1
# 35 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h" 1
# 36 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h" 2
# 65 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef enum
{
        GDK_PIXBUF_ALPHA_BILEVEL,
        GDK_PIXBUF_ALPHA_FULL
} GdkPixbufAlphaMode;
# 83 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef enum {
 GDK_COLORSPACE_RGB
} GdkColorspace;



typedef struct _GdkPixbuf GdkPixbuf;
# 110 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef void (* GdkPixbufDestroyNotify) (guchar *pixels, gpointer data);
# 139 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef enum {

        GDK_PIXBUF_ERROR_CORRUPT_IMAGE,

        GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,

        GDK_PIXBUF_ERROR_BAD_OPTION,

        GDK_PIXBUF_ERROR_UNKNOWN_TYPE,

        GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION,
        GDK_PIXBUF_ERROR_FAILED,
        GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION
} GdkPixbufError;

extern
GQuark gdk_pixbuf_error_quark (void);



extern
GType gdk_pixbuf_get_type (void) __attribute__ ((__const__));
# 173 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
extern
GdkColorspace gdk_pixbuf_get_colorspace (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_n_channels (const GdkPixbuf *pixbuf);
extern
gboolean gdk_pixbuf_get_has_alpha (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_bits_per_sample (const GdkPixbuf *pixbuf);
extern
guchar *gdk_pixbuf_get_pixels (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_width (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_height (const GdkPixbuf *pixbuf);
extern
int gdk_pixbuf_get_rowstride (const GdkPixbuf *pixbuf);
extern
gsize gdk_pixbuf_get_byte_length (const GdkPixbuf *pixbuf);

extern
guchar *gdk_pixbuf_get_pixels_with_length (const GdkPixbuf *pixbuf,
                                                 guint *length);

extern
const guint8* gdk_pixbuf_read_pixels (const GdkPixbuf *pixbuf);
extern
GBytes * gdk_pixbuf_read_pixel_bytes (const GdkPixbuf *pixbuf);





extern
GdkPixbuf *gdk_pixbuf_new (GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample,
      int width, int height);

extern
gint gdk_pixbuf_calculate_rowstride (GdkColorspace colorspace,
         gboolean has_alpha,
         int bits_per_sample,
         int width,
         int height);


extern
GdkPixbuf *gdk_pixbuf_copy (const GdkPixbuf *pixbuf);


extern
GdkPixbuf *gdk_pixbuf_new_subpixbuf (GdkPixbuf *src_pixbuf,
                                     int src_x,
                                     int src_y,
                                     int width,
                                     int height);
# 251 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
extern
GdkPixbuf *gdk_pixbuf_new_from_file (const char *filename,
                                     GError **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_file_at_size (const char *filename,
          int width,
          int height,
          GError **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_file_at_scale (const char *filename,
           int width,
           int height,
           gboolean preserve_aspect_ratio,
           GError **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_resource (const char *resource_path,
      GError **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale (const char *resource_path,
        int width,
        int height,
        gboolean preserve_aspect_ratio,
        GError **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_data (const guchar *data,
         GdkColorspace colorspace,
         gboolean has_alpha,
         int bits_per_sample,
         int width, int height,
         int rowstride,
         GdkPixbufDestroyNotify destroy_fn,
         gpointer destroy_fn_data);

extern
GdkPixbuf *gdk_pixbuf_new_from_bytes (GBytes *data,
          GdkColorspace colorspace,
          gboolean has_alpha,
          int bits_per_sample,
          int width, int height,
          int rowstride);

extern
GdkPixbuf *gdk_pixbuf_new_from_xpm_data (const char **data);
# 305 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
extern
void gdk_pixbuf_fill (GdkPixbuf *pixbuf,
                                         guint32 pixel);
# 318 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
extern
gboolean gdk_pixbuf_save (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    GError **error,
                                    ...) __attribute__((__sentinel__));

extern
gboolean gdk_pixbuf_savev (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    char **option_keys,
                                    char **option_values,
                                    GError **error);
# 367 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h"
typedef gboolean (*GdkPixbufSaveFunc) (const gchar *buf,
      gsize count,
      GError **error,
      gpointer data);

extern
gboolean gdk_pixbuf_save_to_callback (GdkPixbuf *pixbuf,
      GdkPixbufSaveFunc save_func,
      gpointer user_data,
      const char *type,
      GError **error,
      ...) __attribute__((__sentinel__));

extern
gboolean gdk_pixbuf_save_to_callbackv (GdkPixbuf *pixbuf,
      GdkPixbufSaveFunc save_func,
      gpointer user_data,
      const char *type,
      char **option_keys,
      char **option_values,
      GError **error);



extern
gboolean gdk_pixbuf_save_to_buffer (GdkPixbuf *pixbuf,
      gchar **buffer,
      gsize *buffer_size,
      const char *type,
      GError **error,
      ...) __attribute__((__sentinel__));

extern
gboolean gdk_pixbuf_save_to_bufferv (GdkPixbuf *pixbuf,
      gchar **buffer,
      gsize *buffer_size,
      const char *type,
      char **option_keys,
      char **option_values,
      GError **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream (GInputStream *stream,
      GCancellable *cancellable,
                                         GError **error);

extern
void gdk_pixbuf_new_from_stream_async (GInputStream *stream,
           GCancellable *cancellable,
           GAsyncReadyCallback callback,
           gpointer user_data);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream_finish (GAsyncResult *async_result,
           GError **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale (GInputStream *stream,
                                                  gint width,
                                                  gint height,
                                                  gboolean preserve_aspect_ratio,
        GCancellable *cancellable,
                                                  GError **error);

extern
void gdk_pixbuf_new_from_stream_at_scale_async (GInputStream *stream,
      gint width,
      gint height,
      gboolean preserve_aspect_ratio,
      GCancellable *cancellable,
      GAsyncReadyCallback callback,
      gpointer user_data);

extern
gboolean gdk_pixbuf_save_to_stream (GdkPixbuf *pixbuf,
                                         GOutputStream *stream,
                                         const char *type,
      GCancellable *cancellable,
                                         GError **error,
                                         ...);

extern
void gdk_pixbuf_save_to_stream_async (GdkPixbuf *pixbuf,
          GOutputStream *stream,
          const gchar *type,
          GCancellable *cancellable,
          GAsyncReadyCallback callback,
          gpointer user_data,
          ...);

extern
gboolean gdk_pixbuf_save_to_stream_finish (GAsyncResult *async_result,
        GError **error);

extern
void gdk_pixbuf_save_to_streamv_async (GdkPixbuf *pixbuf,
                                       GOutputStream *stream,
                                       const gchar *type,
                                       gchar **option_keys,
                                       gchar **option_values,
                                       GCancellable *cancellable,
                                       GAsyncReadyCallback callback,
                                       gpointer user_data);

extern
gboolean gdk_pixbuf_save_to_streamv (GdkPixbuf *pixbuf,
                                     GOutputStream *stream,
                                     const char *type,
                                     char **option_keys,
                                     char **option_values,
                                     GCancellable *cancellable,
                                     GError **error);


extern
GdkPixbuf *gdk_pixbuf_add_alpha (const GdkPixbuf *pixbuf, gboolean substitute_color,
     guchar r, guchar g, guchar b);


extern
void gdk_pixbuf_copy_area (const GdkPixbuf *src_pixbuf,
      int src_x, int src_y,
      int width, int height,
      GdkPixbuf *dest_pixbuf,
      int dest_x, int dest_y);


extern
void gdk_pixbuf_saturate_and_pixelate (const GdkPixbuf *src,
                                       GdkPixbuf *dest,
                                       gfloat saturation,
                                       gboolean pixelate);


extern
GdkPixbuf *gdk_pixbuf_apply_embedded_orientation (GdkPixbuf *src);


extern
gboolean gdk_pixbuf_set_option (GdkPixbuf *pixbuf,
                                 const gchar *key,
                                 const gchar *value);
extern
const gchar * gdk_pixbuf_get_option (GdkPixbuf *pixbuf,
                                              const gchar *key);
extern
gboolean gdk_pixbuf_remove_option (GdkPixbuf *pixbuf,
                                   const gchar *key);
extern
GHashTable * gdk_pixbuf_get_options (GdkPixbuf *pixbuf);
extern
gboolean gdk_pixbuf_copy_options (GdkPixbuf *src_pixbuf,
                                  GdkPixbuf *dest_pixbuf);
# 35 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h" 1
# 73 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h"
typedef enum {
 GDK_INTERP_NEAREST,
 GDK_INTERP_TILES,
 GDK_INTERP_BILINEAR,
 GDK_INTERP_HYPER
} GdkInterpType;
# 91 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h"
typedef enum {
 GDK_PIXBUF_ROTATE_NONE = 0,
 GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE = 90,
 GDK_PIXBUF_ROTATE_UPSIDEDOWN = 180,
 GDK_PIXBUF_ROTATE_CLOCKWISE = 270
} GdkPixbufRotation;

extern
void gdk_pixbuf_scale (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type);
extern
void gdk_pixbuf_composite (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type,
     int overall_alpha);
extern
void gdk_pixbuf_composite_color (const GdkPixbuf *src,
     GdkPixbuf *dest,
     int dest_x,
     int dest_y,
     int dest_width,
     int dest_height,
     double offset_x,
     double offset_y,
     double scale_x,
     double scale_y,
     GdkInterpType interp_type,
     int overall_alpha,
     int check_x,
     int check_y,
     int check_size,
     guint32 color1,
     guint32 color2);

extern
GdkPixbuf *gdk_pixbuf_scale_simple (const GdkPixbuf *src,
           int dest_width,
           int dest_height,
           GdkInterpType interp_type);

extern
GdkPixbuf *gdk_pixbuf_composite_color_simple (const GdkPixbuf *src,
           int dest_width,
           int dest_height,
           GdkInterpType interp_type,
           int overall_alpha,
           int check_size,
           guint32 color1,
           guint32 color2);

extern
GdkPixbuf *gdk_pixbuf_rotate_simple (const GdkPixbuf *src,
                  GdkPixbufRotation angle);
extern
GdkPixbuf *gdk_pixbuf_flip (const GdkPixbuf *src,
                  gboolean horizontal);
# 36 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h" 1
# 39 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
typedef struct _GdkPixbufAnimation GdkPixbufAnimation;


typedef struct _GdkPixbufAnimationIter GdkPixbufAnimationIter;
# 52 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
extern
GType gdk_pixbuf_animation_get_type (void) __attribute__ ((__const__));
# 62 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file (const char *filename,
                                                          GError **error);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream (GInputStream *stream,
                                                          GCancellable *cancellable,
                                                          GError **error);
extern
void gdk_pixbuf_animation_new_from_stream_async (GInputStream *stream,
                                                          GCancellable *cancellable,
                                                          GAsyncReadyCallback callback,
                                                          gpointer user_data);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish (GAsyncResult*async_result,
                                                          GError **error);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char *resource_path,
                                                          GError **error);
# 89 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
extern
int gdk_pixbuf_animation_get_width (GdkPixbufAnimation *animation);
extern
int gdk_pixbuf_animation_get_height (GdkPixbufAnimation *animation);
extern
gboolean gdk_pixbuf_animation_is_static_image (GdkPixbufAnimation *animation);
extern
GdkPixbuf *gdk_pixbuf_animation_get_static_image (GdkPixbufAnimation *animation);

#pragma clang diagnostic push
# 98 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
extern
GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter (GdkPixbufAnimation *animation,
                                                                              const GTimeVal *start_time);
#pragma clang diagnostic pop

extern
GType gdk_pixbuf_animation_iter_get_type (void) __attribute__ ((__const__));
extern
int gdk_pixbuf_animation_iter_get_delay_time (GdkPixbufAnimationIter *iter);
extern
GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf (GdkPixbufAnimationIter *iter);
extern
gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame (GdkPixbufAnimationIter *iter);
#pragma clang diagnostic push
# 112 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
extern
gboolean gdk_pixbuf_animation_iter_advance (GdkPixbufAnimationIter *iter,
                                                                              const GTimeVal *current_time);
#pragma clang diagnostic pop
# 37 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h" 1
# 38 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h"
typedef struct _GdkPixbufSimpleAnim GdkPixbufSimpleAnim;
typedef struct _GdkPixbufSimpleAnimClass GdkPixbufSimpleAnimClass;
# 49 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h"
extern
GType gdk_pixbuf_simple_anim_get_type (void) __attribute__ ((__const__));
extern
GType gdk_pixbuf_simple_anim_iter_get_type (void) __attribute__ ((__const__));

extern
GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new (gint width,
                                                           gint height,
                                                           gfloat rate);
extern
void gdk_pixbuf_simple_anim_add_frame (GdkPixbufSimpleAnim *animation,
                                                           GdkPixbuf *pixbuf);
extern
void gdk_pixbuf_simple_anim_set_loop (GdkPixbufSimpleAnim *animation,
                                                           gboolean loop);
extern
gboolean gdk_pixbuf_simple_anim_get_loop (GdkPixbufSimpleAnim *animation);
# 38 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h" 1
# 42 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h"
typedef struct _GdkPixbufFormat GdkPixbufFormat;

extern
gboolean gdk_pixbuf_init_modules (const char *path,
                                  GError **error);

extern
GType gdk_pixbuf_format_get_type (void) __attribute__ ((__const__));

extern
GSList *gdk_pixbuf_get_formats (void);
extern
gchar *gdk_pixbuf_format_get_name (GdkPixbufFormat *format);
extern
gchar *gdk_pixbuf_format_get_description (GdkPixbufFormat *format);
extern
gchar **gdk_pixbuf_format_get_mime_types (GdkPixbufFormat *format);
extern
gchar **gdk_pixbuf_format_get_extensions (GdkPixbufFormat *format);
extern
gboolean gdk_pixbuf_format_is_save_option_supported (GdkPixbufFormat *format,
                                                       const gchar *option_key);
extern
gboolean gdk_pixbuf_format_is_writable (GdkPixbufFormat *format);
extern
gboolean gdk_pixbuf_format_is_scalable (GdkPixbufFormat *format);
extern
gboolean gdk_pixbuf_format_is_disabled (GdkPixbufFormat *format);
extern
void gdk_pixbuf_format_set_disabled (GdkPixbufFormat *format,
           gboolean disabled);
extern
gchar *gdk_pixbuf_format_get_license (GdkPixbufFormat *format);

extern
GdkPixbufFormat *gdk_pixbuf_get_file_info (const gchar *filename,
           gint *width,
           gint *height);
extern
void gdk_pixbuf_get_file_info_async (const gchar *filename,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GdkPixbufFormat *gdk_pixbuf_get_file_info_finish (GAsyncResult *async_result,
        gint *width,
        gint *height,
        GError **error);

extern
GdkPixbufFormat *gdk_pixbuf_format_copy (const GdkPixbufFormat *format);
extern
void gdk_pixbuf_format_free (GdkPixbufFormat *format);
# 39 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h" 1
# 46 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h"
typedef struct _GdkPixbufLoader GdkPixbufLoader;
struct _GdkPixbufLoader
{

  GObject parent_instance;

  gpointer priv;
};

typedef struct _GdkPixbufLoaderClass GdkPixbufLoaderClass;
struct _GdkPixbufLoaderClass
{
  GObjectClass parent_class;

  void (*size_prepared) (GdkPixbufLoader *loader,
         int width,
         int height);

  void (*area_prepared) (GdkPixbufLoader *loader);


  void (*area_updated) (GdkPixbufLoader *loader,
                              int x,
                              int y,
         int width,
         int height);

  void (*closed) (GdkPixbufLoader *loader);
};

extern
GType gdk_pixbuf_loader_get_type (void) __attribute__ ((__const__));
extern
GdkPixbufLoader * gdk_pixbuf_loader_new (void);
extern
GdkPixbufLoader * gdk_pixbuf_loader_new_with_type (const char *image_type,
                                                      GError **error);
extern
GdkPixbufLoader * gdk_pixbuf_loader_new_with_mime_type (const char *mime_type,
          GError **error);
extern
void gdk_pixbuf_loader_set_size (GdkPixbufLoader *loader,
                                                 int width,
       int height);
extern
gboolean gdk_pixbuf_loader_write (GdkPixbufLoader *loader,
            const guchar *buf,
            gsize count,
                                                      GError **error);
extern
gboolean gdk_pixbuf_loader_write_bytes (GdkPixbufLoader *loader,
                                                      GBytes *buffer,
                                                      GError **error);
extern
GdkPixbuf * gdk_pixbuf_loader_get_pixbuf (GdkPixbufLoader *loader);
extern
GdkPixbufAnimation * gdk_pixbuf_loader_get_animation (GdkPixbufLoader *loader);
extern
gboolean gdk_pixbuf_loader_close (GdkPixbufLoader *loader,
                                                      GError **error);
extern
GdkPixbufFormat *gdk_pixbuf_loader_get_format (GdkPixbufLoader *loader);
# 40 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h" 1
# 13 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h"
# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-macros.h" 1
# 14 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h" 2




extern
GType gdk_pixbuf_alpha_mode_get_type (void) __attribute__ ((__const__));

extern
GType gdk_colorspace_get_type (void) __attribute__ ((__const__));

extern
GType gdk_pixbuf_error_get_type (void) __attribute__ ((__const__));



extern
GType gdk_interp_type_get_type (void) __attribute__ ((__const__));

extern
GType gdk_pixbuf_rotation_get_type (void) __attribute__ ((__const__));
# 41 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2

# 1 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h" 1
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
typedef GdkPixbuf *GdkPixbuf_autoptr; typedef GList *GdkPixbuf_listautoptr; typedef GSList *GdkPixbuf_slistautoptr; typedef GQueue *GdkPixbuf_queueautoptr;
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic push
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbuf (GdkPixbuf *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbuf *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbuf (GdkPixbuf **_ptr) { glib_autoptr_clear_GdkPixbuf (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkPixbuf (void *_ptr) { (g_object_unref) ((GdkPixbuf *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbuf (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkPixbuf); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbuf (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkPixbuf); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbuf (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkPixbuf); }
# 29 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic pop
typedef GdkPixbufAnimation *GdkPixbufAnimation_autoptr; typedef GList *GdkPixbufAnimation_listautoptr; typedef GSList *GdkPixbufAnimation_slistautoptr; typedef GQueue *GdkPixbufAnimation_queueautoptr;
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic push
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbufAnimation (GdkPixbufAnimation *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbufAnimation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbufAnimation (GdkPixbufAnimation **_ptr) { glib_autoptr_clear_GdkPixbufAnimation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkPixbufAnimation (void *_ptr) { (g_object_unref) ((GdkPixbufAnimation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbufAnimation (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkPixbufAnimation); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbufAnimation (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkPixbufAnimation); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbufAnimation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkPixbufAnimation); }
# 30 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic pop
typedef GdkPixbufAnimationIter *GdkPixbufAnimationIter_autoptr; typedef GList *GdkPixbufAnimationIter_listautoptr; typedef GSList *GdkPixbufAnimationIter_slistautoptr; typedef GQueue *GdkPixbufAnimationIter_queueautoptr;
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic push
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbufAnimationIter (GdkPixbufAnimationIter *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbufAnimationIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbufAnimationIter (GdkPixbufAnimationIter **_ptr) { glib_autoptr_clear_GdkPixbufAnimationIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkPixbufAnimationIter (void *_ptr) { (g_object_unref) ((GdkPixbufAnimationIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbufAnimationIter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkPixbufAnimationIter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbufAnimationIter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkPixbufAnimationIter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbufAnimationIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkPixbufAnimationIter); }
# 31 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic pop
typedef GdkPixbufLoader *GdkPixbufLoader_autoptr; typedef GList *GdkPixbufLoader_listautoptr; typedef GSList *GdkPixbufLoader_slistautoptr; typedef GQueue *GdkPixbufLoader_queueautoptr;
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic push
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbufLoader (GdkPixbufLoader *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbufLoader *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbufLoader (GdkPixbufLoader **_ptr) { glib_autoptr_clear_GdkPixbufLoader (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkPixbufLoader (void *_ptr) { (g_object_unref) ((GdkPixbufLoader *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbufLoader (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkPixbufLoader); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbufLoader (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkPixbufLoader); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbufLoader (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkPixbufLoader); }
# 32 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic pop
typedef GdkPixbufSimpleAnim *GdkPixbufSimpleAnim_autoptr; typedef GList *GdkPixbufSimpleAnim_listautoptr; typedef GSList *GdkPixbufSimpleAnim_slistautoptr; typedef GQueue *GdkPixbufSimpleAnim_queueautoptr;
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic push
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkPixbufSimpleAnim (GdkPixbufSimpleAnim *_ptr) { if (_ptr) (g_object_unref) ((GdkPixbufSimpleAnim *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkPixbufSimpleAnim (GdkPixbufSimpleAnim **_ptr) { glib_autoptr_clear_GdkPixbufSimpleAnim (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkPixbufSimpleAnim (void *_ptr) { (g_object_unref) ((GdkPixbufSimpleAnim *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkPixbufSimpleAnim (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkPixbufSimpleAnim); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkPixbufSimpleAnim (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkPixbufSimpleAnim); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkPixbufSimpleAnim (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkPixbufSimpleAnim); }
# 33 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#pragma clang diagnostic pop
# 43 "/usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 34 "/usr/include/gtk-3.0/gdk/gdkpixbuf.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 36 "/usr/include/gtk-3.0/gdk/gdkpixbuf.h" 2



extern
GdkPixbuf *gdk_pixbuf_get_from_window (GdkWindow *window,
                                        gint src_x,
                                        gint src_y,
                                        gint width,
                                        gint height);

extern
GdkPixbuf *gdk_pixbuf_get_from_surface (cairo_surface_t *surface,
                                        gint src_x,
                                        gint src_y,
                                        gint width,
                                        gint height);
# 30 "/usr/include/gtk-3.0/gdk/gdkcairo.h" 2
# 1 "/usr/include/pango-1.0/pango/pangocairo.h" 1
# 41 "/usr/include/pango-1.0/pango/pangocairo.h"
typedef struct _PangoCairoFont PangoCairoFont;
# 68 "/usr/include/pango-1.0/pango/pangocairo.h"
typedef struct _PangoCairoFontMap PangoCairoFontMap;
# 94 "/usr/include/pango-1.0/pango/pangocairo.h"
typedef void (* PangoCairoShapeRendererFunc) (cairo_t *cr,
           PangoAttrShape *attr,
           gboolean do_path,
           gpointer data);




extern
GType pango_cairo_font_map_get_type (void) __attribute__ ((__const__));

extern
PangoFontMap *pango_cairo_font_map_new (void);
extern
PangoFontMap *pango_cairo_font_map_new_for_font_type (cairo_font_type_t fonttype);
extern
PangoFontMap *pango_cairo_font_map_get_default (void);
extern
void pango_cairo_font_map_set_default (PangoCairoFontMap *fontmap);
extern
cairo_font_type_t pango_cairo_font_map_get_font_type (PangoCairoFontMap *fontmap);

extern
void pango_cairo_font_map_set_resolution (PangoCairoFontMap *fontmap,
         double dpi);
extern
double pango_cairo_font_map_get_resolution (PangoCairoFontMap *fontmap);

__attribute__((__deprecated__("Use '" "pango_font_map_create_context" "' instead"))) extern
PangoContext *pango_cairo_font_map_create_context (PangoCairoFontMap *fontmap);





extern
GType pango_cairo_font_get_type (void) __attribute__ ((__const__));

extern
cairo_scaled_font_t *pango_cairo_font_get_scaled_font (PangoCairoFont *font);



extern
void pango_cairo_update_context (cairo_t *cr,
      PangoContext *context);

extern
void pango_cairo_context_set_font_options (PangoContext *context,
          const cairo_font_options_t *options);
extern
const cairo_font_options_t *pango_cairo_context_get_font_options (PangoContext *context);

extern
void pango_cairo_context_set_resolution (PangoContext *context,
          double dpi);
extern
double pango_cairo_context_get_resolution (PangoContext *context);

extern
void pango_cairo_context_set_shape_renderer (PangoContext *context,
            PangoCairoShapeRendererFunc func,
            gpointer data,
            GDestroyNotify dnotify);
extern
PangoCairoShapeRendererFunc pango_cairo_context_get_shape_renderer (PangoContext *context,
            gpointer *data);



extern
PangoContext *pango_cairo_create_context (cairo_t *cr);
extern
PangoLayout *pango_cairo_create_layout (cairo_t *cr);
extern
void pango_cairo_update_layout (cairo_t *cr,
     PangoLayout *layout);




extern
void pango_cairo_show_glyph_string (cairo_t *cr,
        PangoFont *font,
        PangoGlyphString *glyphs);
extern
void pango_cairo_show_glyph_item (cairo_t *cr,
        const char *text,
        PangoGlyphItem *glyph_item);
extern
void pango_cairo_show_layout_line (cairo_t *cr,
        PangoLayoutLine *line);
extern
void pango_cairo_show_layout (cairo_t *cr,
        PangoLayout *layout);

extern
void pango_cairo_show_error_underline (cairo_t *cr,
           double x,
           double y,
           double width,
           double height);




extern
void pango_cairo_glyph_string_path (cairo_t *cr,
        PangoFont *font,
        PangoGlyphString *glyphs);
extern
void pango_cairo_layout_line_path (cairo_t *cr,
        PangoLayoutLine *line);
extern
void pango_cairo_layout_path (cairo_t *cr,
        PangoLayout *layout);

extern
void pango_cairo_error_underline_path (cairo_t *cr,
           double x,
           double y,
           double width,
           double height);
# 31 "/usr/include/gtk-3.0/gdk/gdkcairo.h" 2



__attribute__((__deprecated__("Use '" "gdk_window_begin_draw_frame() and gdk_drawing_context_get_cairo_context()" "' instead"))) extern
cairo_t * gdk_cairo_create (GdkWindow *window);

extern
gboolean gdk_cairo_get_clip_rectangle (cairo_t *cr,
                                         GdkRectangle *rect);

extern
void gdk_cairo_set_source_rgba (cairo_t *cr,
                                         const GdkRGBA *rgba);
extern
void gdk_cairo_set_source_pixbuf (cairo_t *cr,
                                         const GdkPixbuf *pixbuf,
                                         gdouble pixbuf_x,
                                         gdouble pixbuf_y);
extern
void gdk_cairo_set_source_window (cairo_t *cr,
                                         GdkWindow *window,
                                         gdouble x,
                                         gdouble y);

extern
void gdk_cairo_rectangle (cairo_t *cr,
                                         const GdkRectangle *rectangle);
extern
void gdk_cairo_region (cairo_t *cr,
                                         const cairo_region_t *region);

extern
cairo_region_t *
           gdk_cairo_region_create_from_surface
                                        (cairo_surface_t *surface);

__attribute__((__deprecated__("Use '" "gdk_cairo_set_source_rgba" "' instead"))) extern
void gdk_cairo_set_source_color (cairo_t *cr,
                                         const GdkColor *color);

extern
cairo_surface_t * gdk_cairo_surface_create_from_pixbuf (const GdkPixbuf *pixbuf,
                                                             int scale,
                                                             GdkWindow *for_window);
extern
void gdk_cairo_draw_from_gl (cairo_t *cr,
                                   GdkWindow *window,
                                   int source,
                                   int source_type,
                                   int buffer_scale,
                                   int x,
                                   int y,
                                   int width,
                                   int height);

extern
GdkDrawingContext * gdk_cairo_get_drawing_context (cairo_t *cr);
# 34 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkcursor.h" 1
# 32 "/usr/include/gtk-3.0/gdk/gdkcursor.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkcursor.h" 2
# 134 "/usr/include/gtk-3.0/gdk/gdkcursor.h"
typedef enum
{
  GDK_X_CURSOR = 0,
  GDK_ARROW = 2,
  GDK_BASED_ARROW_DOWN = 4,
  GDK_BASED_ARROW_UP = 6,
  GDK_BOAT = 8,
  GDK_BOGOSITY = 10,
  GDK_BOTTOM_LEFT_CORNER = 12,
  GDK_BOTTOM_RIGHT_CORNER = 14,
  GDK_BOTTOM_SIDE = 16,
  GDK_BOTTOM_TEE = 18,
  GDK_BOX_SPIRAL = 20,
  GDK_CENTER_PTR = 22,
  GDK_CIRCLE = 24,
  GDK_CLOCK = 26,
  GDK_COFFEE_MUG = 28,
  GDK_CROSS = 30,
  GDK_CROSS_REVERSE = 32,
  GDK_CROSSHAIR = 34,
  GDK_DIAMOND_CROSS = 36,
  GDK_DOT = 38,
  GDK_DOTBOX = 40,
  GDK_DOUBLE_ARROW = 42,
  GDK_DRAFT_LARGE = 44,
  GDK_DRAFT_SMALL = 46,
  GDK_DRAPED_BOX = 48,
  GDK_EXCHANGE = 50,
  GDK_FLEUR = 52,
  GDK_GOBBLER = 54,
  GDK_GUMBY = 56,
  GDK_HAND1 = 58,
  GDK_HAND2 = 60,
  GDK_HEART = 62,
  GDK_ICON = 64,
  GDK_IRON_CROSS = 66,
  GDK_LEFT_PTR = 68,
  GDK_LEFT_SIDE = 70,
  GDK_LEFT_TEE = 72,
  GDK_LEFTBUTTON = 74,
  GDK_LL_ANGLE = 76,
  GDK_LR_ANGLE = 78,
  GDK_MAN = 80,
  GDK_MIDDLEBUTTON = 82,
  GDK_MOUSE = 84,
  GDK_PENCIL = 86,
  GDK_PIRATE = 88,
  GDK_PLUS = 90,
  GDK_QUESTION_ARROW = 92,
  GDK_RIGHT_PTR = 94,
  GDK_RIGHT_SIDE = 96,
  GDK_RIGHT_TEE = 98,
  GDK_RIGHTBUTTON = 100,
  GDK_RTL_LOGO = 102,
  GDK_SAILBOAT = 104,
  GDK_SB_DOWN_ARROW = 106,
  GDK_SB_H_DOUBLE_ARROW = 108,
  GDK_SB_LEFT_ARROW = 110,
  GDK_SB_RIGHT_ARROW = 112,
  GDK_SB_UP_ARROW = 114,
  GDK_SB_V_DOUBLE_ARROW = 116,
  GDK_SHUTTLE = 118,
  GDK_SIZING = 120,
  GDK_SPIDER = 122,
  GDK_SPRAYCAN = 124,
  GDK_STAR = 126,
  GDK_TARGET = 128,
  GDK_TCROSS = 130,
  GDK_TOP_LEFT_ARROW = 132,
  GDK_TOP_LEFT_CORNER = 134,
  GDK_TOP_RIGHT_CORNER = 136,
  GDK_TOP_SIDE = 138,
  GDK_TOP_TEE = 140,
  GDK_TREK = 142,
  GDK_UL_ANGLE = 144,
  GDK_UMBRELLA = 146,
  GDK_UR_ANGLE = 148,
  GDK_WATCH = 150,
  GDK_XTERM = 152,
  GDK_LAST_CURSOR,
  GDK_BLANK_CURSOR = -2,
  GDK_CURSOR_IS_PIXMAP = -1
} GdkCursorType;




extern
GType gdk_cursor_get_type (void) __attribute__ ((__const__));

extern
GdkCursor* gdk_cursor_new_for_display (GdkDisplay *display,
       GdkCursorType cursor_type);
__attribute__((__deprecated__("Use '" "gdk_cursor_new_for_display" "' instead"))) extern
GdkCursor* gdk_cursor_new (GdkCursorType cursor_type);
extern
GdkCursor* gdk_cursor_new_from_pixbuf (GdkDisplay *display,
       GdkPixbuf *pixbuf,
       gint x,
       gint y);
extern
GdkCursor* gdk_cursor_new_from_surface (GdkDisplay *display,
       cairo_surface_t *surface,
       gdouble x,
       gdouble y);
extern
GdkCursor* gdk_cursor_new_from_name (GdkDisplay *display,
       const gchar *name);
extern
GdkDisplay* gdk_cursor_get_display (GdkCursor *cursor);
__attribute__((__deprecated__("Use '" "g_object_ref" "' instead"))) extern
GdkCursor * gdk_cursor_ref (GdkCursor *cursor);
__attribute__((__deprecated__("Use '" "g_object_unref" "' instead"))) extern
void gdk_cursor_unref (GdkCursor *cursor);
extern
GdkPixbuf* gdk_cursor_get_image (GdkCursor *cursor);
extern
cairo_surface_t *gdk_cursor_get_surface (GdkCursor *cursor,
       gdouble *x_hot,
       gdouble *y_hot);
extern
GdkCursorType gdk_cursor_get_cursor_type (GdkCursor *cursor);
# 35 "/usr/include/gtk-3.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkdevicepad.h" 1
# 27 "/usr/include/gtk-3.0/gdk/gdkdevicepad.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 28 "/usr/include/gtk-3.0/gdk/gdkdevicepad.h" 2








typedef struct _GdkDevicePad GdkDevicePad;
typedef struct _GdkDevicePadInterface GdkDevicePadInterface;
# 47 "/usr/include/gtk-3.0/gdk/gdkdevicepad.h"
typedef enum {
  GDK_DEVICE_PAD_FEATURE_BUTTON,
  GDK_DEVICE_PAD_FEATURE_RING,
  GDK_DEVICE_PAD_FEATURE_STRIP
} GdkDevicePadFeature;

extern
GType gdk_device_pad_get_type (void) __attribute__ ((__const__));

extern
gint gdk_device_pad_get_n_groups (GdkDevicePad *pad);

extern
gint gdk_device_pad_get_group_n_modes (GdkDevicePad *pad,
                                        gint group_idx);

extern
gint gdk_device_pad_get_n_features (GdkDevicePad *pad,
                                        GdkDevicePadFeature feature);

extern
gint gdk_device_pad_get_feature_group (GdkDevicePad *pad,
                                        GdkDevicePadFeature feature,
                                        gint feature_idx);
# 37 "/usr/include/gtk-3.0/gdk/gdk.h" 2



# 1 "/usr/include/gtk-3.0/gdk/gdkdisplaymanager.h" 1
# 43 "/usr/include/gtk-3.0/gdk/gdkdisplaymanager.h"
extern
GType gdk_display_manager_get_type (void) __attribute__ ((__const__));

extern
GdkDisplayManager *gdk_display_manager_get (void);
extern
GdkDisplay * gdk_display_manager_get_default_display (GdkDisplayManager *manager);
extern
void gdk_display_manager_set_default_display (GdkDisplayManager *manager,
                                                            GdkDisplay *display);
extern
GSList * gdk_display_manager_list_displays (GdkDisplayManager *manager);
extern
GdkDisplay * gdk_display_manager_open_display (GdkDisplayManager *manager,
                                                            const gchar *name);
# 41 "/usr/include/gtk-3.0/gdk/gdk.h" 2


# 1 "/usr/include/gtk-3.0/gdk/gdkenumtypes.h" 1
# 12 "/usr/include/gtk-3.0/gdk/gdkenumtypes.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 13 "/usr/include/gtk-3.0/gdk/gdkenumtypes.h" 2




extern GType gdk_cursor_type_get_type (void) __attribute__ ((__const__));



extern GType gdk_input_source_get_type (void) __attribute__ ((__const__));

extern GType gdk_input_mode_get_type (void) __attribute__ ((__const__));

extern GType gdk_device_type_get_type (void) __attribute__ ((__const__));



extern GType gdk_device_pad_feature_get_type (void) __attribute__ ((__const__));



extern GType gdk_device_tool_type_get_type (void) __attribute__ ((__const__));



extern GType gdk_drag_action_get_type (void) __attribute__ ((__const__));

extern GType gdk_drag_cancel_reason_get_type (void) __attribute__ ((__const__));

extern GType gdk_drag_protocol_get_type (void) __attribute__ ((__const__));



extern GType gdk_filter_return_get_type (void) __attribute__ ((__const__));

extern GType gdk_event_type_get_type (void) __attribute__ ((__const__));

extern GType gdk_visibility_state_get_type (void) __attribute__ ((__const__));

extern GType gdk_touchpad_gesture_phase_get_type (void) __attribute__ ((__const__));

extern GType gdk_scroll_direction_get_type (void) __attribute__ ((__const__));

extern GType gdk_notify_type_get_type (void) __attribute__ ((__const__));

extern GType gdk_crossing_mode_get_type (void) __attribute__ ((__const__));

extern GType gdk_property_state_get_type (void) __attribute__ ((__const__));

extern GType gdk_window_state_get_type (void) __attribute__ ((__const__));

extern GType gdk_setting_action_get_type (void) __attribute__ ((__const__));

extern GType gdk_owner_change_get_type (void) __attribute__ ((__const__));



extern GType gdk_frame_clock_phase_get_type (void) __attribute__ ((__const__));



extern GType gdk_subpixel_layout_get_type (void) __attribute__ ((__const__));



extern GType gdk_prop_mode_get_type (void) __attribute__ ((__const__));



extern GType gdk_seat_capabilities_get_type (void) __attribute__ ((__const__));



extern GType gdk_byte_order_get_type (void) __attribute__ ((__const__));

extern GType gdk_modifier_type_get_type (void) __attribute__ ((__const__));

extern GType gdk_modifier_intent_get_type (void) __attribute__ ((__const__));

extern GType gdk_status_get_type (void) __attribute__ ((__const__));

extern GType gdk_grab_status_get_type (void) __attribute__ ((__const__));

extern GType gdk_grab_ownership_get_type (void) __attribute__ ((__const__));

extern GType gdk_event_mask_get_type (void) __attribute__ ((__const__));

extern GType gdk_gl_error_get_type (void) __attribute__ ((__const__));

extern GType gdk_window_type_hint_get_type (void) __attribute__ ((__const__));

extern GType gdk_axis_use_get_type (void) __attribute__ ((__const__));

extern GType gdk_axis_flags_get_type (void) __attribute__ ((__const__));



extern GType gdk_visual_type_get_type (void) __attribute__ ((__const__));



extern GType gdk_window_window_class_get_type (void) __attribute__ ((__const__));

extern GType gdk_window_type_get_type (void) __attribute__ ((__const__));

extern GType gdk_window_attributes_type_get_type (void) __attribute__ ((__const__));

extern GType gdk_window_hints_get_type (void) __attribute__ ((__const__));

extern GType gdk_wm_decoration_get_type (void) __attribute__ ((__const__));

extern GType gdk_wm_function_get_type (void) __attribute__ ((__const__));

extern GType gdk_gravity_get_type (void) __attribute__ ((__const__));

extern GType gdk_anchor_hints_get_type (void) __attribute__ ((__const__));

extern GType gdk_window_edge_get_type (void) __attribute__ ((__const__));

extern GType gdk_fullscreen_mode_get_type (void) __attribute__ ((__const__));
# 44 "/usr/include/gtk-3.0/gdk/gdk.h" 2



# 1 "/usr/include/gtk-3.0/gdk/gdkglcontext.h" 1
# 28 "/usr/include/gtk-3.0/gdk/gdkglcontext.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 29 "/usr/include/gtk-3.0/gdk/gdkglcontext.h" 2
# 39 "/usr/include/gtk-3.0/gdk/gdkglcontext.h"
extern
GQuark gdk_gl_error_quark (void);

extern
GType gdk_gl_context_get_type (void) __attribute__ ((__const__));

extern
GdkDisplay * gdk_gl_context_get_display (GdkGLContext *context);
extern
GdkWindow * gdk_gl_context_get_window (GdkGLContext *context);
extern
GdkGLContext * gdk_gl_context_get_shared_context (GdkGLContext *context);
extern
void gdk_gl_context_get_version (GdkGLContext *context,
                                                                 int *major,
                                                                 int *minor);
extern
gboolean gdk_gl_context_is_legacy (GdkGLContext *context);

extern
void gdk_gl_context_set_required_version (GdkGLContext *context,
                                                                 int major,
                                                                 int minor);
extern
void gdk_gl_context_get_required_version (GdkGLContext *context,
                                                                 int *major,
                                                                 int *minor);
extern
void gdk_gl_context_set_debug_enabled (GdkGLContext *context,
                                                                 gboolean enabled);
extern
gboolean gdk_gl_context_get_debug_enabled (GdkGLContext *context);
extern
void gdk_gl_context_set_forward_compatible (GdkGLContext *context,
                                                                 gboolean compatible);
extern
gboolean gdk_gl_context_get_forward_compatible (GdkGLContext *context);
extern
void gdk_gl_context_set_use_es (GdkGLContext *context,
                                                                 int use_es);
extern
gboolean gdk_gl_context_get_use_es (GdkGLContext *context);

extern
gboolean gdk_gl_context_realize (GdkGLContext *context,
                                                                 GError **error);
extern
void gdk_gl_context_make_current (GdkGLContext *context);
extern
GdkGLContext * gdk_gl_context_get_current (void);
extern
void gdk_gl_context_clear_current (void);
# 48 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkkeys.h" 1
# 32 "/usr/include/gtk-3.0/gdk/gdkkeys.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkkeys.h" 2





typedef struct _GdkKeymapKey GdkKeymapKey;
# 57 "/usr/include/gtk-3.0/gdk/gdkkeys.h"
struct _GdkKeymapKey
{
  guint keycode;
  gint group;
  gint level;
};
# 80 "/usr/include/gtk-3.0/gdk/gdkkeys.h"
extern
GType gdk_keymap_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "gdk_keymap_get_for_display" "' instead"))) extern
GdkKeymap* gdk_keymap_get_default (void);
extern
GdkKeymap* gdk_keymap_get_for_display (GdkDisplay *display);

extern
guint gdk_keymap_lookup_key (GdkKeymap *keymap,
          const GdkKeymapKey *key);
extern
gboolean gdk_keymap_translate_keyboard_state (GdkKeymap *keymap,
          guint hardware_keycode,
          GdkModifierType state,
          gint group,
          guint *keyval,
          gint *effective_group,
          gint *level,
          GdkModifierType *consumed_modifiers);
extern
gboolean gdk_keymap_get_entries_for_keyval (GdkKeymap *keymap,
          guint keyval,
          GdkKeymapKey **keys,
          gint *n_keys);
extern
gboolean gdk_keymap_get_entries_for_keycode (GdkKeymap *keymap,
          guint hardware_keycode,
          GdkKeymapKey **keys,
          guint **keyvals,
          gint *n_entries);

extern
PangoDirection gdk_keymap_get_direction (GdkKeymap *keymap);
extern
gboolean gdk_keymap_have_bidi_layouts (GdkKeymap *keymap);
extern
gboolean gdk_keymap_get_caps_lock_state (GdkKeymap *keymap);
extern
gboolean gdk_keymap_get_num_lock_state (GdkKeymap *keymap);
extern
gboolean gdk_keymap_get_scroll_lock_state (GdkKeymap *keymap);
extern
guint gdk_keymap_get_modifier_state (GdkKeymap *keymap);
extern
void gdk_keymap_add_virtual_modifiers (GdkKeymap *keymap,
                                                    GdkModifierType *state);
extern
gboolean gdk_keymap_map_virtual_modifiers (GdkKeymap *keymap,
                                                    GdkModifierType *state);
extern
GdkModifierType gdk_keymap_get_modifier_mask (GdkKeymap *keymap,
                                                    GdkModifierIntent intent);




extern
gchar* gdk_keyval_name (guint keyval) __attribute__ ((__const__));

extern
guint gdk_keyval_from_name (const gchar *keyval_name);
extern
void gdk_keyval_convert_case (guint symbol,
      guint *lower,
      guint *upper);
extern
guint gdk_keyval_to_upper (guint keyval) __attribute__ ((__const__));
extern
guint gdk_keyval_to_lower (guint keyval) __attribute__ ((__const__));
extern
gboolean gdk_keyval_is_upper (guint keyval) __attribute__ ((__const__));
extern
gboolean gdk_keyval_is_lower (guint keyval) __attribute__ ((__const__));

extern
guint32 gdk_keyval_to_unicode (guint keyval) __attribute__ ((__const__));
extern
guint gdk_unicode_to_keyval (guint32 wc) __attribute__ ((__const__));
# 49 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkkeysyms.h" 1
# 50 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkmain.h" 1
# 32 "/usr/include/gtk-3.0/gdk/gdkmain.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkmain.h" 2
# 43 "/usr/include/gtk-3.0/gdk/gdkmain.h"
extern
void gdk_parse_args (gint *argc,
                                                           gchar ***argv);
extern
void gdk_init (gint *argc,
                                                           gchar ***argv);
extern
gboolean gdk_init_check (gint *argc,
                                                           gchar ***argv);
__attribute__((__deprecated__)) extern
void gdk_add_option_entries_libgtk_only (GOptionGroup *group);
__attribute__((__deprecated__)) extern
void gdk_pre_parse_libgtk_only (void);

extern
const gchar * gdk_get_program_class (void);
extern
void gdk_set_program_class (const gchar *program_class);

extern
void gdk_notify_startup_complete (void);
extern
void gdk_notify_startup_complete_with_id (const gchar* startup_id);



__attribute__((__deprecated__("Use '" "gdk_x11_display_error_trap_push" "' instead"))) extern
void gdk_error_trap_push (void);

__attribute__((__deprecated__("Use '" "gdk_x11_display_error_trap_pop" "' instead"))) extern
__attribute__((warn_unused_result)) gint gdk_error_trap_pop (void);
__attribute__((__deprecated__("Use '" "gdk_x11_display_error_trap_pop_ignored" "' instead"))) extern
void gdk_error_trap_pop_ignored (void);


extern
const gchar * gdk_get_display_arg_name (void);

__attribute__((__deprecated__("Use '" "gdk_display_get_name (gdk_display_get_default ())" "' instead"))) extern
gchar* gdk_get_display (void);


__attribute__((__deprecated__("Use '" "gdk_device_grab" "' instead"))) extern
GdkGrabStatus gdk_pointer_grab (GdkWindow *window,
                                      gboolean owner_events,
                                      GdkEventMask event_mask,
                                      GdkWindow *confine_to,
                                      GdkCursor *cursor,
                                      guint32 time_);
__attribute__((__deprecated__("Use '" "gdk_device_grab" "' instead"))) extern
GdkGrabStatus gdk_keyboard_grab (GdkWindow *window,
                                      gboolean owner_events,
                                      guint32 time_);



__attribute__((__deprecated__("Use '" "gdk_device_ungrab" "' instead"))) extern
void gdk_pointer_ungrab (guint32 time_);
__attribute__((__deprecated__("Use '" "gdk_device_ungrab" "' instead"))) extern
void gdk_keyboard_ungrab (guint32 time_);
__attribute__((__deprecated__("Use '" "gdk_display_device_is_grabbed" "' instead"))) extern
gboolean gdk_pointer_is_grabbed (void);


__attribute__((__deprecated__)) extern
gint gdk_screen_width (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
gint gdk_screen_height (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
gint gdk_screen_width_mm (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
gint gdk_screen_height_mm (void) __attribute__ ((__const__));

__attribute__((__deprecated__("Use '" "gdk_display_set_double_click_time" "' instead"))) extern
void gdk_set_double_click_time (guint msec);

__attribute__((__deprecated__("Use '" "gdk_display_beep" "' instead"))) extern
void gdk_beep (void);

__attribute__((__deprecated__("Use '" "gdk_display_flush" "' instead"))) extern
void gdk_flush (void);

extern
void gdk_disable_multidevice (void);

extern
void gdk_set_allowed_backends (const gchar *backends);
# 51 "/usr/include/gtk-3.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkpango.h" 1
# 26 "/usr/include/gtk-3.0/gdk/gdkpango.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 27 "/usr/include/gtk-3.0/gdk/gdkpango.h" 2





extern
PangoContext *gdk_pango_context_get_for_screen (GdkScreen *screen);
extern
PangoContext *gdk_pango_context_get_for_display (GdkDisplay *display);
extern
PangoContext *gdk_pango_context_get (void);
# 46 "/usr/include/gtk-3.0/gdk/gdkpango.h"
extern
cairo_region_t *gdk_pango_layout_line_get_clip_region (PangoLayoutLine *line,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     const gint *index_ranges,
                                                     gint n_ranges);
extern
cairo_region_t *gdk_pango_layout_get_clip_region (PangoLayout *layout,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     const gint *index_ranges,
                                                     gint n_ranges);
# 53 "/usr/include/gtk-3.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkproperty.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkproperty.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 34 "/usr/include/gtk-3.0/gdk/gdkproperty.h" 2
# 47 "/usr/include/gtk-3.0/gdk/gdkproperty.h"
typedef enum
{
  GDK_PROP_MODE_REPLACE,
  GDK_PROP_MODE_PREPEND,
  GDK_PROP_MODE_APPEND
} GdkPropMode;


extern
GdkAtom gdk_atom_intern (const gchar *atom_name,
                         gboolean only_if_exists);
extern
GdkAtom gdk_atom_intern_static_string (const gchar *atom_name);
extern
gchar* gdk_atom_name (GdkAtom atom);


extern
gboolean gdk_property_get (GdkWindow *window,
                              GdkAtom property,
                              GdkAtom type,
                              gulong offset,
                              gulong length,
                              gint pdelete,
                              GdkAtom *actual_property_type,
                              gint *actual_format,
                              gint *actual_length,
                              guchar **data);
extern
void gdk_property_change (GdkWindow *window,
                              GdkAtom property,
                              GdkAtom type,
                              gint format,
                              GdkPropMode mode,
                              const guchar *data,
                              gint nelements);
extern
void gdk_property_delete (GdkWindow *window,
                              GdkAtom property);

extern
gint gdk_text_property_to_utf8_list_for_display (GdkDisplay *display,
                                                   GdkAtom encoding,
                                                   gint format,
                                                   const guchar *text,
                                                   gint length,
                                                   gchar ***list);

extern
gchar *gdk_utf8_to_string_target (const gchar *str);
# 55 "/usr/include/gtk-3.0/gdk/gdk.h" 2




# 1 "/usr/include/gtk-3.0/gdk/gdkselection.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkselection.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 34 "/usr/include/gtk-3.0/gdk/gdkselection.h" 2
# 155 "/usr/include/gtk-3.0/gdk/gdkselection.h"
extern
gboolean gdk_selection_owner_set (GdkWindow *owner,
        GdkAtom selection,
        guint32 time_,
        gboolean send_event);
extern
GdkWindow* gdk_selection_owner_get (GdkAtom selection);
extern
gboolean gdk_selection_owner_set_for_display (GdkDisplay *display,
      GdkWindow *owner,
      GdkAtom selection,
      guint32 time_,
      gboolean send_event);
extern
GdkWindow *gdk_selection_owner_get_for_display (GdkDisplay *display,
      GdkAtom selection);
# 186 "/usr/include/gtk-3.0/gdk/gdkselection.h"
extern
void gdk_selection_convert (GdkWindow *requestor,
        GdkAtom selection,
        GdkAtom target,
        guint32 time_);
extern
gint gdk_selection_property_get (GdkWindow *requestor,
           guchar **data,
           GdkAtom *prop_type,
           gint *prop_format);

extern
void gdk_selection_send_notify (GdkWindow *requestor,
          GdkAtom selection,
          GdkAtom target,
          GdkAtom property,
          guint32 time_);

extern
void gdk_selection_send_notify_for_display (GdkDisplay *display,
        GdkWindow *requestor,
        GdkAtom selection,
        GdkAtom target,
        GdkAtom property,
        guint32 time_);
# 60 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdktestutils.h" 1
# 42 "/usr/include/gtk-3.0/gdk/gdktestutils.h"
extern
void gdk_test_render_sync (GdkWindow *window);
extern
gboolean gdk_test_simulate_key (GdkWindow *window,
                                                 gint x,
                                                 gint y,
                                                 guint keyval,
                                                 GdkModifierType modifiers,
                                                 GdkEventType key_pressrelease);
extern
gboolean gdk_test_simulate_button (GdkWindow *window,
                                                 gint x,
                                                 gint y,
                                                 guint button,
                                                 GdkModifierType modifiers,
                                                 GdkEventType button_pressrelease);
# 61 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-3.0/gdk/gdkthreads.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkthreads.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 34 "/usr/include/gtk-3.0/gdk/gdkthreads.h" 2
# 43 "/usr/include/gtk-3.0/gdk/gdkthreads.h"
__attribute__((__deprecated__)) extern
void gdk_threads_init (void);
__attribute__((__deprecated__)) extern
void gdk_threads_enter (void);
__attribute__((__deprecated__)) extern
void gdk_threads_leave (void);
__attribute__((__deprecated__)) extern
void gdk_threads_set_lock_functions (GCallback enter_fn,
                                               GCallback leave_fn);

extern
guint gdk_threads_add_idle_full (gint priority,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
extern
guint gdk_threads_add_idle (GSourceFunc function,
                                               gpointer data);
extern
guint gdk_threads_add_timeout_full (gint priority,
                                               guint interval,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
extern
guint gdk_threads_add_timeout (guint interval,
                                               GSourceFunc function,
                                               gpointer data);
extern
guint gdk_threads_add_timeout_seconds_full (gint priority,
                                               guint interval,
                                               GSourceFunc function,
                                               gpointer data,
                                               GDestroyNotify notify);
extern
guint gdk_threads_add_timeout_seconds (guint interval,
                                               GSourceFunc function,
                                               gpointer data);
# 62 "/usr/include/gtk-3.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-3.0/gdk/gdkvisual.h" 1
# 33 "/usr/include/gtk-3.0/gdk/gdkvisual.h"
# 1 "/usr/include/gtk-3.0/gdk/gdkversionmacros.h" 1
# 34 "/usr/include/gtk-3.0/gdk/gdkvisual.h" 2
# 65 "/usr/include/gtk-3.0/gdk/gdkvisual.h"
typedef enum
{
  GDK_VISUAL_STATIC_GRAY,
  GDK_VISUAL_GRAYSCALE,
  GDK_VISUAL_STATIC_COLOR,
  GDK_VISUAL_PSEUDO_COLOR,
  GDK_VISUAL_TRUE_COLOR,
  GDK_VISUAL_DIRECT_COLOR
} GdkVisualType;
# 82 "/usr/include/gtk-3.0/gdk/gdkvisual.h"
extern
GType gdk_visual_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
gint gdk_visual_get_best_depth (void);
__attribute__((__deprecated__)) extern
GdkVisualType gdk_visual_get_best_type (void);
__attribute__((__deprecated__("Use '" "gdk_screen_get_system_visual" "' instead"))) extern
GdkVisual* gdk_visual_get_system (void);
__attribute__((__deprecated__)) extern
GdkVisual* gdk_visual_get_best (void);
__attribute__((__deprecated__)) extern
GdkVisual* gdk_visual_get_best_with_depth (gint depth);
__attribute__((__deprecated__)) extern
GdkVisual* gdk_visual_get_best_with_type (GdkVisualType visual_type);
__attribute__((__deprecated__)) extern
GdkVisual* gdk_visual_get_best_with_both (gint depth,
                                              GdkVisualType visual_type);

__attribute__((__deprecated__)) extern
void gdk_query_depths (gint **depths,
                             gint *count);
__attribute__((__deprecated__)) extern
void gdk_query_visual_types (GdkVisualType **visual_types,
                             gint *count);

__attribute__((__deprecated__("Use '" "gdk_screen_list_visuals" "' instead"))) extern
GList* gdk_list_visuals (void);

extern
GdkScreen *gdk_visual_get_screen (GdkVisual *visual);

extern
GdkVisualType gdk_visual_get_visual_type (GdkVisual *visual);
extern
gint gdk_visual_get_depth (GdkVisual *visual);
__attribute__((__deprecated__)) extern
GdkByteOrder gdk_visual_get_byte_order (GdkVisual *visual);
__attribute__((__deprecated__)) extern
gint gdk_visual_get_colormap_size (GdkVisual *visual);
__attribute__((__deprecated__)) extern
gint gdk_visual_get_bits_per_rgb (GdkVisual *visual);
extern
void gdk_visual_get_red_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);
extern
void gdk_visual_get_green_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);
extern
void gdk_visual_get_blue_pixel_details (GdkVisual *visual,
                                                  guint32 *mask,
                                                  gint *shift,
                                                  gint *precision);
# 64 "/usr/include/gtk-3.0/gdk/gdk.h" 2






# 1 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h" 1
# 24 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
typedef GdkAppLaunchContext *GdkAppLaunchContext_autoptr; typedef GList *GdkAppLaunchContext_listautoptr; typedef GSList *GdkAppLaunchContext_slistautoptr; typedef GQueue *GdkAppLaunchContext_queueautoptr;
# 24 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 24 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 24 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkAppLaunchContext (GdkAppLaunchContext *_ptr) { if (_ptr) (g_object_unref) ((GdkAppLaunchContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkAppLaunchContext (GdkAppLaunchContext **_ptr) { glib_autoptr_clear_GdkAppLaunchContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkAppLaunchContext (void *_ptr) { (g_object_unref) ((GdkAppLaunchContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkAppLaunchContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkAppLaunchContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkAppLaunchContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkAppLaunchContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkAppLaunchContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkAppLaunchContext); }
# 24 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkCursor *GdkCursor_autoptr; typedef GList *GdkCursor_listautoptr; typedef GSList *GdkCursor_slistautoptr; typedef GQueue *GdkCursor_queueautoptr;
# 25 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 25 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 25 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkCursor (GdkCursor *_ptr) { if (_ptr) (g_object_unref) ((GdkCursor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkCursor (GdkCursor **_ptr) { glib_autoptr_clear_GdkCursor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkCursor (void *_ptr) { (g_object_unref) ((GdkCursor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkCursor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkCursor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkCursor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkCursor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkCursor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkCursor); }
# 25 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkDevice *GdkDevice_autoptr; typedef GList *GdkDevice_listautoptr; typedef GSList *GdkDevice_slistautoptr; typedef GQueue *GdkDevice_queueautoptr;
# 26 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 26 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 26 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkDevice (GdkDevice *_ptr) { if (_ptr) (g_object_unref) ((GdkDevice *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkDevice (GdkDevice **_ptr) { glib_autoptr_clear_GdkDevice (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkDevice (void *_ptr) { (g_object_unref) ((GdkDevice *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkDevice (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkDevice); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkDevice (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkDevice); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkDevice (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkDevice); }
# 26 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkDeviceManager *GdkDeviceManager_autoptr; typedef GList *GdkDeviceManager_listautoptr; typedef GSList *GdkDeviceManager_slistautoptr; typedef GQueue *GdkDeviceManager_queueautoptr;
# 27 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 27 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 27 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkDeviceManager (GdkDeviceManager *_ptr) { if (_ptr) (g_object_unref) ((GdkDeviceManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkDeviceManager (GdkDeviceManager **_ptr) { glib_autoptr_clear_GdkDeviceManager (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkDeviceManager (void *_ptr) { (g_object_unref) ((GdkDeviceManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkDeviceManager (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkDeviceManager); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkDeviceManager (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkDeviceManager); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkDeviceManager (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkDeviceManager); }
# 27 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkDisplay *GdkDisplay_autoptr; typedef GList *GdkDisplay_listautoptr; typedef GSList *GdkDisplay_slistautoptr; typedef GQueue *GdkDisplay_queueautoptr;
# 28 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 28 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 28 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkDisplay (GdkDisplay *_ptr) { if (_ptr) (g_object_unref) ((GdkDisplay *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkDisplay (GdkDisplay **_ptr) { glib_autoptr_clear_GdkDisplay (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkDisplay (void *_ptr) { (g_object_unref) ((GdkDisplay *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkDisplay (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkDisplay); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkDisplay (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkDisplay); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkDisplay (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkDisplay); }
# 28 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkDisplayManager *GdkDisplayManager_autoptr; typedef GList *GdkDisplayManager_listautoptr; typedef GSList *GdkDisplayManager_slistautoptr; typedef GQueue *GdkDisplayManager_queueautoptr;
# 29 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 29 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkDisplayManager (GdkDisplayManager *_ptr) { if (_ptr) (g_object_unref) ((GdkDisplayManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkDisplayManager (GdkDisplayManager **_ptr) { glib_autoptr_clear_GdkDisplayManager (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkDisplayManager (void *_ptr) { (g_object_unref) ((GdkDisplayManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkDisplayManager (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkDisplayManager); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkDisplayManager (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkDisplayManager); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkDisplayManager (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkDisplayManager); }
# 29 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkDragContext *GdkDragContext_autoptr; typedef GList *GdkDragContext_listautoptr; typedef GSList *GdkDragContext_slistautoptr; typedef GQueue *GdkDragContext_queueautoptr;
# 30 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 30 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkDragContext (GdkDragContext *_ptr) { if (_ptr) (g_object_unref) ((GdkDragContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkDragContext (GdkDragContext **_ptr) { glib_autoptr_clear_GdkDragContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkDragContext (void *_ptr) { (g_object_unref) ((GdkDragContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkDragContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkDragContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkDragContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkDragContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkDragContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkDragContext); }
# 30 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkFrameClock *GdkFrameClock_autoptr; typedef GList *GdkFrameClock_listautoptr; typedef GSList *GdkFrameClock_slistautoptr; typedef GQueue *GdkFrameClock_queueautoptr;
# 31 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 31 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkFrameClock (GdkFrameClock *_ptr) { if (_ptr) (g_object_unref) ((GdkFrameClock *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkFrameClock (GdkFrameClock **_ptr) { glib_autoptr_clear_GdkFrameClock (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkFrameClock (void *_ptr) { (g_object_unref) ((GdkFrameClock *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkFrameClock (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkFrameClock); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkFrameClock (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkFrameClock); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkFrameClock (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkFrameClock); }
# 31 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkGLContext *GdkGLContext_autoptr; typedef GList *GdkGLContext_listautoptr; typedef GSList *GdkGLContext_slistautoptr; typedef GQueue *GdkGLContext_queueautoptr;
# 32 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 32 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 32 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkGLContext (GdkGLContext *_ptr) { if (_ptr) (g_object_unref) ((GdkGLContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkGLContext (GdkGLContext **_ptr) { glib_autoptr_clear_GdkGLContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkGLContext (void *_ptr) { (g_object_unref) ((GdkGLContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkGLContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkGLContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkGLContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkGLContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkGLContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkGLContext); }
# 32 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkKeymap *GdkKeymap_autoptr; typedef GList *GdkKeymap_listautoptr; typedef GSList *GdkKeymap_slistautoptr; typedef GQueue *GdkKeymap_queueautoptr;
# 33 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 33 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkKeymap (GdkKeymap *_ptr) { if (_ptr) (g_object_unref) ((GdkKeymap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkKeymap (GdkKeymap **_ptr) { glib_autoptr_clear_GdkKeymap (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkKeymap (void *_ptr) { (g_object_unref) ((GdkKeymap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkKeymap (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkKeymap); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkKeymap (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkKeymap); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkKeymap (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkKeymap); }
# 33 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkScreen *GdkScreen_autoptr; typedef GList *GdkScreen_listautoptr; typedef GSList *GdkScreen_slistautoptr; typedef GQueue *GdkScreen_queueautoptr;
# 34 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 34 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkScreen (GdkScreen *_ptr) { if (_ptr) (g_object_unref) ((GdkScreen *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkScreen (GdkScreen **_ptr) { glib_autoptr_clear_GdkScreen (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkScreen (void *_ptr) { (g_object_unref) ((GdkScreen *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkScreen (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkScreen); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkScreen (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkScreen); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkScreen (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkScreen); }
# 34 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkVisual *GdkVisual_autoptr; typedef GList *GdkVisual_listautoptr; typedef GSList *GdkVisual_slistautoptr; typedef GQueue *GdkVisual_queueautoptr;
# 35 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 35 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 35 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkVisual (GdkVisual *_ptr) { if (_ptr) (g_object_unref) ((GdkVisual *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkVisual (GdkVisual **_ptr) { glib_autoptr_clear_GdkVisual (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkVisual (void *_ptr) { (g_object_unref) ((GdkVisual *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkVisual (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkVisual); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkVisual (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkVisual); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkVisual (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkVisual); }
# 35 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkWindow *GdkWindow_autoptr; typedef GList *GdkWindow_listautoptr; typedef GSList *GdkWindow_slistautoptr; typedef GQueue *GdkWindow_queueautoptr;
# 36 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 36 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkWindow (GdkWindow *_ptr) { if (_ptr) (g_object_unref) ((GdkWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkWindow (GdkWindow **_ptr) { glib_autoptr_clear_GdkWindow (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkWindow (void *_ptr) { (g_object_unref) ((GdkWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkWindow (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkWindow); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkWindow (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkWindow); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkWindow (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkWindow); }
# 36 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop

typedef GdkEvent *GdkEvent_autoptr; typedef GList *GdkEvent_listautoptr; typedef GSList *GdkEvent_slistautoptr; typedef GQueue *GdkEvent_queueautoptr;
# 38 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 38 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkEvent (GdkEvent *_ptr) { if (_ptr) (gdk_event_free) ((GdkEvent *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkEvent (GdkEvent **_ptr) { glib_autoptr_clear_GdkEvent (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkEvent (void *_ptr) { (gdk_event_free) ((GdkEvent *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkEvent (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkEvent); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkEvent (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkEvent); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkEvent (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkEvent); }
# 38 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkFrameTimings *GdkFrameTimings_autoptr; typedef GList *GdkFrameTimings_listautoptr; typedef GSList *GdkFrameTimings_slistautoptr; typedef GQueue *GdkFrameTimings_queueautoptr;
# 39 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 39 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 39 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkFrameTimings (GdkFrameTimings *_ptr) { if (_ptr) (gdk_frame_timings_unref) ((GdkFrameTimings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkFrameTimings (GdkFrameTimings **_ptr) { glib_autoptr_clear_GdkFrameTimings (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkFrameTimings (void *_ptr) { (gdk_frame_timings_unref) ((GdkFrameTimings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkFrameTimings (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkFrameTimings); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkFrameTimings (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkFrameTimings); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkFrameTimings (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkFrameTimings); }
# 39 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
typedef GdkRGBA *GdkRGBA_autoptr; typedef GList *GdkRGBA_listautoptr; typedef GSList *GdkRGBA_slistautoptr; typedef GQueue *GdkRGBA_queueautoptr;
# 40 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic push
# 40 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 40 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GdkRGBA (GdkRGBA *_ptr) { if (_ptr) (gdk_rgba_free) ((GdkRGBA *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GdkRGBA (GdkRGBA **_ptr) { glib_autoptr_clear_GdkRGBA (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GdkRGBA (void *_ptr) { (gdk_rgba_free) ((GdkRGBA *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GdkRGBA (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GdkRGBA); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GdkRGBA (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GdkRGBA); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GdkRGBA (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GdkRGBA); }
# 40 "/usr/include/gtk-3.0/gdk/gdk-autocleanup.h"
#pragma clang diagnostic pop
# 71 "/usr/include/gtk-3.0/gdk/gdk.h" 2
# 31 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h" 1
# 30 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkdialog.h" 1
# 32 "/usr/include/gtk-3.0/gtk/gtkdialog.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkwindow.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkapplication.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkapplication.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkwidget.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkenums.h" 1
# 73 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_ALIGN_FILL,
  GTK_ALIGN_START,
  GTK_ALIGN_END,
  GTK_ALIGN_CENTER,
  GTK_ALIGN_BASELINE
} GtkAlign;
# 92 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_ARROW_UP,
  GTK_ARROW_DOWN,
  GTK_ARROW_LEFT,
  GTK_ARROW_RIGHT,
  GTK_ARROW_NONE
} GtkArrowType;
# 116 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_BASELINE_POSITION_TOP,
  GTK_BASELINE_POSITION_CENTER,
  GTK_BASELINE_POSITION_BOTTOM
} GtkBaselinePosition;
# 142 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_DELETE_CHARS,
  GTK_DELETE_WORD_ENDS,
  GTK_DELETE_WORDS,
  GTK_DELETE_DISPLAY_LINES,
  GTK_DELETE_DISPLAY_LINE_ENDS,
  GTK_DELETE_PARAGRAPH_ENDS,
  GTK_DELETE_PARAGRAPHS,
  GTK_DELETE_WHITESPACE
} GtkDeleteType;
# 166 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_DIR_TAB_FORWARD,
  GTK_DIR_TAB_BACKWARD,
  GTK_DIR_UP,
  GTK_DIR_DOWN,
  GTK_DIR_LEFT,
  GTK_DIR_RIGHT
} GtkDirectionType;
# 188 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_ICON_SIZE_INVALID,
  GTK_ICON_SIZE_MENU,
  GTK_ICON_SIZE_SMALL_TOOLBAR,
  GTK_ICON_SIZE_LARGE_TOOLBAR,
  GTK_ICON_SIZE_BUTTON,
  GTK_ICON_SIZE_DND,
  GTK_ICON_SIZE_DIALOG
} GtkIconSize;
# 209 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_SENSITIVITY_AUTO,
  GTK_SENSITIVITY_ON,
  GTK_SENSITIVITY_OFF
} GtkSensitivityType;
# 225 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_TEXT_DIR_NONE,
  GTK_TEXT_DIR_LTR,
  GTK_TEXT_DIR_RTL
} GtkTextDirection;
# 242 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_JUSTIFY_LEFT,
  GTK_JUSTIFY_RIGHT,
  GTK_JUSTIFY_CENTER,
  GTK_JUSTIFY_FILL
} GtkJustification;
# 259 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_MENU_DIR_PARENT,
  GTK_MENU_DIR_CHILD,
  GTK_MENU_DIR_NEXT,
  GTK_MENU_DIR_PREV
} GtkMenuDirectionType;
# 277 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_MESSAGE_INFO,
  GTK_MESSAGE_WARNING,
  GTK_MESSAGE_QUESTION,
  GTK_MESSAGE_ERROR,
  GTK_MESSAGE_OTHER
} GtkMessageType;
# 299 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_MOVEMENT_LOGICAL_POSITIONS,
  GTK_MOVEMENT_VISUAL_POSITIONS,
  GTK_MOVEMENT_WORDS,
  GTK_MOVEMENT_DISPLAY_LINES,
  GTK_MOVEMENT_DISPLAY_LINE_ENDS,
  GTK_MOVEMENT_PARAGRAPHS,
  GTK_MOVEMENT_PARAGRAPH_ENDS,
  GTK_MOVEMENT_PAGES,
  GTK_MOVEMENT_BUFFER_ENDS,
  GTK_MOVEMENT_HORIZONTAL_PAGES
} GtkMovementStep;
# 322 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_SCROLL_STEPS,
  GTK_SCROLL_PAGES,
  GTK_SCROLL_ENDS,
  GTK_SCROLL_HORIZONTAL_STEPS,
  GTK_SCROLL_HORIZONTAL_PAGES,
  GTK_SCROLL_HORIZONTAL_ENDS
} GtkScrollStep;
# 341 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_ORIENTATION_HORIZONTAL,
  GTK_ORIENTATION_VERTICAL
} GtkOrientation;
# 355 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PACK_START,
  GTK_PACK_END
} GtkPackType;
# 372 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_POS_LEFT,
  GTK_POS_RIGHT,
  GTK_POS_TOP,
  GTK_POS_BOTTOM
} GtkPositionType;
# 388 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_RELIEF_NORMAL,
  GTK_RELIEF_HALF,
  GTK_RELIEF_NONE
} GtkReliefStyle;
# 416 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_SCROLL_NONE,
  GTK_SCROLL_JUMP,
  GTK_SCROLL_STEP_BACKWARD,
  GTK_SCROLL_STEP_FORWARD,
  GTK_SCROLL_PAGE_BACKWARD,
  GTK_SCROLL_PAGE_FORWARD,
  GTK_SCROLL_STEP_UP,
  GTK_SCROLL_STEP_DOWN,
  GTK_SCROLL_PAGE_UP,
  GTK_SCROLL_PAGE_DOWN,
  GTK_SCROLL_STEP_LEFT,
  GTK_SCROLL_STEP_RIGHT,
  GTK_SCROLL_PAGE_LEFT,
  GTK_SCROLL_PAGE_RIGHT,
  GTK_SCROLL_START,
  GTK_SCROLL_END
} GtkScrollType;
# 453 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_SELECTION_NONE,
  GTK_SELECTION_SINGLE,
  GTK_SELECTION_BROWSE,
  GTK_SELECTION_MULTIPLE
} GtkSelectionMode;
# 475 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_SHADOW_NONE,
  GTK_SHADOW_IN,
  GTK_SHADOW_OUT,
  GTK_SHADOW_ETCHED_IN,
  GTK_SHADOW_ETCHED_OUT
} GtkShadowType;
# 508 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_STATE_NORMAL,
  GTK_STATE_ACTIVE,
  GTK_STATE_PRELIGHT,
  GTK_STATE_SELECTED,
  GTK_STATE_INSENSITIVE,
  GTK_STATE_INCONSISTENT,
  GTK_STATE_FOCUSED
} GtkStateType;
# 533 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_TOOLBAR_ICONS,
  GTK_TOOLBAR_TEXT,
  GTK_TOOLBAR_BOTH,
  GTK_TOOLBAR_BOTH_HORIZ
} GtkToolbarStyle;
# 553 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_WRAP_NONE,
  GTK_WRAP_CHAR,
  GTK_WRAP_WORD,
  GTK_WRAP_WORD_CHAR
} GtkWrapMode;
# 568 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_SORT_ASCENDING,
  GTK_SORT_DESCENDING
} GtkSortType;
# 586 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_IM_PREEDIT_NOTHING,
  GTK_IM_PREEDIT_CALLBACK,
  GTK_IM_PREEDIT_NONE
} GtkIMPreeditStyle;
# 604 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_IM_STATUS_NOTHING,
  GTK_IM_STATUS_CALLBACK,
  GTK_IM_STATUS_NONE
} GtkIMStatusStyle;
# 621 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PACK_DIRECTION_LTR,
  GTK_PACK_DIRECTION_RTL,
  GTK_PACK_DIRECTION_TTB,
  GTK_PACK_DIRECTION_BTT
} GtkPackDirection;
# 638 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PRINT_PAGES_ALL,
  GTK_PRINT_PAGES_CURRENT,
  GTK_PRINT_PAGES_RANGES,
  GTK_PRINT_PAGES_SELECTION
} GtkPrintPages;
# 654 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PAGE_SET_ALL,
  GTK_PAGE_SET_EVEN,
  GTK_PAGE_SET_ODD
} GtkPageSet;
# 675 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM,
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP,
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM,
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP,
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT,
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT,
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT,
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT
} GtkNumberUpLayout;
# 696 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PAGE_ORIENTATION_PORTRAIT,
  GTK_PAGE_ORIENTATION_LANDSCAPE,
  GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT,
  GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE
} GtkPageOrientation;
# 713 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PRINT_QUALITY_LOW,
  GTK_PRINT_QUALITY_NORMAL,
  GTK_PRINT_QUALITY_HIGH,
  GTK_PRINT_QUALITY_DRAFT
} GtkPrintQuality;
# 729 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PRINT_DUPLEX_SIMPLEX,
  GTK_PRINT_DUPLEX_HORIZONTAL,
  GTK_PRINT_DUPLEX_VERTICAL
} GtkPrintDuplex;
# 746 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_UNIT_NONE,
  GTK_UNIT_POINTS,
  GTK_UNIT_INCH,
  GTK_UNIT_MM
} GtkUnit;
# 765 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_TREE_VIEW_GRID_LINES_NONE,
  GTK_TREE_VIEW_GRID_LINES_HORIZONTAL,
  GTK_TREE_VIEW_GRID_LINES_VERTICAL,
  GTK_TREE_VIEW_GRID_LINES_BOTH
} GtkTreeViewGridLines;
# 788 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_DRAG_RESULT_SUCCESS,
  GTK_DRAG_RESULT_NO_TARGET,
  GTK_DRAG_RESULT_USER_CANCELLED,
  GTK_DRAG_RESULT_TIMEOUT_EXPIRED,
  GTK_DRAG_RESULT_GRAB_BROKEN,
  GTK_DRAG_RESULT_ERROR
} GtkDragResult;
# 808 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum {
  GTK_SIZE_GROUP_NONE,
  GTK_SIZE_GROUP_HORIZONTAL,
  GTK_SIZE_GROUP_VERTICAL,
  GTK_SIZE_GROUP_BOTH
} GtkSizeGroupMode;
# 824 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = 0,
  GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT,
  GTK_SIZE_REQUEST_CONSTANT_SIZE
} GtkSizeRequestMode;
# 839 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_SCROLL_MINIMUM = 0,
  GTK_SCROLL_NATURAL
} GtkScrollablePolicy;
# 866 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_STATE_FLAG_NORMAL = 0,
  GTK_STATE_FLAG_ACTIVE = 1 << 0,
  GTK_STATE_FLAG_PRELIGHT = 1 << 1,
  GTK_STATE_FLAG_SELECTED = 1 << 2,
  GTK_STATE_FLAG_INSENSITIVE = 1 << 3,
  GTK_STATE_FLAG_INCONSISTENT = 1 << 4,
  GTK_STATE_FLAG_FOCUSED = 1 << 5,
  GTK_STATE_FLAG_BACKDROP = 1 << 6,
  GTK_STATE_FLAG_DIR_LTR = 1 << 7,
  GTK_STATE_FLAG_DIR_RTL = 1 << 8,
  GTK_STATE_FLAG_LINK = 1 << 9,
  GTK_STATE_FLAG_VISITED = 1 << 10,
  GTK_STATE_FLAG_CHECKED = 1 << 11,
  GTK_STATE_FLAG_DROP_ACTIVE = 1 << 12
} GtkStateFlags;
# 895 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum {
  GTK_REGION_EVEN = 1 << 0,
  GTK_REGION_ODD = 1 << 1,
  GTK_REGION_FIRST = 1 << 2,
  GTK_REGION_LAST = 1 << 3,
  GTK_REGION_ONLY = 1 << 4,
  GTK_REGION_SORTED = 1 << 5
} GtkRegionFlags;
# 918 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum {
  GTK_JUNCTION_NONE = 0,
  GTK_JUNCTION_CORNER_TOPLEFT = 1 << 0,
  GTK_JUNCTION_CORNER_TOPRIGHT = 1 << 1,
  GTK_JUNCTION_CORNER_BOTTOMLEFT = 1 << 2,
  GTK_JUNCTION_CORNER_BOTTOMRIGHT = 1 << 3,
  GTK_JUNCTION_TOP = (GTK_JUNCTION_CORNER_TOPLEFT | GTK_JUNCTION_CORNER_TOPRIGHT),
  GTK_JUNCTION_BOTTOM = (GTK_JUNCTION_CORNER_BOTTOMLEFT | GTK_JUNCTION_CORNER_BOTTOMRIGHT),
  GTK_JUNCTION_LEFT = (GTK_JUNCTION_CORNER_TOPLEFT | GTK_JUNCTION_CORNER_BOTTOMLEFT),
  GTK_JUNCTION_RIGHT = (GTK_JUNCTION_CORNER_TOPRIGHT | GTK_JUNCTION_CORNER_BOTTOMRIGHT)
} GtkJunctionSides;
# 945 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum {
  GTK_BORDER_STYLE_NONE,
  GTK_BORDER_STYLE_SOLID,
  GTK_BORDER_STYLE_INSET,
  GTK_BORDER_STYLE_OUTSET,
  GTK_BORDER_STYLE_HIDDEN,
  GTK_BORDER_STYLE_DOTTED,
  GTK_BORDER_STYLE_DASHED,
  GTK_BORDER_STYLE_DOUBLE,
  GTK_BORDER_STYLE_GROOVE,
  GTK_BORDER_STYLE_RIDGE
} GtkBorderStyle;
# 969 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum {
  GTK_LEVEL_BAR_MODE_CONTINUOUS,
  GTK_LEVEL_BAR_MODE_DISCRETE
} GtkLevelBarMode;
# 1011 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_INPUT_PURPOSE_FREE_FORM,
  GTK_INPUT_PURPOSE_ALPHA,
  GTK_INPUT_PURPOSE_DIGITS,
  GTK_INPUT_PURPOSE_NUMBER,
  GTK_INPUT_PURPOSE_PHONE,
  GTK_INPUT_PURPOSE_URL,
  GTK_INPUT_PURPOSE_EMAIL,
  GTK_INPUT_PURPOSE_NAME,
  GTK_INPUT_PURPOSE_PASSWORD,
  GTK_INPUT_PURPOSE_PIN,
  GTK_INPUT_PURPOSE_TERMINAL,
} GtkInputPurpose;
# 1056 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_INPUT_HINT_NONE = 0,
  GTK_INPUT_HINT_SPELLCHECK = 1 << 0,
  GTK_INPUT_HINT_NO_SPELLCHECK = 1 << 1,
  GTK_INPUT_HINT_WORD_COMPLETION = 1 << 2,
  GTK_INPUT_HINT_LOWERCASE = 1 << 3,
  GTK_INPUT_HINT_UPPERCASE_CHARS = 1 << 4,
  GTK_INPUT_HINT_UPPERCASE_WORDS = 1 << 5,
  GTK_INPUT_HINT_UPPERCASE_SENTENCES = 1 << 6,
  GTK_INPUT_HINT_INHIBIT_OSK = 1 << 7,
  GTK_INPUT_HINT_VERTICAL_WRITING = 1 << 8,
  GTK_INPUT_HINT_EMOJI = 1 << 9,
  GTK_INPUT_HINT_NO_EMOJI = 1 << 10
} GtkInputHints;
# 1093 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PHASE_NONE,
  GTK_PHASE_CAPTURE,
  GTK_PHASE_BUBBLE,
  GTK_PHASE_TARGET
} GtkPropagationPhase;
# 1111 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_EVENT_SEQUENCE_NONE,
  GTK_EVENT_SEQUENCE_CLAIMED,
  GTK_EVENT_SEQUENCE_DENIED
} GtkEventSequenceState;
# 1129 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_PAN_DIRECTION_LEFT,
  GTK_PAN_DIRECTION_RIGHT,
  GTK_PAN_DIRECTION_UP,
  GTK_PAN_DIRECTION_DOWN
} GtkPanDirection;
# 1149 "/usr/include/gtk-3.0/gtk/gtkenums.h"
typedef enum
{
  GTK_POPOVER_CONSTRAINT_NONE,
  GTK_POPOVER_CONSTRAINT_WINDOW
} GtkPopoverConstraint;
# 35 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h" 2
# 57 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h"
typedef enum
{
  GTK_ACCEL_VISIBLE = 1 << 0,
  GTK_ACCEL_LOCKED = 1 << 1,
  GTK_ACCEL_MASK = 0x07
} GtkAccelFlags;



typedef struct _GtkAccelGroup GtkAccelGroup;
typedef struct _GtkAccelGroupClass GtkAccelGroupClass;
typedef struct _GtkAccelGroupPrivate GtkAccelGroupPrivate;
typedef struct _GtkAccelKey GtkAccelKey;
typedef struct _GtkAccelGroupEntry GtkAccelGroupEntry;
typedef gboolean (*GtkAccelGroupActivate) (GtkAccelGroup *accel_group,
        GObject *acceleratable,
        guint keyval,
        GdkModifierType modifier);
# 84 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h"
typedef gboolean (*GtkAccelGroupFindFunc) (GtkAccelKey *key,
        GClosure *closure,
        gpointer data);






struct _GtkAccelGroup
{
  GObject parent;
  GtkAccelGroupPrivate *priv;
};







struct _GtkAccelGroupClass
{
  GObjectClass parent_class;



  void (*accel_changed) (GtkAccelGroup *accel_group,
     guint keyval,
     GdkModifierType modifier,
     GClosure *accel_closure);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};







struct _GtkAccelKey
{
  guint accel_key;
  GdkModifierType accel_mods;
  guint accel_flags : 16;
};



extern
GType gtk_accel_group_get_type (void) __attribute__ ((__const__));
extern
GtkAccelGroup* gtk_accel_group_new (void);
extern
gboolean gtk_accel_group_get_is_locked (GtkAccelGroup *accel_group);
extern
GdkModifierType
               gtk_accel_group_get_modifier_mask (GtkAccelGroup *accel_group);
extern
void gtk_accel_group_lock (GtkAccelGroup *accel_group);
extern
void gtk_accel_group_unlock (GtkAccelGroup *accel_group);
extern
void gtk_accel_group_connect (GtkAccelGroup *accel_group,
         guint accel_key,
         GdkModifierType accel_mods,
         GtkAccelFlags accel_flags,
         GClosure *closure);
extern
void gtk_accel_group_connect_by_path (GtkAccelGroup *accel_group,
         const gchar *accel_path,
         GClosure *closure);
extern
gboolean gtk_accel_group_disconnect (GtkAccelGroup *accel_group,
         GClosure *closure);
extern
gboolean gtk_accel_group_disconnect_key (GtkAccelGroup *accel_group,
         guint accel_key,
         GdkModifierType accel_mods);
extern
gboolean gtk_accel_group_activate (GtkAccelGroup *accel_group,
                                                   GQuark accel_quark,
                                                   GObject *acceleratable,
                                                   guint accel_key,
                                                   GdkModifierType accel_mods);



void _gtk_accel_group_attach (GtkAccelGroup *accel_group,
       GObject *object);
void _gtk_accel_group_detach (GtkAccelGroup *accel_group,
       GObject *object);
extern
gboolean gtk_accel_groups_activate (GObject *object,
       guint accel_key,
       GdkModifierType accel_mods);
extern
GSList* gtk_accel_groups_from_object (GObject *object);
extern
GtkAccelKey* gtk_accel_group_find (GtkAccelGroup *accel_group,
       GtkAccelGroupFindFunc find_func,
       gpointer data);
extern
GtkAccelGroup* gtk_accel_group_from_accel_closure (GClosure *closure);



extern
gboolean gtk_accelerator_valid (guint keyval,
            GdkModifierType modifiers) __attribute__ ((__const__));
extern
void gtk_accelerator_parse (const gchar *accelerator,
            guint *accelerator_key,
            GdkModifierType *accelerator_mods);
extern
void gtk_accelerator_parse_with_keycode (const gchar *accelerator,
                                               guint *accelerator_key,
                                               guint **accelerator_codes,
                                               GdkModifierType *accelerator_mods);
extern
gchar* gtk_accelerator_name (guint accelerator_key,
            GdkModifierType accelerator_mods);
extern
gchar* gtk_accelerator_name_with_keycode (GdkDisplay *display,
                                               guint accelerator_key,
                                               guint keycode,
                                               GdkModifierType accelerator_mods);
extern
gchar* gtk_accelerator_get_label (guint accelerator_key,
                                               GdkModifierType accelerator_mods);
extern
gchar* gtk_accelerator_get_label_with_keycode (GdkDisplay *display,
                                                 guint accelerator_key,
                                                 guint keycode,
                                                 GdkModifierType accelerator_mods);
extern
void gtk_accelerator_set_default_mod_mask (GdkModifierType default_mod_mask);
extern
GdkModifierType
  gtk_accelerator_get_default_mod_mask (void);

extern
GtkAccelGroupEntry* gtk_accel_group_query (GtkAccelGroup *accel_group,
       guint accel_key,
       GdkModifierType accel_mods,
       guint *n_entries);

struct _GtkAccelGroupEntry
{
  GtkAccelKey key;
  GClosure *closure;
  GQuark accel_path_quark;
};

typedef GtkAccelGroup *GtkAccelGroup_autoptr; typedef GList *GtkAccelGroup_listautoptr; typedef GSList *GtkAccelGroup_slistautoptr; typedef GQueue *GtkAccelGroup_queueautoptr;
# 245 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h"
#pragma clang diagnostic push
# 245 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 245 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAccelGroup (GtkAccelGroup *_ptr) { if (_ptr) (g_object_unref) ((GtkAccelGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAccelGroup (GtkAccelGroup **_ptr) { glib_autoptr_clear_GtkAccelGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAccelGroup (void *_ptr) { (g_object_unref) ((GtkAccelGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAccelGroup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAccelGroup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAccelGroup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAccelGroup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAccelGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAccelGroup); }
# 245 "/usr/include/gtk-3.0/gtk/gtkaccelgroup.h"
#pragma clang diagnostic pop
# 34 "/usr/include/gtk-3.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkborder.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkborder.h"
typedef struct _GtkBorder GtkBorder;
# 51 "/usr/include/gtk-3.0/gtk/gtkborder.h"
struct _GtkBorder
{
  gint16 left;
  gint16 right;
  gint16 top;
  gint16 bottom;
};

extern
GType gtk_border_get_type (void) __attribute__ ((__const__));
extern
GtkBorder *gtk_border_new (void) __attribute__ ((__malloc__));
extern
GtkBorder *gtk_border_copy (const GtkBorder *border_);
extern
void gtk_border_free (GtkBorder *border_);

typedef GtkBorder *GtkBorder_autoptr; typedef GList *GtkBorder_listautoptr; typedef GSList *GtkBorder_slistautoptr; typedef GQueue *GtkBorder_queueautoptr;
# 68 "/usr/include/gtk-3.0/gtk/gtkborder.h"
#pragma clang diagnostic push
# 68 "/usr/include/gtk-3.0/gtk/gtkborder.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 68 "/usr/include/gtk-3.0/gtk/gtkborder.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkBorder (GtkBorder *_ptr) { if (_ptr) (gtk_border_free) ((GtkBorder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkBorder (GtkBorder **_ptr) { glib_autoptr_clear_GtkBorder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkBorder (void *_ptr) { (gtk_border_free) ((GtkBorder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkBorder (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkBorder); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkBorder (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkBorder); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkBorder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkBorder); }
# 68 "/usr/include/gtk-3.0/gtk/gtkborder.h"
#pragma clang diagnostic pop
# 35 "/usr/include/gtk-3.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktypes.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtktypes.h"
typedef struct _GtkAdjustment GtkAdjustment;
typedef struct _GtkBuilder GtkBuilder;
typedef struct _GtkClipboard GtkClipboard;
typedef struct _GtkIconSet GtkIconSet;
typedef struct _GtkIconSource GtkIconSource;
typedef struct _GtkRcStyle GtkRcStyle;
typedef struct _GtkRequisition GtkRequisition;
typedef struct _GtkSelectionData GtkSelectionData;
typedef struct _GtkSettings GtkSettings;
typedef struct _GtkStyle GtkStyle;
typedef struct _GtkStyleContext GtkStyleContext;
typedef struct _GtkTooltip GtkTooltip;
typedef struct _GtkWidget GtkWidget;
typedef struct _GtkWidgetPath GtkWidgetPath;
typedef struct _GtkWindow GtkWindow;


typedef gboolean (*GtkRcPropertyParser) (const GParamSpec *pspec,
                                         const GString *rc_string,
                                         GValue *property_value);

typedef void (*GtkBuilderConnectFunc) (GtkBuilder *builder,
           GObject *object,
           const gchar *signal_name,
           const gchar *handler_name,
           GObject *connect_object,
           GConnectFlags flags,
           gpointer user_data);
# 36 "/usr/include/gtk-3.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/atk-1.0/atk/atk.h" 1
# 25 "/usr/include/atk-1.0/atk/atk.h"
# 1 "/usr/include/atk-1.0/atk/atk-enum-types.h" 1
# 11 "/usr/include/atk-1.0/atk/atk-enum-types.h"
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 459 "/usr/include/atk-1.0/atk/atkversion.h"
extern
guint atk_get_major_version (void) __attribute__ ((__const__));
extern
guint atk_get_minor_version (void) __attribute__ ((__const__));
extern
guint atk_get_micro_version (void) __attribute__ ((__const__));
extern
guint atk_get_binary_age (void) __attribute__ ((__const__));
extern
guint atk_get_interface_age (void) __attribute__ ((__const__));
# 12 "/usr/include/atk-1.0/atk/atk-enum-types.h" 2





extern
GType atk_scroll_type_get_type (void);



extern
GType atk_hyperlink_state_flags_get_type (void);



extern
GType atk_role_get_type (void);

extern
GType atk_layer_get_type (void);

extern
GType atk_live_get_type (void);



extern
GType atk_relation_type_get_type (void);



extern
GType atk_state_type_get_type (void);



extern
GType atk_text_attribute_get_type (void);

extern
GType atk_text_boundary_get_type (void);

extern
GType atk_text_granularity_get_type (void);

extern
GType atk_text_clip_type_get_type (void);



extern
GType atk_key_event_type_get_type (void);

extern
GType atk_coord_type_get_type (void);



extern
GType atk_value_type_get_type (void);
# 26 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkaction.h" 1
# 27 "/usr/include/atk-1.0/atk/atkaction.h"
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 29 "/usr/include/atk-1.0/atk/atkobject.h"
# 1 "/usr/include/atk-1.0/atk/atkrelationtype.h" 1
# 87 "/usr/include/atk-1.0/atk/atkrelationtype.h"
typedef enum
{
  ATK_RELATION_NULL = 0,
  ATK_RELATION_CONTROLLED_BY,
  ATK_RELATION_CONTROLLER_FOR,
  ATK_RELATION_LABEL_FOR,
  ATK_RELATION_LABELLED_BY,
  ATK_RELATION_MEMBER_OF,
  ATK_RELATION_NODE_CHILD_OF,
  ATK_RELATION_FLOWS_TO,
  ATK_RELATION_FLOWS_FROM,
  ATK_RELATION_SUBWINDOW_OF,
  ATK_RELATION_EMBEDS,
  ATK_RELATION_EMBEDDED_BY,
  ATK_RELATION_POPUP_FOR,
  ATK_RELATION_PARENT_WINDOW_OF,
  ATK_RELATION_DESCRIBED_BY,
  ATK_RELATION_DESCRIPTION_FOR,
  ATK_RELATION_NODE_PARENT_OF,
  ATK_RELATION_DETAILS,
  ATK_RELATION_DETAILS_FOR,
  ATK_RELATION_ERROR_MESSAGE,
  ATK_RELATION_ERROR_FOR,
  ATK_RELATION_LAST_DEFINED
} AtkRelationType;
# 30 "/usr/include/atk-1.0/atk/atkobject.h" 2
# 1 "/usr/include/atk-1.0/atk/atkstate.h" 1
# 27 "/usr/include/atk-1.0/atk/atkstate.h"
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 28 "/usr/include/atk-1.0/atk/atkstate.h" 2
# 149 "/usr/include/atk-1.0/atk/atkstate.h"
typedef enum
{
  ATK_STATE_INVALID,
  ATK_STATE_ACTIVE,
  ATK_STATE_ARMED,
  ATK_STATE_BUSY,
  ATK_STATE_CHECKED,
  ATK_STATE_DEFUNCT,
  ATK_STATE_EDITABLE,
  ATK_STATE_ENABLED,
  ATK_STATE_EXPANDABLE,
  ATK_STATE_EXPANDED,
  ATK_STATE_FOCUSABLE,
  ATK_STATE_FOCUSED,
  ATK_STATE_HORIZONTAL,
  ATK_STATE_ICONIFIED,
  ATK_STATE_MODAL,
  ATK_STATE_MULTI_LINE,
  ATK_STATE_MULTISELECTABLE,
  ATK_STATE_OPAQUE,
  ATK_STATE_PRESSED,
  ATK_STATE_RESIZABLE,
  ATK_STATE_SELECTABLE,
  ATK_STATE_SELECTED,
  ATK_STATE_SENSITIVE,
  ATK_STATE_SHOWING,
  ATK_STATE_SINGLE_LINE,
  ATK_STATE_STALE,
  ATK_STATE_TRANSIENT,
  ATK_STATE_VERTICAL,
  ATK_STATE_VISIBLE,
  ATK_STATE_MANAGES_DESCENDANTS,
  ATK_STATE_INDETERMINATE,
  ATK_STATE_TRUNCATED,
  ATK_STATE_REQUIRED,
  ATK_STATE_INVALID_ENTRY,
  ATK_STATE_SUPPORTS_AUTOCOMPLETION,
  ATK_STATE_SELECTABLE_TEXT,
  ATK_STATE_DEFAULT,
  ATK_STATE_ANIMATED,
  ATK_STATE_VISITED,
  ATK_STATE_CHECKABLE,
  ATK_STATE_HAS_POPUP,
  ATK_STATE_HAS_TOOLTIP,
  ATK_STATE_READ_ONLY,
  ATK_STATE_COLLAPSED,
  ATK_STATE_LAST_DEFINED
} AtkStateType;

typedef guint64 AtkState;

extern
AtkStateType atk_state_type_register (const gchar *name);

extern
const gchar *atk_state_type_get_name (AtkStateType type);
extern
AtkStateType atk_state_type_for_name (const gchar *name);
# 31 "/usr/include/atk-1.0/atk/atkobject.h" 2
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 32 "/usr/include/atk-1.0/atk/atkobject.h" 2
# 248 "/usr/include/atk-1.0/atk/atkobject.h"
typedef enum
{
  ATK_ROLE_INVALID = 0,
  ATK_ROLE_ACCEL_LABEL,
  ATK_ROLE_ALERT,
  ATK_ROLE_ANIMATION,
  ATK_ROLE_ARROW,
  ATK_ROLE_CALENDAR,
  ATK_ROLE_CANVAS,
  ATK_ROLE_CHECK_BOX,
  ATK_ROLE_CHECK_MENU_ITEM,
  ATK_ROLE_COLOR_CHOOSER,
  ATK_ROLE_COLUMN_HEADER,
  ATK_ROLE_COMBO_BOX,
  ATK_ROLE_DATE_EDITOR,
  ATK_ROLE_DESKTOP_ICON,
  ATK_ROLE_DESKTOP_FRAME,
  ATK_ROLE_DIAL,
  ATK_ROLE_DIALOG,
  ATK_ROLE_DIRECTORY_PANE,
  ATK_ROLE_DRAWING_AREA,
  ATK_ROLE_FILE_CHOOSER,
  ATK_ROLE_FILLER,
  ATK_ROLE_FONT_CHOOSER,
  ATK_ROLE_FRAME,
  ATK_ROLE_GLASS_PANE,
  ATK_ROLE_HTML_CONTAINER,
  ATK_ROLE_ICON,
  ATK_ROLE_IMAGE,
  ATK_ROLE_INTERNAL_FRAME,
  ATK_ROLE_LABEL,
  ATK_ROLE_LAYERED_PANE,
  ATK_ROLE_LIST,
  ATK_ROLE_LIST_ITEM,
  ATK_ROLE_MENU,
  ATK_ROLE_MENU_BAR,
  ATK_ROLE_MENU_ITEM,
  ATK_ROLE_OPTION_PANE,
  ATK_ROLE_PAGE_TAB,
  ATK_ROLE_PAGE_TAB_LIST,
  ATK_ROLE_PANEL,
  ATK_ROLE_PASSWORD_TEXT,
  ATK_ROLE_POPUP_MENU,
  ATK_ROLE_PROGRESS_BAR,
  ATK_ROLE_BUTTON,
  ATK_ROLE_RADIO_BUTTON,
  ATK_ROLE_RADIO_MENU_ITEM,
  ATK_ROLE_ROOT_PANE,
  ATK_ROLE_ROW_HEADER,
  ATK_ROLE_SCROLL_BAR,
  ATK_ROLE_SCROLL_PANE,
  ATK_ROLE_SEPARATOR,
  ATK_ROLE_SLIDER,
  ATK_ROLE_SPLIT_PANE,
  ATK_ROLE_SPIN_BUTTON,
  ATK_ROLE_STATUSBAR,
  ATK_ROLE_TABLE,
  ATK_ROLE_TABLE_CELL,
  ATK_ROLE_TABLE_COLUMN_HEADER,
  ATK_ROLE_TABLE_ROW_HEADER,
  ATK_ROLE_TEAR_OFF_MENU_ITEM,
  ATK_ROLE_TERMINAL,
  ATK_ROLE_TEXT,
  ATK_ROLE_TOGGLE_BUTTON,
  ATK_ROLE_TOOL_BAR,
  ATK_ROLE_TOOL_TIP,
  ATK_ROLE_TREE,
  ATK_ROLE_TREE_TABLE,
  ATK_ROLE_UNKNOWN,
  ATK_ROLE_VIEWPORT,
  ATK_ROLE_WINDOW,
  ATK_ROLE_HEADER,
  ATK_ROLE_FOOTER,
  ATK_ROLE_PARAGRAPH,
  ATK_ROLE_RULER,
  ATK_ROLE_APPLICATION,
  ATK_ROLE_AUTOCOMPLETE,
  ATK_ROLE_EDITBAR,
  ATK_ROLE_EMBEDDED,
  ATK_ROLE_ENTRY,
  ATK_ROLE_CHART,
  ATK_ROLE_CAPTION,
  ATK_ROLE_DOCUMENT_FRAME,
  ATK_ROLE_HEADING,
  ATK_ROLE_PAGE,
  ATK_ROLE_SECTION,
  ATK_ROLE_REDUNDANT_OBJECT,
  ATK_ROLE_FORM,
  ATK_ROLE_LINK,
  ATK_ROLE_INPUT_METHOD_WINDOW,
  ATK_ROLE_TABLE_ROW,
  ATK_ROLE_TREE_ITEM,
  ATK_ROLE_DOCUMENT_SPREADSHEET,
  ATK_ROLE_DOCUMENT_PRESENTATION,
  ATK_ROLE_DOCUMENT_TEXT,
  ATK_ROLE_DOCUMENT_WEB,
  ATK_ROLE_DOCUMENT_EMAIL,
  ATK_ROLE_COMMENT,
  ATK_ROLE_LIST_BOX,
  ATK_ROLE_GROUPING,
  ATK_ROLE_IMAGE_MAP,
  ATK_ROLE_NOTIFICATION,
  ATK_ROLE_INFO_BAR,
  ATK_ROLE_LEVEL_BAR,
  ATK_ROLE_TITLE_BAR,
  ATK_ROLE_BLOCK_QUOTE,
  ATK_ROLE_AUDIO,
  ATK_ROLE_VIDEO,
  ATK_ROLE_DEFINITION,
  ATK_ROLE_ARTICLE,
  ATK_ROLE_LANDMARK,
  ATK_ROLE_LOG,
  ATK_ROLE_MARQUEE,
  ATK_ROLE_MATH,
  ATK_ROLE_RATING,
  ATK_ROLE_TIMER,
  ATK_ROLE_DESCRIPTION_LIST,
  ATK_ROLE_DESCRIPTION_TERM,
  ATK_ROLE_DESCRIPTION_VALUE,
  ATK_ROLE_STATIC,
  ATK_ROLE_MATH_FRACTION,
  ATK_ROLE_MATH_ROOT,
  ATK_ROLE_SUBSCRIPT,
  ATK_ROLE_SUPERSCRIPT,
  ATK_ROLE_FOOTNOTE,
  ATK_ROLE_CONTENT_DELETION,
  ATK_ROLE_CONTENT_INSERTION,
  ATK_ROLE_MARK,
  ATK_ROLE_SUGGESTION,
  ATK_ROLE_PUSH_BUTTON_MENU,
  ATK_ROLE_LAST_DEFINED,


  ATK_ROLE_PUSH_BUTTON = ATK_ROLE_BUTTON,
} AtkRole;
# 401 "/usr/include/atk-1.0/atk/atkobject.h"
typedef enum
{
  ATK_LAYER_INVALID,
  ATK_LAYER_BACKGROUND,
  ATK_LAYER_CANVAS,
  ATK_LAYER_WIDGET,
  ATK_LAYER_MDI,
  ATK_LAYER_POPUP,
  ATK_LAYER_OVERLAY,
  ATK_LAYER_WINDOW
} AtkLayer;
# 426 "/usr/include/atk-1.0/atk/atkobject.h"
typedef enum
{
  ATK_LIVE_NONE,
  ATK_LIVE_POLITE,
  ATK_LIVE_ASSERTIVE
} AtkLive;
# 442 "/usr/include/atk-1.0/atk/atkobject.h"
typedef GSList AtkAttributeSet;
# 461 "/usr/include/atk-1.0/atk/atkobject.h"
typedef struct _AtkAttribute AtkAttribute;

struct _AtkAttribute
{
  gchar *name;
  gchar *value;
};
# 481 "/usr/include/atk-1.0/atk/atkobject.h"
typedef struct _AtkImplementor AtkImplementor;
typedef struct _AtkImplementorIface AtkImplementorIface;

typedef struct _AtkObject AtkObject;
typedef struct _AtkObjectClass AtkObjectClass;
typedef struct _AtkRelationSet AtkRelationSet;
typedef struct _AtkStateSet AtkStateSet;
# 500 "/usr/include/atk-1.0/atk/atkobject.h"
struct _AtkPropertyValues
{
  const gchar *property_name;
  GValue old_value;
  GValue new_value;
};

typedef struct _AtkPropertyValues AtkPropertyValues;
# 519 "/usr/include/atk-1.0/atk/atkobject.h"
typedef gboolean (*AtkFunction) (gpointer user_data);
# 544 "/usr/include/atk-1.0/atk/atkobject.h"
typedef void (*AtkPropertyChangeHandler) (AtkObject *obj, AtkPropertyValues *vals);

struct _AtkObject
{
  GObject parent;

  gchar *description;
  gchar *name;
  AtkObject *accessible_parent;
  AtkRole role;
  AtkRelationSet *relation_set;
  AtkLayer layer;
};
# 572 "/usr/include/atk-1.0/atk/atkobject.h"
struct _AtkObjectClass
{
  GObjectClass parent;




  const gchar *(*get_name) (AtkObject *accessible);



  const gchar *(*get_description) (AtkObject *accessible);



  AtkObject *(*get_parent) (AtkObject *accessible);




  gint (*get_n_children) (AtkObject *accessible);





  AtkObject *(*ref_child) (AtkObject *accessible,
                           gint i);




  gint (*get_index_in_parent) (AtkObject *accessible);



  AtkRelationSet *(*ref_relation_set) (AtkObject *accessible);



  AtkRole (*get_role) (AtkObject *accessible);
  AtkLayer (*get_layer) (AtkObject *accessible);
  gint (*get_mdi_zorder) (AtkObject *accessible);



  AtkStateSet *(*ref_state_set) (AtkObject *accessible);



  void (*set_name) (AtkObject *accessible,
                    const gchar *name);



  void (*set_description) (AtkObject *accessible,
                           const gchar *description);



  void (*set_parent) (AtkObject *accessible,
                      AtkObject *parent);



  void (*set_role) (AtkObject *accessible,
                    AtkRole role);



  guint (*connect_property_change_handler) (AtkObject
                                                *accessible,
                                            AtkPropertyChangeHandler *handler);




  void (*remove_property_change_handler) (AtkObject
                                              *accessible,
                                          guint
                                              handler_id);
  void (*initialize) (AtkObject *accessible,
                      gpointer data);




  void (*children_changed) (AtkObject *accessible,
                            guint change_index,
                            gpointer changed_child);




  void (*focus_event) (AtkObject *accessible,
                       gboolean focus_in);




  void (*property_change) (AtkObject *accessible,
                           AtkPropertyValues *values);




  void (*state_change) (AtkObject *accessible,
                        const gchar *name,
                        gboolean state_set);




  void (*visible_data_changed) (AtkObject *accessible);







  void (*active_descendant_changed) (AtkObject *accessible,
                                     gpointer *child);





  AtkAttributeSet *(*get_attributes) (AtkObject *accessible);

  const gchar *(*get_object_locale) (AtkObject *accessible);

  AtkFunction pad1;
};

extern
GType atk_object_get_type (void);
# 717 "/usr/include/atk-1.0/atk/atkobject.h"
struct _AtkImplementorIface
{
  GTypeInterface parent;

  AtkObject *(*ref_accessible) (AtkImplementor *implementor);
};

extern
GType atk_implementor_get_type (void);
extern
AtkObject *atk_implementor_ref_accessible (AtkImplementor *implementor);





extern
const gchar *atk_object_get_name (AtkObject *accessible);
extern
const gchar *atk_object_get_description (AtkObject *accessible);
extern
AtkObject *atk_object_get_parent (AtkObject *accessible);
extern
AtkObject *atk_object_peek_parent (AtkObject *accessible);
extern
gint atk_object_get_n_accessible_children (AtkObject *accessible);
extern
AtkObject *atk_object_ref_accessible_child (AtkObject *accessible,
                                            gint i);
extern
AtkRelationSet *atk_object_ref_relation_set (AtkObject *accessible);
extern
AtkRole atk_object_get_role (AtkObject *accessible);

__attribute__((__deprecated__("Use '" "atk_component_get_layer" "' instead"))) extern
AtkLayer atk_object_get_layer (AtkObject *accessible);
__attribute__((__deprecated__("Use '" "atk_component_get_mdi_zorder" "' instead"))) extern
gint atk_object_get_mdi_zorder (AtkObject *accessible);

extern
AtkAttributeSet *atk_object_get_attributes (AtkObject *accessible);
extern
AtkStateSet *atk_object_ref_state_set (AtkObject *accessible);
extern
gint atk_object_get_index_in_parent (AtkObject *accessible);
extern
void atk_object_set_name (AtkObject *accessible,
                          const gchar *name);
extern
void atk_object_set_description (AtkObject *accessible,
                                 const gchar *description);
extern
void atk_object_set_parent (AtkObject *accessible,
                            AtkObject *parent);
extern
void atk_object_set_role (AtkObject *accessible,
                          AtkRole role);

__attribute__((__deprecated__)) extern
guint atk_object_connect_property_change_handler (AtkObject *accessible,
                                                  AtkPropertyChangeHandler *handler);
__attribute__((__deprecated__)) extern
void atk_object_remove_property_change_handler (AtkObject *accessible,
                                                guint handler_id);

extern
void atk_object_notify_state_change (AtkObject *accessible,
                                     AtkState state,
                                     gboolean value);
extern
void atk_object_initialize (AtkObject *accessible,
                            gpointer data);

extern
const gchar *atk_role_get_name (AtkRole role);
extern
AtkRole atk_role_for_name (const gchar *name);


extern
gboolean atk_object_add_relationship (AtkObject *object,
                                      AtkRelationType relationship,
                                      AtkObject *target);
extern
gboolean atk_object_remove_relationship (AtkObject *object,
                                         AtkRelationType relationship,
                                         AtkObject *target);
extern
const gchar *atk_role_get_localized_name (AtkRole role);
__attribute__((__deprecated__)) extern
AtkRole atk_role_register (const gchar *name);
extern
const gchar *atk_object_get_object_locale (AtkObject *accessible);

extern
const gchar *atk_object_get_accessible_id (AtkObject *accessible);

extern
void atk_object_set_accessible_id (AtkObject *accessible,
                                   const gchar *id);

extern
const gchar *atk_object_get_help_text (AtkObject *accessible);

extern
void atk_object_set_help_text (AtkObject *accessible,
                               const gchar *help_text);
# 28 "/usr/include/atk-1.0/atk/atkaction.h" 2
# 41 "/usr/include/atk-1.0/atk/atkaction.h"
typedef struct _AtkAction AtkAction;

typedef struct _AtkActionIface AtkActionIface;
# 61 "/usr/include/atk-1.0/atk/atkaction.h"
struct _AtkActionIface
{

  GTypeInterface parent;


  gboolean (*do_action) (AtkAction *action,
                         gint i);
  gint (*get_n_actions) (AtkAction *action);
  const gchar *(*get_description) (AtkAction *action,
                                   gint i);
  const gchar *(*get_name) (AtkAction *action,
                            gint i);
  const gchar *(*get_keybinding) (AtkAction *action,
                                  gint i);
  gboolean (*set_description) (AtkAction *action,
                               gint i,
                               const gchar *desc);
  const gchar *(*get_localized_name) (AtkAction *action,
                                      gint i);
};

extern
GType atk_action_get_type (void);
# 97 "/usr/include/atk-1.0/atk/atkaction.h"
extern
gboolean atk_action_do_action (AtkAction *action,
                               gint i);
extern
gint atk_action_get_n_actions (AtkAction *action);
extern
const gchar *atk_action_get_description (AtkAction *action,
                                         gint i);
extern
const gchar *atk_action_get_name (AtkAction *action,
                                  gint i);
extern
const gchar *atk_action_get_keybinding (AtkAction *action,
                                        gint i);
extern
gboolean atk_action_set_description (AtkAction *action,
                                     gint i,
                                     const gchar *desc);


extern
const gchar *atk_action_get_localized_name (AtkAction *action,
                                            gint i);
# 27 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkcomponent.h" 1
# 28 "/usr/include/atk-1.0/atk/atkcomponent.h"
# 1 "/usr/include/atk-1.0/atk/atkutil.h" 1
# 40 "/usr/include/atk-1.0/atk/atkutil.h"
typedef struct _AtkUtil AtkUtil;
typedef struct _AtkUtilClass AtkUtilClass;
typedef struct _AtkKeyEventStruct AtkKeyEventStruct;
# 58 "/usr/include/atk-1.0/atk/atkutil.h"
typedef void (*AtkEventListener) (AtkObject *obj);
# 68 "/usr/include/atk-1.0/atk/atkutil.h"
typedef void (*AtkEventListenerInit) (void);
# 85 "/usr/include/atk-1.0/atk/atkutil.h"
typedef gint (*AtkKeySnoopFunc) (AtkKeyEventStruct *event,
                                 gpointer user_data);
# 109 "/usr/include/atk-1.0/atk/atkutil.h"
struct _AtkKeyEventStruct
{
  gint type;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 keycode;
  guint32 timestamp;
};
# 128 "/usr/include/atk-1.0/atk/atkutil.h"
typedef enum
{
  ATK_KEY_EVENT_PRESS,
  ATK_KEY_EVENT_RELEASE,
  ATK_KEY_EVENT_LAST_DEFINED
} AtkKeyEventType;

struct _AtkUtil
{
  GObject parent;
};
# 160 "/usr/include/atk-1.0/atk/atkutil.h"
struct _AtkUtilClass
{
  GObjectClass parent;
  guint (*add_global_event_listener) (GSignalEmissionHook listener,
                                      const gchar *event_type);
  void (*remove_global_event_listener) (guint listener_id);
  guint (*add_key_event_listener) (AtkKeySnoopFunc listener,
                                   gpointer data);
  void (*remove_key_event_listener) (guint listener_id);
  AtkObject *(*get_root) (void);
  const gchar *(*get_toolkit_name) (void);
  const gchar *(*get_toolkit_version) (void);
};
extern
GType atk_util_get_type (void);
# 187 "/usr/include/atk-1.0/atk/atkutil.h"
typedef enum
{
  ATK_XY_SCREEN,
  ATK_XY_WINDOW,
  ATK_XY_PARENT
} AtkCoordType;

__attribute__((__deprecated__)) extern
guint atk_add_focus_tracker (AtkEventListener focus_tracker);
__attribute__((__deprecated__)) extern
void atk_remove_focus_tracker (guint tracker_id);
__attribute__((__deprecated__)) extern
void atk_focus_tracker_init (AtkEventListenerInit init);
__attribute__((__deprecated__)) extern
void atk_focus_tracker_notify (AtkObject *object);
extern
guint atk_add_global_event_listener (GSignalEmissionHook listener,
                                     const gchar *event_type);
extern
void atk_remove_global_event_listener (guint listener_id);
extern
guint atk_add_key_event_listener (AtkKeySnoopFunc listener, gpointer data);
extern
void atk_remove_key_event_listener (guint listener_id);

extern
AtkObject *atk_get_root (void);
extern
AtkObject *atk_get_focus_object (void);

extern
const gchar *atk_get_toolkit_name (void);
extern
const gchar *atk_get_toolkit_version (void);
extern
const gchar *atk_get_version (void);
# 29 "/usr/include/atk-1.0/atk/atkcomponent.h" 2
# 54 "/usr/include/atk-1.0/atk/atkcomponent.h"
typedef enum
{
  ATK_SCROLL_TOP_LEFT,
  ATK_SCROLL_BOTTOM_RIGHT,
  ATK_SCROLL_TOP_EDGE,
  ATK_SCROLL_BOTTOM_EDGE,
  ATK_SCROLL_LEFT_EDGE,
  ATK_SCROLL_RIGHT_EDGE,
  ATK_SCROLL_ANYWHERE
} AtkScrollType;
# 72 "/usr/include/atk-1.0/atk/atkcomponent.h"
typedef struct _AtkComponent AtkComponent;

typedef struct _AtkComponentIface AtkComponentIface;
# 89 "/usr/include/atk-1.0/atk/atkcomponent.h"
typedef void (*AtkFocusHandler) (AtkObject *object, gboolean focus_in);

typedef struct _AtkRectangle AtkRectangle;
# 103 "/usr/include/atk-1.0/atk/atkcomponent.h"
struct _AtkRectangle
{
  gint x;
  gint y;
  gint width;
  gint height;
};

extern
GType atk_rectangle_get_type (void);
# 147 "/usr/include/atk-1.0/atk/atkcomponent.h"
struct _AtkComponentIface
{

  GTypeInterface parent;


  guint (*add_focus_handler) (AtkComponent *component,
                              AtkFocusHandler handler);

  gboolean (*contains) (AtkComponent *component,
                        gint x,
                        gint y,
                        AtkCoordType coord_type);

  AtkObject *(*ref_accessible_at_point) (AtkComponent *component,
                                         gint x,
                                         gint y,
                                         AtkCoordType coord_type);
  void (*get_extents) (AtkComponent *component,
                       gint *x,
                       gint *y,
                       gint *width,
                       gint *height,
                       AtkCoordType coord_type);
  void (*get_position) (AtkComponent *component,
                        gint *x,
                        gint *y,
                        AtkCoordType coord_type);
  void (*get_size) (AtkComponent *component,
                    gint *width,
                    gint *height);
  gboolean (*grab_focus) (AtkComponent *component);
  void (*remove_focus_handler) (AtkComponent *component,
                                guint handler_id);
  gboolean (*set_extents) (AtkComponent *component,
                           gint x,
                           gint y,
                           gint width,
                           gint height,
                           AtkCoordType coord_type);
  gboolean (*set_position) (AtkComponent *component,
                            gint x,
                            gint y,
                            AtkCoordType coord_type);
  gboolean (*set_size) (AtkComponent *component,
                        gint width,
                        gint height);

  AtkLayer (*get_layer) (AtkComponent *component);
  gint (*get_mdi_zorder) (AtkComponent *component);




  void (*bounds_changed) (AtkComponent *component,
                          AtkRectangle *bounds);
  gdouble (*get_alpha) (AtkComponent *component);
# 216 "/usr/include/atk-1.0/atk/atkcomponent.h"
  gboolean (*scroll_to) (AtkComponent *component,
                         AtkScrollType type);

  gboolean (*scroll_to_point) (AtkComponent *component,
                               AtkCoordType coords,
                               gint x,
                               gint y);
};

extern
GType atk_component_get_type (void);


__attribute__((__deprecated__)) extern
guint atk_component_add_focus_handler (AtkComponent *component,
                                       AtkFocusHandler handler);
extern
gboolean atk_component_contains (AtkComponent *component,
                                 gint x,
                                 gint y,
                                 AtkCoordType coord_type);
extern
AtkObject *atk_component_ref_accessible_at_point (AtkComponent *component,
                                                  gint x,
                                                  gint y,
                                                  AtkCoordType coord_type);
extern
void atk_component_get_extents (AtkComponent *component,
                                gint *x,
                                gint *y,
                                gint *width,
                                gint *height,
                                AtkCoordType coord_type);
__attribute__((__deprecated__("Use '" "atk_component_get_extents" "' instead"))) extern
void atk_component_get_position (AtkComponent *component,
                                 gint *x,
                                 gint *y,
                                 AtkCoordType coord_type);
__attribute__((__deprecated__("Use '" "atk_component_get_extents" "' instead"))) extern
void atk_component_get_size (AtkComponent *component,
                             gint *width,
                             gint *height);
extern
AtkLayer atk_component_get_layer (AtkComponent *component);
extern
gint atk_component_get_mdi_zorder (AtkComponent *component);
extern
gboolean atk_component_grab_focus (AtkComponent *component);
__attribute__((__deprecated__)) extern
void atk_component_remove_focus_handler (AtkComponent *component,
                                         guint handler_id);
extern
gboolean atk_component_set_extents (AtkComponent *component,
                                    gint x,
                                    gint y,
                                    gint width,
                                    gint height,
                                    AtkCoordType coord_type);
extern
gboolean atk_component_set_position (AtkComponent *component,
                                     gint x,
                                     gint y,
                                     AtkCoordType coord_type);
extern
gboolean atk_component_set_size (AtkComponent *component,
                                 gint width,
                                 gint height);
extern
gdouble atk_component_get_alpha (AtkComponent *component);

extern
gboolean atk_component_scroll_to (AtkComponent *component,
                                  AtkScrollType type);

extern
gboolean atk_component_scroll_to_point (AtkComponent *component,
                                        AtkCoordType coords,
                                        gint x,
                                        gint y);
# 28 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkdocument.h" 1
# 75 "/usr/include/atk-1.0/atk/atkdocument.h"
typedef struct _AtkTextSelection AtkTextSelection;
struct _AtkTextSelection
{
  AtkObject *start_object;
  gint start_offset;
  AtkObject *end_object;
  gint end_offset;
  gboolean start_is_active;
};



typedef struct _AtkDocument AtkDocument;

typedef struct _AtkDocumentIface AtkDocumentIface;
# 110 "/usr/include/atk-1.0/atk/atkdocument.h"
struct _AtkDocumentIface
{
  GTypeInterface parent;
  const gchar *(*get_document_type) (AtkDocument *document);
  gpointer (*get_document) (AtkDocument *document);

  const gchar *(*get_document_locale) (AtkDocument *document);
  AtkAttributeSet *(*get_document_attributes) (AtkDocument *document);
  const gchar *(*get_document_attribute_value) (AtkDocument *document,
                                                const gchar *attribute_name);
  gboolean (*set_document_attribute) (AtkDocument *document,
                                      const gchar *attribute_name,
                                      const gchar *attribute_value);
  gint (*get_current_page_number) (AtkDocument *document);
  gint (*get_page_count) (AtkDocument *document);
  GArray *(*get_text_selections) (AtkDocument *document);
  gboolean (*set_text_selections) (AtkDocument *document, GArray *selections);
};

extern
GType atk_document_get_type (void);

__attribute__((__deprecated__)) extern
const gchar *atk_document_get_document_type (AtkDocument *document);

__attribute__((__deprecated__)) extern
gpointer atk_document_get_document (AtkDocument *document);

__attribute__((__deprecated__("Use '" "atk_object_get_object_locale" "' instead"))) extern
const gchar *atk_document_get_locale (AtkDocument *document);

extern
AtkAttributeSet *atk_document_get_attributes (AtkDocument *document);
extern
const gchar *atk_document_get_attribute_value (AtkDocument *document,
                                               const gchar *attribute_name);
extern
gboolean atk_document_set_attribute_value (AtkDocument *document,
                                           const gchar *attribute_name,
                                           const gchar *attribute_value);
extern
gint atk_document_get_current_page_number (AtkDocument *document);
extern
gint atk_document_get_page_count (AtkDocument *document);



extern
GArray *atk_document_get_text_selections (AtkDocument *document);

extern
gboolean atk_document_set_text_selections (AtkDocument *document, GArray *selections);
# 29 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkeditabletext.h" 1
# 28 "/usr/include/atk-1.0/atk/atkeditabletext.h"
# 1 "/usr/include/atk-1.0/atk/atktext.h" 1
# 69 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum
{
  ATK_TEXT_ATTR_INVALID = 0,
  ATK_TEXT_ATTR_LEFT_MARGIN,
  ATK_TEXT_ATTR_RIGHT_MARGIN,
  ATK_TEXT_ATTR_INDENT,
  ATK_TEXT_ATTR_INVISIBLE,
  ATK_TEXT_ATTR_EDITABLE,
  ATK_TEXT_ATTR_PIXELS_ABOVE_LINES,
  ATK_TEXT_ATTR_PIXELS_BELOW_LINES,
  ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP,
  ATK_TEXT_ATTR_BG_FULL_HEIGHT,
  ATK_TEXT_ATTR_RISE,
  ATK_TEXT_ATTR_UNDERLINE,
  ATK_TEXT_ATTR_STRIKETHROUGH,
  ATK_TEXT_ATTR_SIZE,
  ATK_TEXT_ATTR_SCALE,
  ATK_TEXT_ATTR_WEIGHT,
  ATK_TEXT_ATTR_LANGUAGE,
  ATK_TEXT_ATTR_FAMILY_NAME,
  ATK_TEXT_ATTR_BG_COLOR,
  ATK_TEXT_ATTR_FG_COLOR,
  ATK_TEXT_ATTR_BG_STIPPLE,
  ATK_TEXT_ATTR_FG_STIPPLE,
  ATK_TEXT_ATTR_WRAP_MODE,
  ATK_TEXT_ATTR_DIRECTION,
  ATK_TEXT_ATTR_JUSTIFICATION,
  ATK_TEXT_ATTR_STRETCH,
  ATK_TEXT_ATTR_VARIANT,
  ATK_TEXT_ATTR_STYLE,
  ATK_TEXT_ATTR_TEXT_POSITION,
  ATK_TEXT_ATTR_LAST_DEFINED
} AtkTextAttribute;

extern
AtkTextAttribute atk_text_attribute_register (const gchar *name);
# 113 "/usr/include/atk-1.0/atk/atktext.h"
typedef struct _AtkText AtkText;

typedef struct _AtkTextIface AtkTextIface;
# 138 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum
{
  ATK_TEXT_BOUNDARY_CHAR,
  ATK_TEXT_BOUNDARY_WORD_START,
  ATK_TEXT_BOUNDARY_WORD_END,
  ATK_TEXT_BOUNDARY_SENTENCE_START,
  ATK_TEXT_BOUNDARY_SENTENCE_END,
  ATK_TEXT_BOUNDARY_LINE_START,
  ATK_TEXT_BOUNDARY_LINE_END
} AtkTextBoundary;
# 169 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum
{
  ATK_TEXT_GRANULARITY_CHAR,
  ATK_TEXT_GRANULARITY_WORD,
  ATK_TEXT_GRANULARITY_SENTENCE,
  ATK_TEXT_GRANULARITY_LINE,
  ATK_TEXT_GRANULARITY_PARAGRAPH
} AtkTextGranularity;
# 188 "/usr/include/atk-1.0/atk/atktext.h"
typedef struct _AtkTextRectangle AtkTextRectangle;

struct _AtkTextRectangle
{
  gint x;
  gint y;
  gint width;
  gint height;
};
# 207 "/usr/include/atk-1.0/atk/atktext.h"
typedef struct _AtkTextRange AtkTextRange;

struct _AtkTextRange
{
  AtkTextRectangle bounds;
  gint start_offset;
  gint end_offset;
  gchar *content;
};

extern
GType atk_text_range_get_type (void);
# 229 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum
{
  ATK_TEXT_CLIP_NONE,
  ATK_TEXT_CLIP_MIN,
  ATK_TEXT_CLIP_MAX,
  ATK_TEXT_CLIP_BOTH
} AtkTextClipType;
# 253 "/usr/include/atk-1.0/atk/atktext.h"
struct _AtkTextIface
{
  GTypeInterface parent;

  gchar *(*get_text) (AtkText *text,
                      gint start_offset,
                      gint end_offset);
  gchar *(*get_text_after_offset) (AtkText *text,
                                   gint offset,
                                   AtkTextBoundary boundary_type,
                                   gint *start_offset,
                                   gint *end_offset);
  gchar *(*get_text_at_offset) (AtkText *text,
                                gint offset,
                                AtkTextBoundary boundary_type,
                                gint *start_offset,
                                gint *end_offset);
  gunichar (*get_character_at_offset) (AtkText *text,
                                       gint offset);
  gchar *(*get_text_before_offset) (AtkText *text,
                                    gint offset,
                                    AtkTextBoundary boundary_type,
                                    gint *start_offset,
                                    gint *end_offset);
  gint (*get_caret_offset) (AtkText *text);
  AtkAttributeSet *(*get_run_attributes) (AtkText *text,
                                          gint offset,
                                          gint *start_offset,
                                          gint *end_offset);
  AtkAttributeSet *(*get_default_attributes) (AtkText *text);
  void (*get_character_extents) (AtkText *text,
                                 gint offset,
                                 gint *x,
                                 gint *y,
                                 gint *width,
                                 gint *height,
                                 AtkCoordType coords);
  gint (*get_character_count) (AtkText *text);
  gint (*get_offset_at_point) (AtkText *text,
                               gint x,
                               gint y,
                               AtkCoordType coords);
  gint (*get_n_selections) (AtkText *text);
  gchar *(*get_selection) (AtkText *text,
                           gint selection_num,
                           gint *start_offset,
                           gint *end_offset);
  gboolean (*add_selection) (AtkText *text,
                             gint start_offset,
                             gint end_offset);
  gboolean (*remove_selection) (AtkText *text,
                                gint selection_num);
  gboolean (*set_selection) (AtkText *text,
                             gint selection_num,
                             gint start_offset,
                             gint end_offset);
  gboolean (*set_caret_offset) (AtkText *text,
                                gint offset);




  void (*text_changed) (AtkText *text,
                        gint position,
                        gint length);
  void (*text_caret_moved) (AtkText *text,
                            gint location);
  void (*text_selection_changed) (AtkText *text);

  void (*text_attributes_changed) (AtkText *text);

  void (*get_range_extents) (AtkText *text,
                             gint start_offset,
                             gint end_offset,
                             AtkCoordType coord_type,
                             AtkTextRectangle *rect);

  AtkTextRange **(*get_bounded_ranges) (AtkText *text,
                                        AtkTextRectangle *rect,
                                        AtkCoordType coord_type,
                                        AtkTextClipType x_clip_type,
                                        AtkTextClipType y_clip_type);

  gchar *(*get_string_at_offset) (AtkText *text,
                                  gint offset,
                                  AtkTextGranularity granularity,
                                  gint *start_offset,
                                  gint *end_offset);
# 352 "/usr/include/atk-1.0/atk/atktext.h"
  gboolean (*scroll_substring_to) (AtkText *text,
                                   gint start_offset,
                                   gint end_offset,
                                   AtkScrollType type);
  gboolean (*scroll_substring_to_point) (AtkText *text,
                                         gint start_offset,
                                         gint end_offset,
                                         AtkCoordType coords,
                                         gint x,
                                         gint y);
};

extern
GType atk_text_get_type (void);
# 374 "/usr/include/atk-1.0/atk/atktext.h"
extern
gchar *atk_text_get_text (AtkText *text,
                          gint start_offset,
                          gint end_offset);
extern
gunichar atk_text_get_character_at_offset (AtkText *text,
                                           gint offset);
__attribute__((__deprecated__("Use '" "atk_text_get_string_at_offset" "' instead"))) extern
gchar *atk_text_get_text_after_offset (AtkText *text,
                                       gint offset,
                                       AtkTextBoundary boundary_type,
                                       gint *start_offset,
                                       gint *end_offset);
__attribute__((__deprecated__("Use '" "atk_text_get_string_at_offset" "' instead"))) extern
gchar *atk_text_get_text_at_offset (AtkText *text,
                                    gint offset,
                                    AtkTextBoundary boundary_type,
                                    gint *start_offset,
                                    gint *end_offset);
__attribute__((__deprecated__("Use '" "atk_text_get_string_at_offset" "' instead"))) extern
gchar *atk_text_get_text_before_offset (AtkText *text,
                                        gint offset,
                                        AtkTextBoundary boundary_type,
                                        gint *start_offset,
                                        gint *end_offset);
extern
gchar *atk_text_get_string_at_offset (AtkText *text,
                                      gint offset,
                                      AtkTextGranularity granularity,
                                      gint *start_offset,
                                      gint *end_offset);
extern
gint atk_text_get_caret_offset (AtkText *text);
extern
void atk_text_get_character_extents (AtkText *text,
                                     gint offset,
                                     gint *x,
                                     gint *y,
                                     gint *width,
                                     gint *height,
                                     AtkCoordType coords);
extern
AtkAttributeSet *atk_text_get_run_attributes (AtkText *text,
                                              gint offset,
                                              gint *start_offset,
                                              gint *end_offset);
extern
AtkAttributeSet *atk_text_get_default_attributes (AtkText *text);
extern
gint atk_text_get_character_count (AtkText *text);
extern
gint atk_text_get_offset_at_point (AtkText *text,
                                   gint x,
                                   gint y,
                                   AtkCoordType coords);
extern
gint atk_text_get_n_selections (AtkText *text);
extern
gchar *atk_text_get_selection (AtkText *text,
                               gint selection_num,
                               gint *start_offset,
                               gint *end_offset);
extern
gboolean atk_text_add_selection (AtkText *text,
                                 gint start_offset,
                                 gint end_offset);
extern
gboolean atk_text_remove_selection (AtkText *text,
                                    gint selection_num);
extern
gboolean atk_text_set_selection (AtkText *text,
                                 gint selection_num,
                                 gint start_offset,
                                 gint end_offset);
extern
gboolean atk_text_set_caret_offset (AtkText *text,
                                    gint offset);
extern
void atk_text_get_range_extents (AtkText *text,

                                 gint start_offset,
                                 gint end_offset,
                                 AtkCoordType coord_type,
                                 AtkTextRectangle *rect);
extern
AtkTextRange **atk_text_get_bounded_ranges (AtkText *text,
                                            AtkTextRectangle *rect,
                                            AtkCoordType coord_type,
                                            AtkTextClipType x_clip_type,
                                            AtkTextClipType y_clip_type);
extern
void atk_text_free_ranges (AtkTextRange **ranges);
extern
void atk_attribute_set_free (AtkAttributeSet *attrib_set);
extern
const gchar *atk_text_attribute_get_name (AtkTextAttribute attr);
extern
AtkTextAttribute atk_text_attribute_for_name (const gchar *name);
extern
const gchar *atk_text_attribute_get_value (AtkTextAttribute attr,
                                           gint index_);

extern
gboolean atk_text_scroll_substring_to (AtkText *text,
                                       gint start_offset,
                                       gint end_offset,
                                       AtkScrollType type);

extern
gboolean atk_text_scroll_substring_to_point (AtkText *text,
                                             gint start_offset,
                                             gint end_offset,
                                             AtkCoordType coords,
                                             gint x,
                                             gint y);
# 29 "/usr/include/atk-1.0/atk/atkeditabletext.h" 2
# 44 "/usr/include/atk-1.0/atk/atkeditabletext.h"
typedef struct _AtkEditableText AtkEditableText;

typedef struct _AtkEditableTextIface AtkEditableTextIface;

struct _AtkEditableTextIface
{
  GTypeInterface parent_interface;

  gboolean (*set_run_attributes) (AtkEditableText *text,
                                  AtkAttributeSet *attrib_set,
                                  gint start_offset,
                                  gint end_offset);
  void (*set_text_contents) (AtkEditableText *text,
                             const gchar *string);
  void (*insert_text) (AtkEditableText *text,
                       const gchar *string,
                       gint length,
                       gint *position);
  void (*copy_text) (AtkEditableText *text,
                     gint start_pos,
                     gint end_pos);
  void (*cut_text) (AtkEditableText *text,
                    gint start_pos,
                    gint end_pos);
  void (*delete_text) (AtkEditableText *text,
                       gint start_pos,
                       gint end_pos);
  void (*paste_text) (AtkEditableText *text,
                      gint position);
};
extern
GType atk_editable_text_get_type (void);

extern
gboolean atk_editable_text_set_run_attributes (AtkEditableText *text,
                                               AtkAttributeSet *attrib_set,
                                               gint start_offset,
                                               gint end_offset);
extern
void atk_editable_text_set_text_contents (AtkEditableText *text,
                                          const gchar *string);
extern
void atk_editable_text_insert_text (AtkEditableText *text,
                                    const gchar *string,
                                    gint length,
                                    gint *position);
extern
void atk_editable_text_copy_text (AtkEditableText *text,
                                  gint start_pos,
                                  gint end_pos);
extern
void atk_editable_text_cut_text (AtkEditableText *text,
                                 gint start_pos,
                                 gint end_pos);
extern
void atk_editable_text_delete_text (AtkEditableText *text,
                                    gint start_pos,
                                    gint end_pos);
extern
void atk_editable_text_paste_text (AtkEditableText *text,
                                   gint position);
# 30 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h" 1
# 42 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h"
typedef struct _AtkGObjectAccessible AtkGObjectAccessible;
typedef struct _AtkGObjectAccessibleClass AtkGObjectAccessibleClass;

struct _AtkGObjectAccessible
{
  AtkObject parent;
};

extern
GType atk_gobject_accessible_get_type (void);

struct _AtkGObjectAccessibleClass
{
  AtkObjectClass parent_class;

  AtkFunction pad1;
  AtkFunction pad2;
};

extern
AtkObject *atk_gobject_accessible_for_object (GObject *obj);
extern
GObject *atk_gobject_accessible_get_object (AtkGObjectAccessible *obj);
# 31 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhyperlink.h" 1
# 43 "/usr/include/atk-1.0/atk/atkhyperlink.h"
typedef enum
{
  ATK_HYPERLINK_IS_INLINE = 1 << 0
} AtkHyperlinkStateFlags;
# 55 "/usr/include/atk-1.0/atk/atkhyperlink.h"
typedef struct _AtkHyperlink AtkHyperlink;
typedef struct _AtkHyperlinkClass AtkHyperlinkClass;

struct _AtkHyperlink
{
  GObject parent;
};

struct _AtkHyperlinkClass
{
  GObjectClass parent;

  gchar *(*get_uri) (AtkHyperlink *link_,
                     gint i);
  AtkObject *(*get_object) (AtkHyperlink *link_,
                            gint i);
  gint (*get_end_index) (AtkHyperlink *link_);
  gint (*get_start_index) (AtkHyperlink *link_);
  gboolean (*is_valid) (AtkHyperlink *link_);
  gint (*get_n_anchors) (AtkHyperlink *link_);
  guint (*link_state) (AtkHyperlink *link_);
  gboolean (*is_selected_link) (AtkHyperlink *link_);


  void (*link_activated) (AtkHyperlink *link_);
  AtkFunction pad1;
};

extern
GType atk_hyperlink_get_type (void);

extern
gchar *atk_hyperlink_get_uri (AtkHyperlink *link_,
                              gint i);

extern
AtkObject *atk_hyperlink_get_object (AtkHyperlink *link_,
                                     gint i);

extern
gint atk_hyperlink_get_end_index (AtkHyperlink *link_);

extern
gint atk_hyperlink_get_start_index (AtkHyperlink *link_);

extern
gboolean atk_hyperlink_is_valid (AtkHyperlink *link_);

extern
gboolean atk_hyperlink_is_inline (AtkHyperlink *link_);

extern
gint atk_hyperlink_get_n_anchors (AtkHyperlink *link_);

__attribute__((__deprecated__)) extern
gboolean atk_hyperlink_is_selected_link (AtkHyperlink *link_);
# 32 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhyperlinkimpl.h" 1
# 49 "/usr/include/atk-1.0/atk/atkhyperlinkimpl.h"
typedef struct _AtkHyperlinkImpl AtkHyperlinkImpl;

typedef struct _AtkHyperlinkImplIface AtkHyperlinkImplIface;

struct _AtkHyperlinkImplIface
{
  GTypeInterface parent;

  AtkHyperlink *(*get_hyperlink) (AtkHyperlinkImpl *impl);
};

extern
GType atk_hyperlink_impl_get_type (void);

extern
AtkHyperlink *atk_hyperlink_impl_get_hyperlink (AtkHyperlinkImpl *impl);
# 33 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhypertext.h" 1
# 44 "/usr/include/atk-1.0/atk/atkhypertext.h"
typedef struct _AtkHypertext AtkHypertext;

typedef struct _AtkHypertextIface AtkHypertextIface;

struct _AtkHypertextIface
{
  GTypeInterface parent;

  AtkHyperlink *(*get_link) (AtkHypertext *hypertext,
                             gint link_index);
  gint (*get_n_links) (AtkHypertext *hypertext);
  gint (*get_link_index) (AtkHypertext *hypertext,
                          gint char_index);




  void (*link_selected) (AtkHypertext *hypertext,
                         gint link_index);
};
extern
GType atk_hypertext_get_type (void);

extern
AtkHyperlink *atk_hypertext_get_link (AtkHypertext *hypertext,
                                      gint link_index);
extern
gint atk_hypertext_get_n_links (AtkHypertext *hypertext);
extern
gint atk_hypertext_get_link_index (AtkHypertext *hypertext,
                                   gint char_index);
# 34 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkimage.h" 1
# 45 "/usr/include/atk-1.0/atk/atkimage.h"
typedef struct _AtkImage AtkImage;

typedef struct _AtkImageIface AtkImageIface;

struct _AtkImageIface
{
  GTypeInterface parent;
  void (*get_image_position) (AtkImage *image,
                              gint *x,
                              gint *y,
                              AtkCoordType coord_type);
  const gchar *(*get_image_description) (AtkImage *image);
  void (*get_image_size) (AtkImage *image,
                          gint *width,
                          gint *height);
  gboolean (*set_image_description) (AtkImage *image,
                                     const gchar *description);
  const gchar *(*get_image_locale) (AtkImage *image);
};

extern
GType atk_image_get_type (void);

extern
const gchar *atk_image_get_image_description (AtkImage *image);

extern
void atk_image_get_image_size (AtkImage *image,
                               gint *width,
                               gint *height);

extern
gboolean atk_image_set_image_description (AtkImage *image,
                                          const gchar *description);
extern
void atk_image_get_image_position (AtkImage *image,
                                   gint *x,
                                   gint *y,
                                   AtkCoordType coord_type);

extern
const gchar *atk_image_get_image_locale (AtkImage *image);
# 35 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkmisc.h" 1
# 27 "/usr/include/atk-1.0/atk/atkmisc.h"
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 28 "/usr/include/atk-1.0/atk/atkmisc.h" 2
# 64 "/usr/include/atk-1.0/atk/atkmisc.h"
typedef struct _AtkMisc AtkMisc;
typedef struct _AtkMiscClass AtkMiscClass;


struct _AtkMisc
{
  GObject parent;
};
# 80 "/usr/include/atk-1.0/atk/atkmisc.h"
extern AtkMisc *atk_misc_instance;
# 91 "/usr/include/atk-1.0/atk/atkmisc.h"
struct _AtkMiscClass
{
  GObjectClass parent;
  void (*threads_enter) (AtkMisc *misc);
  void (*threads_leave) (AtkMisc *misc);
  gpointer vfuncs[32];
};

__attribute__((__deprecated__)) extern
GType atk_misc_get_type (void);

__attribute__((__deprecated__)) extern
void atk_misc_threads_enter (AtkMisc *misc);
__attribute__((__deprecated__)) extern
void atk_misc_threads_leave (AtkMisc *misc);
__attribute__((__deprecated__)) extern
const AtkMisc *atk_misc_get_instance (void);
# 36 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atknoopobject.h" 1
# 24 "/usr/include/atk-1.0/atk/atknoopobject.h"
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 25 "/usr/include/atk-1.0/atk/atknoopobject.h" 2
# 38 "/usr/include/atk-1.0/atk/atknoopobject.h"
typedef struct _AtkNoOpObject AtkNoOpObject;
typedef struct _AtkNoOpObjectClass AtkNoOpObjectClass;

struct _AtkNoOpObject
{
  AtkObject parent;
};

extern
GType atk_no_op_object_get_type (void);

struct _AtkNoOpObjectClass
{
  AtkObjectClass parent_class;
};

extern
AtkObject *atk_no_op_object_new (GObject *obj);
# 37 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h" 1
# 27 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h"
# 1 "/usr/include/atk-1.0/atk/atkobjectfactory.h" 1
# 39 "/usr/include/atk-1.0/atk/atkobjectfactory.h"
typedef struct _AtkObjectFactory AtkObjectFactory;
typedef struct _AtkObjectFactoryClass AtkObjectFactoryClass;

struct _AtkObjectFactory
{
  GObject parent;
};

struct _AtkObjectFactoryClass
{
  GObjectClass parent_class;

  AtkObject *(*create_accessible) (GObject *obj);
  void (*invalidate) (AtkObjectFactory *factory);
  GType (*get_accessible_type) (void);

  AtkFunction pad1;
  AtkFunction pad2;
};

extern
GType atk_object_factory_get_type (void);

extern
AtkObject *atk_object_factory_create_accessible (AtkObjectFactory *factory, GObject *obj);
extern
void atk_object_factory_invalidate (AtkObjectFactory *factory);
extern
GType atk_object_factory_get_accessible_type (AtkObjectFactory *factory);
# 28 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h" 2
# 38 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h"
typedef struct _AtkNoOpObjectFactory AtkNoOpObjectFactory;
typedef struct _AtkNoOpObjectFactoryClass AtkNoOpObjectFactoryClass;

struct _AtkNoOpObjectFactory
{
  AtkObjectFactory parent;
};

struct _AtkNoOpObjectFactoryClass
{
  AtkObjectFactoryClass parent_class;
};

extern
GType atk_no_op_object_factory_get_type (void);

extern
AtkObjectFactory *atk_no_op_object_factory_new (void);
# 38 "/usr/include/atk-1.0/atk/atk.h" 2


# 1 "/usr/include/atk-1.0/atk/atkplug.h" 1
# 27 "/usr/include/atk-1.0/atk/atkplug.h"
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 28 "/usr/include/atk-1.0/atk/atkplug.h" 2
# 38 "/usr/include/atk-1.0/atk/atkplug.h"
typedef struct _AtkPlug AtkPlug;
typedef struct _AtkPlugClass AtkPlugClass;

struct _AtkPlug
{
  AtkObject parent;
};

extern
GType atk_plug_get_type (void);

struct _AtkPlugClass
{
  AtkObjectClass parent_class;




  gchar *(*get_object_id) (AtkPlug *obj);
};

extern
AtkObject *atk_plug_new (void);
extern
void atk_plug_set_child (AtkPlug *plug, AtkObject *child);
extern
gchar *atk_plug_get_id (AtkPlug *plug);
# 41 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrange.h" 1
# 28 "/usr/include/atk-1.0/atk/atkrange.h"
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 29 "/usr/include/atk-1.0/atk/atkrange.h" 2






typedef struct _AtkRange AtkRange;


extern
GType atk_range_get_type (void);

extern
AtkRange *atk_range_copy (AtkRange *src);
extern
void atk_range_free (AtkRange *range);

extern
gdouble atk_range_get_lower_limit (AtkRange *range);
extern
gdouble atk_range_get_upper_limit (AtkRange *range);
extern
const gchar *atk_range_get_description (AtkRange *range);
extern
AtkRange *atk_range_new (gdouble lower_limit,
                         gdouble upper_limit,
                         const gchar *description);
# 42 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkregistry.h" 1
# 39 "/usr/include/atk-1.0/atk/atkregistry.h"
struct _AtkRegistry
{
  GObject parent;
  GHashTable *factory_type_registry;
  GHashTable *factory_singleton_cache;
};

struct _AtkRegistryClass
{
  GObjectClass parent_class;
};

typedef struct _AtkRegistry AtkRegistry;
typedef struct _AtkRegistryClass AtkRegistryClass;

extern
GType atk_registry_get_type (void);
extern
void atk_registry_set_factory_type (AtkRegistry *registry,
                                    GType type,
                                    GType factory_type);
extern
GType atk_registry_get_factory_type (AtkRegistry *registry,
                                     GType type);
extern
AtkObjectFactory *atk_registry_get_factory (AtkRegistry *registry,
                                            GType type);

extern
AtkRegistry *atk_get_default_registry (void);
# 43 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelation.h" 1
# 30 "/usr/include/atk-1.0/atk/atkrelation.h"
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 31 "/usr/include/atk-1.0/atk/atkrelation.h" 2
# 46 "/usr/include/atk-1.0/atk/atkrelation.h"
typedef struct _AtkRelation AtkRelation;
typedef struct _AtkRelationClass AtkRelationClass;

struct _AtkRelation
{
  GObject parent;

  GPtrArray *target;
  AtkRelationType relationship;
};

struct _AtkRelationClass
{
  GObjectClass parent;
};

extern
GType atk_relation_get_type (void);

extern
AtkRelationType atk_relation_type_register (const gchar *name);
extern
const gchar *atk_relation_type_get_name (AtkRelationType type);
extern
AtkRelationType atk_relation_type_for_name (const gchar *name);





extern
AtkRelation *atk_relation_new (AtkObject **targets,
                               gint n_targets,
                               AtkRelationType relationship);



extern
AtkRelationType atk_relation_get_relation_type (AtkRelation *relation);



extern
GPtrArray *atk_relation_get_target (AtkRelation *relation);
extern
void atk_relation_add_target (AtkRelation *relation,
                              AtkObject *target);
extern
gboolean atk_relation_remove_target (AtkRelation *relation,
                                     AtkObject *target);
# 44 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelationset.h" 1
# 40 "/usr/include/atk-1.0/atk/atkrelationset.h"
typedef struct _AtkRelationSetClass AtkRelationSetClass;

struct _AtkRelationSet
{
  GObject parent;

  GPtrArray *relations;
};

struct _AtkRelationSetClass
{
  GObjectClass parent;

  AtkFunction pad1;
  AtkFunction pad2;
};

extern
GType atk_relation_set_get_type (void);

extern
AtkRelationSet *atk_relation_set_new (void);
extern
gboolean atk_relation_set_contains (AtkRelationSet *set,
                                    AtkRelationType relationship);
extern
gboolean atk_relation_set_contains_target (AtkRelationSet *set,
                                           AtkRelationType relationship,
                                           AtkObject *target);
extern
void atk_relation_set_remove (AtkRelationSet *set,
                              AtkRelation *relation);
extern
void atk_relation_set_add (AtkRelationSet *set,
                           AtkRelation *relation);
extern
gint atk_relation_set_get_n_relations (AtkRelationSet *set);
extern
AtkRelation *atk_relation_set_get_relation (AtkRelationSet *set,
                                            gint i);
extern
AtkRelation *atk_relation_set_get_relation_by_type (AtkRelationSet *set,
                                                    AtkRelationType relationship);
extern
void atk_relation_set_add_relation_by_type (AtkRelationSet *set,
                                            AtkRelationType relationship,
                                            AtkObject *target);
# 45 "/usr/include/atk-1.0/atk/atk.h" 2

# 1 "/usr/include/atk-1.0/atk/atkselection.h" 1
# 45 "/usr/include/atk-1.0/atk/atkselection.h"
typedef struct _AtkSelection AtkSelection;

typedef struct _AtkSelectionIface AtkSelectionIface;

struct _AtkSelectionIface
{
  GTypeInterface parent;

  gboolean (*add_selection) (AtkSelection *selection,
                             gint i);
  gboolean (*clear_selection) (AtkSelection *selection);
  AtkObject *(*ref_selection) (AtkSelection *selection,
                               gint i);
  gint (*get_selection_count) (AtkSelection *selection);
  gboolean (*is_child_selected) (AtkSelection *selection,
                                 gint i);
  gboolean (*remove_selection) (AtkSelection *selection,
                                gint i);
  gboolean (*select_all_selection) (AtkSelection *selection);



  void (*selection_changed) (AtkSelection *selection);
};

extern
GType atk_selection_get_type (void);

extern
gboolean atk_selection_add_selection (AtkSelection *selection,
                                      gint i);

extern
gboolean atk_selection_clear_selection (AtkSelection *selection);

extern
AtkObject *atk_selection_ref_selection (AtkSelection *selection,
                                        gint i);

extern
gint atk_selection_get_selection_count (AtkSelection *selection);

extern
gboolean atk_selection_is_child_selected (AtkSelection *selection,
                                          gint i);

extern
gboolean atk_selection_remove_selection (AtkSelection *selection,
                                         gint i);

extern
gboolean atk_selection_select_all_selection (AtkSelection *selection);
# 47 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atksocket.h" 1
# 27 "/usr/include/atk-1.0/atk/atksocket.h"
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 28 "/usr/include/atk-1.0/atk/atksocket.h" 2
# 38 "/usr/include/atk-1.0/atk/atksocket.h"
typedef struct _AtkSocket AtkSocket;
typedef struct _AtkSocketClass AtkSocketClass;

struct _AtkSocket
{
  AtkObject parent;


  gchar *embedded_plug_id;
};

extern
GType atk_socket_get_type (void);

struct _AtkSocketClass
{
  AtkObjectClass parent_class;




  void (*embed) (AtkSocket *obj, const gchar *plug_id);
};

extern
AtkObject *atk_socket_new (void);
extern
void atk_socket_embed (AtkSocket *obj, const gchar *plug_id);
extern
gboolean atk_socket_is_occupied (AtkSocket *obj);
# 48 "/usr/include/atk-1.0/atk/atk.h" 2

# 1 "/usr/include/atk-1.0/atk/atkstateset.h" 1
# 40 "/usr/include/atk-1.0/atk/atkstateset.h"
typedef struct _AtkStateSetClass AtkStateSetClass;

struct _AtkStateSet
{
  GObject parent;
};

struct _AtkStateSetClass
{
  GObjectClass parent;
};

extern
GType atk_state_set_get_type (void);

extern
AtkStateSet *atk_state_set_new (void);
extern
gboolean atk_state_set_is_empty (AtkStateSet *set);
extern
gboolean atk_state_set_add_state (AtkStateSet *set,
                                  AtkStateType type);
extern
void atk_state_set_add_states (AtkStateSet *set,
                               AtkStateType *types,
                               gint n_types);
extern
void atk_state_set_clear_states (AtkStateSet *set);
extern
gboolean atk_state_set_contains_state (AtkStateSet *set,
                                       AtkStateType type);
extern
gboolean atk_state_set_contains_states (AtkStateSet *set,
                                        AtkStateType *types,
                                        gint n_types);
extern
gboolean atk_state_set_remove_state (AtkStateSet *set,
                                     AtkStateType type);
extern
AtkStateSet *atk_state_set_and_sets (AtkStateSet *set,
                                     AtkStateSet *compare_set);
extern
AtkStateSet *atk_state_set_or_sets (AtkStateSet *set,
                                    AtkStateSet *compare_set);
extern
AtkStateSet *atk_state_set_xor_sets (AtkStateSet *set,
                                     AtkStateSet *compare_set);
# 50 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkstreamablecontent.h" 1
# 38 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
typedef struct _AtkStreamableContent AtkStreamableContent;

typedef struct _AtkStreamableContentIface AtkStreamableContentIface;

struct _AtkStreamableContentIface
{
  GTypeInterface parent;




  gint (*get_n_mime_types) (AtkStreamableContent *streamable);
# 61 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
  const gchar *(*get_mime_type) (AtkStreamableContent *streamable,
                                 gint i);






  GIOChannel *(*get_stream) (AtkStreamableContent *streamable,
                             const gchar *mime_type);
# 83 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
  const gchar *(*get_uri) (AtkStreamableContent *streamable,
                           const gchar *mime_type);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
};
extern
GType atk_streamable_content_get_type (void);

extern
gint atk_streamable_content_get_n_mime_types (AtkStreamableContent *streamable);

extern
const gchar *atk_streamable_content_get_mime_type (AtkStreamableContent *streamable,
                                                   gint i);
extern
GIOChannel *atk_streamable_content_get_stream (AtkStreamableContent *streamable,
                                               const gchar *mime_type);

extern
const gchar *atk_streamable_content_get_uri (AtkStreamableContent *streamable,
                                             const gchar *mime_type);
# 51 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atktable.h" 1
# 38 "/usr/include/atk-1.0/atk/atktable.h"
typedef struct _AtkTable AtkTable;

typedef struct _AtkTableIface AtkTableIface;

struct _AtkTableIface
{
  GTypeInterface parent;

  AtkObject *(*ref_at) (AtkTable *table,
                        gint row,
                        gint column);
  gint (*get_index_at) (AtkTable *table,
                        gint row,
                        gint column);
  gint (*get_column_at_index) (AtkTable *table,
                               gint index_);
  gint (*get_row_at_index) (AtkTable *table,
                            gint index_);
  gint (*get_n_columns) (AtkTable *table);
  gint (*get_n_rows) (AtkTable *table);
  gint (*get_column_extent_at) (AtkTable *table,
                                gint row,
                                gint column);
  gint (*get_row_extent_at) (AtkTable *table,
                             gint row,
                             gint column);
  AtkObject *(*get_caption) (AtkTable *table);
  const gchar *(*get_column_description) (AtkTable *table,
                                          gint column);
  AtkObject *(*get_column_header) (AtkTable *table,
                                   gint column);
  const gchar *(*get_row_description) (AtkTable *table,
                                       gint row);
  AtkObject *(*get_row_header) (AtkTable *table,
                                gint row);
  AtkObject *(*get_summary) (AtkTable *table);
  void (*set_caption) (AtkTable *table,
                       AtkObject *caption);
  void (*set_column_description) (AtkTable *table,
                                  gint column,
                                  const gchar *description);
  void (*set_column_header) (AtkTable *table,
                             gint column,
                             AtkObject *header);
  void (*set_row_description) (AtkTable *table,
                               gint row,
                               const gchar *description);
  void (*set_row_header) (AtkTable *table,
                          gint row,
                          AtkObject *header);
  void (*set_summary) (AtkTable *table,
                       AtkObject *accessible);
  gint (*get_selected_columns) (AtkTable *table,
                                gint **selected);
  gint (*get_selected_rows) (AtkTable *table,
                             gint **selected);
  gboolean (*is_column_selected) (AtkTable *table,
                                  gint column);
  gboolean (*is_row_selected) (AtkTable *table,
                               gint row);
  gboolean (*is_selected) (AtkTable *table,
                           gint row,
                           gint column);
  gboolean (*add_row_selection) (AtkTable *table,
                                 gint row);
  gboolean (*remove_row_selection) (AtkTable *table,
                                    gint row);
  gboolean (*add_column_selection) (AtkTable *table,
                                    gint column);
  gboolean (*remove_column_selection) (AtkTable *table,
                                       gint column);




  void (*row_inserted) (AtkTable *table,
                        gint row,
                        gint num_inserted);
  void (*column_inserted) (AtkTable *table,
                           gint column,
                           gint num_inserted);
  void (*row_deleted) (AtkTable *table,
                       gint row,
                       gint num_deleted);
  void (*column_deleted) (AtkTable *table,
                          gint column,
                          gint num_deleted);
  void (*row_reordered) (AtkTable *table);
  void (*column_reordered) (AtkTable *table);
  void (*model_changed) (AtkTable *table);
};

extern
GType atk_table_get_type (void);

extern
AtkObject *atk_table_ref_at (AtkTable *table,
                             gint row,
                             gint column);
__attribute__((__deprecated__("Use '" "atk_table_ref_at" "' instead"))) extern
gint atk_table_get_index_at (AtkTable *table,
                             gint row,
                             gint column);
__attribute__((__deprecated__)) extern
gint atk_table_get_column_at_index (AtkTable *table,
                                    gint index_);
__attribute__((__deprecated__)) extern
gint atk_table_get_row_at_index (AtkTable *table,
                                 gint index_);
extern
gint atk_table_get_n_columns (AtkTable *table);
extern
gint atk_table_get_n_rows (AtkTable *table);
extern
gint atk_table_get_column_extent_at (AtkTable *table,
                                     gint row,
                                     gint column);
extern
gint atk_table_get_row_extent_at (AtkTable *table,
                                  gint row,
                                  gint column);
extern
AtkObject *
atk_table_get_caption (AtkTable *table);
extern
const gchar *atk_table_get_column_description (AtkTable *table,
                                               gint column);
extern
AtkObject *atk_table_get_column_header (AtkTable *table,
                                        gint column);
extern
const gchar *atk_table_get_row_description (AtkTable *table,
                                            gint row);
extern
AtkObject *atk_table_get_row_header (AtkTable *table,
                                     gint row);
extern
AtkObject *atk_table_get_summary (AtkTable *table);
extern
void atk_table_set_caption (AtkTable *table,
                            AtkObject *caption);
extern
void atk_table_set_column_description (AtkTable *table,
                                       gint column,
                                       const gchar *description);
extern
void atk_table_set_column_header (AtkTable *table,
                                  gint column,
                                  AtkObject *header);
extern
void atk_table_set_row_description (AtkTable *table,
                                    gint row,
                                    const gchar *description);
extern
void atk_table_set_row_header (AtkTable *table,
                               gint row,
                               AtkObject *header);
extern
void atk_table_set_summary (AtkTable *table,
                            AtkObject *accessible);
extern
gint atk_table_get_selected_columns (AtkTable *table,
                                     gint **selected);
extern
gint atk_table_get_selected_rows (AtkTable *table,
                                  gint **selected);
extern
gboolean atk_table_is_column_selected (AtkTable *table,
                                       gint column);
extern
gboolean atk_table_is_row_selected (AtkTable *table,
                                    gint row);
extern
gboolean atk_table_is_selected (AtkTable *table,
                                gint row,
                                gint column);
extern
gboolean atk_table_add_row_selection (AtkTable *table,
                                      gint row);
extern
gboolean atk_table_remove_row_selection (AtkTable *table,
                                         gint row);
extern
gboolean atk_table_add_column_selection (AtkTable *table,
                                         gint column);
extern
gboolean atk_table_remove_column_selection (AtkTable *table,
                                            gint column);
# 52 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atktablecell.h" 1
# 38 "/usr/include/atk-1.0/atk/atktablecell.h"
typedef struct _AtkTableCell AtkTableCell;

typedef struct _AtkTableCellIface AtkTableCellIface;
# 63 "/usr/include/atk-1.0/atk/atktablecell.h"
struct _AtkTableCellIface
{

  GTypeInterface parent;


  gint (*get_column_span) (AtkTableCell *cell);
  GPtrArray *(*get_column_header_cells) (AtkTableCell *cell);
  gboolean (*get_position) (AtkTableCell *cell,
                            gint *row,
                            gint *column);
  gint (*get_row_span) (AtkTableCell *cell);
  GPtrArray *(*get_row_header_cells) (AtkTableCell *cell);
  gboolean (*get_row_column_span) (AtkTableCell *cell,
                                   gint *row,
                                   gint *column,
                                   gint *row_span,
                                   gint *column_span);
  AtkObject *(*get_table) (AtkTableCell *cell);
};

extern
GType atk_table_cell_get_type (void);

extern
gint atk_table_cell_get_column_span (AtkTableCell *cell);
extern
GPtrArray *atk_table_cell_get_column_header_cells (AtkTableCell *cell);
extern
gboolean atk_table_cell_get_position (AtkTableCell *cell,
                                      gint *row,
                                      gint *column);
extern
gint atk_table_cell_get_row_span (AtkTableCell *cell);
extern
GPtrArray *atk_table_cell_get_row_header_cells (AtkTableCell *cell);
extern
gboolean atk_table_cell_get_row_column_span (AtkTableCell *cell,
                                             gint *row,
                                             gint *column,
                                             gint *row_span,
                                             gint *column_span);
extern
AtkObject *atk_table_cell_get_table (AtkTableCell *cell);
# 53 "/usr/include/atk-1.0/atk/atk.h" 2


# 1 "/usr/include/atk-1.0/atk/atkvalue.h" 1
# 39 "/usr/include/atk-1.0/atk/atkvalue.h"
typedef struct _AtkValue AtkValue;

typedef struct _AtkValueIface AtkValueIface;
# 51 "/usr/include/atk-1.0/atk/atkvalue.h"
typedef enum
{
  ATK_VALUE_VERY_WEAK,
  ATK_VALUE_WEAK,
  ATK_VALUE_ACCEPTABLE,
  ATK_VALUE_STRONG,
  ATK_VALUE_VERY_STRONG,
  ATK_VALUE_VERY_LOW,
  ATK_VALUE_LOW,
  ATK_VALUE_MEDIUM,
  ATK_VALUE_HIGH,
  ATK_VALUE_VERY_HIGH,
  ATK_VALUE_VERY_BAD,
  ATK_VALUE_BAD,
  ATK_VALUE_GOOD,
  ATK_VALUE_VERY_GOOD,
  ATK_VALUE_BEST,
  ATK_VALUE_LAST_DEFINED
} AtkValueType;
# 95 "/usr/include/atk-1.0/atk/atkvalue.h"
struct _AtkValueIface
{
  GTypeInterface parent;


  void (*get_current_value) (AtkValue *obj,
                             GValue *value);
  void (*get_maximum_value) (AtkValue *obj,
                             GValue *value);
  void (*get_minimum_value) (AtkValue *obj,
                             GValue *value);
  gboolean (*set_current_value) (AtkValue *obj,
                                 const GValue *value);
  void (*get_minimum_increment) (AtkValue *obj,
                                 GValue *value);

  void (*get_value_and_text) (AtkValue *obj,
                              gdouble *value,
                              gchar **text);
  AtkRange *(*get_range) (AtkValue *obj);
  gdouble (*get_increment) (AtkValue *obj);
  GSList *(*get_sub_ranges) (AtkValue *obj);
  void (*set_value) (AtkValue *obj,
                     const gdouble new_value);
};

extern
GType atk_value_get_type (void);

__attribute__((__deprecated__("Use '" "atk_value_get_value_and_text" "' instead"))) extern
void atk_value_get_current_value (AtkValue *obj,
                                  GValue *value);

__attribute__((__deprecated__("Use '" "atk_value_get_range" "' instead"))) extern
void atk_value_get_maximum_value (AtkValue *obj,
                                  GValue *value);
__attribute__((__deprecated__("Use '" "atk_value_get_range" "' instead"))) extern
void atk_value_get_minimum_value (AtkValue *obj,
                                  GValue *value);
__attribute__((__deprecated__("Use '" "atk_value_set_value" "' instead"))) extern
gboolean atk_value_set_current_value (AtkValue *obj,
                                      const GValue *value);
__attribute__((__deprecated__("Use '" "atk_value_get_increment" "' instead"))) extern
void atk_value_get_minimum_increment (AtkValue *obj,
                                      GValue *value);

extern
void atk_value_get_value_and_text (AtkValue *obj,
                                   gdouble *value,
                                   gchar **text);
extern
AtkRange *atk_value_get_range (AtkValue *obj);
extern
gdouble atk_value_get_increment (AtkValue *obj);
extern
GSList *atk_value_get_sub_ranges (AtkValue *obj);
extern
void atk_value_set_value (AtkValue *obj,
                          const gdouble new_value);

extern
const gchar *atk_value_type_get_name (AtkValueType value_type);
extern
const gchar *atk_value_type_get_localized_name (AtkValueType value_type);
# 56 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkversion.h" 1
# 57 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkwindow.h" 1
# 40 "/usr/include/atk-1.0/atk/atkwindow.h"
typedef struct _AtkWindow AtkWindow;
typedef struct _AtkWindowIface AtkWindowIface;

struct _AtkWindowIface
{
  GTypeInterface parent;
};

extern
GType atk_window_get_type (void);
# 58 "/usr/include/atk-1.0/atk/atk.h" 2

# 1 "/usr/include/atk-1.0/atk/atk-autocleanups.h" 1
# 24 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
typedef AtkAction *AtkAction_autoptr; typedef GList *AtkAction_listautoptr; typedef GSList *AtkAction_slistautoptr; typedef GQueue *AtkAction_queueautoptr;
# 24 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 24 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 24 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkAction (AtkAction *_ptr) { if (_ptr) (g_object_unref) ((AtkAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkAction (AtkAction **_ptr) { glib_autoptr_clear_AtkAction (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkAction (void *_ptr) { (g_object_unref) ((AtkAction *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkAction (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkAction); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkAction (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkAction); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkAction (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkAction); }
# 24 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkComponent *AtkComponent_autoptr; typedef GList *AtkComponent_listautoptr; typedef GSList *AtkComponent_slistautoptr; typedef GQueue *AtkComponent_queueautoptr;
# 25 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 25 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 25 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkComponent (AtkComponent *_ptr) { if (_ptr) (g_object_unref) ((AtkComponent *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkComponent (AtkComponent **_ptr) { glib_autoptr_clear_AtkComponent (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkComponent (void *_ptr) { (g_object_unref) ((AtkComponent *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkComponent (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkComponent); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkComponent (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkComponent); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkComponent (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkComponent); }
# 25 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkDocument *AtkDocument_autoptr; typedef GList *AtkDocument_listautoptr; typedef GSList *AtkDocument_slistautoptr; typedef GQueue *AtkDocument_queueautoptr;
# 26 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 26 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 26 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkDocument (AtkDocument *_ptr) { if (_ptr) (g_object_unref) ((AtkDocument *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkDocument (AtkDocument **_ptr) { glib_autoptr_clear_AtkDocument (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkDocument (void *_ptr) { (g_object_unref) ((AtkDocument *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkDocument (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkDocument); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkDocument (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkDocument); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkDocument (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkDocument); }
# 26 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkEditableText *AtkEditableText_autoptr; typedef GList *AtkEditableText_listautoptr; typedef GSList *AtkEditableText_slistautoptr; typedef GQueue *AtkEditableText_queueautoptr;
# 27 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 27 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 27 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkEditableText (AtkEditableText *_ptr) { if (_ptr) (g_object_unref) ((AtkEditableText *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkEditableText (AtkEditableText **_ptr) { glib_autoptr_clear_AtkEditableText (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkEditableText (void *_ptr) { (g_object_unref) ((AtkEditableText *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkEditableText (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkEditableText); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkEditableText (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkEditableText); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkEditableText (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkEditableText); }
# 27 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkGObjectAccessible *AtkGObjectAccessible_autoptr; typedef GList *AtkGObjectAccessible_listautoptr; typedef GSList *AtkGObjectAccessible_slistautoptr; typedef GQueue *AtkGObjectAccessible_queueautoptr;
# 28 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 28 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 28 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkGObjectAccessible (AtkGObjectAccessible *_ptr) { if (_ptr) (g_object_unref) ((AtkGObjectAccessible *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkGObjectAccessible (AtkGObjectAccessible **_ptr) { glib_autoptr_clear_AtkGObjectAccessible (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkGObjectAccessible (void *_ptr) { (g_object_unref) ((AtkGObjectAccessible *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkGObjectAccessible (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkGObjectAccessible); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkGObjectAccessible (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkGObjectAccessible); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkGObjectAccessible (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkGObjectAccessible); }
# 28 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkHyperlink *AtkHyperlink_autoptr; typedef GList *AtkHyperlink_listautoptr; typedef GSList *AtkHyperlink_slistautoptr; typedef GQueue *AtkHyperlink_queueautoptr;
# 29 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 29 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkHyperlink (AtkHyperlink *_ptr) { if (_ptr) (g_object_unref) ((AtkHyperlink *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkHyperlink (AtkHyperlink **_ptr) { glib_autoptr_clear_AtkHyperlink (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkHyperlink (void *_ptr) { (g_object_unref) ((AtkHyperlink *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkHyperlink (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkHyperlink); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkHyperlink (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkHyperlink); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkHyperlink (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkHyperlink); }
# 29 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkHyperlinkImpl *AtkHyperlinkImpl_autoptr; typedef GList *AtkHyperlinkImpl_listautoptr; typedef GSList *AtkHyperlinkImpl_slistautoptr; typedef GQueue *AtkHyperlinkImpl_queueautoptr;
# 30 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 30 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkHyperlinkImpl (AtkHyperlinkImpl *_ptr) { if (_ptr) (g_object_unref) ((AtkHyperlinkImpl *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkHyperlinkImpl (AtkHyperlinkImpl **_ptr) { glib_autoptr_clear_AtkHyperlinkImpl (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkHyperlinkImpl (void *_ptr) { (g_object_unref) ((AtkHyperlinkImpl *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkHyperlinkImpl (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkHyperlinkImpl); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkHyperlinkImpl (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkHyperlinkImpl); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkHyperlinkImpl (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkHyperlinkImpl); }
# 30 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkHypertext *AtkHypertext_autoptr; typedef GList *AtkHypertext_listautoptr; typedef GSList *AtkHypertext_slistautoptr; typedef GQueue *AtkHypertext_queueautoptr;
# 31 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 31 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkHypertext (AtkHypertext *_ptr) { if (_ptr) (g_object_unref) ((AtkHypertext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkHypertext (AtkHypertext **_ptr) { glib_autoptr_clear_AtkHypertext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkHypertext (void *_ptr) { (g_object_unref) ((AtkHypertext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkHypertext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkHypertext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkHypertext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkHypertext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkHypertext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkHypertext); }
# 31 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkImage *AtkImage_autoptr; typedef GList *AtkImage_listautoptr; typedef GSList *AtkImage_slistautoptr; typedef GQueue *AtkImage_queueautoptr;
# 32 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 32 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 32 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkImage (AtkImage *_ptr) { if (_ptr) (g_object_unref) ((AtkImage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkImage (AtkImage **_ptr) { glib_autoptr_clear_AtkImage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkImage (void *_ptr) { (g_object_unref) ((AtkImage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkImage (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkImage); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkImage (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkImage); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkImage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkImage); }
# 32 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkImplementor *AtkImplementor_autoptr; typedef GList *AtkImplementor_listautoptr; typedef GSList *AtkImplementor_slistautoptr; typedef GQueue *AtkImplementor_queueautoptr;
# 33 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 33 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkImplementor (AtkImplementor *_ptr) { if (_ptr) (g_object_unref) ((AtkImplementor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkImplementor (AtkImplementor **_ptr) { glib_autoptr_clear_AtkImplementor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkImplementor (void *_ptr) { (g_object_unref) ((AtkImplementor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkImplementor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkImplementor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkImplementor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkImplementor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkImplementor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkImplementor); }
# 33 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkMisc *AtkMisc_autoptr; typedef GList *AtkMisc_listautoptr; typedef GSList *AtkMisc_slistautoptr; typedef GQueue *AtkMisc_queueautoptr;
# 34 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 34 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkMisc (AtkMisc *_ptr) { if (_ptr) (g_object_unref) ((AtkMisc *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkMisc (AtkMisc **_ptr) { glib_autoptr_clear_AtkMisc (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkMisc (void *_ptr) { (g_object_unref) ((AtkMisc *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkMisc (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkMisc); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkMisc (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkMisc); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkMisc (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkMisc); }
# 34 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkNoOpObjectFactory *AtkNoOpObjectFactory_autoptr; typedef GList *AtkNoOpObjectFactory_listautoptr; typedef GSList *AtkNoOpObjectFactory_slistautoptr; typedef GQueue *AtkNoOpObjectFactory_queueautoptr;
# 35 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 35 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 35 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkNoOpObjectFactory (AtkNoOpObjectFactory *_ptr) { if (_ptr) (g_object_unref) ((AtkNoOpObjectFactory *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkNoOpObjectFactory (AtkNoOpObjectFactory **_ptr) { glib_autoptr_clear_AtkNoOpObjectFactory (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkNoOpObjectFactory (void *_ptr) { (g_object_unref) ((AtkNoOpObjectFactory *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkNoOpObjectFactory (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkNoOpObjectFactory); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkNoOpObjectFactory (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkNoOpObjectFactory); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkNoOpObjectFactory (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkNoOpObjectFactory); }
# 35 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkNoOpObject *AtkNoOpObject_autoptr; typedef GList *AtkNoOpObject_listautoptr; typedef GSList *AtkNoOpObject_slistautoptr; typedef GQueue *AtkNoOpObject_queueautoptr;
# 36 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 36 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkNoOpObject (AtkNoOpObject *_ptr) { if (_ptr) (g_object_unref) ((AtkNoOpObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkNoOpObject (AtkNoOpObject **_ptr) { glib_autoptr_clear_AtkNoOpObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkNoOpObject (void *_ptr) { (g_object_unref) ((AtkNoOpObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkNoOpObject (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkNoOpObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkNoOpObject (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkNoOpObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkNoOpObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkNoOpObject); }
# 36 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkObjectFactory *AtkObjectFactory_autoptr; typedef GList *AtkObjectFactory_listautoptr; typedef GSList *AtkObjectFactory_slistautoptr; typedef GQueue *AtkObjectFactory_queueautoptr;
# 37 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 37 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 37 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkObjectFactory (AtkObjectFactory *_ptr) { if (_ptr) (g_object_unref) ((AtkObjectFactory *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkObjectFactory (AtkObjectFactory **_ptr) { glib_autoptr_clear_AtkObjectFactory (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkObjectFactory (void *_ptr) { (g_object_unref) ((AtkObjectFactory *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkObjectFactory (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkObjectFactory); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkObjectFactory (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkObjectFactory); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkObjectFactory (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkObjectFactory); }
# 37 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkObject *AtkObject_autoptr; typedef GList *AtkObject_listautoptr; typedef GSList *AtkObject_slistautoptr; typedef GQueue *AtkObject_queueautoptr;
# 38 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 38 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkObject (AtkObject *_ptr) { if (_ptr) (g_object_unref) ((AtkObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkObject (AtkObject **_ptr) { glib_autoptr_clear_AtkObject (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkObject (void *_ptr) { (g_object_unref) ((AtkObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkObject (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkObject); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkObject (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkObject); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkObject (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkObject); }
# 38 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkPlug *AtkPlug_autoptr; typedef GList *AtkPlug_listautoptr; typedef GSList *AtkPlug_slistautoptr; typedef GQueue *AtkPlug_queueautoptr;
# 39 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 39 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 39 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkPlug (AtkPlug *_ptr) { if (_ptr) (g_object_unref) ((AtkPlug *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkPlug (AtkPlug **_ptr) { glib_autoptr_clear_AtkPlug (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkPlug (void *_ptr) { (g_object_unref) ((AtkPlug *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkPlug (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkPlug); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkPlug (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkPlug); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkPlug (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkPlug); }
# 39 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkRegistry *AtkRegistry_autoptr; typedef GList *AtkRegistry_listautoptr; typedef GSList *AtkRegistry_slistautoptr; typedef GQueue *AtkRegistry_queueautoptr;
# 40 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 40 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 40 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkRegistry (AtkRegistry *_ptr) { if (_ptr) (g_object_unref) ((AtkRegistry *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkRegistry (AtkRegistry **_ptr) { glib_autoptr_clear_AtkRegistry (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkRegistry (void *_ptr) { (g_object_unref) ((AtkRegistry *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkRegistry (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkRegistry); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkRegistry (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkRegistry); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkRegistry (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkRegistry); }
# 40 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkRelationSet *AtkRelationSet_autoptr; typedef GList *AtkRelationSet_listautoptr; typedef GSList *AtkRelationSet_slistautoptr; typedef GQueue *AtkRelationSet_queueautoptr;
# 41 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 41 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 41 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkRelationSet (AtkRelationSet *_ptr) { if (_ptr) (g_object_unref) ((AtkRelationSet *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkRelationSet (AtkRelationSet **_ptr) { glib_autoptr_clear_AtkRelationSet (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkRelationSet (void *_ptr) { (g_object_unref) ((AtkRelationSet *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkRelationSet (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkRelationSet); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkRelationSet (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkRelationSet); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkRelationSet (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkRelationSet); }
# 41 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkRelation *AtkRelation_autoptr; typedef GList *AtkRelation_listautoptr; typedef GSList *AtkRelation_slistautoptr; typedef GQueue *AtkRelation_queueautoptr;
# 42 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 42 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 42 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkRelation (AtkRelation *_ptr) { if (_ptr) (g_object_unref) ((AtkRelation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkRelation (AtkRelation **_ptr) { glib_autoptr_clear_AtkRelation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkRelation (void *_ptr) { (g_object_unref) ((AtkRelation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkRelation (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkRelation); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkRelation (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkRelation); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkRelation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkRelation); }
# 42 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkSelection *AtkSelection_autoptr; typedef GList *AtkSelection_listautoptr; typedef GSList *AtkSelection_slistautoptr; typedef GQueue *AtkSelection_queueautoptr;
# 43 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 43 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 43 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkSelection (AtkSelection *_ptr) { if (_ptr) (g_object_unref) ((AtkSelection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkSelection (AtkSelection **_ptr) { glib_autoptr_clear_AtkSelection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkSelection (void *_ptr) { (g_object_unref) ((AtkSelection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkSelection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkSelection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkSelection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkSelection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkSelection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkSelection); }
# 43 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkSocket *AtkSocket_autoptr; typedef GList *AtkSocket_listautoptr; typedef GSList *AtkSocket_slistautoptr; typedef GQueue *AtkSocket_queueautoptr;
# 44 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 44 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 44 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkSocket (AtkSocket *_ptr) { if (_ptr) (g_object_unref) ((AtkSocket *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkSocket (AtkSocket **_ptr) { glib_autoptr_clear_AtkSocket (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkSocket (void *_ptr) { (g_object_unref) ((AtkSocket *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkSocket (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkSocket); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkSocket (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkSocket); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkSocket (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkSocket); }
# 44 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkStateSet *AtkStateSet_autoptr; typedef GList *AtkStateSet_listautoptr; typedef GSList *AtkStateSet_slistautoptr; typedef GQueue *AtkStateSet_queueautoptr;
# 45 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 45 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 45 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkStateSet (AtkStateSet *_ptr) { if (_ptr) (g_object_unref) ((AtkStateSet *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkStateSet (AtkStateSet **_ptr) { glib_autoptr_clear_AtkStateSet (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkStateSet (void *_ptr) { (g_object_unref) ((AtkStateSet *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkStateSet (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkStateSet); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkStateSet (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkStateSet); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkStateSet (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkStateSet); }
# 45 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkStreamableContent *AtkStreamableContent_autoptr; typedef GList *AtkStreamableContent_listautoptr; typedef GSList *AtkStreamableContent_slistautoptr; typedef GQueue *AtkStreamableContent_queueautoptr;
# 46 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 46 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 46 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkStreamableContent (AtkStreamableContent *_ptr) { if (_ptr) (g_object_unref) ((AtkStreamableContent *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkStreamableContent (AtkStreamableContent **_ptr) { glib_autoptr_clear_AtkStreamableContent (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkStreamableContent (void *_ptr) { (g_object_unref) ((AtkStreamableContent *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkStreamableContent (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkStreamableContent); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkStreamableContent (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkStreamableContent); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkStreamableContent (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkStreamableContent); }
# 46 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkTableCell *AtkTableCell_autoptr; typedef GList *AtkTableCell_listautoptr; typedef GSList *AtkTableCell_slistautoptr; typedef GQueue *AtkTableCell_queueautoptr;
# 47 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 47 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 47 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkTableCell (AtkTableCell *_ptr) { if (_ptr) (g_object_unref) ((AtkTableCell *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkTableCell (AtkTableCell **_ptr) { glib_autoptr_clear_AtkTableCell (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkTableCell (void *_ptr) { (g_object_unref) ((AtkTableCell *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkTableCell (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkTableCell); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkTableCell (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkTableCell); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkTableCell (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkTableCell); }
# 47 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkTable *AtkTable_autoptr; typedef GList *AtkTable_listautoptr; typedef GSList *AtkTable_slistautoptr; typedef GQueue *AtkTable_queueautoptr;
# 48 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 48 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 48 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkTable (AtkTable *_ptr) { if (_ptr) (g_object_unref) ((AtkTable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkTable (AtkTable **_ptr) { glib_autoptr_clear_AtkTable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkTable (void *_ptr) { (g_object_unref) ((AtkTable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkTable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkTable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkTable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkTable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkTable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkTable); }
# 48 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkText *AtkText_autoptr; typedef GList *AtkText_listautoptr; typedef GSList *AtkText_slistautoptr; typedef GQueue *AtkText_queueautoptr;
# 49 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 49 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 49 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkText (AtkText *_ptr) { if (_ptr) (g_object_unref) ((AtkText *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkText (AtkText **_ptr) { glib_autoptr_clear_AtkText (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkText (void *_ptr) { (g_object_unref) ((AtkText *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkText (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkText); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkText (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkText); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkText (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkText); }
# 49 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkUtil *AtkUtil_autoptr; typedef GList *AtkUtil_listautoptr; typedef GSList *AtkUtil_slistautoptr; typedef GQueue *AtkUtil_queueautoptr;
# 50 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 50 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 50 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkUtil (AtkUtil *_ptr) { if (_ptr) (g_object_unref) ((AtkUtil *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkUtil (AtkUtil **_ptr) { glib_autoptr_clear_AtkUtil (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkUtil (void *_ptr) { (g_object_unref) ((AtkUtil *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkUtil (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkUtil); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkUtil (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkUtil); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkUtil (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkUtil); }
# 50 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkValue *AtkValue_autoptr; typedef GList *AtkValue_listautoptr; typedef GSList *AtkValue_slistautoptr; typedef GQueue *AtkValue_queueautoptr;
# 51 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 51 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 51 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkValue (AtkValue *_ptr) { if (_ptr) (g_object_unref) ((AtkValue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkValue (AtkValue **_ptr) { glib_autoptr_clear_AtkValue (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkValue (void *_ptr) { (g_object_unref) ((AtkValue *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkValue (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkValue); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkValue (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkValue); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkValue (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkValue); }
# 51 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
typedef AtkWindow *AtkWindow_autoptr; typedef GList *AtkWindow_listautoptr; typedef GSList *AtkWindow_slistautoptr; typedef GQueue *AtkWindow_queueautoptr;
# 52 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic push
# 52 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_AtkWindow (AtkWindow *_ptr) { if (_ptr) (g_object_unref) ((AtkWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_AtkWindow (AtkWindow **_ptr) { glib_autoptr_clear_AtkWindow (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_AtkWindow (void *_ptr) { (g_object_unref) ((AtkWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_AtkWindow (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_AtkWindow); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_AtkWindow (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_AtkWindow); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_AtkWindow (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_AtkWindow); }
# 52 "/usr/include/atk-1.0/atk/atk-autocleanups.h"
#pragma clang diagnostic pop
# 60 "/usr/include/atk-1.0/atk/atk.h" 2
# 37 "/usr/include/gtk-3.0/gtk/gtkwidget.h" 2
# 48 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
typedef enum
{
  GTK_WIDGET_HELP_TOOLTIP,
  GTK_WIDGET_HELP_WHATS_THIS
} GtkWidgetHelpType;
# 66 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
typedef struct _GtkWidgetPrivate GtkWidgetPrivate;
typedef struct _GtkWidgetClass GtkWidgetClass;
typedef struct _GtkWidgetClassPrivate GtkWidgetClassPrivate;
# 83 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
typedef GdkRectangle GtkAllocation;
# 93 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
typedef void (*GtkCallback) (GtkWidget *widget,
        gpointer data);
# 109 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
typedef gboolean (*GtkTickCallback) (GtkWidget *widget,
                                     GdkFrameClock *frame_clock,
                                     gpointer user_data);
# 122 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
struct _GtkRequisition
{
  gint width;
  gint height;
};






struct _GtkWidget
{
  GInitiallyUnowned parent_instance;



  GtkWidgetPrivate *priv;
};
# 362 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
struct _GtkWidgetClass
{
  GInitiallyUnownedClass parent_class;



  guint activate_signal;


  void (*dispatch_child_properties_changed) (GtkWidget *widget,
          guint n_pspecs,
          GParamSpec **pspecs);


  void (* destroy) (GtkWidget *widget);
  void (* show) (GtkWidget *widget);
  void (* show_all) (GtkWidget *widget);
  void (* hide) (GtkWidget *widget);
  void (* map) (GtkWidget *widget);
  void (* unmap) (GtkWidget *widget);
  void (* realize) (GtkWidget *widget);
  void (* unrealize) (GtkWidget *widget);
  void (* size_allocate) (GtkWidget *widget,
    GtkAllocation *allocation);
  void (* state_changed) (GtkWidget *widget,
    GtkStateType previous_state);
  void (* state_flags_changed) (GtkWidget *widget,
    GtkStateFlags previous_state_flags);
  void (* parent_set) (GtkWidget *widget,
    GtkWidget *previous_parent);
  void (* hierarchy_changed) (GtkWidget *widget,
    GtkWidget *previous_toplevel);
  void (* style_set) (GtkWidget *widget,
    GtkStyle *previous_style);
  void (* direction_changed) (GtkWidget *widget,
    GtkTextDirection previous_direction);
  void (* grab_notify) (GtkWidget *widget,
    gboolean was_grabbed);
  void (* child_notify) (GtkWidget *widget,
    GParamSpec *child_property);
  gboolean (* draw) (GtkWidget *widget,
                                cairo_t *cr);


  GtkSizeRequestMode (* get_request_mode) (GtkWidget *widget);

  void (* get_preferred_height) (GtkWidget *widget,
                                                         gint *minimum_height,
                                                         gint *natural_height);
  void (* get_preferred_width_for_height) (GtkWidget *widget,
                                                         gint height,
                                                         gint *minimum_width,
                                                         gint *natural_width);
  void (* get_preferred_width) (GtkWidget *widget,
                                                         gint *minimum_width,
                                                         gint *natural_width);
  void (* get_preferred_height_for_width) (GtkWidget *widget,
                                                         gint width,
                                                         gint *minimum_height,
                                                         gint *natural_height);


  gboolean (* mnemonic_activate) (GtkWidget *widget,
                                         gboolean group_cycling);


  void (* grab_focus) (GtkWidget *widget);
  gboolean (* focus) (GtkWidget *widget,
                                         GtkDirectionType direction);


  void (* move_focus) (GtkWidget *widget,
                                         GtkDirectionType direction);
  gboolean (* keynav_failed) (GtkWidget *widget,
                                         GtkDirectionType direction);


  gboolean (* event) (GtkWidget *widget,
      GdkEvent *event);
  gboolean (* button_press_event) (GtkWidget *widget,
      GdkEventButton *event);
  gboolean (* button_release_event) (GtkWidget *widget,
      GdkEventButton *event);
  gboolean (* scroll_event) (GtkWidget *widget,
      GdkEventScroll *event);
  gboolean (* motion_notify_event) (GtkWidget *widget,
      GdkEventMotion *event);
  gboolean (* delete_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* destroy_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* key_press_event) (GtkWidget *widget,
      GdkEventKey *event);
  gboolean (* key_release_event) (GtkWidget *widget,
      GdkEventKey *event);
  gboolean (* enter_notify_event) (GtkWidget *widget,
      GdkEventCrossing *event);
  gboolean (* leave_notify_event) (GtkWidget *widget,
      GdkEventCrossing *event);
  gboolean (* configure_event) (GtkWidget *widget,
      GdkEventConfigure *event);
  gboolean (* focus_in_event) (GtkWidget *widget,
      GdkEventFocus *event);
  gboolean (* focus_out_event) (GtkWidget *widget,
      GdkEventFocus *event);
  gboolean (* map_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* unmap_event) (GtkWidget *widget,
      GdkEventAny *event);
  gboolean (* property_notify_event) (GtkWidget *widget,
      GdkEventProperty *event);
  gboolean (* selection_clear_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* selection_request_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* selection_notify_event) (GtkWidget *widget,
      GdkEventSelection *event);
  gboolean (* proximity_in_event) (GtkWidget *widget,
      GdkEventProximity *event);
  gboolean (* proximity_out_event) (GtkWidget *widget,
      GdkEventProximity *event);
  gboolean (* visibility_notify_event) (GtkWidget *widget,
      GdkEventVisibility *event);
  gboolean (* window_state_event) (GtkWidget *widget,
      GdkEventWindowState *event);
  gboolean (* damage_event) (GtkWidget *widget,
                                         GdkEventExpose *event);
  gboolean (* grab_broken_event) (GtkWidget *widget,
                                         GdkEventGrabBroken *event);


  void (* selection_get) (GtkWidget *widget,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);
  void (* selection_received) (GtkWidget *widget,
        GtkSelectionData *selection_data,
        guint time_);


  void (* drag_begin) (GtkWidget *widget,
        GdkDragContext *context);
  void (* drag_end) (GtkWidget *widget,
        GdkDragContext *context);
  void (* drag_data_get) (GtkWidget *widget,
        GdkDragContext *context,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);
  void (* drag_data_delete) (GtkWidget *widget,
        GdkDragContext *context);


  void (* drag_leave) (GtkWidget *widget,
        GdkDragContext *context,
        guint time_);
  gboolean (* drag_motion) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        guint time_);
  gboolean (* drag_drop) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        guint time_);
  void (* drag_data_received) (GtkWidget *widget,
        GdkDragContext *context,
        gint x,
        gint y,
        GtkSelectionData *selection_data,
        guint info,
        guint time_);
  gboolean (* drag_failed) (GtkWidget *widget,
                                    GdkDragContext *context,
                                    GtkDragResult result);


  gboolean (* popup_menu) (GtkWidget *widget);






  gboolean (* show_help) (GtkWidget *widget,
                                    GtkWidgetHelpType help_type);



  AtkObject * (* get_accessible) (GtkWidget *widget);

  void (* screen_changed) (GtkWidget *widget,
                                       GdkScreen *previous_screen);
  gboolean (* can_activate_accel) (GtkWidget *widget,
                                       guint signal_id);


  void (* composited_changed) (GtkWidget *widget);

  gboolean (* query_tooltip) (GtkWidget *widget,
           gint x,
           gint y,
           gboolean keyboard_tooltip,
           GtkTooltip *tooltip);

  void (* compute_expand) (GtkWidget *widget,
                                       gboolean *hexpand_p,
                                       gboolean *vexpand_p);

  void (* adjust_size_request) (GtkWidget *widget,
                                           GtkOrientation orientation,
                                           gint *minimum_size,
                                           gint *natural_size);
  void (* adjust_size_allocation) (GtkWidget *widget,
                                           GtkOrientation orientation,
                                           gint *minimum_size,
                                           gint *natural_size,
                                           gint *allocated_pos,
                                           gint *allocated_size);

  void (* style_updated) (GtkWidget *widget);

  gboolean (* touch_event) (GtkWidget *widget,
                                           GdkEventTouch *event);

  void (* get_preferred_height_and_baseline_for_width) (GtkWidget *widget,
         gint width,
         gint *minimum_height,
         gint *natural_height,
         gint *minimum_baseline,
         gint *natural_baseline);
  void (* adjust_baseline_request)(GtkWidget *widget,
                                           gint *minimum_baseline,
                                           gint *natural_baseline);
  void (* adjust_baseline_allocation) (GtkWidget *widget,
            gint *baseline);
  void (*queue_draw_region) (GtkWidget *widget,
            const cairo_region_t *region);



  GtkWidgetClassPrivate *priv;


  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};


extern
GType gtk_widget_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_widget_new (GType type,
        const gchar *first_property_name,
        ...);
extern
void gtk_widget_destroy (GtkWidget *widget);
extern
void gtk_widget_destroyed (GtkWidget *widget,
        GtkWidget **widget_pointer);
extern
void gtk_widget_unparent (GtkWidget *widget);
extern
void gtk_widget_show (GtkWidget *widget);
extern
void gtk_widget_hide (GtkWidget *widget);
extern
void gtk_widget_show_now (GtkWidget *widget);
extern
void gtk_widget_show_all (GtkWidget *widget);
extern
void gtk_widget_set_no_show_all (GtkWidget *widget,
                                           gboolean no_show_all);
extern
gboolean gtk_widget_get_no_show_all (GtkWidget *widget);
extern
void gtk_widget_map (GtkWidget *widget);
extern
void gtk_widget_unmap (GtkWidget *widget);
extern
void gtk_widget_realize (GtkWidget *widget);
extern
void gtk_widget_unrealize (GtkWidget *widget);

extern
void gtk_widget_draw (GtkWidget *widget,
                                           cairo_t *cr);

extern
void gtk_widget_queue_draw (GtkWidget *widget);
extern
void gtk_widget_queue_draw_area (GtkWidget *widget,
        gint x,
        gint y,
        gint width,
        gint height);
extern
void gtk_widget_queue_draw_region (GtkWidget *widget,
                                           const cairo_region_t*region);
extern
void gtk_widget_queue_resize (GtkWidget *widget);
extern
void gtk_widget_queue_resize_no_redraw (GtkWidget *widget);
extern
void gtk_widget_queue_allocate (GtkWidget *widget);
extern
GdkFrameClock* gtk_widget_get_frame_clock (GtkWidget *widget);

__attribute__((__deprecated__("Use '" "gtk_widget_get_preferred_size" "' instead"))) extern
void gtk_widget_size_request (GtkWidget *widget,
                                           GtkRequisition *requisition);
extern
void gtk_widget_size_allocate (GtkWidget *widget,
        GtkAllocation *allocation);
extern
void gtk_widget_size_allocate_with_baseline (GtkWidget *widget,
          GtkAllocation *allocation,
          gint baseline);

extern
GtkSizeRequestMode gtk_widget_get_request_mode (GtkWidget *widget);
extern
void gtk_widget_get_preferred_width (GtkWidget *widget,
                                                               gint *minimum_width,
                                                               gint *natural_width);
extern
void gtk_widget_get_preferred_height_for_width (GtkWidget *widget,
                                                               gint width,
                                                               gint *minimum_height,
                                                               gint *natural_height);
extern
void gtk_widget_get_preferred_height (GtkWidget *widget,
                                                               gint *minimum_height,
                                                               gint *natural_height);
extern
void gtk_widget_get_preferred_width_for_height (GtkWidget *widget,
                                                               gint height,
                                                               gint *minimum_width,
                                                               gint *natural_width);
extern
void gtk_widget_get_preferred_height_and_baseline_for_width (GtkWidget *widget,
              gint width,
              gint *minimum_height,
              gint *natural_height,
              gint *minimum_baseline,
              gint *natural_baseline);
extern
void gtk_widget_get_preferred_size (GtkWidget *widget,
                                                               GtkRequisition *minimum_size,
                                                               GtkRequisition *natural_size);

__attribute__((__deprecated__("Use '" "gtk_widget_get_preferred_size" "' instead"))) extern
void gtk_widget_get_child_requisition (GtkWidget *widget,
                                             GtkRequisition *requisition);
extern
void gtk_widget_add_accelerator (GtkWidget *widget,
        const gchar *accel_signal,
        GtkAccelGroup *accel_group,
        guint accel_key,
        GdkModifierType accel_mods,
        GtkAccelFlags accel_flags);
extern
gboolean gtk_widget_remove_accelerator (GtkWidget *widget,
        GtkAccelGroup *accel_group,
        guint accel_key,
        GdkModifierType accel_mods);
extern
void gtk_widget_set_accel_path (GtkWidget *widget,
        const gchar *accel_path,
        GtkAccelGroup *accel_group);
extern
GList* gtk_widget_list_accel_closures (GtkWidget *widget);
extern
gboolean gtk_widget_can_activate_accel (GtkWidget *widget,
                                           guint signal_id);
extern
gboolean gtk_widget_mnemonic_activate (GtkWidget *widget,
        gboolean group_cycling);
extern
gboolean gtk_widget_event (GtkWidget *widget,
        GdkEvent *event);
__attribute__((__deprecated__)) extern
gint gtk_widget_send_expose (GtkWidget *widget,
        GdkEvent *event);
extern
gboolean gtk_widget_send_focus_change (GtkWidget *widget,
                                           GdkEvent *event);

extern
gboolean gtk_widget_activate (GtkWidget *widget);

__attribute__((__deprecated__)) extern
void gtk_widget_reparent (GtkWidget *widget,
        GtkWidget *new_parent);
extern
gboolean gtk_widget_intersect (GtkWidget *widget,
        const GdkRectangle *area,
        GdkRectangle *intersection);
__attribute__((__deprecated__)) extern
cairo_region_t *gtk_widget_region_intersect (GtkWidget *widget,
        const cairo_region_t *region);

extern
void gtk_widget_freeze_child_notify (GtkWidget *widget);
extern
void gtk_widget_child_notify (GtkWidget *widget,
        const gchar *child_property);
extern
void gtk_widget_thaw_child_notify (GtkWidget *widget);

extern
void gtk_widget_set_can_focus (GtkWidget *widget,
                                           gboolean can_focus);
extern
gboolean gtk_widget_get_can_focus (GtkWidget *widget);
extern
gboolean gtk_widget_has_focus (GtkWidget *widget);
extern
gboolean gtk_widget_is_focus (GtkWidget *widget);
extern
gboolean gtk_widget_has_visible_focus (GtkWidget *widget);
extern
void gtk_widget_grab_focus (GtkWidget *widget);
extern
void gtk_widget_set_focus_on_click (GtkWidget *widget,
                                           gboolean focus_on_click);
extern
gboolean gtk_widget_get_focus_on_click (GtkWidget *widget);

extern
void gtk_widget_set_can_default (GtkWidget *widget,
                                           gboolean can_default);
extern
gboolean gtk_widget_get_can_default (GtkWidget *widget);
extern
gboolean gtk_widget_has_default (GtkWidget *widget);
extern
void gtk_widget_grab_default (GtkWidget *widget);

extern
void gtk_widget_set_receives_default (GtkWidget *widget,
                                           gboolean receives_default);
extern
gboolean gtk_widget_get_receives_default (GtkWidget *widget);

extern
gboolean gtk_widget_has_grab (GtkWidget *widget);

extern
gboolean gtk_widget_device_is_shadowed (GtkWidget *widget,
                                           GdkDevice *device);


extern
void gtk_widget_set_name (GtkWidget *widget,
        const gchar *name);
extern
const gchar * gtk_widget_get_name (GtkWidget *widget);

__attribute__((__deprecated__("Use '" "gtk_widget_set_state_flags" "' instead"))) extern
void gtk_widget_set_state (GtkWidget *widget,
        GtkStateType state);

__attribute__((__deprecated__("Use '" "gtk_widget_get_state_flags" "' instead"))) extern
GtkStateType gtk_widget_get_state (GtkWidget *widget);

extern
void gtk_widget_set_state_flags (GtkWidget *widget,
                                                         GtkStateFlags flags,
                                                         gboolean clear);
extern
void gtk_widget_unset_state_flags (GtkWidget *widget,
                                                         GtkStateFlags flags);
extern
GtkStateFlags gtk_widget_get_state_flags (GtkWidget *widget);

extern
void gtk_widget_set_sensitive (GtkWidget *widget,
        gboolean sensitive);
extern
gboolean gtk_widget_get_sensitive (GtkWidget *widget);
extern
gboolean gtk_widget_is_sensitive (GtkWidget *widget);

extern
void gtk_widget_set_visible (GtkWidget *widget,
                                                         gboolean visible);
extern
gboolean gtk_widget_get_visible (GtkWidget *widget);
extern
gboolean gtk_widget_is_visible (GtkWidget *widget);

extern
void gtk_widget_set_has_window (GtkWidget *widget,
                                                         gboolean has_window);
extern
gboolean gtk_widget_get_has_window (GtkWidget *widget);

extern
gboolean gtk_widget_is_toplevel (GtkWidget *widget);
extern
gboolean gtk_widget_is_drawable (GtkWidget *widget);
extern
void gtk_widget_set_realized (GtkWidget *widget,
                                                         gboolean realized);
extern
gboolean gtk_widget_get_realized (GtkWidget *widget);
extern
void gtk_widget_set_mapped (GtkWidget *widget,
                                                         gboolean mapped);
extern
gboolean gtk_widget_get_mapped (GtkWidget *widget);

extern
void gtk_widget_set_app_paintable (GtkWidget *widget,
        gboolean app_paintable);
extern
gboolean gtk_widget_get_app_paintable (GtkWidget *widget);

__attribute__((__deprecated__)) extern
void gtk_widget_set_double_buffered (GtkWidget *widget,
        gboolean double_buffered);
__attribute__((__deprecated__)) extern
gboolean gtk_widget_get_double_buffered (GtkWidget *widget);

extern
void gtk_widget_set_redraw_on_allocate (GtkWidget *widget,
        gboolean redraw_on_allocate);

extern
void gtk_widget_set_parent (GtkWidget *widget,
        GtkWidget *parent);
extern
GtkWidget * gtk_widget_get_parent (GtkWidget *widget);

extern
void gtk_widget_set_parent_window (GtkWidget *widget,
        GdkWindow *parent_window);
extern
GdkWindow * gtk_widget_get_parent_window (GtkWidget *widget);

extern
void gtk_widget_set_child_visible (GtkWidget *widget,
        gboolean is_visible);
extern
gboolean gtk_widget_get_child_visible (GtkWidget *widget);

extern
void gtk_widget_set_window (GtkWidget *widget,
                                                         GdkWindow *window);
extern
GdkWindow * gtk_widget_get_window (GtkWidget *widget);
extern
void gtk_widget_register_window (GtkWidget *widget,
                                                         GdkWindow *window);
extern
void gtk_widget_unregister_window (GtkWidget *widget,
                                                         GdkWindow *window);

extern
int gtk_widget_get_allocated_width (GtkWidget *widget);
extern
int gtk_widget_get_allocated_height (GtkWidget *widget);
extern
int gtk_widget_get_allocated_baseline (GtkWidget *widget);
extern
void gtk_widget_get_allocated_size (GtkWidget *widget,
                                                         GtkAllocation *allocation,
                                                         int *baseline);

extern
void gtk_widget_get_allocation (GtkWidget *widget,
                                                         GtkAllocation *allocation);
extern
void gtk_widget_set_allocation (GtkWidget *widget,
                                                         const GtkAllocation *allocation);
extern
void gtk_widget_set_clip (GtkWidget *widget,
                                                         const GtkAllocation *clip);
extern
void gtk_widget_get_clip (GtkWidget *widget,
                                                         GtkAllocation *clip);

__attribute__((__deprecated__("Use '" "gtk_widget_get_preferred_width & gtk_widget_get_preferred_height" "' instead"))) extern

void gtk_widget_get_requisition (GtkWidget *widget,
                                                         GtkRequisition *requisition);

extern
gboolean gtk_widget_child_focus (GtkWidget *widget,
                                           GtkDirectionType direction);
extern
gboolean gtk_widget_keynav_failed (GtkWidget *widget,
                                           GtkDirectionType direction);
extern
void gtk_widget_error_bell (GtkWidget *widget);

extern
void gtk_widget_set_size_request (GtkWidget *widget,
                                           gint width,
                                           gint height);
extern
void gtk_widget_get_size_request (GtkWidget *widget,
                                           gint *width,
                                           gint *height);
extern
void gtk_widget_set_events (GtkWidget *widget,
        gint events);
extern
void gtk_widget_add_events (GtkWidget *widget,
        gint events);
extern
void gtk_widget_set_device_events (GtkWidget *widget,
                                           GdkDevice *device,
        GdkEventMask events);
extern
void gtk_widget_add_device_events (GtkWidget *widget,
                                           GdkDevice *device,
        GdkEventMask events);
extern
void gtk_widget_set_opacity (GtkWidget *widget,
        double opacity);
extern
double gtk_widget_get_opacity (GtkWidget *widget);

extern
void gtk_widget_set_device_enabled (GtkWidget *widget,
                                           GdkDevice *device,
                                           gboolean enabled);
extern
gboolean gtk_widget_get_device_enabled (GtkWidget *widget,
                                           GdkDevice *device);

extern
GtkWidget* gtk_widget_get_toplevel (GtkWidget *widget);
extern
GtkWidget* gtk_widget_get_ancestor (GtkWidget *widget,
      GType widget_type);
extern
GdkVisual* gtk_widget_get_visual (GtkWidget *widget);
extern
void gtk_widget_set_visual (GtkWidget *widget,
                                         GdkVisual *visual);

extern
GdkScreen * gtk_widget_get_screen (GtkWidget *widget);
extern
gboolean gtk_widget_has_screen (GtkWidget *widget);
extern
gint gtk_widget_get_scale_factor (GtkWidget *widget);
extern
GdkDisplay * gtk_widget_get_display (GtkWidget *widget);
__attribute__((__deprecated__)) extern
GdkWindow * gtk_widget_get_root_window (GtkWidget *widget);
extern
GtkSettings* gtk_widget_get_settings (GtkWidget *widget);
extern
GtkClipboard *gtk_widget_get_clipboard (GtkWidget *widget,
       GdkAtom selection);



extern
gboolean gtk_widget_get_hexpand (GtkWidget *widget);
extern
void gtk_widget_set_hexpand (GtkWidget *widget,
                                          gboolean expand);
extern
gboolean gtk_widget_get_hexpand_set (GtkWidget *widget);
extern
void gtk_widget_set_hexpand_set (GtkWidget *widget,
                                          gboolean set);
extern
gboolean gtk_widget_get_vexpand (GtkWidget *widget);
extern
void gtk_widget_set_vexpand (GtkWidget *widget,
                                          gboolean expand);
extern
gboolean gtk_widget_get_vexpand_set (GtkWidget *widget);
extern
void gtk_widget_set_vexpand_set (GtkWidget *widget,
                                          gboolean set);
extern
void gtk_widget_queue_compute_expand (GtkWidget *widget);
extern
gboolean gtk_widget_compute_expand (GtkWidget *widget,
                                          GtkOrientation orientation);



extern
gboolean gtk_widget_get_support_multidevice (GtkWidget *widget);
extern
void gtk_widget_set_support_multidevice (GtkWidget *widget,
                                                     gboolean support_multidevice);


extern
void gtk_widget_class_set_accessible_type (GtkWidgetClass *widget_class,
                                                          GType type);
extern
void gtk_widget_class_set_accessible_role (GtkWidgetClass *widget_class,
                                                          AtkRole role);
extern
AtkObject* gtk_widget_get_accessible (GtkWidget *widget);



extern
GtkAlign gtk_widget_get_halign (GtkWidget *widget);
extern
void gtk_widget_set_halign (GtkWidget *widget,
                                       GtkAlign align);
extern
GtkAlign gtk_widget_get_valign (GtkWidget *widget);
extern
GtkAlign gtk_widget_get_valign_with_baseline (GtkWidget *widget);
extern
void gtk_widget_set_valign (GtkWidget *widget,
                                       GtkAlign align);
__attribute__((__deprecated__("Use '" "gtk_widget_get_margin_start" "' instead"))) extern
gint gtk_widget_get_margin_left (GtkWidget *widget);
__attribute__((__deprecated__("Use '" "gtk_widget_set_margin_start" "' instead"))) extern
void gtk_widget_set_margin_left (GtkWidget *widget,
                                       gint margin);
__attribute__((__deprecated__("Use '" "gtk_widget_get_margin_end" "' instead"))) extern
gint gtk_widget_get_margin_right (GtkWidget *widget);
__attribute__((__deprecated__("Use '" "gtk_widget_set_margin_end" "' instead"))) extern
void gtk_widget_set_margin_right (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_start (GtkWidget *widget);
extern
void gtk_widget_set_margin_start (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_end (GtkWidget *widget);
extern
void gtk_widget_set_margin_end (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_top (GtkWidget *widget);
extern
void gtk_widget_set_margin_top (GtkWidget *widget,
                                       gint margin);
extern
gint gtk_widget_get_margin_bottom (GtkWidget *widget);
extern
void gtk_widget_set_margin_bottom (GtkWidget *widget,
                                       gint margin);


extern
gint gtk_widget_get_events (GtkWidget *widget);
extern
GdkEventMask gtk_widget_get_device_events (GtkWidget *widget,
                                           GdkDevice *device);
__attribute__((__deprecated__("Use '" "gdk_window_get_device_position" "' instead"))) extern
void gtk_widget_get_pointer (GtkWidget *widget,
      gint *x,
      gint *y);

extern
gboolean gtk_widget_is_ancestor (GtkWidget *widget,
      GtkWidget *ancestor);

extern
gboolean gtk_widget_translate_coordinates (GtkWidget *src_widget,
            GtkWidget *dest_widget,
            gint src_x,
            gint src_y,
            gint *dest_x,
            gint *dest_y);



extern
gboolean gtk_widget_hide_on_delete (GtkWidget *widget);


__attribute__((__deprecated__)) extern
void gtk_widget_override_color (GtkWidget *widget,
                                                   GtkStateFlags state,
                                                   const GdkRGBA *color);
__attribute__((__deprecated__)) extern
void gtk_widget_override_background_color (GtkWidget *widget,
                                                   GtkStateFlags state,
                                                   const GdkRGBA *color);

__attribute__((__deprecated__)) extern
void gtk_widget_override_font (GtkWidget *widget,
                                                   const PangoFontDescription *font_desc);

__attribute__((__deprecated__)) extern
void gtk_widget_override_symbolic_color (GtkWidget *widget,
                                                   const gchar *name,
                                                   const GdkRGBA *color);
__attribute__((__deprecated__)) extern
void gtk_widget_override_cursor (GtkWidget *widget,
                                                   const GdkRGBA *cursor,
                                                   const GdkRGBA *secondary_cursor);

extern
void gtk_widget_reset_style (GtkWidget *widget);

extern
PangoContext *gtk_widget_create_pango_context (GtkWidget *widget);
extern
PangoContext *gtk_widget_get_pango_context (GtkWidget *widget);
extern
void gtk_widget_set_font_options (GtkWidget *widget,
                                  const cairo_font_options_t *options);
extern
const cairo_font_options_t *gtk_widget_get_font_options (GtkWidget *widget);
extern
PangoLayout *gtk_widget_create_pango_layout (GtkWidget *widget,
            const gchar *text);

__attribute__((__deprecated__("Use '" "gtk_icon_theme_load_icon" "' instead"))) extern
GdkPixbuf *gtk_widget_render_icon_pixbuf (GtkWidget *widget,
                                               const gchar *stock_id,
                                               GtkIconSize size);




__attribute__((__deprecated__("Use '" "gtk_widget_class_set_template" "' instead"))) extern
void gtk_widget_set_composite_name (GtkWidget *widget,
      const gchar *name);
__attribute__((__deprecated__("Use '" "gtk_widget_class_set_template" "' instead"))) extern
gchar* gtk_widget_get_composite_name (GtkWidget *widget);





__attribute__((__deprecated__("Use '" "gtk_widget_class_set_template" "' instead"))) extern
void gtk_widget_push_composite_child (void);
__attribute__((__deprecated__("Use '" "gtk_widget_class_set_template" "' instead"))) extern
void gtk_widget_pop_composite_child (void);



extern
void gtk_widget_class_install_style_property (GtkWidgetClass *klass,
           GParamSpec *pspec);
extern
void gtk_widget_class_install_style_property_parser (GtkWidgetClass *klass,
           GParamSpec *pspec,
           GtkRcPropertyParser parser);
extern
GParamSpec* gtk_widget_class_find_style_property (GtkWidgetClass *klass,
           const gchar *property_name);
extern
GParamSpec** gtk_widget_class_list_style_properties (GtkWidgetClass *klass,
           guint *n_properties);
extern
void gtk_widget_style_get_property (GtkWidget *widget,
        const gchar *property_name,
        GValue *value);
extern
void gtk_widget_style_get_valist (GtkWidget *widget,
        const gchar *first_property_name,
        va_list var_args);
extern
void gtk_widget_style_get (GtkWidget *widget,
        const gchar *first_property_name,
        ...) __attribute__((__sentinel__));



extern
void gtk_widget_set_direction (GtkWidget *widget,
         GtkTextDirection dir);
extern
GtkTextDirection gtk_widget_get_direction (GtkWidget *widget);

extern
void gtk_widget_set_default_direction (GtkTextDirection dir);
extern
GtkTextDirection gtk_widget_get_default_direction (void);


__attribute__((__deprecated__("Use '" "gdk_screen_is_composited" "' instead"))) extern
gboolean gtk_widget_is_composited (GtkWidget *widget);



extern
void gtk_widget_shape_combine_region (GtkWidget *widget,
                                              cairo_region_t *region);
extern
void gtk_widget_input_shape_combine_region (GtkWidget *widget,
                                                    cairo_region_t *region);

extern
GList* gtk_widget_list_mnemonic_labels (GtkWidget *widget);
extern
void gtk_widget_add_mnemonic_label (GtkWidget *widget,
      GtkWidget *label);
extern
void gtk_widget_remove_mnemonic_label (GtkWidget *widget,
      GtkWidget *label);

extern
void gtk_widget_set_tooltip_window (GtkWidget *widget,
                                                        GtkWindow *custom_window);
extern
GtkWindow *gtk_widget_get_tooltip_window (GtkWidget *widget);
extern
void gtk_widget_trigger_tooltip_query (GtkWidget *widget);
extern
void gtk_widget_set_tooltip_text (GtkWidget *widget,
                                             const gchar *text);
extern
gchar * gtk_widget_get_tooltip_text (GtkWidget *widget);
extern
void gtk_widget_set_tooltip_markup (GtkWidget *widget,
                                             const gchar *markup);
extern
gchar * gtk_widget_get_tooltip_markup (GtkWidget *widget);
extern
void gtk_widget_set_has_tooltip (GtkWidget *widget,
          gboolean has_tooltip);
extern
gboolean gtk_widget_get_has_tooltip (GtkWidget *widget);

extern
gboolean gtk_cairo_should_draw_window (cairo_t *cr,
                                             GdkWindow *window);
extern
void gtk_cairo_transform_to_window (cairo_t *cr,
                                             GtkWidget *widget,
                                             GdkWindow *window);

extern
GType gtk_requisition_get_type (void) __attribute__ ((__const__));
extern
GtkRequisition *gtk_requisition_new (void) __attribute__ ((__malloc__));
extern
GtkRequisition *gtk_requisition_copy (const GtkRequisition *requisition);
extern
void gtk_requisition_free (GtkRequisition *requisition);

extern
gboolean gtk_widget_in_destruction (GtkWidget *widget);

extern
GtkStyleContext * gtk_widget_get_style_context (GtkWidget *widget);

extern
GtkWidgetPath * gtk_widget_get_path (GtkWidget *widget);

extern
void gtk_widget_class_set_css_name (GtkWidgetClass *widget_class,
                                                 const char *name);
extern
const char * gtk_widget_class_get_css_name (GtkWidgetClass *widget_class);

extern
GdkModifierType gtk_widget_get_modifier_mask (GtkWidget *widget,
                                                GdkModifierIntent intent);

extern
void gtk_widget_insert_action_group (GtkWidget *widget,
                                                                         const gchar *name,
                                                                         GActionGroup *group);



extern
guint gtk_widget_add_tick_callback (GtkWidget *widget,
                                    GtkTickCallback callback,
                                    gpointer user_data,
                                    GDestroyNotify notify);

extern
void gtk_widget_remove_tick_callback (GtkWidget *widget,
                                      guint id);
# 1453 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
extern
void gtk_widget_init_template (GtkWidget *widget);
extern
GObject *gtk_widget_get_template_child (GtkWidget *widget,
               GType widget_type,
               const gchar *name);
extern
void gtk_widget_class_set_template (GtkWidgetClass *widget_class,
               GBytes *template_bytes);
extern
void gtk_widget_class_set_template_from_resource (GtkWidgetClass *widget_class,
               const gchar *resource_name);
extern
void gtk_widget_class_bind_template_callback_full (GtkWidgetClass *widget_class,
               const gchar *callback_name,
               GCallback callback_symbol);
extern
void gtk_widget_class_set_connect_func (GtkWidgetClass *widget_class,
               GtkBuilderConnectFunc connect_func,
               gpointer connect_data,
               GDestroyNotify connect_data_destroy);
extern
void gtk_widget_class_bind_template_child_full (GtkWidgetClass *widget_class,
               const gchar *name,
               gboolean internal_child,
               gssize struct_offset);

extern
GActionGroup *gtk_widget_get_action_group (GtkWidget *widget,
                                                         const gchar *prefix);

extern
const gchar ** gtk_widget_list_action_prefixes (GtkWidget *widget);

extern
void gtk_widget_set_font_map (GtkWidget *widget,
                                                         PangoFontMap *font_map);
extern
PangoFontMap * gtk_widget_get_font_map (GtkWidget *widget);

typedef GtkWidget *GtkWidget_autoptr; typedef GList *GtkWidget_listautoptr; typedef GSList *GtkWidget_slistautoptr; typedef GQueue *GtkWidget_queueautoptr;
# 1493 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
#pragma clang diagnostic push
# 1493 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 1493 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkWidget (GtkWidget *_ptr) { if (_ptr) (g_object_unref) ((GtkWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkWidget (GtkWidget **_ptr) { glib_autoptr_clear_GtkWidget (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkWidget (void *_ptr) { (g_object_unref) ((GtkWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkWidget (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkWidget); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkWidget (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkWidget); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkWidget (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkWidget); }
# 1493 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
#pragma clang diagnostic pop
typedef GtkRequisition *GtkRequisition_autoptr; typedef GList *GtkRequisition_listautoptr; typedef GSList *GtkRequisition_slistautoptr; typedef GQueue *GtkRequisition_queueautoptr;
# 1494 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
#pragma clang diagnostic push
# 1494 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 1494 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRequisition (GtkRequisition *_ptr) { if (_ptr) (gtk_requisition_free) ((GtkRequisition *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRequisition (GtkRequisition **_ptr) { glib_autoptr_clear_GtkRequisition (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRequisition (void *_ptr) { (gtk_requisition_free) ((GtkRequisition *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRequisition (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRequisition); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRequisition (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRequisition); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRequisition (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRequisition); }
# 1494 "/usr/include/gtk-3.0/gtk/gtkwidget.h"
#pragma clang diagnostic pop
# 28 "/usr/include/gtk-3.0/gtk/gtkapplication.h" 2
# 39 "/usr/include/gtk-3.0/gtk/gtkapplication.h"
typedef struct _GtkApplication GtkApplication;
typedef struct _GtkApplicationClass GtkApplicationClass;
typedef struct _GtkApplicationPrivate GtkApplicationPrivate;

struct _GtkApplication
{
  GApplication parent;


  GtkApplicationPrivate *priv;
};
# 60 "/usr/include/gtk-3.0/gtk/gtkapplication.h"
struct _GtkApplicationClass
{
  GApplicationClass parent_class;



  void (*window_added) (GtkApplication *application,
                          GtkWindow *window);
  void (*window_removed) (GtkApplication *application,
                          GtkWindow *window);


  gpointer padding[12];
};

extern
GType gtk_application_get_type (void) __attribute__ ((__const__));

extern
GtkApplication * gtk_application_new (const gchar *application_id,
                                                GApplicationFlags flags);

extern
void gtk_application_add_window (GtkApplication *application,
                                                GtkWindow *window);

extern
void gtk_application_remove_window (GtkApplication *application,
                                                GtkWindow *window);
extern
GList * gtk_application_get_windows (GtkApplication *application);

extern
GMenuModel * gtk_application_get_app_menu (GtkApplication *application);
extern
void gtk_application_set_app_menu (GtkApplication *application,
                                                GMenuModel *app_menu);

extern
GMenuModel * gtk_application_get_menubar (GtkApplication *application);
extern
void gtk_application_set_menubar (GtkApplication *application,
                                                GMenuModel *menubar);

__attribute__((__deprecated__("Use '" "gtk_application_set_accels_for_action" "' instead"))) extern
void gtk_application_add_accelerator (GtkApplication *application,
                                                     const gchar *accelerator,
                                                     const gchar *action_name,
                                                     GVariant *parameter);

__attribute__((__deprecated__("Use '" "gtk_application_set_accels_for_action" "' instead"))) extern
void gtk_application_remove_accelerator (GtkApplication *application,
                                                     const gchar *action_name,
                                                     GVariant *parameter);

typedef enum
{
  GTK_APPLICATION_INHIBIT_LOGOUT = (1 << 0),
  GTK_APPLICATION_INHIBIT_SWITCH = (1 << 1),
  GTK_APPLICATION_INHIBIT_SUSPEND = (1 << 2),
  GTK_APPLICATION_INHIBIT_IDLE = (1 << 3)
} GtkApplicationInhibitFlags;

extern
guint gtk_application_inhibit (GtkApplication *application,
                                                     GtkWindow *window,
                                                     GtkApplicationInhibitFlags flags,
                                                     const gchar *reason);
extern
void gtk_application_uninhibit (GtkApplication *application,
                                                     guint cookie);
extern
gboolean gtk_application_is_inhibited (GtkApplication *application,
                                                     GtkApplicationInhibitFlags flags);

extern
GtkWindow * gtk_application_get_window_by_id (GtkApplication *application,
                                                     guint id);

extern
GtkWindow * gtk_application_get_active_window (GtkApplication *application);

extern
gchar ** gtk_application_list_action_descriptions (GtkApplication *application);

extern
gchar ** gtk_application_get_accels_for_action (GtkApplication *application,
                                                                  const gchar *detailed_action_name);
extern
gchar ** gtk_application_get_actions_for_accel (GtkApplication *application,
                                                                  const gchar *accel);


extern
void gtk_application_set_accels_for_action (GtkApplication *application,
                                                                  const gchar *detailed_action_name,
                                                                  const gchar * const *accels);

extern
gboolean gtk_application_prefers_app_menu (GtkApplication *application);

extern
GMenu * gtk_application_get_menu_by_id (GtkApplication *application,
                                                                  const gchar *id);

typedef GtkApplication *GtkApplication_autoptr; typedef GList *GtkApplication_listautoptr; typedef GSList *GtkApplication_slistautoptr; typedef GQueue *GtkApplication_queueautoptr;
# 165 "/usr/include/gtk-3.0/gtk/gtkapplication.h"
#pragma clang diagnostic push
# 165 "/usr/include/gtk-3.0/gtk/gtkapplication.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 165 "/usr/include/gtk-3.0/gtk/gtkapplication.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkApplication (GtkApplication *_ptr) { if (_ptr) (g_object_unref) ((GtkApplication *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkApplication (GtkApplication **_ptr) { glib_autoptr_clear_GtkApplication (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkApplication (void *_ptr) { (g_object_unref) ((GtkApplication *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkApplication (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkApplication); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkApplication (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkApplication); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkApplication (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkApplication); }
# 165 "/usr/include/gtk-3.0/gtk/gtkapplication.h"
#pragma clang diagnostic pop
# 34 "/usr/include/gtk-3.0/gtk/gtkwindow.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkbin.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkbin.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkcontainer.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkcontainer.h"
typedef struct _GtkContainer GtkContainer;
typedef struct _GtkContainerPrivate GtkContainerPrivate;
typedef struct _GtkContainerClass GtkContainerClass;

struct _GtkContainer
{
  GtkWidget widget;


  GtkContainerPrivate *priv;
};
# 75 "/usr/include/gtk-3.0/gtk/gtkcontainer.h"
struct _GtkContainerClass
{
  GtkWidgetClass parent_class;



  void (*add) (GtkContainer *container,
     GtkWidget *widget);
  void (*remove) (GtkContainer *container,
     GtkWidget *widget);
  void (*check_resize) (GtkContainer *container);
  void (*forall) (GtkContainer *container,
     gboolean include_internals,
     GtkCallback callback,
     gpointer callback_data);
  void (*set_focus_child) (GtkContainer *container,
     GtkWidget *child);
  GType (*child_type) (GtkContainer *container);
  gchar* (*composite_name) (GtkContainer *container,
     GtkWidget *child);
  void (*set_child_property) (GtkContainer *container,
     GtkWidget *child,
     guint property_id,
     const GValue *value,
     GParamSpec *pspec);
  void (*get_child_property) (GtkContainer *container,
                                 GtkWidget *child,
     guint property_id,
     GValue *value,
     GParamSpec *pspec);
  GtkWidgetPath * (*get_path_for_child) (GtkContainer *container,
                                         GtkWidget *child);




  unsigned int _handle_border_width : 1;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
# 131 "/usr/include/gtk-3.0/gtk/gtkcontainer.h"
typedef enum
{
  GTK_RESIZE_PARENT,
  GTK_RESIZE_QUEUE,
  GTK_RESIZE_IMMEDIATE
} GtkResizeMode;




extern
GType gtk_container_get_type (void) __attribute__ ((__const__));
extern
void gtk_container_set_border_width (GtkContainer *container,
       guint border_width);
extern
guint gtk_container_get_border_width (GtkContainer *container);
extern
void gtk_container_add (GtkContainer *container,
       GtkWidget *widget);
extern
void gtk_container_remove (GtkContainer *container,
       GtkWidget *widget);

__attribute__((__deprecated__)) extern
void gtk_container_set_resize_mode (GtkContainer *container,
       GtkResizeMode resize_mode);
__attribute__((__deprecated__)) extern
GtkResizeMode gtk_container_get_resize_mode (GtkContainer *container);

extern
void gtk_container_check_resize (GtkContainer *container);

extern
void gtk_container_foreach (GtkContainer *container,
         GtkCallback callback,
         gpointer callback_data);
extern
GList* gtk_container_get_children (GtkContainer *container);

extern
void gtk_container_propagate_draw (GtkContainer *container,
      GtkWidget *child,
      cairo_t *cr);

__attribute__((__deprecated__)) extern
void gtk_container_set_focus_chain (GtkContainer *container,
                                         GList *focusable_widgets);
__attribute__((__deprecated__)) extern
gboolean gtk_container_get_focus_chain (GtkContainer *container,
      GList **focusable_widgets);
__attribute__((__deprecated__)) extern
void gtk_container_unset_focus_chain (GtkContainer *container);






__attribute__((__deprecated__)) extern
void gtk_container_set_reallocate_redraws (GtkContainer *container,
          gboolean needs_redraws);
extern
void gtk_container_set_focus_child (GtkContainer *container,
         GtkWidget *child);
extern
GtkWidget *
       gtk_container_get_focus_child (GtkContainer *container);
extern
void gtk_container_set_focus_vadjustment (GtkContainer *container,
         GtkAdjustment *adjustment);
extern
GtkAdjustment *gtk_container_get_focus_vadjustment (GtkContainer *container);
extern
void gtk_container_set_focus_hadjustment (GtkContainer *container,
         GtkAdjustment *adjustment);
extern
GtkAdjustment *gtk_container_get_focus_hadjustment (GtkContainer *container);

__attribute__((__deprecated__)) extern
void gtk_container_resize_children (GtkContainer *container);

extern
GType gtk_container_child_type (GtkContainer *container);


extern
void gtk_container_class_install_child_property (GtkContainerClass *cclass,
        guint property_id,
        GParamSpec *pspec);
extern
void gtk_container_class_install_child_properties (GtkContainerClass *cclass,
                                                           guint n_pspecs,
                                                           GParamSpec **pspecs);
extern
GParamSpec* gtk_container_class_find_child_property (GObjectClass *cclass,
        const gchar *property_name);
extern
GParamSpec** gtk_container_class_list_child_properties (GObjectClass *cclass,
        guint *n_properties);
extern
void gtk_container_add_with_properties (GtkContainer *container,
        GtkWidget *widget,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
extern
void gtk_container_child_set (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
extern
void gtk_container_child_get (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_prop_name,
        ...) __attribute__((__sentinel__));
extern
void gtk_container_child_set_valist (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_property_name,
        va_list var_args);
extern
void gtk_container_child_get_valist (GtkContainer *container,
        GtkWidget *child,
        const gchar *first_property_name,
        va_list var_args);
extern
void gtk_container_child_set_property (GtkContainer *container,
        GtkWidget *child,
        const gchar *property_name,
        const GValue *value);
extern
void gtk_container_child_get_property (GtkContainer *container,
        GtkWidget *child,
        const gchar *property_name,
                                                  GValue *value);

extern
void gtk_container_child_notify (GtkContainer *container,
                                 GtkWidget *child,
                                 const gchar *child_property);

extern
void gtk_container_child_notify_by_pspec (GtkContainer *container,
                                          GtkWidget *child,
                                          GParamSpec *pspec);
# 291 "/usr/include/gtk-3.0/gtk/gtkcontainer.h"
extern
void gtk_container_forall (GtkContainer *container,
           GtkCallback callback,
           gpointer callback_data);

extern
void gtk_container_class_handle_border_width (GtkContainerClass *klass);

extern
GtkWidgetPath * gtk_container_get_path_for_child (GtkContainer *container,
                                                  GtkWidget *child);

typedef GtkContainer *GtkContainer_autoptr; typedef GList *GtkContainer_listautoptr; typedef GSList *GtkContainer_slistautoptr; typedef GQueue *GtkContainer_queueautoptr;
# 303 "/usr/include/gtk-3.0/gtk/gtkcontainer.h"
#pragma clang diagnostic push
# 303 "/usr/include/gtk-3.0/gtk/gtkcontainer.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 303 "/usr/include/gtk-3.0/gtk/gtkcontainer.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkContainer (GtkContainer *_ptr) { if (_ptr) (g_object_unref) ((GtkContainer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkContainer (GtkContainer **_ptr) { glib_autoptr_clear_GtkContainer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkContainer (void *_ptr) { (g_object_unref) ((GtkContainer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkContainer (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkContainer); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkContainer (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkContainer); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkContainer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkContainer); }
# 303 "/usr/include/gtk-3.0/gtk/gtkcontainer.h"
#pragma clang diagnostic pop
# 34 "/usr/include/gtk-3.0/gtk/gtkbin.h" 2
# 45 "/usr/include/gtk-3.0/gtk/gtkbin.h"
typedef struct _GtkBin GtkBin;
typedef struct _GtkBinPrivate GtkBinPrivate;
typedef struct _GtkBinClass GtkBinClass;

struct _GtkBin
{
  GtkContainer container;


  GtkBinPrivate *priv;
};





struct _GtkBinClass
{
  GtkContainerClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_bin_get_type (void) __attribute__ ((__const__));

extern
GtkWidget *gtk_bin_get_child (GtkBin *bin);

void _gtk_bin_set_child (GtkBin *bin,
                               GtkWidget *widget);

typedef GtkBin *GtkBin_autoptr; typedef GList *GtkBin_listautoptr; typedef GSList *GtkBin_slistautoptr; typedef GQueue *GtkBin_queueautoptr;
# 84 "/usr/include/gtk-3.0/gtk/gtkbin.h"
#pragma clang diagnostic push
# 84 "/usr/include/gtk-3.0/gtk/gtkbin.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 84 "/usr/include/gtk-3.0/gtk/gtkbin.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkBin (GtkBin *_ptr) { if (_ptr) (g_object_unref) ((GtkBin *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkBin (GtkBin **_ptr) { glib_autoptr_clear_GtkBin (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkBin (void *_ptr) { (g_object_unref) ((GtkBin *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkBin (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkBin); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkBin (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkBin); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkBin (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkBin); }
# 84 "/usr/include/gtk-3.0/gtk/gtkbin.h"
#pragma clang diagnostic pop
# 36 "/usr/include/gtk-3.0/gtk/gtkwindow.h" 2
# 46 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
typedef struct _GtkWindowPrivate GtkWindowPrivate;
typedef struct _GtkWindowClass GtkWindowClass;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
typedef struct _GtkWindowGroup GtkWindowGroup;
typedef struct _GtkWindowGroupClass GtkWindowGroupClass;
typedef struct _GtkWindowGroupPrivate GtkWindowGroupPrivate;

struct _GtkWindow
{
  GtkBin bin;

  GtkWindowPrivate *priv;
};
# 71 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
struct _GtkWindowClass
{
  GtkBinClass parent_class;



  void (* set_focus) (GtkWindow *window,
                            GtkWidget *focus);



  void (* activate_focus) (GtkWindow *window);
  void (* activate_default) (GtkWindow *window);
  void (* keys_changed) (GtkWindow *window);
  gboolean (* enable_debugging) (GtkWindow *window,
                                 gboolean toggle);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
# 115 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
typedef enum
{
  GTK_WINDOW_TOPLEVEL,
  GTK_WINDOW_POPUP
} GtkWindowType;
# 134 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
typedef enum
{
  GTK_WIN_POS_NONE,
  GTK_WIN_POS_CENTER,
  GTK_WIN_POS_MOUSE,
  GTK_WIN_POS_CENTER_ALWAYS,
  GTK_WIN_POS_CENTER_ON_PARENT
} GtkWindowPosition;


extern
GType gtk_window_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_window_new (GtkWindowType type);
extern
void gtk_window_set_title (GtkWindow *window,
      const gchar *title);
extern
const gchar * gtk_window_get_title (GtkWindow *window);
__attribute__((__deprecated__)) extern
void gtk_window_set_wmclass (GtkWindow *window,
      const gchar *wmclass_name,
      const gchar *wmclass_class);
extern
void gtk_window_set_role (GtkWindow *window,
                                                const gchar *role);
extern
void gtk_window_set_startup_id (GtkWindow *window,
                                                const gchar *startup_id);
extern
const gchar * gtk_window_get_role (GtkWindow *window);
extern
void gtk_window_add_accel_group (GtkWindow *window,
      GtkAccelGroup *accel_group);
extern
void gtk_window_remove_accel_group (GtkWindow *window,
      GtkAccelGroup *accel_group);
extern
void gtk_window_set_position (GtkWindow *window,
      GtkWindowPosition position);
extern
gboolean gtk_window_activate_focus (GtkWindow *window);
extern
void gtk_window_set_focus (GtkWindow *window,
      GtkWidget *focus);
extern
GtkWidget *gtk_window_get_focus (GtkWindow *window);
extern
void gtk_window_set_default (GtkWindow *window,
      GtkWidget *default_widget);
extern
GtkWidget *gtk_window_get_default_widget (GtkWindow *window);
extern
gboolean gtk_window_activate_default (GtkWindow *window);

extern
void gtk_window_set_transient_for (GtkWindow *window,
      GtkWindow *parent);
extern
GtkWindow *gtk_window_get_transient_for (GtkWindow *window);
extern
void gtk_window_set_attached_to (GtkWindow *window,
                                                GtkWidget *attach_widget);
extern
GtkWidget *gtk_window_get_attached_to (GtkWindow *window);
__attribute__((__deprecated__("Use '" "gtk_widget_set_opacity" "' instead"))) extern
void gtk_window_set_opacity (GtkWindow *window,
      gdouble opacity);
__attribute__((__deprecated__("Use '" "gtk_widget_get_opacity" "' instead"))) extern
gdouble gtk_window_get_opacity (GtkWindow *window);
extern
void gtk_window_set_type_hint (GtkWindow *window,
      GdkWindowTypeHint hint);
extern
GdkWindowTypeHint gtk_window_get_type_hint (GtkWindow *window);
extern
void gtk_window_set_skip_taskbar_hint (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_skip_taskbar_hint (GtkWindow *window);
extern
void gtk_window_set_skip_pager_hint (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_skip_pager_hint (GtkWindow *window);
extern
void gtk_window_set_urgency_hint (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_urgency_hint (GtkWindow *window);
extern
void gtk_window_set_accept_focus (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_accept_focus (GtkWindow *window);
extern
void gtk_window_set_focus_on_map (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_focus_on_map (GtkWindow *window);
extern
void gtk_window_set_destroy_with_parent (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_destroy_with_parent (GtkWindow *window);
extern
void gtk_window_set_hide_titlebar_when_maximized (GtkWindow *window,
                                                        gboolean setting);
extern
gboolean gtk_window_get_hide_titlebar_when_maximized (GtkWindow *window);
extern
void gtk_window_set_mnemonics_visible (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_mnemonics_visible (GtkWindow *window);
extern
void gtk_window_set_focus_visible (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_focus_visible (GtkWindow *window);

extern
void gtk_window_set_resizable (GtkWindow *window,
                                                gboolean resizable);
extern
gboolean gtk_window_get_resizable (GtkWindow *window);

extern
void gtk_window_set_gravity (GtkWindow *window,
                                                GdkGravity gravity);
extern
GdkGravity gtk_window_get_gravity (GtkWindow *window);


extern
void gtk_window_set_geometry_hints (GtkWindow *window,
      GtkWidget *geometry_widget,
      GdkGeometry *geometry,
      GdkWindowHints geom_mask);

extern
void gtk_window_set_screen (GtkWindow *window,
      GdkScreen *screen);
extern
GdkScreen* gtk_window_get_screen (GtkWindow *window);

extern
gboolean gtk_window_is_active (GtkWindow *window);
extern
gboolean gtk_window_has_toplevel_focus (GtkWindow *window);

extern
void gtk_window_set_decorated (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_decorated (GtkWindow *window);
extern
void gtk_window_set_deletable (GtkWindow *window,
                                                gboolean setting);
extern
gboolean gtk_window_get_deletable (GtkWindow *window);

extern
void gtk_window_set_icon_list (GtkWindow *window,
                                                    GList *list);
extern
GList* gtk_window_get_icon_list (GtkWindow *window);
extern
void gtk_window_set_icon (GtkWindow *window,
                                                    GdkPixbuf *icon);
extern
void gtk_window_set_icon_name (GtkWindow *window,
          const gchar *name);
extern
gboolean gtk_window_set_icon_from_file (GtkWindow *window,
          const gchar *filename,
          GError **err);
extern
GdkPixbuf* gtk_window_get_icon (GtkWindow *window);
extern
const gchar * gtk_window_get_icon_name (GtkWindow *window);
extern
void gtk_window_set_default_icon_list (GList *list);
extern
GList* gtk_window_get_default_icon_list (void);
extern
void gtk_window_set_default_icon (GdkPixbuf *icon);
extern
void gtk_window_set_default_icon_name (const gchar *name);
extern
const gchar * gtk_window_get_default_icon_name (void);
extern
gboolean gtk_window_set_default_icon_from_file (const gchar *filename,
          GError **err);

extern
void gtk_window_set_auto_startup_notification (gboolean setting);


extern
void gtk_window_set_modal (GtkWindow *window,
          gboolean modal);
extern
gboolean gtk_window_get_modal (GtkWindow *window);
extern
GList* gtk_window_list_toplevels (void);
extern
void gtk_window_set_has_user_ref_count (GtkWindow *window,
                                              gboolean setting);

extern
void gtk_window_add_mnemonic (GtkWindow *window,
        guint keyval,
        GtkWidget *target);
extern
void gtk_window_remove_mnemonic (GtkWindow *window,
        guint keyval,
        GtkWidget *target);
extern
gboolean gtk_window_mnemonic_activate (GtkWindow *window,
        guint keyval,
        GdkModifierType modifier);
extern
void gtk_window_set_mnemonic_modifier (GtkWindow *window,
        GdkModifierType modifier);
extern
GdkModifierType gtk_window_get_mnemonic_modifier (GtkWindow *window);

extern
gboolean gtk_window_activate_key (GtkWindow *window,
        GdkEventKey *event);
extern
gboolean gtk_window_propagate_key_event (GtkWindow *window,
        GdkEventKey *event);

extern
void gtk_window_present (GtkWindow *window);
extern
void gtk_window_present_with_time (GtkWindow *window,
            guint32 timestamp);
extern
void gtk_window_iconify (GtkWindow *window);
extern
void gtk_window_deiconify (GtkWindow *window);
extern
void gtk_window_stick (GtkWindow *window);
extern
void gtk_window_unstick (GtkWindow *window);
extern
void gtk_window_maximize (GtkWindow *window);
extern
void gtk_window_unmaximize (GtkWindow *window);
extern
void gtk_window_fullscreen (GtkWindow *window);
extern
void gtk_window_unfullscreen (GtkWindow *window);
extern
void gtk_window_fullscreen_on_monitor(GtkWindow *window,
                                          GdkScreen *screen,
                                          gint monitor);
extern
void gtk_window_close (GtkWindow *window);
extern
void gtk_window_set_keep_above (GtkWindow *window, gboolean setting);
extern
void gtk_window_set_keep_below (GtkWindow *window, gboolean setting);

extern
void gtk_window_begin_resize_drag (GtkWindow *window,
                                   GdkWindowEdge edge,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);
extern
void gtk_window_begin_move_drag (GtkWindow *window,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);




extern
void gtk_window_set_default_size (GtkWindow *window,
                                      gint width,
                                      gint height);
extern
void gtk_window_get_default_size (GtkWindow *window,
                                      gint *width,
                                      gint *height);
extern
void gtk_window_resize (GtkWindow *window,
                                      gint width,
                                      gint height);
extern
void gtk_window_get_size (GtkWindow *window,
                                      gint *width,
                                      gint *height);
extern
void gtk_window_move (GtkWindow *window,
                                      gint x,
                                      gint y);
extern
void gtk_window_get_position (GtkWindow *window,
                                      gint *root_x,
                                      gint *root_y);
__attribute__((__deprecated__)) extern
gboolean gtk_window_parse_geometry (GtkWindow *window,
                                      const gchar *geometry);

__attribute__((__deprecated__("Use '" "gtk_window_set_default_size" "' instead"))) extern
void gtk_window_set_default_geometry (GtkWindow *window,
                                      gint width,
                                      gint height);
__attribute__((__deprecated__("Use '" "gtk_window_resize" "' instead"))) extern
void gtk_window_resize_to_geometry (GtkWindow *window,
                                      gint width,
                                      gint height);

extern
GtkWindowGroup *gtk_window_get_group (GtkWindow *window);
extern
gboolean gtk_window_has_group (GtkWindow *window);


__attribute__((__deprecated__)) extern
void gtk_window_reshow_with_initial_size (GtkWindow *window);

extern
GtkWindowType gtk_window_get_window_type (GtkWindow *window);


extern
GtkApplication *gtk_window_get_application (GtkWindow *window);
extern
void gtk_window_set_application (GtkWindow *window,
                                                 GtkApplication *application);




__attribute__((__deprecated__)) extern
void gtk_window_set_has_resize_grip (GtkWindow *window,
                                            gboolean value);
__attribute__((__deprecated__)) extern
gboolean gtk_window_get_has_resize_grip (GtkWindow *window);
__attribute__((__deprecated__)) extern
gboolean gtk_window_resize_grip_is_visible (GtkWindow *window);
__attribute__((__deprecated__)) extern
gboolean gtk_window_get_resize_grip_area (GtkWindow *window,
                                            GdkRectangle *rect);

extern
void gtk_window_set_titlebar (GtkWindow *window,
                                            GtkWidget *titlebar);
extern
GtkWidget *gtk_window_get_titlebar (GtkWindow *window);

extern
gboolean gtk_window_is_maximized (GtkWindow *window);

extern
void gtk_window_set_interactive_debugging (gboolean enable);

typedef GtkWindow *GtkWindow_autoptr; typedef GList *GtkWindow_listautoptr; typedef GSList *GtkWindow_slistautoptr; typedef GQueue *GtkWindow_queueautoptr;
# 500 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
#pragma clang diagnostic push
# 500 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 500 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkWindow (GtkWindow *_ptr) { if (_ptr) (g_object_unref) ((GtkWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkWindow (GtkWindow **_ptr) { glib_autoptr_clear_GtkWindow (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkWindow (void *_ptr) { (g_object_unref) ((GtkWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkWindow (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkWindow); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkWindow (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkWindow); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkWindow (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkWindow); }
# 500 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
#pragma clang diagnostic pop
typedef GtkWindowGroup *GtkWindowGroup_autoptr; typedef GList *GtkWindowGroup_listautoptr; typedef GSList *GtkWindowGroup_slistautoptr; typedef GQueue *GtkWindowGroup_queueautoptr;
# 501 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
#pragma clang diagnostic push
# 501 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 501 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkWindowGroup (GtkWindowGroup *_ptr) { if (_ptr) (g_object_unref) ((GtkWindowGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkWindowGroup (GtkWindowGroup **_ptr) { glib_autoptr_clear_GtkWindowGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkWindowGroup (void *_ptr) { (g_object_unref) ((GtkWindowGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkWindowGroup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkWindowGroup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkWindowGroup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkWindowGroup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkWindowGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkWindowGroup); }
# 501 "/usr/include/gtk-3.0/gtk/gtkwindow.h"
#pragma clang diagnostic pop
# 33 "/usr/include/gtk-3.0/gtk/gtkdialog.h" 2
# 47 "/usr/include/gtk-3.0/gtk/gtkdialog.h"
typedef enum
{
  GTK_DIALOG_MODAL = 1 << 0,
  GTK_DIALOG_DESTROY_WITH_PARENT = 1 << 1,
  GTK_DIALOG_USE_HEADER_BAR = 1 << 2
} GtkDialogFlags;
# 73 "/usr/include/gtk-3.0/gtk/gtkdialog.h"
typedef enum
{
  GTK_RESPONSE_NONE = -1,
  GTK_RESPONSE_REJECT = -2,
  GTK_RESPONSE_ACCEPT = -3,
  GTK_RESPONSE_DELETE_EVENT = -4,
  GTK_RESPONSE_OK = -5,
  GTK_RESPONSE_CANCEL = -6,
  GTK_RESPONSE_CLOSE = -7,
  GTK_RESPONSE_YES = -8,
  GTK_RESPONSE_NO = -9,
  GTK_RESPONSE_APPLY = -10,
  GTK_RESPONSE_HELP = -11
} GtkResponseType;
# 97 "/usr/include/gtk-3.0/gtk/gtkdialog.h"
typedef struct _GtkDialog GtkDialog;
typedef struct _GtkDialogPrivate GtkDialogPrivate;
typedef struct _GtkDialogClass GtkDialogClass;







struct _GtkDialog
{
  GtkWindow window;


  GtkDialogPrivate *priv;
};







struct _GtkDialogClass
{
  GtkWindowClass parent_class;



  void (* response) (GtkDialog *dialog, gint response_id);



  void (* close) (GtkDialog *dialog);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_dialog_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_dialog_new (void);

extern
GtkWidget* gtk_dialog_new_with_buttons (const gchar *title,
                                        GtkWindow *parent,
                                        GtkDialogFlags flags,
                                        const gchar *first_button_text,
                                        ...) __attribute__((__sentinel__));

extern
void gtk_dialog_add_action_widget (GtkDialog *dialog,
                                         GtkWidget *child,
                                         gint response_id);
extern
GtkWidget* gtk_dialog_add_button (GtkDialog *dialog,
                                         const gchar *button_text,
                                         gint response_id);
extern
void gtk_dialog_add_buttons (GtkDialog *dialog,
                                         const gchar *first_button_text,
                                         ...) __attribute__((__sentinel__));

extern
void gtk_dialog_set_response_sensitive (GtkDialog *dialog,
                                        gint response_id,
                                        gboolean setting);
extern
void gtk_dialog_set_default_response (GtkDialog *dialog,
                                        gint response_id);
extern
GtkWidget* gtk_dialog_get_widget_for_response (GtkDialog *dialog,
                                               gint response_id);
extern
gint gtk_dialog_get_response_for_widget (GtkDialog *dialog,
                                         GtkWidget *widget);

__attribute__((__deprecated__)) extern
gboolean gtk_alternative_dialog_button_order (GdkScreen *screen);
__attribute__((__deprecated__)) extern
void gtk_dialog_set_alternative_button_order (GtkDialog *dialog,
                                                  gint first_response_id,
                                                  ...);
__attribute__((__deprecated__)) extern
void gtk_dialog_set_alternative_button_order_from_array (GtkDialog *dialog,
                                                             gint n_params,
                                                             gint *new_order);


extern
void gtk_dialog_response (GtkDialog *dialog,
                                    gint response_id);


extern
gint gtk_dialog_run (GtkDialog *dialog);

__attribute__((__deprecated__)) extern
GtkWidget * gtk_dialog_get_action_area (GtkDialog *dialog);
extern
GtkWidget * gtk_dialog_get_content_area (GtkDialog *dialog);
extern
GtkWidget * gtk_dialog_get_header_bar (GtkDialog *dialog);

typedef GtkDialog *GtkDialog_autoptr; typedef GList *GtkDialog_listautoptr; typedef GSList *GtkDialog_slistautoptr; typedef GQueue *GtkDialog_queueautoptr;
# 209 "/usr/include/gtk-3.0/gtk/gtkdialog.h"
#pragma clang diagnostic push
# 209 "/usr/include/gtk-3.0/gtk/gtkdialog.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 209 "/usr/include/gtk-3.0/gtk/gtkdialog.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkDialog (GtkDialog *_ptr) { if (_ptr) (g_object_unref) ((GtkDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkDialog (GtkDialog **_ptr) { glib_autoptr_clear_GtkDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkDialog (void *_ptr) { (g_object_unref) ((GtkDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkDialog); }
# 209 "/usr/include/gtk-3.0/gtk/gtkdialog.h"
#pragma clang diagnostic pop
# 31 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h"
typedef struct _GtkAboutDialog GtkAboutDialog;
typedef struct _GtkAboutDialogClass GtkAboutDialogClass;
typedef struct _GtkAboutDialogPrivate GtkAboutDialogPrivate;
# 73 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h"
typedef enum {
  GTK_LICENSE_UNKNOWN,
  GTK_LICENSE_CUSTOM,

  GTK_LICENSE_GPL_2_0,
  GTK_LICENSE_GPL_3_0,

  GTK_LICENSE_LGPL_2_1,
  GTK_LICENSE_LGPL_3_0,

  GTK_LICENSE_BSD,
  GTK_LICENSE_MIT_X11,

  GTK_LICENSE_ARTISTIC,

  GTK_LICENSE_GPL_2_0_ONLY,
  GTK_LICENSE_GPL_3_0_ONLY,
  GTK_LICENSE_LGPL_2_1_ONLY,
  GTK_LICENSE_LGPL_3_0_ONLY,

  GTK_LICENSE_AGPL_3_0,
  GTK_LICENSE_AGPL_3_0_ONLY,

  GTK_LICENSE_BSD_3,
  GTK_LICENSE_APACHE_2_0,
  GTK_LICENSE_MPL_2_0
} GtkLicense;







struct _GtkAboutDialog
{
  GtkDialog parent_instance;


  GtkAboutDialogPrivate *priv;
};

struct _GtkAboutDialogClass
{
  GtkDialogClass parent_class;

  gboolean (*activate_link) (GtkAboutDialog *dialog,
                             const gchar *uri);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_about_dialog_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_about_dialog_new (void);
extern
void gtk_show_about_dialog (GtkWindow *parent,
                                                                const gchar *first_property_name,
                                                                ...) __attribute__((__sentinel__));
extern
const gchar * gtk_about_dialog_get_program_name (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_program_name (GtkAboutDialog *about,
                                                                const gchar *name);
extern
const gchar * gtk_about_dialog_get_version (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_version (GtkAboutDialog *about,
                                                                const gchar *version);
extern
const gchar * gtk_about_dialog_get_copyright (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_copyright (GtkAboutDialog *about,
                                                                const gchar *copyright);
extern
const gchar * gtk_about_dialog_get_comments (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_comments (GtkAboutDialog *about,
                                                                const gchar *comments);
extern
const gchar * gtk_about_dialog_get_license (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_license (GtkAboutDialog *about,
                                                                const gchar *license);
extern
void gtk_about_dialog_set_license_type (GtkAboutDialog *about,
                                                                GtkLicense license_type);
extern
GtkLicense gtk_about_dialog_get_license_type (GtkAboutDialog *about);

extern
gboolean gtk_about_dialog_get_wrap_license (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_wrap_license (GtkAboutDialog *about,
                                                                gboolean wrap_license);

extern
const gchar * gtk_about_dialog_get_website (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_website (GtkAboutDialog *about,
                                                                const gchar *website);
extern
const gchar * gtk_about_dialog_get_website_label (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_website_label (GtkAboutDialog *about,
                                                                const gchar *website_label);
extern
const gchar* const * gtk_about_dialog_get_authors (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_authors (GtkAboutDialog *about,
                                                                const gchar **authors);
extern
const gchar* const * gtk_about_dialog_get_documenters (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_documenters (GtkAboutDialog *about,
                                                                const gchar **documenters);
extern
const gchar* const * gtk_about_dialog_get_artists (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_artists (GtkAboutDialog *about,
                                                                const gchar **artists);
extern
const gchar * gtk_about_dialog_get_translator_credits (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_translator_credits (GtkAboutDialog *about,
                                                                const gchar *translator_credits);
extern
GdkPixbuf *gtk_about_dialog_get_logo (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_logo (GtkAboutDialog *about,
                                                                GdkPixbuf *logo);
extern
const gchar * gtk_about_dialog_get_logo_icon_name (GtkAboutDialog *about);
extern
void gtk_about_dialog_set_logo_icon_name (GtkAboutDialog *about,
                                                                const gchar *icon_name);
extern
void gtk_about_dialog_add_credit_section (GtkAboutDialog *about,
                                                                const gchar *section_name,
                                                                const gchar **people);

typedef GtkAboutDialog *GtkAboutDialog_autoptr; typedef GList *GtkAboutDialog_listautoptr; typedef GSList *GtkAboutDialog_slistautoptr; typedef GQueue *GtkAboutDialog_queueautoptr;
# 219 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h"
#pragma clang diagnostic push
# 219 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 219 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAboutDialog (GtkAboutDialog *_ptr) { if (_ptr) (g_object_unref) ((GtkAboutDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAboutDialog (GtkAboutDialog **_ptr) { glib_autoptr_clear_GtkAboutDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAboutDialog (void *_ptr) { (g_object_unref) ((GtkAboutDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAboutDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAboutDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAboutDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAboutDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAboutDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAboutDialog); }
# 219 "/usr/include/gtk-3.0/gtk/gtkaboutdialog.h"
#pragma clang diagnostic pop
# 32 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkaccellabel.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtkaccellabel.h"
# 1 "/usr/include/gtk-3.0/gtk/gtklabel.h" 1
# 32 "/usr/include/gtk-3.0/gtk/gtklabel.h"
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkmisc.h" 1
# 46 "/usr/include/gtk-3.0/gtk/deprecated/gtkmisc.h"
typedef struct _GtkMisc GtkMisc;
typedef struct _GtkMiscPrivate GtkMiscPrivate;
typedef struct _GtkMiscClass GtkMiscClass;

struct _GtkMisc
{
  GtkWidget widget;


  GtkMiscPrivate *priv;
};

struct _GtkMiscClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

__attribute__((__deprecated__)) extern
GType gtk_misc_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
void gtk_misc_set_alignment (GtkMisc *misc,
    gfloat xalign,
    gfloat yalign);
__attribute__((__deprecated__)) extern
void gtk_misc_get_alignment (GtkMisc *misc,
    gfloat *xalign,
    gfloat *yalign);
__attribute__((__deprecated__)) extern
void gtk_misc_set_padding (GtkMisc *misc,
    gint xpad,
    gint ypad);
__attribute__((__deprecated__)) extern
void gtk_misc_get_padding (GtkMisc *misc,
    gint *xpad,
    gint *ypad);

void _gtk_misc_get_padding_and_border (GtkMisc *misc,
      GtkBorder *border);
# 33 "/usr/include/gtk-3.0/gtk/gtklabel.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkmenu.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkmenushell.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkmenushell.h"
typedef struct _GtkMenuShell GtkMenuShell;
typedef struct _GtkMenuShellClass GtkMenuShellClass;
typedef struct _GtkMenuShellPrivate GtkMenuShellPrivate;

struct _GtkMenuShell
{
  GtkContainer container;


  GtkMenuShellPrivate *priv;
};

struct _GtkMenuShellClass
{
  GtkContainerClass parent_class;

  guint submenu_placement : 1;

  void (*deactivate) (GtkMenuShell *menu_shell);
  void (*selection_done) (GtkMenuShell *menu_shell);

  void (*move_current) (GtkMenuShell *menu_shell,
                                GtkMenuDirectionType direction);
  void (*activate_current) (GtkMenuShell *menu_shell,
                                gboolean force_hide);
  void (*cancel) (GtkMenuShell *menu_shell);
  void (*select_item) (GtkMenuShell *menu_shell,
                                GtkWidget *menu_item);
  void (*insert) (GtkMenuShell *menu_shell,
                                GtkWidget *child,
                                gint position);
  gint (*get_popup_delay) (GtkMenuShell *menu_shell);
  gboolean (*move_selected) (GtkMenuShell *menu_shell,
                                gint distance);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_menu_shell_get_type (void) __attribute__ ((__const__));

extern
void gtk_menu_shell_append (GtkMenuShell *menu_shell,
                                        GtkWidget *child);
extern
void gtk_menu_shell_prepend (GtkMenuShell *menu_shell,
                                        GtkWidget *child);
extern
void gtk_menu_shell_insert (GtkMenuShell *menu_shell,
                                        GtkWidget *child,
                                        gint position);
extern
void gtk_menu_shell_deactivate (GtkMenuShell *menu_shell);
extern
void gtk_menu_shell_select_item (GtkMenuShell *menu_shell,
                                        GtkWidget *menu_item);
extern
void gtk_menu_shell_deselect (GtkMenuShell *menu_shell);
extern
void gtk_menu_shell_activate_item (GtkMenuShell *menu_shell,
                                        GtkWidget *menu_item,
                                        gboolean force_deactivate);
extern
void gtk_menu_shell_select_first (GtkMenuShell *menu_shell,
                                        gboolean search_sensitive);
extern
void gtk_menu_shell_cancel (GtkMenuShell *menu_shell);
extern
gboolean gtk_menu_shell_get_take_focus (GtkMenuShell *menu_shell);
extern
void gtk_menu_shell_set_take_focus (GtkMenuShell *menu_shell,
                                        gboolean take_focus);

extern
GtkWidget *gtk_menu_shell_get_selected_item (GtkMenuShell *menu_shell);
extern
GtkWidget *gtk_menu_shell_get_parent_shell (GtkMenuShell *menu_shell);

extern
void gtk_menu_shell_bind_model (GtkMenuShell *menu_shell,
                                        GMenuModel *model,
                                        const gchar *action_namespace,
                                        gboolean with_separators);

typedef GtkMenuShell *GtkMenuShell_autoptr; typedef GList *GtkMenuShell_listautoptr; typedef GSList *GtkMenuShell_slistautoptr; typedef GQueue *GtkMenuShell_queueautoptr;
# 133 "/usr/include/gtk-3.0/gtk/gtkmenushell.h"
#pragma clang diagnostic push
# 133 "/usr/include/gtk-3.0/gtk/gtkmenushell.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 133 "/usr/include/gtk-3.0/gtk/gtkmenushell.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkMenuShell (GtkMenuShell *_ptr) { if (_ptr) (g_object_unref) ((GtkMenuShell *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkMenuShell (GtkMenuShell **_ptr) { glib_autoptr_clear_GtkMenuShell (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkMenuShell (void *_ptr) { (g_object_unref) ((GtkMenuShell *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkMenuShell (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkMenuShell); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkMenuShell (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkMenuShell); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkMenuShell (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkMenuShell); }
# 133 "/usr/include/gtk-3.0/gtk/gtkmenushell.h"
#pragma clang diagnostic pop
# 34 "/usr/include/gtk-3.0/gtk/gtkmenu.h" 2
# 45 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
typedef struct _GtkMenu GtkMenu;
typedef struct _GtkMenuClass GtkMenuClass;
typedef struct _GtkMenuPrivate GtkMenuPrivate;
# 57 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
typedef enum
{
  GTK_ARROWS_BOTH,
  GTK_ARROWS_START,
  GTK_ARROWS_END
} GtkArrowPlacement;
# 92 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
typedef void (*GtkMenuPositionFunc) (GtkMenu *menu,
         gint *x,
         gint *y,
         gboolean *push_in,
         gpointer user_data);
# 106 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
typedef void (*GtkMenuDetachFunc) (GtkWidget *attach_widget,
         GtkMenu *menu);

struct _GtkMenu
{
  GtkMenuShell menu_shell;


  GtkMenuPrivate *priv;
};

struct _GtkMenuClass
{
  GtkMenuShellClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_menu_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_menu_new (void);
extern
GtkWidget* gtk_menu_new_from_model (GMenuModel *model);


__attribute__((__deprecated__("Use '" "(gtk_menu_popup_at_widget, gtk_menu_popup_at_pointer, gtk_menu_popup_at_rect)" "' instead"))) extern
void gtk_menu_popup (GtkMenu *menu,
        GtkWidget *parent_menu_shell,
        GtkWidget *parent_menu_item,
        GtkMenuPositionFunc func,
        gpointer data,
        guint button,
        guint32 activate_time);
__attribute__((__deprecated__("Use '" "(gtk_menu_popup_at_widget, gtk_menu_popup_at_pointer, gtk_menu_popup_at_rect)" "' instead"))) extern
void gtk_menu_popup_for_device (GtkMenu *menu,
                                           GdkDevice *device,
                                           GtkWidget *parent_menu_shell,
                                           GtkWidget *parent_menu_item,
                                           GtkMenuPositionFunc func,
                                           gpointer data,
                                           GDestroyNotify destroy,
                                           guint button,
                                           guint32 activate_time);
extern
void gtk_menu_popup_at_rect (GtkMenu *menu,
                                           GdkWindow *rect_window,
                                           const GdkRectangle *rect,
                                           GdkGravity rect_anchor,
                                           GdkGravity menu_anchor,
                                           const GdkEvent *trigger_event);
extern
void gtk_menu_popup_at_widget (GtkMenu *menu,
                                           GtkWidget *widget,
                                           GdkGravity widget_anchor,
                                           GdkGravity menu_anchor,
                                           const GdkEvent *trigger_event);
extern
void gtk_menu_popup_at_pointer (GtkMenu *menu,
                                           const GdkEvent *trigger_event);




extern
void gtk_menu_reposition (GtkMenu *menu);

extern
void gtk_menu_popdown (GtkMenu *menu);




extern
GtkWidget* gtk_menu_get_active (GtkMenu *menu);
extern
void gtk_menu_set_active (GtkMenu *menu,
        guint index);




extern
void gtk_menu_set_accel_group (GtkMenu *menu,
        GtkAccelGroup *accel_group);
extern
GtkAccelGroup* gtk_menu_get_accel_group (GtkMenu *menu);
extern
void gtk_menu_set_accel_path (GtkMenu *menu,
        const gchar *accel_path);
extern
const gchar* gtk_menu_get_accel_path (GtkMenu *menu);





extern
void gtk_menu_attach_to_widget (GtkMenu *menu,
        GtkWidget *attach_widget,
        GtkMenuDetachFunc detacher);
extern
void gtk_menu_detach (GtkMenu *menu);





extern
GtkWidget* gtk_menu_get_attach_widget (GtkMenu *menu);

__attribute__((__deprecated__)) extern
void gtk_menu_set_tearoff_state (GtkMenu *menu,
                                           gboolean torn_off);
__attribute__((__deprecated__)) extern
gboolean gtk_menu_get_tearoff_state (GtkMenu *menu);




__attribute__((__deprecated__)) extern
void gtk_menu_set_title (GtkMenu *menu,
                                           const gchar *title);
__attribute__((__deprecated__)) extern
const gchar * gtk_menu_get_title (GtkMenu *menu);

extern
void gtk_menu_reorder_child (GtkMenu *menu,
                                           GtkWidget *child,
                                           gint position);

extern
void gtk_menu_set_screen (GtkMenu *menu,
        GdkScreen *screen);

extern
void gtk_menu_attach (GtkMenu *menu,
                                           GtkWidget *child,
                                           guint left_attach,
                                           guint right_attach,
                                           guint top_attach,
                                           guint bottom_attach);

extern
void gtk_menu_set_monitor (GtkMenu *menu,
                                           gint monitor_num);
extern
gint gtk_menu_get_monitor (GtkMenu *menu);

extern
void gtk_menu_place_on_monitor (GtkMenu *menu,
                                           GdkMonitor *monitor);

extern
GList* gtk_menu_get_for_attach_widget (GtkWidget *widget);

extern
void gtk_menu_set_reserve_toggle_size (GtkMenu *menu,
                                          gboolean reserve_toggle_size);
extern
gboolean gtk_menu_get_reserve_toggle_size (GtkMenu *menu);

typedef GtkMenu *GtkMenu_autoptr; typedef GList *GtkMenu_listautoptr; typedef GSList *GtkMenu_slistautoptr; typedef GQueue *GtkMenu_queueautoptr;
# 273 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
#pragma clang diagnostic push
# 273 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 273 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkMenu (GtkMenu *_ptr) { if (_ptr) (g_object_unref) ((GtkMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkMenu (GtkMenu **_ptr) { glib_autoptr_clear_GtkMenu (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkMenu (void *_ptr) { (g_object_unref) ((GtkMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkMenu (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkMenu); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkMenu (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkMenu); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkMenu (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkMenu); }
# 273 "/usr/include/gtk-3.0/gtk/gtkmenu.h"
#pragma clang diagnostic pop
# 35 "/usr/include/gtk-3.0/gtk/gtklabel.h" 2
# 46 "/usr/include/gtk-3.0/gtk/gtklabel.h"
typedef struct _GtkLabel GtkLabel;
typedef struct _GtkLabelPrivate GtkLabelPrivate;
typedef struct _GtkLabelClass GtkLabelClass;

typedef struct _GtkLabelSelectionInfo GtkLabelSelectionInfo;

struct _GtkLabel
{
  GtkMisc misc;


  GtkLabelPrivate *priv;
};

struct _GtkLabelClass
{
  GtkMiscClass parent_class;

  void (* move_cursor) (GtkLabel *label,
       GtkMovementStep step,
       gint count,
       gboolean extend_selection);
  void (* copy_clipboard) (GtkLabel *label);


  void (* populate_popup) (GtkLabel *label,
                             GtkMenu *menu);

  gboolean (*activate_link) (GtkLabel *label,
                             const gchar *uri);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_label_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_label_new (const gchar *str);
extern
GtkWidget* gtk_label_new_with_mnemonic (const gchar *str);
extern
void gtk_label_set_text (GtkLabel *label,
         const gchar *str);
extern
const gchar* gtk_label_get_text (GtkLabel *label);
extern
void gtk_label_set_attributes (GtkLabel *label,
         PangoAttrList *attrs);
extern
PangoAttrList *gtk_label_get_attributes (GtkLabel *label);
extern
void gtk_label_set_label (GtkLabel *label,
         const gchar *str);
extern
const gchar * gtk_label_get_label (GtkLabel *label);
extern
void gtk_label_set_markup (GtkLabel *label,
         const gchar *str);
extern
void gtk_label_set_use_markup (GtkLabel *label,
         gboolean setting);
extern
gboolean gtk_label_get_use_markup (GtkLabel *label);
extern
void gtk_label_set_use_underline (GtkLabel *label,
         gboolean setting);
extern
gboolean gtk_label_get_use_underline (GtkLabel *label);

extern
void gtk_label_set_markup_with_mnemonic (GtkLabel *label,
         const gchar *str);
extern
guint gtk_label_get_mnemonic_keyval (GtkLabel *label);
extern
void gtk_label_set_mnemonic_widget (GtkLabel *label,
         GtkWidget *widget);
extern
GtkWidget *gtk_label_get_mnemonic_widget (GtkLabel *label);
extern
void gtk_label_set_text_with_mnemonic (GtkLabel *label,
         const gchar *str);
extern
void gtk_label_set_justify (GtkLabel *label,
         GtkJustification jtype);
extern
GtkJustification gtk_label_get_justify (GtkLabel *label);
extern
void gtk_label_set_ellipsize (GtkLabel *label,
         PangoEllipsizeMode mode);
extern
PangoEllipsizeMode gtk_label_get_ellipsize (GtkLabel *label);
extern
void gtk_label_set_width_chars (GtkLabel *label,
         gint n_chars);
extern
gint gtk_label_get_width_chars (GtkLabel *label);
extern
void gtk_label_set_max_width_chars (GtkLabel *label,
           gint n_chars);
extern
gint gtk_label_get_max_width_chars (GtkLabel *label);
extern
void gtk_label_set_lines (GtkLabel *label,
                                                   gint lines);
extern
gint gtk_label_get_lines (GtkLabel *label);
extern
void gtk_label_set_pattern (GtkLabel *label,
         const gchar *pattern);
extern
void gtk_label_set_line_wrap (GtkLabel *label,
         gboolean wrap);
extern
gboolean gtk_label_get_line_wrap (GtkLabel *label);
extern
void gtk_label_set_line_wrap_mode (GtkLabel *label,
         PangoWrapMode wrap_mode);
extern
PangoWrapMode gtk_label_get_line_wrap_mode (GtkLabel *label);
extern
void gtk_label_set_selectable (GtkLabel *label,
         gboolean setting);
extern
gboolean gtk_label_get_selectable (GtkLabel *label);
extern
void gtk_label_set_angle (GtkLabel *label,
         gdouble angle);
extern
gdouble gtk_label_get_angle (GtkLabel *label);
extern
void gtk_label_select_region (GtkLabel *label,
         gint start_offset,
         gint end_offset);
extern
gboolean gtk_label_get_selection_bounds (GtkLabel *label,
                                                   gint *start,
                                                   gint *end);

extern
PangoLayout *gtk_label_get_layout (GtkLabel *label);
extern
void gtk_label_get_layout_offsets (GtkLabel *label,
                                           gint *x,
                                           gint *y);

extern
void gtk_label_set_single_line_mode (GtkLabel *label,
                                              gboolean single_line_mode);
extern
gboolean gtk_label_get_single_line_mode (GtkLabel *label);

extern
const gchar *gtk_label_get_current_uri (GtkLabel *label);
extern
void gtk_label_set_track_visited_links (GtkLabel *label,
                                                 gboolean track_links);
extern
gboolean gtk_label_get_track_visited_links (GtkLabel *label);

extern
void gtk_label_set_xalign (GtkLabel *label,
                                   gfloat xalign);

extern
gfloat gtk_label_get_xalign (GtkLabel *label);

extern
void gtk_label_set_yalign (GtkLabel *label,
                                   gfloat yalign);

extern
gfloat gtk_label_get_yalign (GtkLabel *label);

typedef GtkLabel *GtkLabel_autoptr; typedef GList *GtkLabel_listautoptr; typedef GSList *GtkLabel_slistautoptr; typedef GQueue *GtkLabel_queueautoptr;
# 228 "/usr/include/gtk-3.0/gtk/gtklabel.h"
#pragma clang diagnostic push
# 228 "/usr/include/gtk-3.0/gtk/gtklabel.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 228 "/usr/include/gtk-3.0/gtk/gtklabel.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkLabel (GtkLabel *_ptr) { if (_ptr) (g_object_unref) ((GtkLabel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkLabel (GtkLabel **_ptr) { glib_autoptr_clear_GtkLabel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkLabel (void *_ptr) { (g_object_unref) ((GtkLabel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkLabel (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkLabel); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkLabel (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkLabel); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkLabel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkLabel); }
# 228 "/usr/include/gtk-3.0/gtk/gtklabel.h"
#pragma clang diagnostic pop
# 36 "/usr/include/gtk-3.0/gtk/gtkaccellabel.h" 2
# 47 "/usr/include/gtk-3.0/gtk/gtkaccellabel.h"
typedef struct _GtkAccelLabel GtkAccelLabel;
typedef struct _GtkAccelLabelClass GtkAccelLabelClass;
typedef struct _GtkAccelLabelPrivate GtkAccelLabelPrivate;







struct _GtkAccelLabel
{
  GtkLabel label;
  GtkAccelLabelPrivate *priv;
};

struct _GtkAccelLabelClass
{
  GtkLabelClass parent_class;

  gchar *signal_quote1;
  gchar *signal_quote2;
  gchar *mod_name_shift;
  gchar *mod_name_control;
  gchar *mod_name_alt;
  gchar *mod_separator;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_accel_label_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_accel_label_new (const gchar *string);
extern
GtkWidget* gtk_accel_label_get_accel_widget (GtkAccelLabel *accel_label);
extern
guint gtk_accel_label_get_accel_width (GtkAccelLabel *accel_label);
extern
void gtk_accel_label_set_accel_widget (GtkAccelLabel *accel_label,
           GtkWidget *accel_widget);
extern
void gtk_accel_label_set_accel_closure (GtkAccelLabel *accel_label,
           GClosure *accel_closure);
extern
gboolean gtk_accel_label_refetch (GtkAccelLabel *accel_label);
extern
void gtk_accel_label_set_accel (GtkAccelLabel *accel_label,
                                              guint accelerator_key,
                                              GdkModifierType accelerator_mods);
extern
void gtk_accel_label_get_accel (GtkAccelLabel *accel_label,
                                              guint *accelerator_key,
                                              GdkModifierType *accelerator_mods);


gchar * _gtk_accel_label_class_get_accelerator_label (GtkAccelLabelClass *klass,
        guint accelerator_key,
        GdkModifierType accelerator_mods);

typedef GtkAccelLabel *GtkAccelLabel_autoptr; typedef GList *GtkAccelLabel_listautoptr; typedef GSList *GtkAccelLabel_slistautoptr; typedef GQueue *GtkAccelLabel_queueautoptr;
# 112 "/usr/include/gtk-3.0/gtk/gtkaccellabel.h"
#pragma clang diagnostic push
# 112 "/usr/include/gtk-3.0/gtk/gtkaccellabel.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 112 "/usr/include/gtk-3.0/gtk/gtkaccellabel.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAccelLabel (GtkAccelLabel *_ptr) { if (_ptr) (g_object_unref) ((GtkAccelLabel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAccelLabel (GtkAccelLabel **_ptr) { glib_autoptr_clear_GtkAccelLabel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAccelLabel (void *_ptr) { (g_object_unref) ((GtkAccelLabel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAccelLabel (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAccelLabel); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAccelLabel (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAccelLabel); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAccelLabel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAccelLabel); }
# 112 "/usr/include/gtk-3.0/gtk/gtkaccellabel.h"
#pragma clang diagnostic pop
# 34 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkaccelmap.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkaccelmap.h"
typedef struct _GtkAccelMap GtkAccelMap;
typedef struct _GtkAccelMapClass GtkAccelMapClass;
# 52 "/usr/include/gtk-3.0/gtk/gtkaccelmap.h"
typedef void (*GtkAccelMapForeach) (gpointer data,
       const gchar *accel_path,
       guint accel_key,
       GdkModifierType accel_mods,
       gboolean changed);




extern
void gtk_accel_map_add_entry (const gchar *accel_path,
      guint accel_key,
      GdkModifierType accel_mods);
extern
gboolean gtk_accel_map_lookup_entry (const gchar *accel_path,
      GtkAccelKey *key);
extern
gboolean gtk_accel_map_change_entry (const gchar *accel_path,
      guint accel_key,
      GdkModifierType accel_mods,
      gboolean replace);
extern
void gtk_accel_map_load (const gchar *file_name);
extern
void gtk_accel_map_save (const gchar *file_name);
extern
void gtk_accel_map_foreach (gpointer data,
      GtkAccelMapForeach foreach_func);
extern
void gtk_accel_map_load_fd (gint fd);
extern
void gtk_accel_map_load_scanner (GScanner *scanner);
extern
void gtk_accel_map_save_fd (gint fd);

extern
void gtk_accel_map_lock_path (const gchar *accel_path);
extern
void gtk_accel_map_unlock_path (const gchar *accel_path);


extern
void gtk_accel_map_add_filter (const gchar *filter_pattern);
extern
void gtk_accel_map_foreach_unfiltered (gpointer data,
       GtkAccelMapForeach foreach_func);


extern
GType gtk_accel_map_get_type (void) __attribute__ ((__const__));
extern
GtkAccelMap *gtk_accel_map_get (void);

typedef GtkAccelMap *GtkAccelMap_autoptr; typedef GList *GtkAccelMap_listautoptr; typedef GSList *GtkAccelMap_slistautoptr; typedef GQueue *GtkAccelMap_queueautoptr;
# 105 "/usr/include/gtk-3.0/gtk/gtkaccelmap.h"
#pragma clang diagnostic push
# 105 "/usr/include/gtk-3.0/gtk/gtkaccelmap.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 105 "/usr/include/gtk-3.0/gtk/gtkaccelmap.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAccelMap (GtkAccelMap *_ptr) { if (_ptr) (g_object_unref) ((GtkAccelMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAccelMap (GtkAccelMap **_ptr) { glib_autoptr_clear_GtkAccelMap (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAccelMap (void *_ptr) { (g_object_unref) ((GtkAccelMap *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAccelMap (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAccelMap); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAccelMap (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAccelMap); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAccelMap (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAccelMap); }
# 105 "/usr/include/gtk-3.0/gtk/gtkaccelmap.h"
#pragma clang diagnostic pop
# 35 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkaccessible.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkaccessible.h"
typedef struct _GtkAccessible GtkAccessible;
typedef struct _GtkAccessiblePrivate GtkAccessiblePrivate;
typedef struct _GtkAccessibleClass GtkAccessibleClass;

struct _GtkAccessible
{
  AtkObject parent;


  GtkAccessiblePrivate *priv;
};

struct _GtkAccessibleClass
{
  AtkObjectClass parent_class;

  void (*connect_widget_destroyed) (GtkAccessible *accessible);

  void (*widget_set) (GtkAccessible *accessible);
  void (*widget_unset) (GtkAccessible *accessible);

  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_accessible_get_type (void) __attribute__ ((__const__));

extern
void gtk_accessible_set_widget (GtkAccessible *accessible,
                                                    GtkWidget *widget);
extern
GtkWidget *gtk_accessible_get_widget (GtkAccessible *accessible);

__attribute__((__deprecated__("Use '" "gtk_accessible_set_widget" "' instead"))) extern
void gtk_accessible_connect_widget_destroyed (GtkAccessible *accessible);
# 36 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkactionable.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkactionable.h"
typedef struct _GtkActionableInterface GtkActionableInterface;
typedef struct _GtkActionable GtkActionable;

struct _GtkActionableInterface
{

  GTypeInterface g_iface;



  const gchar * (* get_action_name) (GtkActionable *actionable);
  void (* set_action_name) (GtkActionable *actionable,
                                                 const gchar *action_name);
  GVariant * (* get_action_target_value) (GtkActionable *actionable);
  void (* set_action_target_value) (GtkActionable *actionable,
                                                 GVariant *target_value);
};

extern
GType gtk_actionable_get_type (void) __attribute__ ((__const__));

extern
const gchar * gtk_actionable_get_action_name (GtkActionable *actionable);
extern
void gtk_actionable_set_action_name (GtkActionable *actionable,
                                                                         const gchar *action_name);

extern
GVariant * gtk_actionable_get_action_target_value (GtkActionable *actionable);
extern
void gtk_actionable_set_action_target_value (GtkActionable *actionable,
                                                                         GVariant *target_value);

extern
void gtk_actionable_set_action_target (GtkActionable *actionable,
                                                                         const gchar *format_string,
                                                                         ...);

extern
void gtk_actionable_set_detailed_action_name (GtkActionable *actionable,
                                                                         const gchar *detailed_action_name);
# 37 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkactionbar.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkactionbar.h"
typedef struct _GtkActionBar GtkActionBar;
typedef struct _GtkActionBarPrivate GtkActionBarPrivate;
typedef struct _GtkActionBarClass GtkActionBarClass;

struct _GtkActionBar
{

  GtkBin bin;
};

struct _GtkActionBarClass
{

  GtkBinClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_action_bar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_action_bar_new (void);
extern
GtkWidget *gtk_action_bar_get_center_widget (GtkActionBar *action_bar);
extern
void gtk_action_bar_set_center_widget (GtkActionBar *action_bar,
                                               GtkWidget *center_widget);

extern
void gtk_action_bar_pack_start (GtkActionBar *action_bar,
                                               GtkWidget *child);
extern
void gtk_action_bar_pack_end (GtkActionBar *action_bar,
                                               GtkWidget *child);
# 38 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkadjustment.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkadjustment.h"
typedef struct _GtkAdjustmentPrivate GtkAdjustmentPrivate;
typedef struct _GtkAdjustmentClass GtkAdjustmentClass;







struct _GtkAdjustment
{
  GInitiallyUnowned parent_instance;

  GtkAdjustmentPrivate *priv;
};

struct _GtkAdjustmentClass
{
  GInitiallyUnownedClass parent_class;

  void (* changed) (GtkAdjustment *adjustment);
  void (* value_changed) (GtkAdjustment *adjustment);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_adjustment_get_type (void) __attribute__ ((__const__));
extern
GtkAdjustment* gtk_adjustment_new (gdouble value,
                                                 gdouble lower,
                                                 gdouble upper,
                                                 gdouble step_increment,
                                                 gdouble page_increment,
                                                 gdouble page_size);

__attribute__((__deprecated__)) extern
void gtk_adjustment_changed (GtkAdjustment *adjustment);
__attribute__((__deprecated__)) extern
void gtk_adjustment_value_changed (GtkAdjustment *adjustment);
extern
void gtk_adjustment_clamp_page (GtkAdjustment *adjustment,
                                                 gdouble lower,
                                                 gdouble upper);

extern
gdouble gtk_adjustment_get_value (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_value (GtkAdjustment *adjustment,
                                                 gdouble value);
extern
gdouble gtk_adjustment_get_lower (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_lower (GtkAdjustment *adjustment,
                                                 gdouble lower);
extern
gdouble gtk_adjustment_get_upper (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_upper (GtkAdjustment *adjustment,
                                                 gdouble upper);
extern
gdouble gtk_adjustment_get_step_increment (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_step_increment (GtkAdjustment *adjustment,
                                                 gdouble step_increment);
extern
gdouble gtk_adjustment_get_page_increment (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_page_increment (GtkAdjustment *adjustment,
                                                 gdouble page_increment);
extern
gdouble gtk_adjustment_get_page_size (GtkAdjustment *adjustment);
extern
void gtk_adjustment_set_page_size (GtkAdjustment *adjustment,
                                                 gdouble page_size);

extern
void gtk_adjustment_configure (GtkAdjustment *adjustment,
                                                 gdouble value,
                                                 gdouble lower,
                                                 gdouble upper,
                                                 gdouble step_increment,
                                                 gdouble page_increment,
                                                 gdouble page_size);
extern
gdouble gtk_adjustment_get_minimum_increment (GtkAdjustment *adjustment);
# 39 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkappchooser.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkappchooser.h"
typedef struct _GtkAppChooser GtkAppChooser;

extern
GType gtk_app_chooser_get_type (void) __attribute__ ((__const__));

extern
GAppInfo * gtk_app_chooser_get_app_info (GtkAppChooser *self);
extern
gchar * gtk_app_chooser_get_content_type (GtkAppChooser *self);
extern
void gtk_app_chooser_refresh (GtkAppChooser *self);
# 40 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkappchooserdialog.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkappchooserdialog.h"
typedef struct _GtkAppChooserDialog GtkAppChooserDialog;
typedef struct _GtkAppChooserDialogClass GtkAppChooserDialogClass;
typedef struct _GtkAppChooserDialogPrivate GtkAppChooserDialogPrivate;

struct _GtkAppChooserDialog {
  GtkDialog parent;


  GtkAppChooserDialogPrivate *priv;
};





struct _GtkAppChooserDialogClass {
  GtkDialogClass parent_class;




  gpointer padding[16];
};

extern
GType gtk_app_chooser_dialog_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_app_chooser_dialog_new (GtkWindow *parent,
                                                           GtkDialogFlags flags,
                                                           GFile *file);
extern
GtkWidget * gtk_app_chooser_dialog_new_for_content_type (GtkWindow *parent,
                                                           GtkDialogFlags flags,
                                                           const gchar *content_type);

extern
GtkWidget * gtk_app_chooser_dialog_get_widget (GtkAppChooserDialog *self);
extern
void gtk_app_chooser_dialog_set_heading (GtkAppChooserDialog *self,
                                                           const gchar *heading);
extern
const gchar * gtk_app_chooser_dialog_get_heading (GtkAppChooserDialog *self);
# 41 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkappchooserwidget.h" 1
# 32 "/usr/include/gtk-3.0/gtk/gtkappchooserwidget.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkbox.h" 1
# 47 "/usr/include/gtk-3.0/gtk/gtkbox.h"
typedef struct _GtkBox GtkBox;
typedef struct _GtkBoxPrivate GtkBoxPrivate;
typedef struct _GtkBoxClass GtkBoxClass;

struct _GtkBox
{
  GtkContainer container;


  GtkBoxPrivate *priv;
};





struct _GtkBoxClass
{
  GtkContainerClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_box_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_box_new (GtkOrientation orientation,
                                         gint spacing);

extern
void gtk_box_pack_start (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding);
extern
void gtk_box_pack_end (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding);

extern
void gtk_box_set_homogeneous (GtkBox *box,
                                         gboolean homogeneous);
extern
gboolean gtk_box_get_homogeneous (GtkBox *box);
extern
void gtk_box_set_spacing (GtkBox *box,
                                         gint spacing);
extern
gint gtk_box_get_spacing (GtkBox *box);
extern
void gtk_box_set_baseline_position (GtkBox *box,
        GtkBaselinePosition position);
extern
GtkBaselinePosition gtk_box_get_baseline_position (GtkBox *box);

extern
void gtk_box_reorder_child (GtkBox *box,
                                         GtkWidget *child,
                                         gint position);

extern
void gtk_box_query_child_packing (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean *expand,
                                         gboolean *fill,
                                         guint *padding,
                                         GtkPackType *pack_type);
extern
void gtk_box_set_child_packing (GtkBox *box,
                                         GtkWidget *child,
                                         gboolean expand,
                                         gboolean fill,
                                         guint padding,
                                         GtkPackType pack_type);

extern
void gtk_box_set_center_widget (GtkBox *box,
                                         GtkWidget *widget);
extern
GtkWidget *gtk_box_get_center_widget (GtkBox *box);
# 33 "/usr/include/gtk-3.0/gtk/gtkappchooserwidget.h" 2
# 45 "/usr/include/gtk-3.0/gtk/gtkappchooserwidget.h"
typedef struct _GtkAppChooserWidget GtkAppChooserWidget;
typedef struct _GtkAppChooserWidgetClass GtkAppChooserWidgetClass;
typedef struct _GtkAppChooserWidgetPrivate GtkAppChooserWidgetPrivate;

struct _GtkAppChooserWidget {
  GtkBox parent;


  GtkAppChooserWidgetPrivate *priv;
};
# 66 "/usr/include/gtk-3.0/gtk/gtkappchooserwidget.h"
struct _GtkAppChooserWidgetClass {
  GtkBoxClass parent_class;



  void (* application_selected) (GtkAppChooserWidget *self,
                                  GAppInfo *app_info);

  void (* application_activated) (GtkAppChooserWidget *self,
                                  GAppInfo *app_info);

  void (* populate_popup) (GtkAppChooserWidget *self,
                                  GtkMenu *menu,
                                  GAppInfo *app_info);




  gpointer padding[16];
};

extern
GType gtk_app_chooser_widget_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_app_chooser_widget_new (const gchar *content_type);

extern
void gtk_app_chooser_widget_set_show_default (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_default (GtkAppChooserWidget *self);

extern
void gtk_app_chooser_widget_set_show_recommended (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_recommended (GtkAppChooserWidget *self);

extern
void gtk_app_chooser_widget_set_show_fallback (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_fallback (GtkAppChooserWidget *self);

extern
void gtk_app_chooser_widget_set_show_other (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_other (GtkAppChooserWidget *self);

extern
void gtk_app_chooser_widget_set_show_all (GtkAppChooserWidget *self,
                                                           gboolean setting);
extern
gboolean gtk_app_chooser_widget_get_show_all (GtkAppChooserWidget *self);

extern
void gtk_app_chooser_widget_set_default_text (GtkAppChooserWidget *self,
                                                           const gchar *text);
extern
const gchar * gtk_app_chooser_widget_get_default_text (GtkAppChooserWidget *self);
# 42 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkappchooserbutton.h" 1
# 29 "/usr/include/gtk-3.0/gtk/gtkappchooserbutton.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkcombobox.h" 1
# 26 "/usr/include/gtk-3.0/gtk/gtkcombobox.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktreemodel.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtktreemodel.h"
typedef struct _GtkTreeIter GtkTreeIter;
typedef struct _GtkTreePath GtkTreePath;
typedef struct _GtkTreeRowReference GtkTreeRowReference;
typedef struct _GtkTreeModel GtkTreeModel;
typedef struct _GtkTreeModelIface GtkTreeModelIface;
# 58 "/usr/include/gtk-3.0/gtk/gtktreemodel.h"
typedef gboolean (* GtkTreeModelForeachFunc) (GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data);
# 74 "/usr/include/gtk-3.0/gtk/gtktreemodel.h"
typedef enum
{
  GTK_TREE_MODEL_ITERS_PERSIST = 1 << 0,
  GTK_TREE_MODEL_LIST_ONLY = 1 << 1
} GtkTreeModelFlags;
# 93 "/usr/include/gtk-3.0/gtk/gtktreemodel.h"
struct _GtkTreeIter
{
  gint stamp;
  gpointer user_data;
  gpointer user_data2;
  gpointer user_data3;
};
# 130 "/usr/include/gtk-3.0/gtk/gtktreemodel.h"
struct _GtkTreeModelIface
{

  GTypeInterface g_iface;




  void (* row_changed) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_inserted) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_has_child_toggled) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter);
  void (* row_deleted) (GtkTreeModel *tree_model,
       GtkTreePath *path);
  void (* rows_reordered) (GtkTreeModel *tree_model,
       GtkTreePath *path,
       GtkTreeIter *iter,
       gint *new_order);


  GtkTreeModelFlags (* get_flags) (GtkTreeModel *tree_model);

  gint (* get_n_columns) (GtkTreeModel *tree_model);
  GType (* get_column_type) (GtkTreeModel *tree_model,
        gint index_);
  gboolean (* get_iter) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreePath *path);
  GtkTreePath *(* get_path) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  void (* get_value) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        gint column,
        GValue *value);
  gboolean (* iter_next) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gboolean (* iter_previous) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gboolean (* iter_children) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent);
  gboolean (* iter_has_child) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gint (* iter_n_children) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  gboolean (* iter_nth_child) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint n);
  gboolean (* iter_parent) (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *child);
  void (* ref_node) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
  void (* unref_node) (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
};



extern
GtkTreePath *gtk_tree_path_new (void);
extern
GtkTreePath *gtk_tree_path_new_from_string (const gchar *path);
extern
GtkTreePath *gtk_tree_path_new_from_indices (gint first_index,
          ...);
extern
GtkTreePath *gtk_tree_path_new_from_indicesv (gint *indices,
           gsize length);
extern
gchar *gtk_tree_path_to_string (GtkTreePath *path);
extern
GtkTreePath *gtk_tree_path_new_first (void);
extern
void gtk_tree_path_append_index (GtkTreePath *path,
          gint index_);
extern
void gtk_tree_path_prepend_index (GtkTreePath *path,
          gint index_);
extern
gint gtk_tree_path_get_depth (GtkTreePath *path);
extern
gint *gtk_tree_path_get_indices (GtkTreePath *path);

extern
gint *gtk_tree_path_get_indices_with_depth (GtkTreePath *path,
         gint *depth);

extern
void gtk_tree_path_free (GtkTreePath *path);
extern
GtkTreePath *gtk_tree_path_copy (const GtkTreePath *path);
extern
GType gtk_tree_path_get_type (void) __attribute__ ((__const__));
extern
gint gtk_tree_path_compare (const GtkTreePath *a,
          const GtkTreePath *b);
extern
void gtk_tree_path_next (GtkTreePath *path);
extern
gboolean gtk_tree_path_prev (GtkTreePath *path);
extern
gboolean gtk_tree_path_up (GtkTreePath *path);
extern
void gtk_tree_path_down (GtkTreePath *path);

extern
gboolean gtk_tree_path_is_ancestor (GtkTreePath *path,
                                             GtkTreePath *descendant);
extern
gboolean gtk_tree_path_is_descendant (GtkTreePath *path,
                                             GtkTreePath *ancestor);
# 257 "/usr/include/gtk-3.0/gtk/gtktreemodel.h"
extern
GType gtk_tree_row_reference_get_type (void) __attribute__ ((__const__));
extern
GtkTreeRowReference *gtk_tree_row_reference_new (GtkTreeModel *model,
             GtkTreePath *path);
extern
GtkTreeRowReference *gtk_tree_row_reference_new_proxy (GObject *proxy,
             GtkTreeModel *model,
             GtkTreePath *path);
extern
GtkTreePath *gtk_tree_row_reference_get_path (GtkTreeRowReference *reference);
extern
GtkTreeModel *gtk_tree_row_reference_get_model (GtkTreeRowReference *reference);
extern
gboolean gtk_tree_row_reference_valid (GtkTreeRowReference *reference);
extern
GtkTreeRowReference *gtk_tree_row_reference_copy (GtkTreeRowReference *reference);
extern
void gtk_tree_row_reference_free (GtkTreeRowReference *reference);


extern
void gtk_tree_row_reference_inserted (GObject *proxy,
             GtkTreePath *path);
extern
void gtk_tree_row_reference_deleted (GObject *proxy,
             GtkTreePath *path);
extern
void gtk_tree_row_reference_reordered (GObject *proxy,
             GtkTreePath *path,
             GtkTreeIter *iter,
             gint *new_order);


extern
GtkTreeIter * gtk_tree_iter_copy (GtkTreeIter *iter);
extern
void gtk_tree_iter_free (GtkTreeIter *iter);
extern
GType gtk_tree_iter_get_type (void) __attribute__ ((__const__));

extern
GType gtk_tree_model_get_type (void) __attribute__ ((__const__));
extern
GtkTreeModelFlags gtk_tree_model_get_flags (GtkTreeModel *tree_model);
extern
gint gtk_tree_model_get_n_columns (GtkTreeModel *tree_model);
extern
GType gtk_tree_model_get_column_type (GtkTreeModel *tree_model,
        gint index_);



extern
gboolean gtk_tree_model_get_iter (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreePath *path);
extern
gboolean gtk_tree_model_get_iter_from_string (GtkTreeModel *tree_model,
             GtkTreeIter *iter,
             const gchar *path_string);
extern
gchar * gtk_tree_model_get_string_from_iter (GtkTreeModel *tree_model,
                                                       GtkTreeIter *iter);
extern
gboolean gtk_tree_model_get_iter_first (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
GtkTreePath * gtk_tree_model_get_path (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
void gtk_tree_model_get_value (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        gint column,
        GValue *value);
extern
gboolean gtk_tree_model_iter_previous (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
gboolean gtk_tree_model_iter_next (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
gboolean gtk_tree_model_iter_children (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent);
extern
gboolean gtk_tree_model_iter_has_child (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
gint gtk_tree_model_iter_n_children (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
gboolean gtk_tree_model_iter_nth_child (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint n);
extern
gboolean gtk_tree_model_iter_parent (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        GtkTreeIter *child);
extern
void gtk_tree_model_ref_node (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
void gtk_tree_model_unref_node (GtkTreeModel *tree_model,
        GtkTreeIter *iter);
extern
void gtk_tree_model_get (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        ...);
extern
void gtk_tree_model_get_valist (GtkTreeModel *tree_model,
        GtkTreeIter *iter,
        va_list var_args);


extern
void gtk_tree_model_foreach (GtkTreeModel *model,
        GtkTreeModelForeachFunc func,
        gpointer user_data);


extern
void gtk_tree_model_row_changed (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
extern
void gtk_tree_model_row_inserted (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
extern
void gtk_tree_model_row_has_child_toggled (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter);
extern
void gtk_tree_model_row_deleted (GtkTreeModel *tree_model,
        GtkTreePath *path);
extern
void gtk_tree_model_rows_reordered (GtkTreeModel *tree_model,
        GtkTreePath *path,
        GtkTreeIter *iter,
        gint *new_order);
extern
void gtk_tree_model_rows_reordered_with_length (GtkTreeModel *tree_model,
      GtkTreePath *path,
      GtkTreeIter *iter,
      gint *new_order,
      gint length);
# 27 "/usr/include/gtk-3.0/gtk/gtkcombobox.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktreeview.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtktreeview.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktreeviewcolumn.h" 1
# 25 "/usr/include/gtk-3.0/gtk/gtktreeviewcolumn.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkcellrenderer.h" 1
# 25 "/usr/include/gtk-3.0/gtk/gtkcellrenderer.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkcelleditable.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtkcelleditable.h"
typedef struct _GtkCellEditable GtkCellEditable;
typedef struct _GtkCellEditableIface GtkCellEditableIface;
# 46 "/usr/include/gtk-3.0/gtk/gtkcelleditable.h"
struct _GtkCellEditableIface
{

  GTypeInterface g_iface;




  void (* editing_done) (GtkCellEditable *cell_editable);
  void (* remove_widget) (GtkCellEditable *cell_editable);


  void (* start_editing) (GtkCellEditable *cell_editable,
     GdkEvent *event);
};


extern
GType gtk_cell_editable_get_type (void) __attribute__ ((__const__));

extern
void gtk_cell_editable_start_editing (GtkCellEditable *cell_editable,
           GdkEvent *event);
extern
void gtk_cell_editable_editing_done (GtkCellEditable *cell_editable);
extern
void gtk_cell_editable_remove_widget (GtkCellEditable *cell_editable);
# 26 "/usr/include/gtk-3.0/gtk/gtkcellrenderer.h" 2
# 43 "/usr/include/gtk-3.0/gtk/gtkcellrenderer.h"
typedef enum
{
  GTK_CELL_RENDERER_SELECTED = 1 << 0,
  GTK_CELL_RENDERER_PRELIT = 1 << 1,
  GTK_CELL_RENDERER_INSENSITIVE = 1 << 2,

  GTK_CELL_RENDERER_SORTED = 1 << 3,
  GTK_CELL_RENDERER_FOCUSED = 1 << 4,
  GTK_CELL_RENDERER_EXPANDABLE = 1 << 5,
  GTK_CELL_RENDERER_EXPANDED = 1 << 6
} GtkCellRendererState;
# 66 "/usr/include/gtk-3.0/gtk/gtkcellrenderer.h"
typedef enum
{
  GTK_CELL_RENDERER_MODE_INERT,
  GTK_CELL_RENDERER_MODE_ACTIVATABLE,
  GTK_CELL_RENDERER_MODE_EDITABLE
} GtkCellRendererMode;
# 80 "/usr/include/gtk-3.0/gtk/gtkcellrenderer.h"
typedef struct _GtkCellRenderer GtkCellRenderer;
typedef struct _GtkCellRendererPrivate GtkCellRendererPrivate;
typedef struct _GtkCellRendererClass GtkCellRendererClass;
typedef struct _GtkCellRendererClassPrivate GtkCellRendererClassPrivate;

struct _GtkCellRenderer
{
  GInitiallyUnowned parent_instance;


  GtkCellRendererPrivate *priv;
};
# 109 "/usr/include/gtk-3.0/gtk/gtkcellrenderer.h"
struct _GtkCellRendererClass
{

  GInitiallyUnownedClass parent_class;




  GtkSizeRequestMode (* get_request_mode) (GtkCellRenderer *cell);
  void (* get_preferred_width) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          gint *minimum_size,
                                                          gint *natural_size);
  void (* get_preferred_height_for_width) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          gint width,
                                                          gint *minimum_height,
                                                          gint *natural_height);
  void (* get_preferred_height) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          gint *minimum_size,
                                                          gint *natural_size);
  void (* get_preferred_width_for_height) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          gint height,
                                                          gint *minimum_width,
                                                          gint *natural_width);
  void (* get_aligned_area) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
         GtkCellRendererState flags,
                                                          const GdkRectangle *cell_area,
                                                          GdkRectangle *aligned_area);
  void (* get_size) (GtkCellRenderer *cell,
                                                          GtkWidget *widget,
                                                          const GdkRectangle *cell_area,
                                                          gint *x_offset,
                                                          gint *y_offset,
                                                          gint *width,
                                                          gint *height);
  void (* render) (GtkCellRenderer *cell,
                                                          cairo_t *cr,
                                                          GtkWidget *widget,
                                                          const GdkRectangle *background_area,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags);
  gboolean (* activate) (GtkCellRenderer *cell,
                                                          GdkEvent *event,
                                                          GtkWidget *widget,
                                                          const gchar *path,
                                                          const GdkRectangle *background_area,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags);
  GtkCellEditable * (* start_editing) (GtkCellRenderer *cell,
                                                          GdkEvent *event,
                                                          GtkWidget *widget,
                                                          const gchar *path,
                                                          const GdkRectangle *background_area,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags);


  void (* editing_canceled) (GtkCellRenderer *cell);
  void (* editing_started) (GtkCellRenderer *cell,
        GtkCellEditable *editable,
        const gchar *path);



  GtkCellRendererClassPrivate *priv;


  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_get_type (void) __attribute__ ((__const__));

extern
GtkSizeRequestMode gtk_cell_renderer_get_request_mode (GtkCellRenderer *cell);
extern
void gtk_cell_renderer_get_preferred_width (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     gint *minimum_size,
                                                                     gint *natural_size);
extern
void gtk_cell_renderer_get_preferred_height_for_width (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     gint width,
                                                                     gint *minimum_height,
                                                                     gint *natural_height);
extern
void gtk_cell_renderer_get_preferred_height (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     gint *minimum_size,
                                                                     gint *natural_size);
extern
void gtk_cell_renderer_get_preferred_width_for_height (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     gint height,
                                                                     gint *minimum_width,
                                                                     gint *natural_width);
extern
void gtk_cell_renderer_get_preferred_size (GtkCellRenderer *cell,
                                                                     GtkWidget *widget,
                                                                     GtkRequisition *minimum_size,
                                                                     GtkRequisition *natural_size);
extern
void gtk_cell_renderer_get_aligned_area (GtkCellRenderer *cell,
             GtkWidget *widget,
             GtkCellRendererState flags,
             const GdkRectangle *cell_area,
             GdkRectangle *aligned_area);

__attribute__((__deprecated__("Use '" "gtk_cell_renderer_get_preferred_size" "' instead"))) extern
void gtk_cell_renderer_get_size (GtkCellRenderer *cell,
                                                   GtkWidget *widget,
                                                   const GdkRectangle *cell_area,
                                                   gint *x_offset,
                                                   gint *y_offset,
                                                   gint *width,
                                                   gint *height);
extern
void gtk_cell_renderer_render (GtkCellRenderer *cell,
                                                   cairo_t *cr,
         GtkWidget *widget,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         GtkCellRendererState flags);
extern
gboolean gtk_cell_renderer_activate (GtkCellRenderer *cell,
         GdkEvent *event,
         GtkWidget *widget,
         const gchar *path,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         GtkCellRendererState flags);
extern
GtkCellEditable *gtk_cell_renderer_start_editing (GtkCellRenderer *cell,
         GdkEvent *event,
         GtkWidget *widget,
         const gchar *path,
         const GdkRectangle *background_area,
         const GdkRectangle *cell_area,
         GtkCellRendererState flags);

extern
void gtk_cell_renderer_set_fixed_size (GtkCellRenderer *cell,
         gint width,
         gint height);
extern
void gtk_cell_renderer_get_fixed_size (GtkCellRenderer *cell,
         gint *width,
         gint *height);

extern
void gtk_cell_renderer_set_alignment (GtkCellRenderer *cell,
                                                   gfloat xalign,
                                                   gfloat yalign);
extern
void gtk_cell_renderer_get_alignment (GtkCellRenderer *cell,
                                                   gfloat *xalign,
                                                   gfloat *yalign);

extern
void gtk_cell_renderer_set_padding (GtkCellRenderer *cell,
                                                   gint xpad,
                                                   gint ypad);
extern
void gtk_cell_renderer_get_padding (GtkCellRenderer *cell,
                                                   gint *xpad,
                                                   gint *ypad);

extern
void gtk_cell_renderer_set_visible (GtkCellRenderer *cell,
                                                   gboolean visible);
extern
gboolean gtk_cell_renderer_get_visible (GtkCellRenderer *cell);

extern
void gtk_cell_renderer_set_sensitive (GtkCellRenderer *cell,
                                                   gboolean sensitive);
extern
gboolean gtk_cell_renderer_get_sensitive (GtkCellRenderer *cell);

extern
gboolean gtk_cell_renderer_is_activatable (GtkCellRenderer *cell);


extern
void gtk_cell_renderer_stop_editing (GtkCellRenderer *cell,
                                                   gboolean canceled);


void _gtk_cell_renderer_calc_offset (GtkCellRenderer *cell,
                                                   const GdkRectangle *cell_area,
                                                   GtkTextDirection direction,
                                                   gint width,
                                                   gint height,
                                                   gint *x_offset,
                                                   gint *y_offset);

extern
GtkStateFlags gtk_cell_renderer_get_state (GtkCellRenderer *cell,
                                                   GtkWidget *widget,
                                                   GtkCellRendererState cell_state);

extern
void gtk_cell_renderer_class_set_accessible_type
                                                  (GtkCellRendererClass *renderer_class,
                                                   GType type);
GType _gtk_cell_renderer_get_accessible_type
                                                  (GtkCellRenderer * renderer);
# 26 "/usr/include/gtk-3.0/gtk/gtktreeviewcolumn.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtktreesortable.h" 1
# 58 "/usr/include/gtk-3.0/gtk/gtktreesortable.h"
typedef struct _GtkTreeSortable GtkTreeSortable;
typedef struct _GtkTreeSortableIface GtkTreeSortableIface;
# 83 "/usr/include/gtk-3.0/gtk/gtktreesortable.h"
typedef gint (* GtkTreeIterCompareFunc) (GtkTreeModel *model,
      GtkTreeIter *a,
      GtkTreeIter *b,
      gpointer user_data);
# 104 "/usr/include/gtk-3.0/gtk/gtktreesortable.h"
struct _GtkTreeSortableIface
{

  GTypeInterface g_iface;




  void (* sort_column_changed) (GtkTreeSortable *sortable);


  gboolean (* get_sort_column_id) (GtkTreeSortable *sortable,
          gint *sort_column_id,
          GtkSortType *order);
  void (* set_sort_column_id) (GtkTreeSortable *sortable,
          gint sort_column_id,
          GtkSortType order);
  void (* set_sort_func) (GtkTreeSortable *sortable,
          gint sort_column_id,
          GtkTreeIterCompareFunc sort_func,
          gpointer user_data,
          GDestroyNotify destroy);
  void (* set_default_sort_func) (GtkTreeSortable *sortable,
          GtkTreeIterCompareFunc sort_func,
          gpointer user_data,
          GDestroyNotify destroy);
  gboolean (* has_default_sort_func) (GtkTreeSortable *sortable);
};


extern
GType gtk_tree_sortable_get_type (void) __attribute__ ((__const__));

extern
void gtk_tree_sortable_sort_column_changed (GtkTreeSortable *sortable);
extern
gboolean gtk_tree_sortable_get_sort_column_id (GtkTreeSortable *sortable,
        gint *sort_column_id,
        GtkSortType *order);
extern
void gtk_tree_sortable_set_sort_column_id (GtkTreeSortable *sortable,
        gint sort_column_id,
        GtkSortType order);
extern
void gtk_tree_sortable_set_sort_func (GtkTreeSortable *sortable,
        gint sort_column_id,
        GtkTreeIterCompareFunc sort_func,
        gpointer user_data,
        GDestroyNotify destroy);
extern
void gtk_tree_sortable_set_default_sort_func (GtkTreeSortable *sortable,
        GtkTreeIterCompareFunc sort_func,
        gpointer user_data,
        GDestroyNotify destroy);
extern
gboolean gtk_tree_sortable_has_default_sort_func (GtkTreeSortable *sortable);
# 28 "/usr/include/gtk-3.0/gtk/gtktreeviewcolumn.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcellarea.h" 1
# 42 "/usr/include/gtk-3.0/gtk/gtkcellarea.h"
typedef struct _GtkCellArea GtkCellArea;
typedef struct _GtkCellAreaClass GtkCellAreaClass;
typedef struct _GtkCellAreaPrivate GtkCellAreaPrivate;
typedef struct _GtkCellAreaContext GtkCellAreaContext;
# 70 "/usr/include/gtk-3.0/gtk/gtkcellarea.h"
typedef gboolean (*GtkCellCallback) (GtkCellRenderer *renderer,
                                        gpointer data);
# 88 "/usr/include/gtk-3.0/gtk/gtkcellarea.h"
typedef gboolean (*GtkCellAllocCallback) (GtkCellRenderer *renderer,
                                             const GdkRectangle *cell_area,
                                             const GdkRectangle *cell_background,
                                             gpointer data);


struct _GtkCellArea
{

  GInitiallyUnowned parent_instance;

  GtkCellAreaPrivate *priv;
};
# 173 "/usr/include/gtk-3.0/gtk/gtkcellarea.h"
struct _GtkCellAreaClass
{

  GInitiallyUnownedClass parent_class;




  void (* add) (GtkCellArea *area,
                                                          GtkCellRenderer *renderer);
  void (* remove) (GtkCellArea *area,
                                                          GtkCellRenderer *renderer);
  void (* foreach) (GtkCellArea *area,
                                                          GtkCellCallback callback,
                                                          gpointer callback_data);
  void (* foreach_alloc) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          const GdkRectangle *cell_area,
                                                          const GdkRectangle *background_area,
                                                          GtkCellAllocCallback callback,
                                                          gpointer callback_data);
  gint (* event) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          GdkEvent *event,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags);
  void (* render) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          cairo_t *cr,
                                                          const GdkRectangle *background_area,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags,
                                                          gboolean paint_focus);
  void (* apply_attributes) (GtkCellArea *area,
                                                          GtkTreeModel *tree_model,
                                                          GtkTreeIter *iter,
                                                          gboolean is_expander,
                                                          gboolean is_expanded);


  GtkCellAreaContext *(* create_context) (GtkCellArea *area);
  GtkCellAreaContext *(* copy_context) (GtkCellArea *area,
                                                          GtkCellAreaContext *context);
  GtkSizeRequestMode (* get_request_mode) (GtkCellArea *area);
  void (* get_preferred_width) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          gint *minimum_width,
                                                          gint *natural_width);
  void (* get_preferred_height_for_width) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          gint width,
                                                          gint *minimum_height,
                                                          gint *natural_height);
  void (* get_preferred_height) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          gint *minimum_height,
                                                          gint *natural_height);
  void (* get_preferred_width_for_height) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          gint height,
                                                          gint *minimum_width,
                                                          gint *natural_width);


  void (* set_cell_property) (GtkCellArea *area,
                                                          GtkCellRenderer *renderer,
                                                          guint property_id,
                                                          const GValue *value,
                                                          GParamSpec *pspec);
  void (* get_cell_property) (GtkCellArea *area,
                                                          GtkCellRenderer *renderer,
                                                          guint property_id,
                                                          GValue *value,
                                                          GParamSpec *pspec);


  gboolean (* focus) (GtkCellArea *area,
                                                          GtkDirectionType direction);
  gboolean (* is_activatable) (GtkCellArea *area);
  gboolean (* activate) (GtkCellArea *area,
                                                          GtkCellAreaContext *context,
                                                          GtkWidget *widget,
                                                          const GdkRectangle *cell_area,
                                                          GtkCellRendererState flags,
                                                          gboolean edit_only);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_cell_area_get_type (void) __attribute__ ((__const__));


extern
void gtk_cell_area_add (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
void gtk_cell_area_remove (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
gboolean gtk_cell_area_has_renderer (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
void gtk_cell_area_foreach (GtkCellArea *area,
                                                                    GtkCellCallback callback,
                                                                    gpointer callback_data);
extern
void gtk_cell_area_foreach_alloc (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    const GdkRectangle *cell_area,
                                                                    const GdkRectangle *background_area,
                                                                    GtkCellAllocCallback callback,
                                                                    gpointer callback_data);
extern
gint gtk_cell_area_event (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    GdkEvent *event,
                                                                    const GdkRectangle *cell_area,
                                                                    GtkCellRendererState flags);
extern
void gtk_cell_area_render (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    cairo_t *cr,
                                                                    const GdkRectangle *background_area,
                                                                    const GdkRectangle *cell_area,
                                                                    GtkCellRendererState flags,
                                                                    gboolean paint_focus);

extern
void gtk_cell_area_get_cell_allocation (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    GtkCellRenderer *renderer,
                                                                    const GdkRectangle *cell_area,
                                                                    GdkRectangle *allocation);
extern
GtkCellRenderer *gtk_cell_area_get_cell_at_position (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    const GdkRectangle *cell_area,
                                                                    gint x,
                                                                    gint y,
                                                                    GdkRectangle *alloc_area);


extern
GtkCellAreaContext *gtk_cell_area_create_context (GtkCellArea *area);
extern
GtkCellAreaContext *gtk_cell_area_copy_context (GtkCellArea *area,
                                                                    GtkCellAreaContext *context);
extern
GtkSizeRequestMode gtk_cell_area_get_request_mode (GtkCellArea *area);
extern
void gtk_cell_area_get_preferred_width (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    gint *minimum_width,
                                                                    gint *natural_width);
extern
void gtk_cell_area_get_preferred_height_for_width (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    gint width,
                                                                    gint *minimum_height,
                                                                    gint *natural_height);
extern
void gtk_cell_area_get_preferred_height (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    gint *minimum_height,
                                                                    gint *natural_height);
extern
void gtk_cell_area_get_preferred_width_for_height (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    gint height,
                                                                    gint *minimum_width,
                                                                    gint *natural_width);
extern
const gchar * gtk_cell_area_get_current_path_string (GtkCellArea *area);



extern
void gtk_cell_area_apply_attributes (GtkCellArea *area,
                                                                    GtkTreeModel *tree_model,
                                                                    GtkTreeIter *iter,
                                                                    gboolean is_expander,
                                                                    gboolean is_expanded);
extern
void gtk_cell_area_attribute_connect (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *attribute,
                                                                    gint column);
extern
void gtk_cell_area_attribute_disconnect (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *attribute);
extern
gint gtk_cell_area_attribute_get_column (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *attribute);



extern
void gtk_cell_area_class_install_cell_property (GtkCellAreaClass *aclass,
                                                                    guint property_id,
                                                                    GParamSpec *pspec);
extern
GParamSpec* gtk_cell_area_class_find_cell_property (GtkCellAreaClass *aclass,
                                                                    const gchar *property_name);
extern
GParamSpec** gtk_cell_area_class_list_cell_properties (GtkCellAreaClass *aclass,
                                                                    guint *n_properties);
extern
void gtk_cell_area_add_with_properties (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_prop_name,
                                                                    ...) __attribute__((__sentinel__));
extern
void gtk_cell_area_cell_set (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_prop_name,
                                                                    ...) __attribute__((__sentinel__));
extern
void gtk_cell_area_cell_get (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_prop_name,
                                                                    ...) __attribute__((__sentinel__));
extern
void gtk_cell_area_cell_set_valist (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_property_name,
                                                                    va_list var_args);
extern
void gtk_cell_area_cell_get_valist (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *first_property_name,
                                                                    va_list var_args);
extern
void gtk_cell_area_cell_set_property (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *property_name,
                                                                    const GValue *value);
extern
void gtk_cell_area_cell_get_property (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    const gchar *property_name,
                                                                    GValue *value);


extern
gboolean gtk_cell_area_is_activatable (GtkCellArea *area);
extern
gboolean gtk_cell_area_activate (GtkCellArea *area,
                                                                    GtkCellAreaContext *context,
                                                                    GtkWidget *widget,
                                                                    const GdkRectangle *cell_area,
                                                                    GtkCellRendererState flags,
                                                                    gboolean edit_only);
extern
gboolean gtk_cell_area_focus (GtkCellArea *area,
                                                                    GtkDirectionType direction);
extern
void gtk_cell_area_set_focus_cell (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
GtkCellRenderer *gtk_cell_area_get_focus_cell (GtkCellArea *area);



extern
void gtk_cell_area_add_focus_sibling (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    GtkCellRenderer *sibling);
extern
void gtk_cell_area_remove_focus_sibling (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    GtkCellRenderer *sibling);
extern
gboolean gtk_cell_area_is_focus_sibling (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    GtkCellRenderer *sibling);
extern
const GList * gtk_cell_area_get_focus_siblings (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);
extern
GtkCellRenderer *gtk_cell_area_get_focus_from_sibling (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer);


extern
GtkCellRenderer *gtk_cell_area_get_edited_cell (GtkCellArea *area);
extern
GtkCellEditable *gtk_cell_area_get_edit_widget (GtkCellArea *area);
extern
gboolean gtk_cell_area_activate_cell (GtkCellArea *area,
                                                                    GtkWidget *widget,
                                                                    GtkCellRenderer *renderer,
                                                                    GdkEvent *event,
                                                                    const GdkRectangle *cell_area,
                                                                    GtkCellRendererState flags);
extern
void gtk_cell_area_stop_editing (GtkCellArea *area,
                                                                    gboolean canceled);




extern
void gtk_cell_area_inner_cell_area (GtkCellArea *area,
                                                                    GtkWidget *widget,
                                                                    const GdkRectangle *cell_area,
                                                                    GdkRectangle *inner_area);


extern
void gtk_cell_area_request_renderer (GtkCellArea *area,
                                                                    GtkCellRenderer *renderer,
                                                                    GtkOrientation orientation,
                                                                    GtkWidget *widget,
                                                                    gint for_size,
                                                                    gint *minimum_size,
                                                                    gint *natural_size);







void _gtk_cell_area_set_cell_data_func_with_proxy (GtkCellArea *area,
            GtkCellRenderer *cell,
            GFunc func,
            gpointer func_data,
            GDestroyNotify destroy,
            gpointer proxy);
# 29 "/usr/include/gtk-3.0/gtk/gtktreeviewcolumn.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtktreeviewcolumn.h"
typedef struct _GtkTreeViewColumn GtkTreeViewColumn;
typedef struct _GtkTreeViewColumnClass GtkTreeViewColumnClass;
typedef struct _GtkTreeViewColumnPrivate GtkTreeViewColumnPrivate;
# 55 "/usr/include/gtk-3.0/gtk/gtktreeviewcolumn.h"
typedef enum
{
  GTK_TREE_VIEW_COLUMN_GROW_ONLY,
  GTK_TREE_VIEW_COLUMN_AUTOSIZE,
  GTK_TREE_VIEW_COLUMN_FIXED
} GtkTreeViewColumnSizing;
# 77 "/usr/include/gtk-3.0/gtk/gtktreeviewcolumn.h"
typedef void (* GtkTreeCellDataFunc) (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          GtkTreeModel *tree_model,
          GtkTreeIter *iter,
          gpointer data);


struct _GtkTreeViewColumn
{
  GInitiallyUnowned parent_instance;

  GtkTreeViewColumnPrivate *priv;
};

struct _GtkTreeViewColumnClass
{
  GInitiallyUnownedClass parent_class;

  void (*clicked) (GtkTreeViewColumn *tree_column);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_tree_view_column_get_type (void) __attribute__ ((__const__));
extern
GtkTreeViewColumn *gtk_tree_view_column_new (void);
extern
GtkTreeViewColumn *gtk_tree_view_column_new_with_area (GtkCellArea *area);
extern
GtkTreeViewColumn *gtk_tree_view_column_new_with_attributes (const gchar *title,
          GtkCellRenderer *cell,
          ...) __attribute__((__sentinel__));
extern
void gtk_tree_view_column_pack_start (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          gboolean expand);
extern
void gtk_tree_view_column_pack_end (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell,
          gboolean expand);
extern
void gtk_tree_view_column_clear (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_add_attribute (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          const gchar *attribute,
          gint column);
extern
void gtk_tree_view_column_set_attributes (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          ...) __attribute__((__sentinel__));
extern
void gtk_tree_view_column_set_cell_data_func (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer,
          GtkTreeCellDataFunc func,
          gpointer func_data,
          GDestroyNotify destroy);
extern
void gtk_tree_view_column_clear_attributes (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell_renderer);
extern
void gtk_tree_view_column_set_spacing (GtkTreeViewColumn *tree_column,
          gint spacing);
extern
gint gtk_tree_view_column_get_spacing (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_visible (GtkTreeViewColumn *tree_column,
          gboolean visible);
extern
gboolean gtk_tree_view_column_get_visible (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_resizable (GtkTreeViewColumn *tree_column,
          gboolean resizable);
extern
gboolean gtk_tree_view_column_get_resizable (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_sizing (GtkTreeViewColumn *tree_column,
          GtkTreeViewColumnSizing type);
extern
GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing (GtkTreeViewColumn *tree_column);
extern
gint gtk_tree_view_column_get_x_offset (GtkTreeViewColumn *tree_column);
extern
gint gtk_tree_view_column_get_width (GtkTreeViewColumn *tree_column);
extern
gint gtk_tree_view_column_get_fixed_width (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_fixed_width (GtkTreeViewColumn *tree_column,
          gint fixed_width);
extern
void gtk_tree_view_column_set_min_width (GtkTreeViewColumn *tree_column,
          gint min_width);
extern
gint gtk_tree_view_column_get_min_width (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_max_width (GtkTreeViewColumn *tree_column,
          gint max_width);
extern
gint gtk_tree_view_column_get_max_width (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_clicked (GtkTreeViewColumn *tree_column);





extern
void gtk_tree_view_column_set_title (GtkTreeViewColumn *tree_column,
          const gchar *title);
extern
const gchar * gtk_tree_view_column_get_title (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_expand (GtkTreeViewColumn *tree_column,
          gboolean expand);
extern
gboolean gtk_tree_view_column_get_expand (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_clickable (GtkTreeViewColumn *tree_column,
          gboolean clickable);
extern
gboolean gtk_tree_view_column_get_clickable (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_widget (GtkTreeViewColumn *tree_column,
          GtkWidget *widget);
extern
GtkWidget *gtk_tree_view_column_get_widget (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_alignment (GtkTreeViewColumn *tree_column,
          gfloat xalign);
extern
gfloat gtk_tree_view_column_get_alignment (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_reorderable (GtkTreeViewColumn *tree_column,
          gboolean reorderable);
extern
gboolean gtk_tree_view_column_get_reorderable (GtkTreeViewColumn *tree_column);






extern
void gtk_tree_view_column_set_sort_column_id (GtkTreeViewColumn *tree_column,
          gint sort_column_id);
extern
gint gtk_tree_view_column_get_sort_column_id (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_sort_indicator (GtkTreeViewColumn *tree_column,
          gboolean setting);
extern
gboolean gtk_tree_view_column_get_sort_indicator (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_set_sort_order (GtkTreeViewColumn *tree_column,
          GtkSortType order);
extern
GtkSortType gtk_tree_view_column_get_sort_order (GtkTreeViewColumn *tree_column);




extern
void gtk_tree_view_column_cell_set_cell_data (GtkTreeViewColumn *tree_column,
          GtkTreeModel *tree_model,
          GtkTreeIter *iter,
          gboolean is_expander,
          gboolean is_expanded);
extern
void gtk_tree_view_column_cell_get_size (GtkTreeViewColumn *tree_column,
          const GdkRectangle *cell_area,
          gint *x_offset,
          gint *y_offset,
          gint *width,
          gint *height);
extern
gboolean gtk_tree_view_column_cell_is_visible (GtkTreeViewColumn *tree_column);
extern
void gtk_tree_view_column_focus_cell (GtkTreeViewColumn *tree_column,
          GtkCellRenderer *cell);
extern
gboolean gtk_tree_view_column_cell_get_position (GtkTreeViewColumn *tree_column,
                               GtkCellRenderer *cell_renderer,
                               gint *x_offset,
                               gint *width);
extern
void gtk_tree_view_column_queue_resize (GtkTreeViewColumn *tree_column);
extern
GtkWidget *gtk_tree_view_column_get_tree_view (GtkTreeViewColumn *tree_column);
extern
GtkWidget *gtk_tree_view_column_get_button (GtkTreeViewColumn *tree_column);
# 28 "/usr/include/gtk-3.0/gtk/gtktreeview.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkdnd.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtkdnd.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkselection.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkselection.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktextiter.h" 1
# 32 "/usr/include/gtk-3.0/gtk/gtktextiter.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktextattributes.h" 1
# 64 "/usr/include/gtk-3.0/gtk/gtktextattributes.h"
typedef struct _GtkTextAttributes GtkTextAttributes;



typedef struct _GtkTextAppearance GtkTextAppearance;
# 89 "/usr/include/gtk-3.0/gtk/gtktextattributes.h"
struct _GtkTextAppearance
{

  GdkColor bg_color;
  GdkColor fg_color;


  gint rise;

  guint underline : 4;
  guint strikethrough : 1;






  guint draw_bg : 1;





  guint inside_selection : 1;
  guint is_text : 1;
# 128 "/usr/include/gtk-3.0/gtk/gtktextattributes.h"
  GdkRGBA *rgba[2];






};
# 166 "/usr/include/gtk-3.0/gtk/gtktextattributes.h"
struct _GtkTextAttributes
{

  guint refcount;


  GtkTextAppearance appearance;

  GtkJustification justification;
  GtkTextDirection direction;

  PangoFontDescription *font;

  gdouble font_scale;

  gint left_margin;
  gint right_margin;
  gint indent;

  gint pixels_above_lines;
  gint pixels_below_lines;
  gint pixels_inside_wrap;

  PangoTabArray *tabs;

  GtkWrapMode wrap_mode;

  PangoLanguage *language;


  GdkColor *pg_bg_color;


  guint invisible : 1;
  guint bg_full_height : 1;
  guint editable : 1;
  guint no_fallback: 1;


  GdkRGBA *pg_bg_rgba;


  gint letter_spacing;
# 220 "/usr/include/gtk-3.0/gtk/gtktextattributes.h"
  gchar *font_features;






};

extern
GtkTextAttributes* gtk_text_attributes_new (void);
extern
GtkTextAttributes* gtk_text_attributes_copy (GtkTextAttributes *src);
extern
void gtk_text_attributes_copy_values (GtkTextAttributes *src,
                                                    GtkTextAttributes *dest);
extern
void gtk_text_attributes_unref (GtkTextAttributes *values);
extern
GtkTextAttributes *gtk_text_attributes_ref (GtkTextAttributes *values);

extern
GType gtk_text_attributes_get_type (void) __attribute__ ((__const__));
# 33 "/usr/include/gtk-3.0/gtk/gtktextiter.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktextchild.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtktextchild.h"
typedef struct _GtkTextChildAnchor GtkTextChildAnchor;
typedef struct _GtkTextChildAnchorClass GtkTextChildAnchorClass;
# 55 "/usr/include/gtk-3.0/gtk/gtktextchild.h"
struct _GtkTextChildAnchor
{
  GObject parent_instance;


  gpointer segment;
};

struct _GtkTextChildAnchorClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_text_child_anchor_get_type (void) __attribute__ ((__const__));

extern
GtkTextChildAnchor* gtk_text_child_anchor_new (void);

extern
GList* gtk_text_child_anchor_get_widgets (GtkTextChildAnchor *anchor);
extern
gboolean gtk_text_child_anchor_get_deleted (GtkTextChildAnchor *anchor);
# 34 "/usr/include/gtk-3.0/gtk/gtktextiter.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktexttag.h" 1
# 64 "/usr/include/gtk-3.0/gtk/gtktexttag.h"
typedef struct _GtkTextIter GtkTextIter;
typedef struct _GtkTextTagTable GtkTextTagTable;
# 74 "/usr/include/gtk-3.0/gtk/gtktexttag.h"
typedef struct _GtkTextTag GtkTextTag;
typedef struct _GtkTextTagPrivate GtkTextTagPrivate;
typedef struct _GtkTextTagClass GtkTextTagClass;

struct _GtkTextTag
{
  GObject parent_instance;

  GtkTextTagPrivate *priv;
};

struct _GtkTextTagClass
{
  GObjectClass parent_class;

  gboolean (* event) (GtkTextTag *tag,
                      GObject *event_object,
                      GdkEvent *event,
                      const GtkTextIter *iter);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_text_tag_get_type (void) __attribute__ ((__const__));
extern
GtkTextTag *gtk_text_tag_new (const gchar *name);
extern
gint gtk_text_tag_get_priority (GtkTextTag *tag);
extern
void gtk_text_tag_set_priority (GtkTextTag *tag,
                                        gint priority);
extern
gboolean gtk_text_tag_event (GtkTextTag *tag,
                                        GObject *event_object,
                                        GdkEvent *event,
                                        const GtkTextIter *iter);
extern
void gtk_text_tag_changed (GtkTextTag *tag,
                                        gboolean size_changed);
# 35 "/usr/include/gtk-3.0/gtk/gtktextiter.h" 2
# 53 "/usr/include/gtk-3.0/gtk/gtktextiter.h"
typedef enum {
  GTK_TEXT_SEARCH_VISIBLE_ONLY = 1 << 0,
  GTK_TEXT_SEARCH_TEXT_ONLY = 1 << 1,
  GTK_TEXT_SEARCH_CASE_INSENSITIVE = 1 << 2

} GtkTextSearchFlags;







typedef struct _GtkTextBuffer GtkTextBuffer;



struct _GtkTextIter {





  gpointer dummy1;
  gpointer dummy2;
  gint dummy3;
  gint dummy4;
  gint dummy5;
  gint dummy6;
  gint dummy7;
  gint dummy8;
  gpointer dummy9;
  gpointer dummy10;
  gint dummy11;
  gint dummy12;

  gint dummy13;
  gpointer dummy14;
};




extern
GtkTextBuffer *gtk_text_iter_get_buffer (const GtkTextIter *iter);





extern
GtkTextIter *gtk_text_iter_copy (const GtkTextIter *iter);
extern
void gtk_text_iter_free (GtkTextIter *iter);
extern
void gtk_text_iter_assign (GtkTextIter *iter,
                                     const GtkTextIter *other);

extern
GType gtk_text_iter_get_type (void) __attribute__ ((__const__));





extern
gint gtk_text_iter_get_offset (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_line (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_line_offset (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_line_index (const GtkTextIter *iter);

extern
gint gtk_text_iter_get_visible_line_offset (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_visible_line_index (const GtkTextIter *iter);





extern
gunichar gtk_text_iter_get_char (const GtkTextIter *iter);




extern
gchar *gtk_text_iter_get_slice (const GtkTextIter *start,
                                          const GtkTextIter *end);


extern
gchar *gtk_text_iter_get_text (const GtkTextIter *start,
                                          const GtkTextIter *end);

extern
gchar *gtk_text_iter_get_visible_slice (const GtkTextIter *start,
                                          const GtkTextIter *end);
extern
gchar *gtk_text_iter_get_visible_text (const GtkTextIter *start,
                                          const GtkTextIter *end);

extern
GdkPixbuf* gtk_text_iter_get_pixbuf (const GtkTextIter *iter);
extern
GSList * gtk_text_iter_get_marks (const GtkTextIter *iter);

extern
GtkTextChildAnchor* gtk_text_iter_get_child_anchor (const GtkTextIter *iter);




extern
GSList *gtk_text_iter_get_toggled_tags (const GtkTextIter *iter,
                                          gboolean toggled_on);

extern
gboolean gtk_text_iter_starts_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

__attribute__((__deprecated__("Use '" "gtk_text_iter_starts_tag" "' instead"))) extern
gboolean gtk_text_iter_begins_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

extern
gboolean gtk_text_iter_ends_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

extern
gboolean gtk_text_iter_toggles_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

extern
gboolean gtk_text_iter_has_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);
extern
GSList *gtk_text_iter_get_tags (const GtkTextIter *iter);

extern
gboolean gtk_text_iter_editable (const GtkTextIter *iter,
                                          gboolean default_setting);
extern
gboolean gtk_text_iter_can_insert (const GtkTextIter *iter,
                                          gboolean default_editability);

extern
gboolean gtk_text_iter_starts_word (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_ends_word (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_inside_word (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_starts_sentence (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_ends_sentence (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_inside_sentence (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_starts_line (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_ends_line (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_is_cursor_position (const GtkTextIter *iter);

extern
gint gtk_text_iter_get_chars_in_line (const GtkTextIter *iter);
extern
gint gtk_text_iter_get_bytes_in_line (const GtkTextIter *iter);

extern
gboolean gtk_text_iter_get_attributes (const GtkTextIter *iter,
          GtkTextAttributes *values);
extern
PangoLanguage* gtk_text_iter_get_language (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_is_end (const GtkTextIter *iter);
extern
gboolean gtk_text_iter_is_start (const GtkTextIter *iter);





extern
gboolean gtk_text_iter_forward_char (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_char (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_chars (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_backward_chars (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_forward_line (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_line (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_lines (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_backward_lines (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_forward_word_end (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_word_start (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_word_ends (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_backward_word_starts (GtkTextIter *iter,
                                             gint count);

extern
gboolean gtk_text_iter_forward_visible_line (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_visible_line (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_visible_lines (GtkTextIter *iter,
                                               gint count);
extern
gboolean gtk_text_iter_backward_visible_lines (GtkTextIter *iter,
                                               gint count);

extern
gboolean gtk_text_iter_forward_visible_word_end (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_visible_word_start (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_visible_word_ends (GtkTextIter *iter,
                                             gint count);
extern
gboolean gtk_text_iter_backward_visible_word_starts (GtkTextIter *iter,
                                             gint count);

extern
gboolean gtk_text_iter_forward_sentence_end (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_sentence_start (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_sentence_ends (GtkTextIter *iter,
                                                 gint count);
extern
gboolean gtk_text_iter_backward_sentence_starts (GtkTextIter *iter,
                                                 gint count);





extern
gboolean gtk_text_iter_forward_cursor_position (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_cursor_position (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_cursor_positions (GtkTextIter *iter,
                                                  gint count);
extern
gboolean gtk_text_iter_backward_cursor_positions (GtkTextIter *iter,
                                                  gint count);

extern
gboolean gtk_text_iter_forward_visible_cursor_position (GtkTextIter *iter);
extern
gboolean gtk_text_iter_backward_visible_cursor_position (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_visible_cursor_positions (GtkTextIter *iter,
                                                          gint count);
extern
gboolean gtk_text_iter_backward_visible_cursor_positions (GtkTextIter *iter,
                                                          gint count);

extern
void gtk_text_iter_set_offset (GtkTextIter *iter,
                                           gint char_offset);
extern
void gtk_text_iter_set_line (GtkTextIter *iter,
                                           gint line_number);
extern
void gtk_text_iter_set_line_offset (GtkTextIter *iter,
                                           gint char_on_line);
extern
void gtk_text_iter_set_line_index (GtkTextIter *iter,
                                           gint byte_on_line);
extern
void gtk_text_iter_forward_to_end (GtkTextIter *iter);
extern
gboolean gtk_text_iter_forward_to_line_end (GtkTextIter *iter);

extern
void gtk_text_iter_set_visible_line_offset (GtkTextIter *iter,
                                                gint char_on_line);
extern
void gtk_text_iter_set_visible_line_index (GtkTextIter *iter,
                                                gint byte_on_line);





extern
gboolean gtk_text_iter_forward_to_tag_toggle (GtkTextIter *iter,
                                              GtkTextTag *tag);

extern
gboolean gtk_text_iter_backward_to_tag_toggle (GtkTextIter *iter,
                                               GtkTextTag *tag);

typedef gboolean (* GtkTextCharPredicate) (gunichar ch, gpointer user_data);

extern
gboolean gtk_text_iter_forward_find_char (GtkTextIter *iter,
                                           GtkTextCharPredicate pred,
                                           gpointer user_data,
                                           const GtkTextIter *limit);
extern
gboolean gtk_text_iter_backward_find_char (GtkTextIter *iter,
                                           GtkTextCharPredicate pred,
                                           gpointer user_data,
                                           const GtkTextIter *limit);

extern
gboolean gtk_text_iter_forward_search (const GtkTextIter *iter,
                                        const gchar *str,
                                        GtkTextSearchFlags flags,
                                        GtkTextIter *match_start,
                                        GtkTextIter *match_end,
                                        const GtkTextIter *limit);

extern
gboolean gtk_text_iter_backward_search (const GtkTextIter *iter,
                                        const gchar *str,
                                        GtkTextSearchFlags flags,
                                        GtkTextIter *match_start,
                                        GtkTextIter *match_end,
                                        const GtkTextIter *limit);




extern
gboolean gtk_text_iter_equal (const GtkTextIter *lhs,
                                        const GtkTextIter *rhs);
extern
gint gtk_text_iter_compare (const GtkTextIter *lhs,
                                        const GtkTextIter *rhs);
extern
gboolean gtk_text_iter_in_range (const GtkTextIter *iter,
                                        const GtkTextIter *start,
                                        const GtkTextIter *end);


extern
void gtk_text_iter_order (GtkTextIter *first,
                                        GtkTextIter *second);
# 34 "/usr/include/gtk-3.0/gtk/gtkselection.h" 2



typedef struct _GtkTargetPair GtkTargetPair;
# 52 "/usr/include/gtk-3.0/gtk/gtkselection.h"
struct _GtkTargetPair
{
  GdkAtom target;
  guint flags;
  guint info;
};
# 66 "/usr/include/gtk-3.0/gtk/gtkselection.h"
typedef struct _GtkTargetList GtkTargetList;
typedef struct _GtkTargetEntry GtkTargetEntry;
# 86 "/usr/include/gtk-3.0/gtk/gtkselection.h"
typedef enum {
  GTK_TARGET_SAME_APP = 1 << 0,
  GTK_TARGET_SAME_WIDGET = 1 << 1,
  GTK_TARGET_OTHER_APP = 1 << 2,
  GTK_TARGET_OTHER_WIDGET = 1 << 3
} GtkTargetFlags;
# 106 "/usr/include/gtk-3.0/gtk/gtkselection.h"
struct _GtkTargetEntry
{
  gchar *target;
  guint flags;
  guint info;
};

extern
GType gtk_target_list_get_type (void) __attribute__ ((__const__));
extern
GtkTargetList *gtk_target_list_new (const GtkTargetEntry *targets,
                                          guint ntargets);
extern
GtkTargetList *gtk_target_list_ref (GtkTargetList *list);
extern
void gtk_target_list_unref (GtkTargetList *list);
extern
void gtk_target_list_add (GtkTargetList *list,
                                          GdkAtom target,
                                          guint flags,
                                          guint info);
extern
void gtk_target_list_add_text_targets (GtkTargetList *list,
                                                      guint info);
extern
void gtk_target_list_add_rich_text_targets (GtkTargetList *list,
                                                      guint info,
                                                      gboolean deserializable,
                                                      GtkTextBuffer *buffer);
extern
void gtk_target_list_add_image_targets (GtkTargetList *list,
                                                      guint info,
                                                      gboolean writable);
extern
void gtk_target_list_add_uri_targets (GtkTargetList *list,
                                                      guint info);
extern
void gtk_target_list_add_table (GtkTargetList *list,
                                          const GtkTargetEntry *targets,
                                          guint ntargets);
extern
void gtk_target_list_remove (GtkTargetList *list,
                                          GdkAtom target);
extern
gboolean gtk_target_list_find (GtkTargetList *list,
                                          GdkAtom target,
                                          guint *info);

extern
GtkTargetEntry * gtk_target_table_new_from_list (GtkTargetList *list,
                                                 gint *n_targets);
extern
void gtk_target_table_free (GtkTargetEntry *targets,
                                                 gint n_targets);

extern
gboolean gtk_selection_owner_set (GtkWidget *widget,
                                              GdkAtom selection,
                                              guint32 time_);
extern
gboolean gtk_selection_owner_set_for_display (GdkDisplay *display,
                                              GtkWidget *widget,
                                              GdkAtom selection,
                                              guint32 time_);

extern
void gtk_selection_add_target (GtkWidget *widget,
                                      GdkAtom selection,
                                      GdkAtom target,
                                      guint info);
extern
void gtk_selection_add_targets (GtkWidget *widget,
                                      GdkAtom selection,
                                      const GtkTargetEntry *targets,
                                      guint ntargets);
extern
void gtk_selection_clear_targets (GtkWidget *widget,
                                      GdkAtom selection);
extern
gboolean gtk_selection_convert (GtkWidget *widget,
                                      GdkAtom selection,
                                      GdkAtom target,
                                      guint32 time_);
extern
void gtk_selection_remove_all (GtkWidget *widget);

extern
GdkAtom gtk_selection_data_get_selection (const GtkSelectionData *selection_data);
extern
GdkAtom gtk_selection_data_get_target (const GtkSelectionData *selection_data);
extern
GdkAtom gtk_selection_data_get_data_type (const GtkSelectionData *selection_data);
extern
gint gtk_selection_data_get_format (const GtkSelectionData *selection_data);
extern
const guchar *gtk_selection_data_get_data (const GtkSelectionData *selection_data);
extern
gint gtk_selection_data_get_length (const GtkSelectionData *selection_data);
extern
const guchar *gtk_selection_data_get_data_with_length
                                               (const GtkSelectionData *selection_data,
                                                gint *length);

extern
GdkDisplay *gtk_selection_data_get_display (const GtkSelectionData *selection_data);

extern
void gtk_selection_data_set (GtkSelectionData *selection_data,
                                      GdkAtom type,
                                      gint format,
                                      const guchar *data,
                                      gint length);
extern
gboolean gtk_selection_data_set_text (GtkSelectionData *selection_data,
                                      const gchar *str,
                                      gint len);
extern
guchar * gtk_selection_data_get_text (const GtkSelectionData *selection_data);
extern
gboolean gtk_selection_data_set_pixbuf (GtkSelectionData *selection_data,
                                          GdkPixbuf *pixbuf);
extern
GdkPixbuf *gtk_selection_data_get_pixbuf (const GtkSelectionData *selection_data);
extern
gboolean gtk_selection_data_set_uris (GtkSelectionData *selection_data,
                                      gchar **uris);
extern
gchar **gtk_selection_data_get_uris (const GtkSelectionData *selection_data);

extern
gboolean gtk_selection_data_get_targets (const GtkSelectionData *selection_data,
                                                  GdkAtom **targets,
                                                  gint *n_atoms);
extern
gboolean gtk_selection_data_targets_include_text (const GtkSelectionData *selection_data);
extern
gboolean gtk_selection_data_targets_include_rich_text (const GtkSelectionData *selection_data,
                                                       GtkTextBuffer *buffer);
extern
gboolean gtk_selection_data_targets_include_image (const GtkSelectionData *selection_data,
                                                   gboolean writable);
extern
gboolean gtk_selection_data_targets_include_uri (const GtkSelectionData *selection_data);
extern
gboolean gtk_targets_include_text (GdkAtom *targets,
                                                  gint n_targets);
extern
gboolean gtk_targets_include_rich_text (GdkAtom *targets,
                                                  gint n_targets,
                                                  GtkTextBuffer *buffer);
extern
gboolean gtk_targets_include_image (GdkAtom *targets,
                                                  gint n_targets,
                                                  gboolean writable);
extern
gboolean gtk_targets_include_uri (GdkAtom *targets,
                                                  gint n_targets);


extern
GType gtk_selection_data_get_type (void) __attribute__ ((__const__));
extern
GtkSelectionData *gtk_selection_data_copy (const GtkSelectionData *data);
extern
void gtk_selection_data_free (GtkSelectionData *data);

extern
GType gtk_target_entry_get_type (void) __attribute__ ((__const__));
extern
GtkTargetEntry *gtk_target_entry_new (const gchar *target,
                                               guint flags,
                                               guint info);
extern
GtkTargetEntry *gtk_target_entry_copy (GtkTargetEntry *data);
extern
void gtk_target_entry_free (GtkTargetEntry *data);
# 36 "/usr/include/gtk-3.0/gtk/gtkdnd.h" 2






extern
void gtk_drag_get_data (GtkWidget *widget,
   GdkDragContext *context,
   GdkAtom target,
   guint32 time_);
extern
void gtk_drag_finish (GdkDragContext *context,
   gboolean success,
   gboolean del,
   guint32 time_);

extern
GtkWidget *gtk_drag_get_source_widget (GdkDragContext *context);

extern
void gtk_drag_highlight (GtkWidget *widget);
extern
void gtk_drag_unhighlight (GtkWidget *widget);



extern
GdkDragContext *gtk_drag_begin_with_coordinates (GtkWidget *widget,
                                                 GtkTargetList *targets,
                                                 GdkDragAction actions,
                                                 gint button,
                                                 GdkEvent *event,
                                                 gint x,
                                                 gint y);

__attribute__((__deprecated__("Use '" "gtk_drag_begin_with_coordinates" "' instead"))) extern
GdkDragContext *gtk_drag_begin (GtkWidget *widget,
    GtkTargetList *targets,
    GdkDragAction actions,
    gint button,
    GdkEvent *event);

extern
void gtk_drag_cancel (GdkDragContext *context);

extern
void gtk_drag_set_icon_widget (GdkDragContext *context,
          GtkWidget *widget,
          gint hot_x,
          gint hot_y);
extern
void gtk_drag_set_icon_pixbuf (GdkDragContext *context,
          GdkPixbuf *pixbuf,
          gint hot_x,
          gint hot_y);
__attribute__((__deprecated__("Use '" "gtk_drag_set_icon_name" "' instead"))) extern
void gtk_drag_set_icon_stock (GdkDragContext *context,
          const gchar *stock_id,
          gint hot_x,
          gint hot_y);
extern
void gtk_drag_set_icon_surface(GdkDragContext *context,
          cairo_surface_t *surface);
extern
void gtk_drag_set_icon_name (GdkDragContext *context,
          const gchar *icon_name,
          gint hot_x,
          gint hot_y);
extern
void gtk_drag_set_icon_gicon (GdkDragContext *context,
          GIcon *icon,
          gint hot_x,
          gint hot_y);

extern
void gtk_drag_set_icon_default (GdkDragContext *context);

extern
gboolean gtk_drag_check_threshold (GtkWidget *widget,
       gint start_x,
       gint start_y,
       gint current_x,
       gint current_y);
# 29 "/usr/include/gtk-3.0/gtk/gtktreeview.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkentry.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkentry.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkeditable.h" 1
# 43 "/usr/include/gtk-3.0/gtk/gtkeditable.h"
typedef struct _GtkEditable GtkEditable;
typedef struct _GtkEditableInterface GtkEditableInterface;

struct _GtkEditableInterface
{
  GTypeInterface base_iface;


  void (* insert_text) (GtkEditable *editable,
         const gchar *new_text,
         gint new_text_length,
         gint *position);
  void (* delete_text) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  void (* changed) (GtkEditable *editable);


  void (* do_insert_text) (GtkEditable *editable,
         const gchar *new_text,
         gint new_text_length,
         gint *position);
  void (* do_delete_text) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);

  gchar* (* get_chars) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  void (* set_selection_bounds) (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
  gboolean (* get_selection_bounds) (GtkEditable *editable,
         gint *start_pos,
         gint *end_pos);
  void (* set_position) (GtkEditable *editable,
         gint position);
  gint (* get_position) (GtkEditable *editable);
};

extern
GType gtk_editable_get_type (void) __attribute__ ((__const__));
extern
void gtk_editable_select_region (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
extern
gboolean gtk_editable_get_selection_bounds (GtkEditable *editable,
         gint *start_pos,
         gint *end_pos);
extern
void gtk_editable_insert_text (GtkEditable *editable,
         const gchar *new_text,
         gint new_text_length,
         gint *position);
extern
void gtk_editable_delete_text (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
extern
gchar* gtk_editable_get_chars (GtkEditable *editable,
         gint start_pos,
         gint end_pos);
extern
void gtk_editable_cut_clipboard (GtkEditable *editable);
extern
void gtk_editable_copy_clipboard (GtkEditable *editable);
extern
void gtk_editable_paste_clipboard (GtkEditable *editable);
extern
void gtk_editable_delete_selection (GtkEditable *editable);
extern
void gtk_editable_set_position (GtkEditable *editable,
         gint position);
extern
gint gtk_editable_get_position (GtkEditable *editable);
extern
void gtk_editable_set_editable (GtkEditable *editable,
         gboolean is_editable);
extern
gboolean gtk_editable_get_editable (GtkEditable *editable);
# 38 "/usr/include/gtk-3.0/gtk/gtkentry.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkimcontext.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkimcontext.h"
typedef struct _GtkIMContext GtkIMContext;
typedef struct _GtkIMContextClass GtkIMContextClass;

struct _GtkIMContext
{
  GObject parent_instance;
};

struct _GtkIMContextClass
{

  GObjectClass parent_class;



  void (*preedit_start) (GtkIMContext *context);
  void (*preedit_end) (GtkIMContext *context);
  void (*preedit_changed) (GtkIMContext *context);
  void (*commit) (GtkIMContext *context, const gchar *str);
  gboolean (*retrieve_surrounding) (GtkIMContext *context);
  gboolean (*delete_surrounding) (GtkIMContext *context,
        gint offset,
        gint n_chars);


  void (*set_client_window) (GtkIMContext *context,
       GdkWindow *window);
  void (*get_preedit_string) (GtkIMContext *context,
       gchar **str,
       PangoAttrList **attrs,
       gint *cursor_pos);
  gboolean (*filter_keypress) (GtkIMContext *context,
              GdkEventKey *event);
  void (*focus_in) (GtkIMContext *context);
  void (*focus_out) (GtkIMContext *context);
  void (*reset) (GtkIMContext *context);
  void (*set_cursor_location) (GtkIMContext *context,
       GdkRectangle *area);
  void (*set_use_preedit) (GtkIMContext *context,
       gboolean use_preedit);
  void (*set_surrounding) (GtkIMContext *context,
       const gchar *text,
       gint len,
       gint cursor_index);
  gboolean (*get_surrounding) (GtkIMContext *context,
       gchar **text,
       gint *cursor_index);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};

extern
GType gtk_im_context_get_type (void) __attribute__ ((__const__));

extern
void gtk_im_context_set_client_window (GtkIMContext *context,
          GdkWindow *window);
extern
void gtk_im_context_get_preedit_string (GtkIMContext *context,
          gchar **str,
          PangoAttrList **attrs,
          gint *cursor_pos);
extern
gboolean gtk_im_context_filter_keypress (GtkIMContext *context,
          GdkEventKey *event);
extern
void gtk_im_context_focus_in (GtkIMContext *context);
extern
void gtk_im_context_focus_out (GtkIMContext *context);
extern
void gtk_im_context_reset (GtkIMContext *context);
extern
void gtk_im_context_set_cursor_location (GtkIMContext *context,
          const GdkRectangle *area);
extern
void gtk_im_context_set_use_preedit (GtkIMContext *context,
          gboolean use_preedit);
extern
void gtk_im_context_set_surrounding (GtkIMContext *context,
          const gchar *text,
          gint len,
          gint cursor_index);
extern
gboolean gtk_im_context_get_surrounding (GtkIMContext *context,
          gchar **text,
          gint *cursor_index);
extern
gboolean gtk_im_context_delete_surrounding (GtkIMContext *context,
          gint offset,
          gint n_chars);
# 39 "/usr/include/gtk-3.0/gtk/gtkentry.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkentrybuffer.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkentrybuffer.h"
typedef struct _GtkEntryBuffer GtkEntryBuffer;
typedef struct _GtkEntryBufferClass GtkEntryBufferClass;
typedef struct _GtkEntryBufferPrivate GtkEntryBufferPrivate;

struct _GtkEntryBuffer
{
  GObject parent_instance;


  GtkEntryBufferPrivate *priv;
};

struct _GtkEntryBufferClass
{
  GObjectClass parent_class;



  void (*inserted_text) (GtkEntryBuffer *buffer,
                                          guint position,
                                          const gchar *chars,
                                          guint n_chars);

  void (*deleted_text) (GtkEntryBuffer *buffer,
                                          guint position,
                                          guint n_chars);



  const gchar* (*get_text) (GtkEntryBuffer *buffer,
                                          gsize *n_bytes);

  guint (*get_length) (GtkEntryBuffer *buffer);

  guint (*insert_text) (GtkEntryBuffer *buffer,
                                          guint position,
                                          const gchar *chars,
                                          guint n_chars);

  guint (*delete_text) (GtkEntryBuffer *buffer,
                                          guint position,
                                          guint n_chars);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_entry_buffer_get_type (void) __attribute__ ((__const__));

extern
GtkEntryBuffer* gtk_entry_buffer_new (const gchar *initial_chars,
                                                                   gint n_initial_chars);

extern
gsize gtk_entry_buffer_get_bytes (GtkEntryBuffer *buffer);

extern
guint gtk_entry_buffer_get_length (GtkEntryBuffer *buffer);

extern
const gchar* gtk_entry_buffer_get_text (GtkEntryBuffer *buffer);

extern
void gtk_entry_buffer_set_text (GtkEntryBuffer *buffer,
                                                                   const gchar *chars,
                                                                   gint n_chars);

extern
void gtk_entry_buffer_set_max_length (GtkEntryBuffer *buffer,
                                                                   gint max_length);

extern
gint gtk_entry_buffer_get_max_length (GtkEntryBuffer *buffer);

extern
guint gtk_entry_buffer_insert_text (GtkEntryBuffer *buffer,
                                                                   guint position,
                                                                   const gchar *chars,
                                                                   gint n_chars);

extern
guint gtk_entry_buffer_delete_text (GtkEntryBuffer *buffer,
                                                                   guint position,
                                                                   gint n_chars);

extern
void gtk_entry_buffer_emit_inserted_text (GtkEntryBuffer *buffer,
                                                                   guint position,
                                                                   const gchar *chars,
                                                                   guint n_chars);

extern
void gtk_entry_buffer_emit_deleted_text (GtkEntryBuffer *buffer,
                                                                   guint position,
                                                                   guint n_chars);
# 41 "/usr/include/gtk-3.0/gtk/gtkentry.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkentrycompletion.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkentrycompletion.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkliststore.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkliststore.h"
typedef struct _GtkListStore GtkListStore;
typedef struct _GtkListStorePrivate GtkListStorePrivate;
typedef struct _GtkListStoreClass GtkListStoreClass;

struct _GtkListStore
{
  GObject parent;


  GtkListStorePrivate *priv;
};

struct _GtkListStoreClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_list_store_get_type (void) __attribute__ ((__const__));
extern
GtkListStore *gtk_list_store_new (gint n_columns,
            ...);
extern
GtkListStore *gtk_list_store_newv (gint n_columns,
            GType *types);
extern
void gtk_list_store_set_column_types (GtkListStore *list_store,
            gint n_columns,
            GType *types);



extern
void gtk_list_store_set_value (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint column,
            GValue *value);
extern
void gtk_list_store_set (GtkListStore *list_store,
            GtkTreeIter *iter,
            ...);
extern
void gtk_list_store_set_valuesv (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint *columns,
            GValue *values,
            gint n_values);
extern
void gtk_list_store_set_valist (GtkListStore *list_store,
            GtkTreeIter *iter,
            va_list var_args);
extern
gboolean gtk_list_store_remove (GtkListStore *list_store,
            GtkTreeIter *iter);
extern
void gtk_list_store_insert (GtkListStore *list_store,
            GtkTreeIter *iter,
            gint position);
extern
void gtk_list_store_insert_before (GtkListStore *list_store,
            GtkTreeIter *iter,
            GtkTreeIter *sibling);
extern
void gtk_list_store_insert_after (GtkListStore *list_store,
            GtkTreeIter *iter,
            GtkTreeIter *sibling);
extern
void gtk_list_store_insert_with_values (GtkListStore *list_store,
        GtkTreeIter *iter,
        gint position,
        ...);
extern
void gtk_list_store_insert_with_valuesv (GtkListStore *list_store,
        GtkTreeIter *iter,
        gint position,
        gint *columns,
        GValue *values,
        gint n_values);
extern
void gtk_list_store_prepend (GtkListStore *list_store,
            GtkTreeIter *iter);
extern
void gtk_list_store_append (GtkListStore *list_store,
            GtkTreeIter *iter);
extern
void gtk_list_store_clear (GtkListStore *list_store);
extern
gboolean gtk_list_store_iter_is_valid (GtkListStore *list_store,
                                               GtkTreeIter *iter);
extern
void gtk_list_store_reorder (GtkListStore *store,
                                               gint *new_order);
extern
void gtk_list_store_swap (GtkListStore *store,
                                               GtkTreeIter *a,
                                               GtkTreeIter *b);
extern
void gtk_list_store_move_after (GtkListStore *store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
extern
void gtk_list_store_move_before (GtkListStore *store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
# 28 "/usr/include/gtk-3.0/gtk/gtkentrycompletion.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtktreemodelfilter.h" 1
# 48 "/usr/include/gtk-3.0/gtk/gtktreemodelfilter.h"
typedef gboolean (* GtkTreeModelFilterVisibleFunc) (GtkTreeModel *model,
                                                    GtkTreeIter *iter,
                                                    gpointer data);
# 69 "/usr/include/gtk-3.0/gtk/gtktreemodelfilter.h"
typedef void (* GtkTreeModelFilterModifyFunc) (GtkTreeModel *model,
                                               GtkTreeIter *iter,
                                               GValue *value,
                                               gint column,
                                               gpointer data);

typedef struct _GtkTreeModelFilter GtkTreeModelFilter;
typedef struct _GtkTreeModelFilterClass GtkTreeModelFilterClass;
typedef struct _GtkTreeModelFilterPrivate GtkTreeModelFilterPrivate;

struct _GtkTreeModelFilter
{
  GObject parent;


  GtkTreeModelFilterPrivate *priv;
};

struct _GtkTreeModelFilterClass
{
  GObjectClass parent_class;

  gboolean (* visible) (GtkTreeModelFilter *self,
                        GtkTreeModel *child_model,
                        GtkTreeIter *iter);
  void (* modify) (GtkTreeModelFilter *self,
                   GtkTreeModel *child_model,
                   GtkTreeIter *iter,
                   GValue *value,
                   gint column);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_tree_model_filter_get_type (void) __attribute__ ((__const__));
extern
GtkTreeModel *gtk_tree_model_filter_new (GtkTreeModel *child_model,
                                                                GtkTreePath *root);
extern
void gtk_tree_model_filter_set_visible_func (GtkTreeModelFilter *filter,
                                                                GtkTreeModelFilterVisibleFunc func,
                                                                gpointer data,
                                                                GDestroyNotify destroy);
extern
void gtk_tree_model_filter_set_modify_func (GtkTreeModelFilter *filter,
                                                                gint n_columns,
                                                                GType *types,
                                                                GtkTreeModelFilterModifyFunc func,
                                                                gpointer data,
                                                                GDestroyNotify destroy);
extern
void gtk_tree_model_filter_set_visible_column (GtkTreeModelFilter *filter,
                                                                gint column);

extern
GtkTreeModel *gtk_tree_model_filter_get_model (GtkTreeModelFilter *filter);


extern
gboolean gtk_tree_model_filter_convert_child_iter_to_iter (GtkTreeModelFilter *filter,
                                                                GtkTreeIter *filter_iter,
                                                                GtkTreeIter *child_iter);
extern
void gtk_tree_model_filter_convert_iter_to_child_iter (GtkTreeModelFilter *filter,
                                                                GtkTreeIter *child_iter,
                                                                GtkTreeIter *filter_iter);
extern
GtkTreePath *gtk_tree_model_filter_convert_child_path_to_path (GtkTreeModelFilter *filter,
                                                                GtkTreePath *child_path);
extern
GtkTreePath *gtk_tree_model_filter_convert_path_to_child_path (GtkTreeModelFilter *filter,
                                                                GtkTreePath *filter_path);


extern
void gtk_tree_model_filter_refilter (GtkTreeModelFilter *filter);
extern
void gtk_tree_model_filter_clear_cache (GtkTreeModelFilter *filter);
# 31 "/usr/include/gtk-3.0/gtk/gtkentrycompletion.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtkentrycompletion.h"
typedef struct _GtkEntryCompletion GtkEntryCompletion;
typedef struct _GtkEntryCompletionClass GtkEntryCompletionClass;
typedef struct _GtkEntryCompletionPrivate GtkEntryCompletionPrivate;
# 62 "/usr/include/gtk-3.0/gtk/gtkentrycompletion.h"
typedef gboolean (* GtkEntryCompletionMatchFunc) (GtkEntryCompletion *completion,
                                                  const gchar *key,
                                                  GtkTreeIter *iter,
                                                  gpointer user_data);


struct _GtkEntryCompletion
{
  GObject parent_instance;


  GtkEntryCompletionPrivate *priv;
};

struct _GtkEntryCompletionClass
{
  GObjectClass parent_class;

  gboolean (* match_selected) (GtkEntryCompletion *completion,
                                 GtkTreeModel *model,
                                 GtkTreeIter *iter);
  void (* action_activated) (GtkEntryCompletion *completion,
                                 gint index_);
  gboolean (* insert_prefix) (GtkEntryCompletion *completion,
                                 const gchar *prefix);
  gboolean (* cursor_on_match) (GtkEntryCompletion *completion,
                                 GtkTreeModel *model,
                                 GtkTreeIter *iter);
  void (* no_matches) (GtkEntryCompletion *completion);


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};


extern
GType gtk_entry_completion_get_type (void) __attribute__ ((__const__));
extern
GtkEntryCompletion *gtk_entry_completion_new (void);
extern
GtkEntryCompletion *gtk_entry_completion_new_with_area (GtkCellArea *area);

extern
GtkWidget *gtk_entry_completion_get_entry (GtkEntryCompletion *completion);

extern
void gtk_entry_completion_set_model (GtkEntryCompletion *completion,
                                                                 GtkTreeModel *model);
extern
GtkTreeModel *gtk_entry_completion_get_model (GtkEntryCompletion *completion);

extern
void gtk_entry_completion_set_match_func (GtkEntryCompletion *completion,
                                                                 GtkEntryCompletionMatchFunc func,
                                                                 gpointer func_data,
                                                                 GDestroyNotify func_notify);
extern
void gtk_entry_completion_set_minimum_key_length (GtkEntryCompletion *completion,
                                                                 gint length);
extern
gint gtk_entry_completion_get_minimum_key_length (GtkEntryCompletion *completion);
extern
gchar * gtk_entry_completion_compute_prefix (GtkEntryCompletion *completion,
                                                                 const char *key);
extern
void gtk_entry_completion_complete (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_insert_prefix (GtkEntryCompletion *completion);

extern
void gtk_entry_completion_insert_action_text (GtkEntryCompletion *completion,
                                                                 gint index_,
                                                                 const gchar *text);
extern
void gtk_entry_completion_insert_action_markup (GtkEntryCompletion *completion,
                                                                 gint index_,
                                                                 const gchar *markup);
extern
void gtk_entry_completion_delete_action (GtkEntryCompletion *completion,
                                                                 gint index_);

extern
void gtk_entry_completion_set_inline_completion (GtkEntryCompletion *completion,
                                                                 gboolean inline_completion);
extern
gboolean gtk_entry_completion_get_inline_completion (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_inline_selection (GtkEntryCompletion *completion,
                                                                 gboolean inline_selection);
extern
gboolean gtk_entry_completion_get_inline_selection (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_popup_completion (GtkEntryCompletion *completion,
                                                                 gboolean popup_completion);
extern
gboolean gtk_entry_completion_get_popup_completion (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_popup_set_width (GtkEntryCompletion *completion,
                                                                 gboolean popup_set_width);
extern
gboolean gtk_entry_completion_get_popup_set_width (GtkEntryCompletion *completion);
extern
void gtk_entry_completion_set_popup_single_match (GtkEntryCompletion *completion,
                                                                 gboolean popup_single_match);
extern
gboolean gtk_entry_completion_get_popup_single_match (GtkEntryCompletion *completion);

extern
const gchar *gtk_entry_completion_get_completion_prefix (GtkEntryCompletion *completion);

extern
void gtk_entry_completion_set_text_column (GtkEntryCompletion *completion,
                                                                 gint column);
extern
gint gtk_entry_completion_get_text_column (GtkEntryCompletion *completion);
# 42 "/usr/include/gtk-3.0/gtk/gtkentry.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkimage.h" 1
# 47 "/usr/include/gtk-3.0/gtk/gtkimage.h"
typedef struct _GtkImage GtkImage;
typedef struct _GtkImagePrivate GtkImagePrivate;
typedef struct _GtkImageClass GtkImageClass;
# 73 "/usr/include/gtk-3.0/gtk/gtkimage.h"
typedef enum
{
  GTK_IMAGE_EMPTY,
  GTK_IMAGE_PIXBUF,
  GTK_IMAGE_STOCK,
  GTK_IMAGE_ICON_SET,
  GTK_IMAGE_ANIMATION,
  GTK_IMAGE_ICON_NAME,
  GTK_IMAGE_GICON,
  GTK_IMAGE_SURFACE
} GtkImageType;







struct _GtkImage
{
  GtkMisc misc;


  GtkImagePrivate *priv;
};

struct _GtkImageClass
{
  GtkMiscClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_image_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_image_new (void);
extern
GtkWidget* gtk_image_new_from_file (const gchar *filename);
extern
GtkWidget* gtk_image_new_from_resource (const gchar *resource_path);
extern
GtkWidget* gtk_image_new_from_pixbuf (GdkPixbuf *pixbuf);
__attribute__((__deprecated__("Use '" "gtk_image_new_from_icon_name" "' instead"))) extern
GtkWidget* gtk_image_new_from_stock (const gchar *stock_id,
                                         GtkIconSize size);
__attribute__((__deprecated__("Use '" "gtk_image_new_from_icon_name" "' instead"))) extern
GtkWidget* gtk_image_new_from_icon_set (GtkIconSet *icon_set,
                                         GtkIconSize size);
extern
GtkWidget* gtk_image_new_from_animation (GdkPixbufAnimation *animation);
extern
GtkWidget* gtk_image_new_from_icon_name (const gchar *icon_name,
      GtkIconSize size);
extern
GtkWidget* gtk_image_new_from_gicon (GIcon *icon,
      GtkIconSize size);
extern
GtkWidget* gtk_image_new_from_surface (cairo_surface_t *surface);

extern
void gtk_image_clear (GtkImage *image);
extern
void gtk_image_set_from_file (GtkImage *image,
                                   const gchar *filename);
extern
void gtk_image_set_from_resource (GtkImage *image,
                                   const gchar *resource_path);
extern
void gtk_image_set_from_pixbuf (GtkImage *image,
                                   GdkPixbuf *pixbuf);
__attribute__((__deprecated__("Use '" "gtk_image_set_from_icon_name" "' instead"))) extern
void gtk_image_set_from_stock (GtkImage *image,
                                   const gchar *stock_id,
                                   GtkIconSize size);
__attribute__((__deprecated__("Use '" "gtk_image_set_from_icon_name" "' instead"))) extern
void gtk_image_set_from_icon_set (GtkImage *image,
                                   GtkIconSet *icon_set,
                                   GtkIconSize size);
extern
void gtk_image_set_from_animation (GtkImage *image,
                                   GdkPixbufAnimation *animation);
extern
void gtk_image_set_from_icon_name (GtkImage *image,
       const gchar *icon_name,
       GtkIconSize size);
extern
void gtk_image_set_from_gicon (GtkImage *image,
       GIcon *icon,
       GtkIconSize size);
extern
void gtk_image_set_from_surface (GtkImage *image,
       cairo_surface_t *surface);
extern
void gtk_image_set_pixel_size (GtkImage *image,
       gint pixel_size);

extern
GtkImageType gtk_image_get_storage_type (GtkImage *image);

extern
GdkPixbuf* gtk_image_get_pixbuf (GtkImage *image);
__attribute__((__deprecated__("Use '" "gtk_image_get_icon_name" "' instead"))) extern
void gtk_image_get_stock (GtkImage *image,
                                   gchar **stock_id,
                                   GtkIconSize *size);
__attribute__((__deprecated__("Use '" "gtk_image_get_icon_name" "' instead"))) extern
void gtk_image_get_icon_set (GtkImage *image,
                                   GtkIconSet **icon_set,
                                   GtkIconSize *size);
extern
GdkPixbufAnimation* gtk_image_get_animation (GtkImage *image);
extern
void gtk_image_get_icon_name (GtkImage *image,
        const gchar **icon_name,
        GtkIconSize *size);
extern
void gtk_image_get_gicon (GtkImage *image,
        GIcon **gicon,
        GtkIconSize *size);
extern
gint gtk_image_get_pixel_size (GtkImage *image);
# 43 "/usr/include/gtk-3.0/gtk/gtkentry.h" 2
# 64 "/usr/include/gtk-3.0/gtk/gtkentry.h"
typedef enum
{
  GTK_ENTRY_ICON_PRIMARY,
  GTK_ENTRY_ICON_SECONDARY
} GtkEntryIconPosition;

typedef struct _GtkEntry GtkEntry;
typedef struct _GtkEntryPrivate GtkEntryPrivate;
typedef struct _GtkEntryClass GtkEntryClass;

struct _GtkEntry
{

  GtkWidget parent_instance;

  GtkEntryPrivate *priv;
};
# 124 "/usr/include/gtk-3.0/gtk/gtkentry.h"
struct _GtkEntryClass
{
  GtkWidgetClass parent_class;


  void (* populate_popup) (GtkEntry *entry,
                             GtkWidget *popup);



  void (* activate) (GtkEntry *entry);
  void (* move_cursor) (GtkEntry *entry,
          GtkMovementStep step,
          gint count,
          gboolean extend_selection);
  void (* insert_at_cursor) (GtkEntry *entry,
          const gchar *str);
  void (* delete_from_cursor) (GtkEntry *entry,
          GtkDeleteType type,
          gint count);
  void (* backspace) (GtkEntry *entry);
  void (* cut_clipboard) (GtkEntry *entry);
  void (* copy_clipboard) (GtkEntry *entry);
  void (* paste_clipboard) (GtkEntry *entry);
  void (* toggle_overwrite) (GtkEntry *entry);


  void (* get_text_area_size) (GtkEntry *entry,
          gint *x,
          gint *y,
          gint *width,
          gint *height);
  void (* get_frame_size) (GtkEntry *entry,
                               gint *x,
                               gint *y,
          gint *width,
          gint *height);
  void (* insert_emoji) (GtkEntry *entry);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};

extern
GType gtk_entry_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_entry_new (void);
extern
GtkWidget* gtk_entry_new_with_buffer (GtkEntryBuffer *buffer);

extern
GtkEntryBuffer* gtk_entry_get_buffer (GtkEntry *entry);
extern
void gtk_entry_set_buffer (GtkEntry *entry,
                                                 GtkEntryBuffer *buffer);

extern
void gtk_entry_get_text_area (GtkEntry *entry,
                                                 GdkRectangle *text_area);

extern
void gtk_entry_set_visibility (GtkEntry *entry,
       gboolean visible);
extern
gboolean gtk_entry_get_visibility (GtkEntry *entry);

extern
void gtk_entry_set_invisible_char (GtkEntry *entry,
                                                 gunichar ch);
extern
gunichar gtk_entry_get_invisible_char (GtkEntry *entry);
extern
void gtk_entry_unset_invisible_char (GtkEntry *entry);

extern
void gtk_entry_set_has_frame (GtkEntry *entry,
                                                 gboolean setting);
extern
gboolean gtk_entry_get_has_frame (GtkEntry *entry);

__attribute__((__deprecated__)) extern
void gtk_entry_set_inner_border (GtkEntry *entry,
                                                 const GtkBorder *border);
__attribute__((__deprecated__)) extern
const GtkBorder* gtk_entry_get_inner_border (GtkEntry *entry);

extern
void gtk_entry_set_overwrite_mode (GtkEntry *entry,
                                                 gboolean overwrite);
extern
gboolean gtk_entry_get_overwrite_mode (GtkEntry *entry);


extern
void gtk_entry_set_max_length (GtkEntry *entry,
       gint max);
extern
gint gtk_entry_get_max_length (GtkEntry *entry);
extern
guint16 gtk_entry_get_text_length (GtkEntry *entry);

extern
void gtk_entry_set_activates_default (GtkEntry *entry,
                                                 gboolean setting);
extern
gboolean gtk_entry_get_activates_default (GtkEntry *entry);

extern
void gtk_entry_set_width_chars (GtkEntry *entry,
                                                 gint n_chars);
extern
gint gtk_entry_get_width_chars (GtkEntry *entry);

extern
void gtk_entry_set_max_width_chars (GtkEntry *entry,
                                                 gint n_chars);
extern
gint gtk_entry_get_max_width_chars (GtkEntry *entry);



extern
void gtk_entry_set_text (GtkEntry *entry,
                                                 const gchar *text);

extern
const gchar* gtk_entry_get_text (GtkEntry *entry);

extern
PangoLayout* gtk_entry_get_layout (GtkEntry *entry);
extern
void gtk_entry_get_layout_offsets (GtkEntry *entry,
                                                 gint *x,
                                                 gint *y);
extern
void gtk_entry_set_alignment (GtkEntry *entry,
                                                 gfloat xalign);
extern
gfloat gtk_entry_get_alignment (GtkEntry *entry);

extern
void gtk_entry_set_completion (GtkEntry *entry,
                                              GtkEntryCompletion *completion);
extern
GtkEntryCompletion *gtk_entry_get_completion (GtkEntry *entry);

extern
gint gtk_entry_layout_index_to_text_index (GtkEntry *entry,
                                                 gint layout_index);
extern
gint gtk_entry_text_index_to_layout_index (GtkEntry *entry,
                                                 gint text_index);



extern
void gtk_entry_set_cursor_hadjustment (GtkEntry *entry,
                                                 GtkAdjustment *adjustment);
extern
GtkAdjustment* gtk_entry_get_cursor_hadjustment (GtkEntry *entry);



extern
void gtk_entry_set_progress_fraction (GtkEntry *entry,
                                                  gdouble fraction);
extern
gdouble gtk_entry_get_progress_fraction (GtkEntry *entry);

extern
void gtk_entry_set_progress_pulse_step (GtkEntry *entry,
                                                  gdouble fraction);
extern
gdouble gtk_entry_get_progress_pulse_step (GtkEntry *entry);

extern
void gtk_entry_progress_pulse (GtkEntry *entry);
extern
const gchar* gtk_entry_get_placeholder_text (GtkEntry *entry);
extern
void gtk_entry_set_placeholder_text (GtkEntry *entry,
                                                  const gchar *text);


extern
void gtk_entry_set_icon_from_pixbuf (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GdkPixbuf *pixbuf);
__attribute__((__deprecated__("Use '" "gtk_entry_set_icon_from_icon_name" "' instead"))) extern
void gtk_entry_set_icon_from_stock (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *stock_id);
extern
void gtk_entry_set_icon_from_icon_name (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *icon_name);
extern
void gtk_entry_set_icon_from_gicon (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GIcon *icon);
extern
GtkImageType gtk_entry_get_icon_storage_type (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
GdkPixbuf* gtk_entry_get_icon_pixbuf (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
__attribute__((__deprecated__("Use '" "gtk_entry_get_icon_name" "' instead"))) extern
const gchar* gtk_entry_get_icon_stock (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
const gchar* gtk_entry_get_icon_name (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
GIcon* gtk_entry_get_icon_gicon (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
void gtk_entry_set_icon_activatable (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         gboolean activatable);
extern
gboolean gtk_entry_get_icon_activatable (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
void gtk_entry_set_icon_sensitive (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         gboolean sensitive);
extern
gboolean gtk_entry_get_icon_sensitive (GtkEntry *entry,
         GtkEntryIconPosition icon_pos);
extern
gint gtk_entry_get_icon_at_pos (GtkEntry *entry,
         gint x,
         gint y);
extern
void gtk_entry_set_icon_tooltip_text (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *tooltip);
extern
gchar * gtk_entry_get_icon_tooltip_text (GtkEntry *entry,
                                                          GtkEntryIconPosition icon_pos);
extern
void gtk_entry_set_icon_tooltip_markup (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         const gchar *tooltip);
extern
gchar * gtk_entry_get_icon_tooltip_markup (GtkEntry *entry,
                                                          GtkEntryIconPosition icon_pos);
extern
void gtk_entry_set_icon_drag_source (GtkEntry *entry,
         GtkEntryIconPosition icon_pos,
         GtkTargetList *target_list,
         GdkDragAction actions);
extern
gint gtk_entry_get_current_icon_drag_source (GtkEntry *entry);
extern
void gtk_entry_get_icon_area (GtkEntry *entry,
                                                          GtkEntryIconPosition icon_pos,
                                                          GdkRectangle *icon_area);

extern
gboolean gtk_entry_im_context_filter_keypress (GtkEntry *entry,
                                                          GdkEventKey *event);
extern
void gtk_entry_reset_im_context (GtkEntry *entry);

extern
void gtk_entry_set_input_purpose (GtkEntry *entry,
                                                              GtkInputPurpose purpose);
extern
GtkInputPurpose gtk_entry_get_input_purpose (GtkEntry *entry);

extern
void gtk_entry_set_input_hints (GtkEntry *entry,
                                                              GtkInputHints hints);
extern
GtkInputHints gtk_entry_get_input_hints (GtkEntry *entry);

extern
void gtk_entry_set_attributes (GtkEntry *entry,
                                                              PangoAttrList *attrs);
extern
PangoAttrList *gtk_entry_get_attributes (GtkEntry *entry);

extern
void gtk_entry_set_tabs (GtkEntry *entry,
                                                              PangoTabArray *tabs);

extern
PangoTabArray *gtk_entry_get_tabs (GtkEntry *entry);

extern
void gtk_entry_grab_focus_without_selecting (GtkEntry *entry);
# 30 "/usr/include/gtk-3.0/gtk/gtktreeview.h" 2
# 42 "/usr/include/gtk-3.0/gtk/gtktreeview.h"
typedef enum
{

  GTK_TREE_VIEW_DROP_BEFORE,
  GTK_TREE_VIEW_DROP_AFTER,



  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE,
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER
} GtkTreeViewDropPosition;
# 61 "/usr/include/gtk-3.0/gtk/gtktreeview.h"
typedef struct _GtkTreeView GtkTreeView;
typedef struct _GtkTreeViewClass GtkTreeViewClass;
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
typedef struct _GtkTreeSelection GtkTreeSelection;
typedef struct _GtkTreeSelectionClass GtkTreeSelectionClass;

struct _GtkTreeView
{
  GtkContainer parent;


  GtkTreeViewPrivate *priv;
};

struct _GtkTreeViewClass
{
  GtkContainerClass parent_class;

  void (* row_activated) (GtkTreeView *tree_view,
               GtkTreePath *path,
        GtkTreeViewColumn *column);
  gboolean (* test_expand_row) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  gboolean (* test_collapse_row) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* row_expanded) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* row_collapsed) (GtkTreeView *tree_view,
               GtkTreeIter *iter,
               GtkTreePath *path);
  void (* columns_changed) (GtkTreeView *tree_view);
  void (* cursor_changed) (GtkTreeView *tree_view);


  gboolean (* move_cursor) (GtkTreeView *tree_view,
               GtkMovementStep step,
               gint count);
  gboolean (* select_all) (GtkTreeView *tree_view);
  gboolean (* unselect_all) (GtkTreeView *tree_view);
  gboolean (* select_cursor_row) (GtkTreeView *tree_view,
        gboolean start_editing);
  gboolean (* toggle_cursor_row) (GtkTreeView *tree_view);
  gboolean (* expand_collapse_cursor_row) (GtkTreeView *tree_view,
        gboolean logical,
        gboolean expand,
        gboolean open_all);
  gboolean (* select_cursor_parent) (GtkTreeView *tree_view);
  gboolean (* start_interactive_search) (GtkTreeView *tree_view);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
# 143 "/usr/include/gtk-3.0/gtk/gtktreeview.h"
typedef gboolean (* GtkTreeViewColumnDropFunc) (GtkTreeView *tree_view,
      GtkTreeViewColumn *column,
      GtkTreeViewColumn *prev_column,
      GtkTreeViewColumn *next_column,
      gpointer data);
# 157 "/usr/include/gtk-3.0/gtk/gtktreeview.h"
typedef void (* GtkTreeViewMappingFunc) (GtkTreeView *tree_view,
      GtkTreePath *path,
      gpointer user_data);
# 177 "/usr/include/gtk-3.0/gtk/gtktreeview.h"
typedef gboolean (*GtkTreeViewSearchEqualFunc) (GtkTreeModel *model,
      gint column,
      const gchar *key,
      GtkTreeIter *iter,
      gpointer search_data);
# 196 "/usr/include/gtk-3.0/gtk/gtktreeview.h"
typedef gboolean (*GtkTreeViewRowSeparatorFunc) (GtkTreeModel *model,
       GtkTreeIter *iter,
       gpointer data);
typedef void (*GtkTreeViewSearchPositionFunc) (GtkTreeView *tree_view,
         GtkWidget *search_dialog,
         gpointer user_data);



extern
GType gtk_tree_view_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_tree_view_new (void);
extern
GtkWidget *gtk_tree_view_new_with_model (GtkTreeModel *model);


extern
GtkTreeModel *gtk_tree_view_get_model (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_model (GtkTreeView *tree_view,
            GtkTreeModel *model);
extern
GtkTreeSelection *gtk_tree_view_get_selection (GtkTreeView *tree_view);

__attribute__((__deprecated__("Use '" "gtk_scrollable_get_hadjustment" "' instead"))) extern
GtkAdjustment *gtk_tree_view_get_hadjustment (GtkTreeView *tree_view);
__attribute__((__deprecated__("Use '" "gtk_scrollable_set_hadjustment" "' instead"))) extern
void gtk_tree_view_set_hadjustment (GtkTreeView *tree_view,
            GtkAdjustment *adjustment);
__attribute__((__deprecated__("Use '" "gtk_scrollable_get_vadjustment" "' instead"))) extern
GtkAdjustment *gtk_tree_view_get_vadjustment (GtkTreeView *tree_view);
__attribute__((__deprecated__("Use '" "gtk_scrollable_set_vadjustment" "' instead"))) extern
void gtk_tree_view_set_vadjustment (GtkTreeView *tree_view,
            GtkAdjustment *adjustment);


extern
gboolean gtk_tree_view_get_headers_visible (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_headers_visible (GtkTreeView *tree_view,
            gboolean headers_visible);
extern
void gtk_tree_view_columns_autosize (GtkTreeView *tree_view);
extern
gboolean gtk_tree_view_get_headers_clickable (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_headers_clickable (GtkTreeView *tree_view,
            gboolean setting);
__attribute__((__deprecated__)) extern
void gtk_tree_view_set_rules_hint (GtkTreeView *tree_view,
            gboolean setting);
__attribute__((__deprecated__)) extern
gboolean gtk_tree_view_get_rules_hint (GtkTreeView *tree_view);
extern
gboolean gtk_tree_view_get_activate_on_single_click (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_activate_on_single_click (GtkTreeView *tree_view,
            gboolean single);


extern
gint gtk_tree_view_append_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
extern
gint gtk_tree_view_remove_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
extern
gint gtk_tree_view_insert_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column,
            gint position);
extern
gint gtk_tree_view_insert_column_with_attributes (GtkTreeView *tree_view,
            gint position,
            const gchar *title,
            GtkCellRenderer *cell,
            ...) __attribute__((__sentinel__));
extern
gint gtk_tree_view_insert_column_with_data_func (GtkTreeView *tree_view,
            gint position,
            const gchar *title,
            GtkCellRenderer *cell,
                                                                    GtkTreeCellDataFunc func,
                                                                    gpointer data,
                                                                    GDestroyNotify dnotify);

extern
guint gtk_tree_view_get_n_columns (GtkTreeView *tree_view);
extern
GtkTreeViewColumn *gtk_tree_view_get_column (GtkTreeView *tree_view,
            gint n);
extern
GList *gtk_tree_view_get_columns (GtkTreeView *tree_view);
extern
void gtk_tree_view_move_column_after (GtkTreeView *tree_view,
            GtkTreeViewColumn *column,
            GtkTreeViewColumn *base_column);
extern
void gtk_tree_view_set_expander_column (GtkTreeView *tree_view,
            GtkTreeViewColumn *column);
extern
GtkTreeViewColumn *gtk_tree_view_get_expander_column (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_column_drag_function (GtkTreeView *tree_view,
            GtkTreeViewColumnDropFunc func,
            gpointer user_data,
            GDestroyNotify destroy);


extern
void gtk_tree_view_scroll_to_point (GtkTreeView *tree_view,
            gint tree_x,
            gint tree_y);
extern
void gtk_tree_view_scroll_to_cell (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            gboolean use_align,
            gfloat row_align,
            gfloat col_align);
extern
void gtk_tree_view_row_activated (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column);
extern
void gtk_tree_view_expand_all (GtkTreeView *tree_view);
extern
void gtk_tree_view_collapse_all (GtkTreeView *tree_view);
extern
void gtk_tree_view_expand_to_path (GtkTreeView *tree_view,
            GtkTreePath *path);
extern
gboolean gtk_tree_view_expand_row (GtkTreeView *tree_view,
            GtkTreePath *path,
            gboolean open_all);
extern
gboolean gtk_tree_view_collapse_row (GtkTreeView *tree_view,
            GtkTreePath *path);
extern
void gtk_tree_view_map_expanded_rows (GtkTreeView *tree_view,
            GtkTreeViewMappingFunc func,
            gpointer data);
extern
gboolean gtk_tree_view_row_expanded (GtkTreeView *tree_view,
            GtkTreePath *path);
extern
void gtk_tree_view_set_reorderable (GtkTreeView *tree_view,
            gboolean reorderable);
extern
gboolean gtk_tree_view_get_reorderable (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_cursor (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *focus_column,
            gboolean start_editing);
extern
void gtk_tree_view_set_cursor_on_cell (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *focus_column,
            GtkCellRenderer *focus_cell,
            gboolean start_editing);
extern
void gtk_tree_view_get_cursor (GtkTreeView *tree_view,
            GtkTreePath **path,
            GtkTreeViewColumn **focus_column);



extern
GdkWindow *gtk_tree_view_get_bin_window (GtkTreeView *tree_view);
extern
gboolean gtk_tree_view_get_path_at_pos (GtkTreeView *tree_view,
            gint x,
            gint y,
            GtkTreePath **path,
            GtkTreeViewColumn **column,
            gint *cell_x,
            gint *cell_y);
extern
void gtk_tree_view_get_cell_area (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            GdkRectangle *rect);
extern
void gtk_tree_view_get_background_area (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewColumn *column,
            GdkRectangle *rect);
extern
void gtk_tree_view_get_visible_rect (GtkTreeView *tree_view,
            GdkRectangle *visible_rect);
extern
gboolean gtk_tree_view_get_visible_range (GtkTreeView *tree_view,
            GtkTreePath **start_path,
            GtkTreePath **end_path);
extern
gboolean gtk_tree_view_is_blank_at_pos (GtkTreeView *tree_view,
                                                                    gint x,
                                                                    gint y,
                                                                    GtkTreePath **path,
                                                                    GtkTreeViewColumn **column,
                                                                    gint *cell_x,
                                                                    gint *cell_y);


extern
void gtk_tree_view_enable_model_drag_source (GtkTreeView *tree_view,
            GdkModifierType start_button_mask,
            const GtkTargetEntry *targets,
            gint n_targets,
            GdkDragAction actions);
extern
void gtk_tree_view_enable_model_drag_dest (GtkTreeView *tree_view,
            const GtkTargetEntry *targets,
            gint n_targets,
            GdkDragAction actions);
extern
void gtk_tree_view_unset_rows_drag_source (GtkTreeView *tree_view);
extern
void gtk_tree_view_unset_rows_drag_dest (GtkTreeView *tree_view);



extern
void gtk_tree_view_set_drag_dest_row (GtkTreeView *tree_view,
            GtkTreePath *path,
            GtkTreeViewDropPosition pos);
extern
void gtk_tree_view_get_drag_dest_row (GtkTreeView *tree_view,
            GtkTreePath **path,
            GtkTreeViewDropPosition *pos);
extern
gboolean gtk_tree_view_get_dest_row_at_pos (GtkTreeView *tree_view,
            gint drag_x,
            gint drag_y,
            GtkTreePath **path,
            GtkTreeViewDropPosition *pos);
extern
cairo_surface_t *gtk_tree_view_create_row_drag_icon (GtkTreeView *tree_view,
            GtkTreePath *path);


extern
void gtk_tree_view_set_enable_search (GtkTreeView *tree_view,
        gboolean enable_search);
extern
gboolean gtk_tree_view_get_enable_search (GtkTreeView *tree_view);
extern
gint gtk_tree_view_get_search_column (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_search_column (GtkTreeView *tree_view,
        gint column);
extern
GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_search_equal_func (GtkTreeView *tree_view,
        GtkTreeViewSearchEqualFunc search_equal_func,
        gpointer search_user_data,
        GDestroyNotify search_destroy);

extern
GtkEntry *gtk_tree_view_get_search_entry (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_search_entry (GtkTreeView *tree_view,
              GtkEntry *entry);
extern
GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_search_position_func (GtkTreeView *tree_view,
              GtkTreeViewSearchPositionFunc func,
              gpointer data,
              GDestroyNotify destroy);


extern
void gtk_tree_view_convert_widget_to_tree_coords (GtkTreeView *tree_view,
       gint wx,
       gint wy,
       gint *tx,
       gint *ty);
extern
void gtk_tree_view_convert_tree_to_widget_coords (GtkTreeView *tree_view,
       gint tx,
       gint ty,
       gint *wx,
       gint *wy);
extern
void gtk_tree_view_convert_widget_to_bin_window_coords (GtkTreeView *tree_view,
       gint wx,
       gint wy,
       gint *bx,
       gint *by);
extern
void gtk_tree_view_convert_bin_window_to_widget_coords (GtkTreeView *tree_view,
       gint bx,
       gint by,
       gint *wx,
       gint *wy);
extern
void gtk_tree_view_convert_tree_to_bin_window_coords (GtkTreeView *tree_view,
       gint tx,
       gint ty,
       gint *bx,
       gint *by);
extern
void gtk_tree_view_convert_bin_window_to_tree_coords (GtkTreeView *tree_view,
       gint bx,
       gint by,
       gint *tx,
       gint *ty);



typedef void (* GtkTreeDestroyCountFunc) (GtkTreeView *tree_view,
        GtkTreePath *path,
        gint children,
        gpointer user_data);
__attribute__((__deprecated__)) extern
void gtk_tree_view_set_destroy_count_func (GtkTreeView *tree_view,
        GtkTreeDestroyCountFunc func,
        gpointer data,
        GDestroyNotify destroy);

extern
void gtk_tree_view_set_fixed_height_mode (GtkTreeView *tree_view,
           gboolean enable);
extern
gboolean gtk_tree_view_get_fixed_height_mode (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_hover_selection (GtkTreeView *tree_view,
           gboolean hover);
extern
gboolean gtk_tree_view_get_hover_selection (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_hover_expand (GtkTreeView *tree_view,
           gboolean expand);
extern
gboolean gtk_tree_view_get_hover_expand (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_rubber_banding (GtkTreeView *tree_view,
           gboolean enable);
extern
gboolean gtk_tree_view_get_rubber_banding (GtkTreeView *tree_view);

extern
gboolean gtk_tree_view_is_rubber_banding_active (GtkTreeView *tree_view);

extern
GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_row_separator_func (GtkTreeView *tree_view,
          GtkTreeViewRowSeparatorFunc func,
          gpointer data,
          GDestroyNotify destroy);

extern
GtkTreeViewGridLines gtk_tree_view_get_grid_lines (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_grid_lines (GtkTreeView *tree_view,
          GtkTreeViewGridLines grid_lines);
extern
gboolean gtk_tree_view_get_enable_tree_lines (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_enable_tree_lines (GtkTreeView *tree_view,
          gboolean enabled);
extern
void gtk_tree_view_set_show_expanders (GtkTreeView *tree_view,
          gboolean enabled);
extern
gboolean gtk_tree_view_get_show_expanders (GtkTreeView *tree_view);
extern
void gtk_tree_view_set_level_indentation (GtkTreeView *tree_view,
          gint indentation);
extern
gint gtk_tree_view_get_level_indentation (GtkTreeView *tree_view);


extern
void gtk_tree_view_set_tooltip_row (GtkTreeView *tree_view,
      GtkTooltip *tooltip,
      GtkTreePath *path);
extern
void gtk_tree_view_set_tooltip_cell (GtkTreeView *tree_view,
      GtkTooltip *tooltip,
      GtkTreePath *path,
      GtkTreeViewColumn *column,
      GtkCellRenderer *cell);
extern
gboolean gtk_tree_view_get_tooltip_context(GtkTreeView *tree_view,
      gint *x,
      gint *y,
      gboolean keyboard_tip,
      GtkTreeModel **model,
      GtkTreePath **path,
      GtkTreeIter *iter);
extern
void gtk_tree_view_set_tooltip_column (GtkTreeView *tree_view,
             gint column);
extern
gint gtk_tree_view_get_tooltip_column (GtkTreeView *tree_view);
# 28 "/usr/include/gtk-3.0/gtk/gtkcombobox.h" 2
# 38 "/usr/include/gtk-3.0/gtk/gtkcombobox.h"
typedef struct _GtkComboBox GtkComboBox;
typedef struct _GtkComboBoxClass GtkComboBoxClass;
typedef struct _GtkComboBoxPrivate GtkComboBoxPrivate;

struct _GtkComboBox
{
  GtkBin parent_instance;


  GtkComboBoxPrivate *priv;
};
# 57 "/usr/include/gtk-3.0/gtk/gtkcombobox.h"
struct _GtkComboBoxClass
{
  GtkBinClass parent_class;




  void (* changed) (GtkComboBox *combo_box);
  gchar *(* format_entry_text) (GtkComboBox *combo_box,
                                  const gchar *path);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};



extern
GType gtk_combo_box_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_combo_box_new (void);
extern
GtkWidget *gtk_combo_box_new_with_area (GtkCellArea *area);
extern
GtkWidget *gtk_combo_box_new_with_area_and_entry (GtkCellArea *area);
extern
GtkWidget *gtk_combo_box_new_with_entry (void);
extern
GtkWidget *gtk_combo_box_new_with_model (GtkTreeModel *model);
extern
GtkWidget *gtk_combo_box_new_with_model_and_entry (GtkTreeModel *model);


extern
gint gtk_combo_box_get_wrap_width (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_wrap_width (GtkComboBox *combo_box,
                                                    gint width);
extern
gint gtk_combo_box_get_row_span_column (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_row_span_column (GtkComboBox *combo_box,
                                                    gint row_span);
extern
gint gtk_combo_box_get_column_span_column (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_column_span_column (GtkComboBox *combo_box,
                                                    gint column_span);

__attribute__((__deprecated__)) extern
gboolean gtk_combo_box_get_add_tearoffs (GtkComboBox *combo_box);
__attribute__((__deprecated__)) extern
void gtk_combo_box_set_add_tearoffs (GtkComboBox *combo_box,
                                                    gboolean add_tearoffs);

__attribute__((__deprecated__)) extern
const gchar * gtk_combo_box_get_title (GtkComboBox *combo_box);
__attribute__((__deprecated__)) extern
void gtk_combo_box_set_title (GtkComboBox *combo_box,
                                                    const gchar *title);

__attribute__((__deprecated__("Use '" "gtk_widget_get_focus_on_click" "' instead"))) extern
gboolean gtk_combo_box_get_focus_on_click (GtkComboBox *combo);
__attribute__((__deprecated__("Use '" "gtk_widget_set_focus_on_click" "' instead"))) extern
void gtk_combo_box_set_focus_on_click (GtkComboBox *combo,
                                                    gboolean focus_on_click);


extern
gint gtk_combo_box_get_active (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_active (GtkComboBox *combo_box,
                                              gint index_);
extern
gboolean gtk_combo_box_get_active_iter (GtkComboBox *combo_box,
                                              GtkTreeIter *iter);
extern
void gtk_combo_box_set_active_iter (GtkComboBox *combo_box,
                                              GtkTreeIter *iter);


extern
void gtk_combo_box_set_model (GtkComboBox *combo_box,
                                              GtkTreeModel *model);
extern
GtkTreeModel *gtk_combo_box_get_model (GtkComboBox *combo_box);

extern
GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_row_separator_func (GtkComboBox *combo_box,
                                                                  GtkTreeViewRowSeparatorFunc func,
                                                                  gpointer data,
                                                                  GDestroyNotify destroy);

extern
void gtk_combo_box_set_button_sensitivity (GtkComboBox *combo_box,
                                                         GtkSensitivityType sensitivity);
extern
GtkSensitivityType gtk_combo_box_get_button_sensitivity (GtkComboBox *combo_box);

extern
gboolean gtk_combo_box_get_has_entry (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_entry_text_column (GtkComboBox *combo_box,
                                                         gint text_column);
extern
gint gtk_combo_box_get_entry_text_column (GtkComboBox *combo_box);

extern
void gtk_combo_box_set_popup_fixed_width (GtkComboBox *combo_box,
                                                         gboolean fixed);
extern
gboolean gtk_combo_box_get_popup_fixed_width (GtkComboBox *combo_box);


extern
void gtk_combo_box_popup (GtkComboBox *combo_box);
extern
void gtk_combo_box_popup_for_device (GtkComboBox *combo_box,
                                              GdkDevice *device);
extern
void gtk_combo_box_popdown (GtkComboBox *combo_box);
extern
AtkObject * gtk_combo_box_get_popup_accessible (GtkComboBox *combo_box);

extern
gint gtk_combo_box_get_id_column (GtkComboBox *combo_box);
extern
void gtk_combo_box_set_id_column (GtkComboBox *combo_box,
                                                  gint id_column);
extern
const gchar * gtk_combo_box_get_active_id (GtkComboBox *combo_box);
extern
gboolean gtk_combo_box_set_active_id (GtkComboBox *combo_box,
                                                  const gchar *active_id);
# 30 "/usr/include/gtk-3.0/gtk/gtkappchooserbutton.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtkappchooserbutton.h"
typedef struct _GtkAppChooserButton GtkAppChooserButton;
typedef struct _GtkAppChooserButtonClass GtkAppChooserButtonClass;
typedef struct _GtkAppChooserButtonPrivate GtkAppChooserButtonPrivate;

struct _GtkAppChooserButton {
  GtkComboBox parent;


  GtkAppChooserButtonPrivate *priv;
};
# 59 "/usr/include/gtk-3.0/gtk/gtkappchooserbutton.h"
struct _GtkAppChooserButtonClass {
  GtkComboBoxClass parent_class;



  void (* custom_item_activated) (GtkAppChooserButton *self,
                                  const gchar *item_name);




  gpointer padding[16];
};

extern
GType gtk_app_chooser_button_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_app_chooser_button_new (const gchar *content_type);

extern
void gtk_app_chooser_button_append_separator (GtkAppChooserButton *self);
extern
void gtk_app_chooser_button_append_custom_item (GtkAppChooserButton *self,
                                                       const gchar *name,
                                                       const gchar *label,
                                                       GIcon *icon);
extern
void gtk_app_chooser_button_set_active_custom_item (GtkAppChooserButton *self,
                                                        const gchar *name);

extern
void gtk_app_chooser_button_set_show_dialog_item (GtkAppChooserButton *self,
                                                       gboolean setting);
extern
gboolean gtk_app_chooser_button_get_show_dialog_item (GtkAppChooserButton *self);
extern
void gtk_app_chooser_button_set_heading (GtkAppChooserButton *self,
                                                       const gchar *heading);
extern
const gchar *
         gtk_app_chooser_button_get_heading (GtkAppChooserButton *self);
extern
void gtk_app_chooser_button_set_show_default_item (GtkAppChooserButton *self,
                                                       gboolean setting);
extern
gboolean gtk_app_chooser_button_get_show_default_item (GtkAppChooserButton *self);
# 43 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkapplicationwindow.h" 1
# 28 "/usr/include/gtk-3.0/gtk/gtkapplicationwindow.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkshortcutswindow.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtkshortcutswindow.h"
typedef struct _GtkShortcutsWindow GtkShortcutsWindow;
typedef struct _GtkShortcutsWindowClass GtkShortcutsWindowClass;


struct _GtkShortcutsWindow
{
  GtkWindow window;
};

struct _GtkShortcutsWindowClass
{
  GtkWindowClass parent_class;

  void (*close) (GtkShortcutsWindow *self);
  void (*search) (GtkShortcutsWindow *self);
};

extern
GType gtk_shortcuts_window_get_type (void) __attribute__ ((__const__));

typedef GtkShortcutsWindow *GtkShortcutsWindow_autoptr; typedef GList *GtkShortcutsWindow_listautoptr; typedef GSList *GtkShortcutsWindow_slistautoptr; typedef GQueue *GtkShortcutsWindow_queueautoptr;
# 54 "/usr/include/gtk-3.0/gtk/gtkshortcutswindow.h"
#pragma clang diagnostic push
# 54 "/usr/include/gtk-3.0/gtk/gtkshortcutswindow.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 54 "/usr/include/gtk-3.0/gtk/gtkshortcutswindow.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkShortcutsWindow (GtkShortcutsWindow *_ptr) { if (_ptr) (g_object_unref) ((GtkShortcutsWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkShortcutsWindow (GtkShortcutsWindow **_ptr) { glib_autoptr_clear_GtkShortcutsWindow (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkShortcutsWindow (void *_ptr) { (g_object_unref) ((GtkShortcutsWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkShortcutsWindow (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkShortcutsWindow); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkShortcutsWindow (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkShortcutsWindow); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkShortcutsWindow (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkShortcutsWindow); }
# 54 "/usr/include/gtk-3.0/gtk/gtkshortcutswindow.h"
#pragma clang diagnostic pop
# 29 "/usr/include/gtk-3.0/gtk/gtkapplicationwindow.h" 2
# 44 "/usr/include/gtk-3.0/gtk/gtkapplicationwindow.h"
typedef struct _GtkApplicationWindowPrivate GtkApplicationWindowPrivate;
typedef struct _GtkApplicationWindowClass GtkApplicationWindowClass;
typedef struct _GtkApplicationWindow GtkApplicationWindow;

struct _GtkApplicationWindow
{
  GtkWindow parent_instance;


  GtkApplicationWindowPrivate *priv;
};





struct _GtkApplicationWindowClass
{
  GtkWindowClass parent_class;


  gpointer padding[14];
};

extern
GType gtk_application_window_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_application_window_new (GtkApplication *application);

extern
void gtk_application_window_set_show_menubar (GtkApplicationWindow *window,
                                                     gboolean show_menubar);
extern
gboolean gtk_application_window_get_show_menubar (GtkApplicationWindow *window);

extern
guint gtk_application_window_get_id (GtkApplicationWindow *window);

extern
void gtk_application_window_set_help_overlay (GtkApplicationWindow *window,
                                                     GtkShortcutsWindow *help_overlay);
extern
GtkShortcutsWindow *
            gtk_application_window_get_help_overlay (GtkApplicationWindow *window);
# 45 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkaspectframe.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkaspectframe.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkframe.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkframe.h"
typedef struct _GtkFrame GtkFrame;
typedef struct _GtkFramePrivate GtkFramePrivate;
typedef struct _GtkFrameClass GtkFrameClass;

struct _GtkFrame
{
  GtkBin bin;


  GtkFramePrivate *priv;
};






struct _GtkFrameClass
{
  GtkBinClass parent_class;



  void (*compute_child_allocation) (GtkFrame *frame,
                                    GtkAllocation *allocation);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_frame_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_frame_new (const gchar *label);

extern
void gtk_frame_set_label (GtkFrame *frame,
                                   const gchar *label);
extern
const gchar * gtk_frame_get_label (GtkFrame *frame);

extern
void gtk_frame_set_label_widget (GtkFrame *frame,
           GtkWidget *label_widget);
extern
GtkWidget *gtk_frame_get_label_widget (GtkFrame *frame);
extern
void gtk_frame_set_label_align (GtkFrame *frame,
           gfloat xalign,
           gfloat yalign);
extern
void gtk_frame_get_label_align (GtkFrame *frame,
           gfloat *xalign,
           gfloat *yalign);
extern
void gtk_frame_set_shadow_type (GtkFrame *frame,
           GtkShadowType type);
extern
GtkShadowType gtk_frame_get_shadow_type (GtkFrame *frame);
# 34 "/usr/include/gtk-3.0/gtk/gtkaspectframe.h" 2
# 45 "/usr/include/gtk-3.0/gtk/gtkaspectframe.h"
typedef struct _GtkAspectFrame GtkAspectFrame;
typedef struct _GtkAspectFramePrivate GtkAspectFramePrivate;
typedef struct _GtkAspectFrameClass GtkAspectFrameClass;

struct _GtkAspectFrame
{
  GtkFrame frame;


  GtkAspectFramePrivate *priv;
};





struct _GtkAspectFrameClass
{
  GtkFrameClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_aspect_frame_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_aspect_frame_new (const gchar *label,
     gfloat xalign,
     gfloat yalign,
     gfloat ratio,
     gboolean obey_child);
extern
void gtk_aspect_frame_set (GtkAspectFrame *aspect_frame,
     gfloat xalign,
     gfloat yalign,
     gfloat ratio,
     gboolean obey_child);
# 46 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkassistant.h" 1
# 70 "/usr/include/gtk-3.0/gtk/gtkassistant.h"
typedef enum
{
  GTK_ASSISTANT_PAGE_CONTENT,
  GTK_ASSISTANT_PAGE_INTRO,
  GTK_ASSISTANT_PAGE_CONFIRM,
  GTK_ASSISTANT_PAGE_SUMMARY,
  GTK_ASSISTANT_PAGE_PROGRESS,
  GTK_ASSISTANT_PAGE_CUSTOM
} GtkAssistantPageType;

typedef struct _GtkAssistant GtkAssistant;
typedef struct _GtkAssistantPrivate GtkAssistantPrivate;
typedef struct _GtkAssistantClass GtkAssistantClass;

struct _GtkAssistant
{
  GtkWindow parent;


  GtkAssistantPrivate *priv;
};
# 100 "/usr/include/gtk-3.0/gtk/gtkassistant.h"
struct _GtkAssistantClass
{
  GtkWindowClass parent_class;



  void (* prepare) (GtkAssistant *assistant, GtkWidget *page);
  void (* apply) (GtkAssistant *assistant);
  void (* close) (GtkAssistant *assistant);
  void (* cancel) (GtkAssistant *assistant);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
};
# 133 "/usr/include/gtk-3.0/gtk/gtkassistant.h"
typedef gint (*GtkAssistantPageFunc) (gint current_page, gpointer data);

extern
GType gtk_assistant_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_assistant_new (void);
extern
void gtk_assistant_next_page (GtkAssistant *assistant);
extern
void gtk_assistant_previous_page (GtkAssistant *assistant);
extern
gint gtk_assistant_get_current_page (GtkAssistant *assistant);
extern
void gtk_assistant_set_current_page (GtkAssistant *assistant,
                                                           gint page_num);
extern
gint gtk_assistant_get_n_pages (GtkAssistant *assistant);
extern
GtkWidget *gtk_assistant_get_nth_page (GtkAssistant *assistant,
                                                           gint page_num);
extern
gint gtk_assistant_prepend_page (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
gint gtk_assistant_append_page (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
gint gtk_assistant_insert_page (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           gint position);
extern
void gtk_assistant_remove_page (GtkAssistant *assistant,
                                                           gint page_num);
extern
void gtk_assistant_set_forward_page_func (GtkAssistant *assistant,
                                                           GtkAssistantPageFunc page_func,
                                                           gpointer data,
                                                           GDestroyNotify destroy);
extern
void gtk_assistant_set_page_type (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           GtkAssistantPageType type);
extern
GtkAssistantPageType gtk_assistant_get_page_type (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
void gtk_assistant_set_page_title (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           const gchar *title);
extern
const gchar * gtk_assistant_get_page_title (GtkAssistant *assistant,
                                                           GtkWidget *page);

__attribute__((__deprecated__)) extern
void gtk_assistant_set_page_header_image (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           GdkPixbuf *pixbuf);
__attribute__((__deprecated__)) extern
GdkPixbuf *gtk_assistant_get_page_header_image (GtkAssistant *assistant,
                                                           GtkWidget *page);
__attribute__((__deprecated__)) extern
void gtk_assistant_set_page_side_image (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           GdkPixbuf *pixbuf);
__attribute__((__deprecated__)) extern
GdkPixbuf *gtk_assistant_get_page_side_image (GtkAssistant *assistant,
                                                           GtkWidget *page);

extern
void gtk_assistant_set_page_complete (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           gboolean complete);
extern
gboolean gtk_assistant_get_page_complete (GtkAssistant *assistant,
                                                           GtkWidget *page);
extern
void gtk_assistant_add_action_widget (GtkAssistant *assistant,
                                                           GtkWidget *child);
extern
void gtk_assistant_remove_action_widget (GtkAssistant *assistant,
                                                           GtkWidget *child);

extern
void gtk_assistant_update_buttons_state (GtkAssistant *assistant);
extern
void gtk_assistant_commit (GtkAssistant *assistant);

extern
void gtk_assistant_set_page_has_padding (GtkAssistant *assistant,
                                                           GtkWidget *page,
                                                           gboolean has_padding);
extern
gboolean gtk_assistant_get_page_has_padding (GtkAssistant *assistant,
                                                           GtkWidget *page);
# 47 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkbbox.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkbbox.h"
typedef struct _GtkButtonBox GtkButtonBox;
typedef struct _GtkButtonBoxPrivate GtkButtonBoxPrivate;
typedef struct _GtkButtonBoxClass GtkButtonBoxClass;

struct _GtkButtonBox
{
  GtkBox box;


  GtkButtonBoxPrivate *priv;
};





struct _GtkButtonBoxClass
{
  GtkBoxClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 92 "/usr/include/gtk-3.0/gtk/gtkbbox.h"
typedef enum
{
  GTK_BUTTONBOX_SPREAD = 1,
  GTK_BUTTONBOX_EDGE,
  GTK_BUTTONBOX_START,
  GTK_BUTTONBOX_END,
  GTK_BUTTONBOX_CENTER,
  GTK_BUTTONBOX_EXPAND
} GtkButtonBoxStyle;


extern
GType gtk_button_box_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_button_box_new (GtkOrientation orientation);
extern
GtkButtonBoxStyle gtk_button_box_get_layout (GtkButtonBox *widget);
extern
void gtk_button_box_set_layout (GtkButtonBox *widget,
                                                      GtkButtonBoxStyle layout_style);
extern
gboolean gtk_button_box_get_child_secondary (GtkButtonBox *widget,
                                                      GtkWidget *child);
extern
void gtk_button_box_set_child_secondary (GtkButtonBox *widget,
                                                      GtkWidget *child,
                                                      gboolean is_secondary);
extern
gboolean gtk_button_box_get_child_non_homogeneous (GtkButtonBox *widget,
                                                            GtkWidget *child);
extern
void gtk_button_box_set_child_non_homogeneous (GtkButtonBox *widget,
                                                            GtkWidget *child,
                                                            gboolean non_homogeneous);
# 48 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkbindings.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtkbindings.h"
typedef struct _GtkBindingSet GtkBindingSet;
typedef struct _GtkBindingEntry GtkBindingEntry;
typedef struct _GtkBindingSignal GtkBindingSignal;
typedef struct _GtkBindingArg GtkBindingArg;
# 64 "/usr/include/gtk-3.0/gtk/gtkbindings.h"
struct _GtkBindingSet
{
  gchar *set_name;
  gint priority;
  GSList *widget_path_pspecs;
  GSList *widget_class_pspecs;
  GSList *class_branch_pspecs;
  GtkBindingEntry *entries;
  GtkBindingEntry *current;
  guint parsed : 1;
};
# 91 "/usr/include/gtk-3.0/gtk/gtkbindings.h"
struct _GtkBindingEntry
{

  guint keyval;
  GdkModifierType modifiers;

  GtkBindingSet *binding_set;
  guint destroyed : 1;
  guint in_emission : 1;
  guint marks_unbound : 1;
  GtkBindingEntry *set_next;
  GtkBindingEntry *hash_next;
  GtkBindingSignal *signals;
};
# 114 "/usr/include/gtk-3.0/gtk/gtkbindings.h"
struct _GtkBindingArg
{
  GType arg_type;
  union {
    glong long_data;
    gdouble double_data;
    gchar *string_data;
  } d;
};
# 135 "/usr/include/gtk-3.0/gtk/gtkbindings.h"
struct _GtkBindingSignal
{
  GtkBindingSignal *next;
  gchar *signal_name;
  guint n_args;
  GtkBindingArg *args;
};

extern
GtkBindingSet *gtk_binding_set_new (const gchar *set_name);
extern
GtkBindingSet *gtk_binding_set_by_class (gpointer object_class);
extern
GtkBindingSet *gtk_binding_set_find (const gchar *set_name);

extern
gboolean gtk_bindings_activate (GObject *object,
                                              guint keyval,
                                              GdkModifierType modifiers);
extern
gboolean gtk_bindings_activate_event (GObject *object,
                                              GdkEventKey *event);
extern
gboolean gtk_binding_set_activate (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers,
                                              GObject *object);

extern
void gtk_binding_entry_skip (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers);
extern
void gtk_binding_entry_add_signal (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers,
                                              const gchar *signal_name,
                                              guint n_args,
                                              ...);
extern
void gtk_binding_entry_add_signall (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers,
                                              const gchar *signal_name,
                                              GSList *binding_args);

extern
GTokenType gtk_binding_entry_add_signal_from_string
                                             (GtkBindingSet *binding_set,
                                              const gchar *signal_desc);

extern
void gtk_binding_entry_remove (GtkBindingSet *binding_set,
                                              guint keyval,
                                              GdkModifierType modifiers);
# 50 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtkbuildable.h" 1
# 26 "/usr/include/gtk-3.0/gtk/gtkbuildable.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkbuilder.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkbuilder.h"
typedef struct _GtkBuilderClass GtkBuilderClass;
typedef struct _GtkBuilderPrivate GtkBuilderPrivate;
# 72 "/usr/include/gtk-3.0/gtk/gtkbuilder.h"
typedef enum
{
  GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION,
  GTK_BUILDER_ERROR_UNHANDLED_TAG,
  GTK_BUILDER_ERROR_MISSING_ATTRIBUTE,
  GTK_BUILDER_ERROR_INVALID_ATTRIBUTE,
  GTK_BUILDER_ERROR_INVALID_TAG,
  GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE,
  GTK_BUILDER_ERROR_INVALID_VALUE,
  GTK_BUILDER_ERROR_VERSION_MISMATCH,
  GTK_BUILDER_ERROR_DUPLICATE_ID,
  GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED,
  GTK_BUILDER_ERROR_TEMPLATE_MISMATCH,
  GTK_BUILDER_ERROR_INVALID_PROPERTY,
  GTK_BUILDER_ERROR_INVALID_SIGNAL,
  GTK_BUILDER_ERROR_INVALID_ID
} GtkBuilderError;

extern
GQuark gtk_builder_error_quark (void);

struct _GtkBuilder
{
  GObject parent_instance;

  GtkBuilderPrivate *priv;
};

struct _GtkBuilderClass
{
  GObjectClass parent_class;

  GType (* get_type_from_name) (GtkBuilder *builder,
                                const char *type_name);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_builder_get_type (void) __attribute__ ((__const__));
extern
GtkBuilder* gtk_builder_new (void);

extern
guint gtk_builder_add_from_file (GtkBuilder *builder,
                                                  const gchar *filename,
                                                  GError **error);
extern
guint gtk_builder_add_from_resource (GtkBuilder *builder,
                                                  const gchar *resource_path,
                                                  GError **error);
extern
guint gtk_builder_add_from_string (GtkBuilder *builder,
                                                  const gchar *buffer,
                                                  gsize length,
                                                  GError **error);
extern
guint gtk_builder_add_objects_from_file (GtkBuilder *builder,
                                                  const gchar *filename,
                                                  gchar **object_ids,
                                                  GError **error);
extern
guint gtk_builder_add_objects_from_resource(GtkBuilder *builder,
                                                  const gchar *resource_path,
                                                  gchar **object_ids,
                                                  GError **error);
extern
guint gtk_builder_add_objects_from_string (GtkBuilder *builder,
                                                  const gchar *buffer,
                                                  gsize length,
                                                  gchar **object_ids,
                                                  GError **error);
extern
GObject* gtk_builder_get_object (GtkBuilder *builder,
                                                  const gchar *name);
extern
GSList* gtk_builder_get_objects (GtkBuilder *builder);
extern
void gtk_builder_expose_object (GtkBuilder *builder,
                                                  const gchar *name,
                                                  GObject *object);
extern
void gtk_builder_connect_signals (GtkBuilder *builder,
        gpointer user_data);
extern
void gtk_builder_connect_signals_full (GtkBuilder *builder,
                                                  GtkBuilderConnectFunc func,
        gpointer user_data);
extern
void gtk_builder_set_translation_domain (GtkBuilder *builder,
                                                  const gchar *domain);
extern
const gchar* gtk_builder_get_translation_domain (GtkBuilder *builder);
extern
GType gtk_builder_get_type_from_name (GtkBuilder *builder,
                                                  const char *type_name);

extern
gboolean gtk_builder_value_from_string (GtkBuilder *builder,
        GParamSpec *pspec,
                                                  const gchar *string,
                                                  GValue *value,
        GError **error);
extern
gboolean gtk_builder_value_from_string_type (GtkBuilder *builder,
        GType type,
                                                  const gchar *string,
                                                  GValue *value,
        GError **error);
extern
GtkBuilder * gtk_builder_new_from_file (const gchar *filename);
extern
GtkBuilder * gtk_builder_new_from_resource (const gchar *resource_path);
extern
GtkBuilder * gtk_builder_new_from_string (const gchar *string,
                                                  gssize length);

extern
void gtk_builder_add_callback_symbol (GtkBuilder *builder,
        const gchar *callback_name,
        GCallback callback_symbol);
extern
void gtk_builder_add_callback_symbols (GtkBuilder *builder,
        const gchar *first_callback_name,
        GCallback first_callback_symbol,
        ...) __attribute__((__sentinel__));
extern
GCallback gtk_builder_lookup_callback_symbol (GtkBuilder *builder,
        const gchar *callback_name);

extern
void gtk_builder_set_application (GtkBuilder *builder,
                                                  GtkApplication *application);

extern
GtkApplication * gtk_builder_get_application (GtkBuilder *builder);
# 229 "/usr/include/gtk-3.0/gtk/gtkbuilder.h"
extern
guint gtk_builder_extend_with_template (GtkBuilder *builder,
                                             GtkWidget *widget,
                                             GType template_type, const gchar *buffer,
                                             gsize length,
                                             GError **error);
# 27 "/usr/include/gtk-3.0/gtk/gtkbuildable.h" 2
# 37 "/usr/include/gtk-3.0/gtk/gtkbuildable.h"
typedef struct _GtkBuildable GtkBuildable;
typedef struct _GtkBuildableIface GtkBuildableIface;
# 89 "/usr/include/gtk-3.0/gtk/gtkbuildable.h"
struct _GtkBuildableIface
{
  GTypeInterface g_iface;


  void (* set_name) (GtkBuildable *buildable,
                                            const gchar *name);
  const gchar * (* get_name) (GtkBuildable *buildable);
  void (* add_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *type);
  void (* set_buildable_property) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *name,
         const GValue *value);
  GObject * (* construct_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *name);
  gboolean (* custom_tag_start) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         GMarkupParser *parser,
         gpointer *data);
  void (* custom_tag_end) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         gpointer *data);
  void (* custom_finished) (GtkBuildable *buildable,
         GtkBuilder *builder,
         GObject *child,
         const gchar *tagname,
         gpointer data);
  void (* parser_finished) (GtkBuildable *buildable,
         GtkBuilder *builder);

  GObject * (* get_internal_child) (GtkBuildable *buildable,
         GtkBuilder *builder,
         const gchar *childname);
};


extern
GType gtk_buildable_get_type (void) __attribute__ ((__const__));

extern
void gtk_buildable_set_name (GtkBuildable *buildable,
      const gchar *name);
extern
const gchar * gtk_buildable_get_name (GtkBuildable *buildable);
extern
void gtk_buildable_add_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *type);
extern
void gtk_buildable_set_buildable_property (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *name,
      const GValue *value);
extern
GObject * gtk_buildable_construct_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *name);
extern
gboolean gtk_buildable_custom_tag_start (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      GMarkupParser *parser,
      gpointer *data);
extern
void gtk_buildable_custom_tag_end (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      gpointer *data);
extern
void gtk_buildable_custom_finished (GtkBuildable *buildable,
      GtkBuilder *builder,
      GObject *child,
      const gchar *tagname,
      gpointer data);
extern
void gtk_buildable_parser_finished (GtkBuildable *buildable,
      GtkBuilder *builder);
extern
GObject * gtk_buildable_get_internal_child (GtkBuildable *buildable,
      GtkBuilder *builder,
      const gchar *childname);
# 53 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkbutton.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkbutton.h"
typedef struct _GtkButton GtkButton;
typedef struct _GtkButtonPrivate GtkButtonPrivate;
typedef struct _GtkButtonClass GtkButtonClass;

struct _GtkButton
{

  GtkBin bin;

  GtkButtonPrivate *priv;
};
# 70 "/usr/include/gtk-3.0/gtk/gtkbutton.h"
struct _GtkButtonClass
{
  GtkBinClass parent_class;



  void (* pressed) (GtkButton *button);
  void (* released) (GtkButton *button);
  void (* clicked) (GtkButton *button);
  void (* enter) (GtkButton *button);
  void (* leave) (GtkButton *button);
  void (* activate) (GtkButton *button);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_button_new (void);
extern
GtkWidget* gtk_button_new_with_label (const gchar *label);
extern
GtkWidget* gtk_button_new_from_icon_name (const gchar *icon_name,
           GtkIconSize size);
__attribute__((__deprecated__("Use '" "gtk_button_new_with_label" "' instead"))) extern
GtkWidget* gtk_button_new_from_stock (const gchar *stock_id);
extern
GtkWidget* gtk_button_new_with_mnemonic (const gchar *label);
extern
void gtk_button_clicked (GtkButton *button);
__attribute__((__deprecated__)) extern
void gtk_button_pressed (GtkButton *button);
__attribute__((__deprecated__)) extern
void gtk_button_released (GtkButton *button);
__attribute__((__deprecated__)) extern
void gtk_button_enter (GtkButton *button);
__attribute__((__deprecated__)) extern
void gtk_button_leave (GtkButton *button);

extern
void gtk_button_set_relief (GtkButton *button,
           GtkReliefStyle relief);
extern
GtkReliefStyle gtk_button_get_relief (GtkButton *button);
extern
void gtk_button_set_label (GtkButton *button,
           const gchar *label);
extern
const gchar * gtk_button_get_label (GtkButton *button);
extern
void gtk_button_set_use_underline (GtkButton *button,
           gboolean use_underline);
extern
gboolean gtk_button_get_use_underline (GtkButton *button);
__attribute__((__deprecated__)) extern
void gtk_button_set_use_stock (GtkButton *button,
           gboolean use_stock);
__attribute__((__deprecated__)) extern
gboolean gtk_button_get_use_stock (GtkButton *button);
__attribute__((__deprecated__("Use '" "gtk_widget_set_focus_on_click" "' instead"))) extern
void gtk_button_set_focus_on_click (GtkButton *button,
           gboolean focus_on_click);
__attribute__((__deprecated__("Use '" "gtk_widget_get_focus_on_click" "' instead"))) extern
gboolean gtk_button_get_focus_on_click (GtkButton *button);
__attribute__((__deprecated__)) extern
void gtk_button_set_alignment (GtkButton *button,
           gfloat xalign,
           gfloat yalign);
__attribute__((__deprecated__)) extern
void gtk_button_get_alignment (GtkButton *button,
           gfloat *xalign,
           gfloat *yalign);
extern
void gtk_button_set_image (GtkButton *button,
                  GtkWidget *image);
extern
GtkWidget* gtk_button_get_image (GtkButton *button);
extern
void gtk_button_set_image_position (GtkButton *button,
           GtkPositionType position);
extern
GtkPositionType gtk_button_get_image_position (GtkButton *button);
extern
void gtk_button_set_always_show_image (GtkButton *button,
                                                        gboolean always_show);
extern
gboolean gtk_button_get_always_show_image (GtkButton *button);

extern
GdkWindow* gtk_button_get_event_window (GtkButton *button);
# 55 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcalendar.h" 1
# 49 "/usr/include/gtk-3.0/gtk/gtkcalendar.h"
typedef struct _GtkCalendar GtkCalendar;
typedef struct _GtkCalendarClass GtkCalendarClass;

typedef struct _GtkCalendarPrivate GtkCalendarPrivate;
# 66 "/usr/include/gtk-3.0/gtk/gtkcalendar.h"
typedef enum
{
  GTK_CALENDAR_SHOW_HEADING = 1 << 0,
  GTK_CALENDAR_SHOW_DAY_NAMES = 1 << 1,
  GTK_CALENDAR_NO_MONTH_CHANGE = 1 << 2,
  GTK_CALENDAR_SHOW_WEEK_NUMBERS = 1 << 3,
  GTK_CALENDAR_SHOW_DETAILS = 1 << 5
} GtkCalendarDisplayOptions;
# 92 "/usr/include/gtk-3.0/gtk/gtkcalendar.h"
typedef gchar* (*GtkCalendarDetailFunc) (GtkCalendar *calendar,
                                         guint year,
                                         guint month,
                                         guint day,
                                         gpointer user_data);

struct _GtkCalendar
{
  GtkWidget widget;

  GtkCalendarPrivate *priv;
};

struct _GtkCalendarClass
{
  GtkWidgetClass parent_class;


  void (* month_changed) (GtkCalendar *calendar);
  void (* day_selected) (GtkCalendar *calendar);
  void (* day_selected_double_click) (GtkCalendar *calendar);
  void (* prev_month) (GtkCalendar *calendar);
  void (* next_month) (GtkCalendar *calendar);
  void (* prev_year) (GtkCalendar *calendar);
  void (* next_year) (GtkCalendar *calendar);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_calendar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_calendar_new (void);

extern
void gtk_calendar_select_month (GtkCalendar *calendar,
      guint month,
      guint year);
extern
void gtk_calendar_select_day (GtkCalendar *calendar,
      guint day);

extern
void gtk_calendar_mark_day (GtkCalendar *calendar,
      guint day);
extern
void gtk_calendar_unmark_day (GtkCalendar *calendar,
      guint day);
extern
void gtk_calendar_clear_marks (GtkCalendar *calendar);


extern
void gtk_calendar_set_display_options (GtkCalendar *calendar,
          GtkCalendarDisplayOptions flags);
extern
GtkCalendarDisplayOptions
           gtk_calendar_get_display_options (GtkCalendar *calendar);
extern
void gtk_calendar_get_date (GtkCalendar *calendar,
      guint *year,
      guint *month,
      guint *day);

extern
void gtk_calendar_set_detail_func (GtkCalendar *calendar,
                                         GtkCalendarDetailFunc func,
                                         gpointer data,
                                         GDestroyNotify destroy);

extern
void gtk_calendar_set_detail_width_chars (GtkCalendar *calendar,
                                                gint chars);
extern
void gtk_calendar_set_detail_height_rows (GtkCalendar *calendar,
                                                gint rows);

extern
gint gtk_calendar_get_detail_width_chars (GtkCalendar *calendar);
extern
gint gtk_calendar_get_detail_height_rows (GtkCalendar *calendar);

extern
gboolean gtk_calendar_get_day_is_marked (GtkCalendar *calendar,
                                                guint day);
# 56 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkcellareabox.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkcellareabox.h"
typedef struct _GtkCellAreaBox GtkCellAreaBox;
typedef struct _GtkCellAreaBoxClass GtkCellAreaBoxClass;
typedef struct _GtkCellAreaBoxPrivate GtkCellAreaBoxPrivate;

struct _GtkCellAreaBox
{

  GtkCellArea parent_instance;

  GtkCellAreaBoxPrivate *priv;
};




struct _GtkCellAreaBoxClass
{

  GtkCellAreaClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_area_box_get_type (void) __attribute__ ((__const__));

extern
GtkCellArea *gtk_cell_area_box_new (void);
extern
void gtk_cell_area_box_pack_start (GtkCellAreaBox *box,
                                            GtkCellRenderer *renderer,
                                            gboolean expand,
                                            gboolean align,
                                            gboolean fixed);
extern
void gtk_cell_area_box_pack_end (GtkCellAreaBox *box,
                                            GtkCellRenderer *renderer,
                                            gboolean expand,
                                            gboolean align,
                                            gboolean fixed);
extern
gint gtk_cell_area_box_get_spacing (GtkCellAreaBox *box);
extern
void gtk_cell_area_box_set_spacing (GtkCellAreaBox *box,
                                            gint spacing);


gboolean _gtk_cell_area_box_group_visible (GtkCellAreaBox *box,
                                              gint group_idx);
# 58 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcellareacontext.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkcellareacontext.h"
typedef struct _GtkCellAreaContextPrivate GtkCellAreaContextPrivate;
typedef struct _GtkCellAreaContextClass GtkCellAreaContextClass;

struct _GtkCellAreaContext
{

  GObject parent_instance;

  GtkCellAreaContextPrivate *priv;
};
# 64 "/usr/include/gtk-3.0/gtk/gtkcellareacontext.h"
struct _GtkCellAreaContextClass
{

  GObjectClass parent_class;


  void (* allocate) (GtkCellAreaContext *context,
                                              gint width,
                                              gint height);
  void (* reset) (GtkCellAreaContext *context);
  void (* get_preferred_height_for_width) (GtkCellAreaContext *context,
                                              gint width,
                                              gint *minimum_height,
                                              gint *natural_height);
  void (* get_preferred_width_for_height) (GtkCellAreaContext *context,
                                              gint height,
                                              gint *minimum_width,
                                              gint *natural_width);



  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};

extern
GType gtk_cell_area_context_get_type (void) __attribute__ ((__const__));


extern
GtkCellArea *gtk_cell_area_context_get_area (GtkCellAreaContext *context);
extern
void gtk_cell_area_context_allocate (GtkCellAreaContext *context,
                                                                    gint width,
                                                                    gint height);
extern
void gtk_cell_area_context_reset (GtkCellAreaContext *context);




extern
void gtk_cell_area_context_get_preferred_width (GtkCellAreaContext *context,
                                                                   gint *minimum_width,
                                                                   gint *natural_width);
extern
void gtk_cell_area_context_get_preferred_height (GtkCellAreaContext *context,
                                                                   gint *minimum_height,
                                                                   gint *natural_height);
extern
void gtk_cell_area_context_get_preferred_height_for_width (GtkCellAreaContext *context,
                                                                   gint width,
                                                                   gint *minimum_height,
                                                                   gint *natural_height);
extern
void gtk_cell_area_context_get_preferred_width_for_height (GtkCellAreaContext *context,
                                                                   gint height,
                                                                   gint *minimum_width,
                                                                   gint *natural_width);
extern
void gtk_cell_area_context_get_allocation (GtkCellAreaContext *context,
                                                                   gint *width,
                                                                   gint *height);




extern
void gtk_cell_area_context_push_preferred_width (GtkCellAreaContext *context,
                                                          gint minimum_width,
                                                          gint natural_width);
extern
void gtk_cell_area_context_push_preferred_height (GtkCellAreaContext *context,
                                                          gint minimum_height,
                                                          gint natural_height);
# 59 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkcelllayout.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkcelllayout.h"
typedef struct _GtkCellLayout GtkCellLayout;
typedef struct _GtkCellLayoutIface GtkCellLayoutIface;
# 52 "/usr/include/gtk-3.0/gtk/gtkcelllayout.h"
typedef void (* GtkCellLayoutDataFunc) (GtkCellLayout *cell_layout,
                                        GtkCellRenderer *cell,
                                        GtkTreeModel *tree_model,
                                        GtkTreeIter *iter,
                                        gpointer data);
# 77 "/usr/include/gtk-3.0/gtk/gtkcelllayout.h"
struct _GtkCellLayoutIface
{

  GTypeInterface g_iface;




  void (* pack_start) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gboolean expand);
  void (* pack_end) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gboolean expand);
  void (* clear) (GtkCellLayout *cell_layout);
  void (* add_attribute) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               const gchar *attribute,
                               gint column);
  void (* set_cell_data_func) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               GtkCellLayoutDataFunc func,
                               gpointer func_data,
                               GDestroyNotify destroy);
  void (* clear_attributes) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell);
  void (* reorder) (GtkCellLayout *cell_layout,
                               GtkCellRenderer *cell,
                               gint position);
  GList* (* get_cells) (GtkCellLayout *cell_layout);

  GtkCellArea *(* get_area) (GtkCellLayout *cell_layout);
};

extern
GType gtk_cell_layout_get_type (void) __attribute__ ((__const__));
extern
void gtk_cell_layout_pack_start (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gboolean expand);
extern
void gtk_cell_layout_pack_end (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gboolean expand);
extern
GList *gtk_cell_layout_get_cells (GtkCellLayout *cell_layout);
extern
void gtk_cell_layout_clear (GtkCellLayout *cell_layout);
extern
void gtk_cell_layout_set_attributes (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          ...) __attribute__((__sentinel__));
extern
void gtk_cell_layout_add_attribute (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          const gchar *attribute,
                                          gint column);
extern
void gtk_cell_layout_set_cell_data_func (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          GtkCellLayoutDataFunc func,
                                          gpointer func_data,
                                          GDestroyNotify destroy);
extern
void gtk_cell_layout_clear_attributes (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell);
extern
void gtk_cell_layout_reorder (GtkCellLayout *cell_layout,
                                          GtkCellRenderer *cell,
                                          gint position);
extern
GtkCellArea *gtk_cell_layout_get_area (GtkCellLayout *cell_layout);

gboolean _gtk_cell_layout_buildable_custom_tag_start (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *tagname,
            GMarkupParser *parser,
            gpointer *data);
gboolean _gtk_cell_layout_buildable_custom_tag_end (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *tagname,
            gpointer *data);
void _gtk_cell_layout_buildable_add_child (GtkBuildable *buildable,
            GtkBuilder *builder,
            GObject *child,
            const gchar *type);
# 61 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkcellrendereraccel.h" 1
# 25 "/usr/include/gtk-3.0/gtk/gtkcellrendereraccel.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkcellrenderertext.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkcellrenderertext.h"
typedef struct _GtkCellRendererText GtkCellRendererText;
typedef struct _GtkCellRendererTextPrivate GtkCellRendererTextPrivate;
typedef struct _GtkCellRendererTextClass GtkCellRendererTextClass;

struct _GtkCellRendererText
{
  GtkCellRenderer parent;


  GtkCellRendererTextPrivate *priv;
};

struct _GtkCellRendererTextClass
{
  GtkCellRendererClass parent_class;

  void (* edited) (GtkCellRendererText *cell_renderer_text,
     const gchar *path,
     const gchar *new_text);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_text_get_type (void) __attribute__ ((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_text_new (void);

extern
void gtk_cell_renderer_text_set_fixed_height_from_font (GtkCellRendererText *renderer,
            gint number_of_rows);
# 26 "/usr/include/gtk-3.0/gtk/gtkcellrendereraccel.h" 2
# 36 "/usr/include/gtk-3.0/gtk/gtkcellrendereraccel.h"
typedef struct _GtkCellRendererAccel GtkCellRendererAccel;
typedef struct _GtkCellRendererAccelPrivate GtkCellRendererAccelPrivate;
typedef struct _GtkCellRendererAccelClass GtkCellRendererAccelClass;
# 50 "/usr/include/gtk-3.0/gtk/gtkcellrendereraccel.h"
typedef enum
{
  GTK_CELL_RENDERER_ACCEL_MODE_GTK,
  GTK_CELL_RENDERER_ACCEL_MODE_OTHER
} GtkCellRendererAccelMode;


struct _GtkCellRendererAccel
{
  GtkCellRendererText parent;


  GtkCellRendererAccelPrivate *priv;
};

struct _GtkCellRendererAccelClass
{
  GtkCellRendererTextClass parent_class;

  void (* accel_edited) (GtkCellRendererAccel *accel,
      const gchar *path_string,
     guint accel_key,
     GdkModifierType accel_mods,
     guint hardware_keycode);

  void (* accel_cleared) (GtkCellRendererAccel *accel,
     const gchar *path_string);


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_accel_get_type (void) __attribute__ ((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_accel_new (void);
# 63 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcellrenderercombo.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkcellrenderercombo.h"
typedef struct _GtkCellRendererCombo GtkCellRendererCombo;
typedef struct _GtkCellRendererComboPrivate GtkCellRendererComboPrivate;
typedef struct _GtkCellRendererComboClass GtkCellRendererComboClass;

struct _GtkCellRendererCombo
{
  GtkCellRendererText parent;


  GtkCellRendererComboPrivate *priv;
};

struct _GtkCellRendererComboClass
{
  GtkCellRendererTextClass parent;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_combo_get_type (void) __attribute__ ((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_combo_new (void);
# 64 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcellrendererpixbuf.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkcellrendererpixbuf.h"
typedef struct _GtkCellRendererPixbuf GtkCellRendererPixbuf;
typedef struct _GtkCellRendererPixbufPrivate GtkCellRendererPixbufPrivate;
typedef struct _GtkCellRendererPixbufClass GtkCellRendererPixbufClass;

struct _GtkCellRendererPixbuf
{
  GtkCellRenderer parent;


  GtkCellRendererPixbufPrivate *priv;
};

struct _GtkCellRendererPixbufClass
{
  GtkCellRendererClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_pixbuf_get_type (void) __attribute__ ((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_pixbuf_new (void);
# 65 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcellrendererprogress.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkcellrendererprogress.h"
typedef struct _GtkCellRendererProgress GtkCellRendererProgress;
typedef struct _GtkCellRendererProgressClass GtkCellRendererProgressClass;
typedef struct _GtkCellRendererProgressPrivate GtkCellRendererProgressPrivate;

struct _GtkCellRendererProgress
{
  GtkCellRenderer parent_instance;


  GtkCellRendererProgressPrivate *priv;
};

struct _GtkCellRendererProgressClass
{
  GtkCellRendererClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_progress_get_type (void) __attribute__ ((__const__));
extern
GtkCellRenderer* gtk_cell_renderer_progress_new (void);
# 66 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcellrendererspin.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkcellrendererspin.h"
typedef struct _GtkCellRendererSpin GtkCellRendererSpin;
typedef struct _GtkCellRendererSpinClass GtkCellRendererSpinClass;
typedef struct _GtkCellRendererSpinPrivate GtkCellRendererSpinPrivate;

struct _GtkCellRendererSpin
{
  GtkCellRendererText parent;


  GtkCellRendererSpinPrivate *priv;
};

struct _GtkCellRendererSpinClass
{
  GtkCellRendererTextClass parent;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_spin_get_type (void);
extern
GtkCellRenderer *gtk_cell_renderer_spin_new (void);
# 67 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcellrendererspinner.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkcellrendererspinner.h"
typedef struct _GtkCellRendererSpinner GtkCellRendererSpinner;
typedef struct _GtkCellRendererSpinnerClass GtkCellRendererSpinnerClass;
typedef struct _GtkCellRendererSpinnerPrivate GtkCellRendererSpinnerPrivate;

struct _GtkCellRendererSpinner
{
  GtkCellRenderer parent;


  GtkCellRendererSpinnerPrivate *priv;
};

struct _GtkCellRendererSpinnerClass
{
  GtkCellRendererClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_spinner_get_type (void) __attribute__ ((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_spinner_new (void);
# 68 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkcellrenderertoggle.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkcellrenderertoggle.h"
typedef struct _GtkCellRendererToggle GtkCellRendererToggle;
typedef struct _GtkCellRendererTogglePrivate GtkCellRendererTogglePrivate;
typedef struct _GtkCellRendererToggleClass GtkCellRendererToggleClass;

struct _GtkCellRendererToggle
{
  GtkCellRenderer parent;


  GtkCellRendererTogglePrivate *priv;
};

struct _GtkCellRendererToggleClass
{
  GtkCellRendererClass parent_class;

  void (* toggled) (GtkCellRendererToggle *cell_renderer_toggle,
      const gchar *path);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_renderer_toggle_get_type (void) __attribute__ ((__const__));
extern
GtkCellRenderer *gtk_cell_renderer_toggle_new (void);

extern
gboolean gtk_cell_renderer_toggle_get_radio (GtkCellRendererToggle *toggle);
extern
void gtk_cell_renderer_toggle_set_radio (GtkCellRendererToggle *toggle,
                                                          gboolean radio);

extern
gboolean gtk_cell_renderer_toggle_get_active (GtkCellRendererToggle *toggle);
extern
void gtk_cell_renderer_toggle_set_active (GtkCellRendererToggle *toggle,
                                                          gboolean setting);

extern
gboolean gtk_cell_renderer_toggle_get_activatable (GtkCellRendererToggle *toggle);
extern
void gtk_cell_renderer_toggle_set_activatable (GtkCellRendererToggle *toggle,
                                                          gboolean setting);
# 70 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcellview.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkcellview.h"
typedef struct _GtkCellView GtkCellView;
typedef struct _GtkCellViewClass GtkCellViewClass;
typedef struct _GtkCellViewPrivate GtkCellViewPrivate;

struct _GtkCellView
{
  GtkWidget parent_instance;


  GtkCellViewPrivate *priv;
};





struct _GtkCellViewClass
{
  GtkWidgetClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_cell_view_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_cell_view_new (void);
extern
GtkWidget *gtk_cell_view_new_with_context (GtkCellArea *area,
                                                         GtkCellAreaContext *context);
extern
GtkWidget *gtk_cell_view_new_with_text (const gchar *text);
extern
GtkWidget *gtk_cell_view_new_with_markup (const gchar *markup);
extern
GtkWidget *gtk_cell_view_new_with_pixbuf (GdkPixbuf *pixbuf);
extern
void gtk_cell_view_set_model (GtkCellView *cell_view,
                                                         GtkTreeModel *model);
extern
GtkTreeModel *gtk_cell_view_get_model (GtkCellView *cell_view);
extern
void gtk_cell_view_set_displayed_row (GtkCellView *cell_view,
                                                         GtkTreePath *path);
extern
GtkTreePath *gtk_cell_view_get_displayed_row (GtkCellView *cell_view);
extern
void gtk_cell_view_set_background_rgba (GtkCellView *cell_view,
                                                         const GdkRGBA *rgba);
extern
gboolean gtk_cell_view_get_draw_sensitive (GtkCellView *cell_view);
extern
void gtk_cell_view_set_draw_sensitive (GtkCellView *cell_view,
                                                         gboolean draw_sensitive);
extern
gboolean gtk_cell_view_get_fit_model (GtkCellView *cell_view);
extern
void gtk_cell_view_set_fit_model (GtkCellView *cell_view,
                                                         gboolean fit_model);

__attribute__((__deprecated__("Use '" "gtk_widget_get_preferred_size" "' instead"))) extern
gboolean gtk_cell_view_get_size_of_row (GtkCellView *cell_view,
                                                         GtkTreePath *path,
                                                         GtkRequisition *requisition);
__attribute__((__deprecated__("Use '" "gtk_cell_view_set_background_rgba" "' instead"))) extern
void gtk_cell_view_set_background_color (GtkCellView *cell_view,
                                                         const GdkColor *color);
# 71 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcheckbutton.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkcheckbutton.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktogglebutton.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtktogglebutton.h"
typedef struct _GtkToggleButton GtkToggleButton;
typedef struct _GtkToggleButtonPrivate GtkToggleButtonPrivate;
typedef struct _GtkToggleButtonClass GtkToggleButtonClass;

struct _GtkToggleButton
{

  GtkButton button;

  GtkToggleButtonPrivate *priv;
};

struct _GtkToggleButtonClass
{
  GtkButtonClass parent_class;

  void (* toggled) (GtkToggleButton *toggle_button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_toggle_button_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_toggle_button_new (void);
extern
GtkWidget* gtk_toggle_button_new_with_label (const gchar *label);
extern
GtkWidget* gtk_toggle_button_new_with_mnemonic (const gchar *label);
extern
void gtk_toggle_button_set_mode (GtkToggleButton *toggle_button,
                                                gboolean draw_indicator);
extern
gboolean gtk_toggle_button_get_mode (GtkToggleButton *toggle_button);
extern
void gtk_toggle_button_set_active (GtkToggleButton *toggle_button,
                                                gboolean is_active);
extern
gboolean gtk_toggle_button_get_active (GtkToggleButton *toggle_button);
extern
void gtk_toggle_button_toggled (GtkToggleButton *toggle_button);
extern
void gtk_toggle_button_set_inconsistent (GtkToggleButton *toggle_button,
                                                gboolean setting);
extern
gboolean gtk_toggle_button_get_inconsistent (GtkToggleButton *toggle_button);
# 34 "/usr/include/gtk-3.0/gtk/gtkcheckbutton.h" 2
# 46 "/usr/include/gtk-3.0/gtk/gtkcheckbutton.h"
typedef struct _GtkCheckButton GtkCheckButton;
typedef struct _GtkCheckButtonClass GtkCheckButtonClass;

struct _GtkCheckButton
{
  GtkToggleButton toggle_button;
};

struct _GtkCheckButtonClass
{
  GtkToggleButtonClass parent_class;

  void (* draw_indicator) (GtkCheckButton *check_button,
      cairo_t *cr);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_check_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_check_button_new (void);
extern
GtkWidget* gtk_check_button_new_with_label (const gchar *label);
extern
GtkWidget* gtk_check_button_new_with_mnemonic (const gchar *label);

void _gtk_check_button_get_props (GtkCheckButton *check_button,
      gint *indicator_size,
      gint *indicator_spacing);
# 72 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcheckmenuitem.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkcheckmenuitem.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkmenuitem.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkmenuitem.h"
typedef struct _GtkMenuItem GtkMenuItem;
typedef struct _GtkMenuItemClass GtkMenuItemClass;
typedef struct _GtkMenuItemPrivate GtkMenuItemPrivate;

struct _GtkMenuItem
{
  GtkBin bin;


  GtkMenuItemPrivate *priv;
};
# 73 "/usr/include/gtk-3.0/gtk/gtkmenuitem.h"
struct _GtkMenuItemClass
{
  GtkBinClass parent_class;
# 85 "/usr/include/gtk-3.0/gtk/gtkmenuitem.h"
  guint hide_on_activate : 1;

  void (* activate) (GtkMenuItem *menu_item);
  void (* activate_item) (GtkMenuItem *menu_item);
  void (* toggle_size_request) (GtkMenuItem *menu_item,
                                 gint *requisition);
  void (* toggle_size_allocate) (GtkMenuItem *menu_item,
                                 gint allocation);
  void (* set_label) (GtkMenuItem *menu_item,
                                 const gchar *label);
  const gchar * (* get_label) (GtkMenuItem *menu_item);

  void (* select) (GtkMenuItem *menu_item);
  void (* deselect) (GtkMenuItem *menu_item);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_menu_item_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_menu_item_new (void);
extern
GtkWidget* gtk_menu_item_new_with_label (const gchar *label);
extern
GtkWidget* gtk_menu_item_new_with_mnemonic (const gchar *label);
extern
void gtk_menu_item_set_submenu (GtkMenuItem *menu_item,
                                               GtkWidget *submenu);
extern
GtkWidget* gtk_menu_item_get_submenu (GtkMenuItem *menu_item);
extern
void gtk_menu_item_select (GtkMenuItem *menu_item);
extern
void gtk_menu_item_deselect (GtkMenuItem *menu_item);
extern
void gtk_menu_item_activate (GtkMenuItem *menu_item);
extern
void gtk_menu_item_toggle_size_request (GtkMenuItem *menu_item,
                                               gint *requisition);
extern
void gtk_menu_item_toggle_size_allocate (GtkMenuItem *menu_item,
                                               gint allocation);
__attribute__((__deprecated__)) extern
void gtk_menu_item_set_right_justified (GtkMenuItem *menu_item,
                                               gboolean right_justified);
__attribute__((__deprecated__)) extern
gboolean gtk_menu_item_get_right_justified (GtkMenuItem *menu_item);
extern
void gtk_menu_item_set_accel_path (GtkMenuItem *menu_item,
                                               const gchar *accel_path);
extern
const gchar * gtk_menu_item_get_accel_path (GtkMenuItem *menu_item);

extern
void gtk_menu_item_set_label (GtkMenuItem *menu_item,
                                               const gchar *label);
extern
const gchar * gtk_menu_item_get_label (GtkMenuItem *menu_item);

extern
void gtk_menu_item_set_use_underline (GtkMenuItem *menu_item,
                                               gboolean setting);
extern
gboolean gtk_menu_item_get_use_underline (GtkMenuItem *menu_item);

extern
void gtk_menu_item_set_reserve_indicator (GtkMenuItem *menu_item,
                                                gboolean reserve);
extern
gboolean gtk_menu_item_get_reserve_indicator (GtkMenuItem *menu_item);
# 34 "/usr/include/gtk-3.0/gtk/gtkcheckmenuitem.h" 2
# 46 "/usr/include/gtk-3.0/gtk/gtkcheckmenuitem.h"
typedef struct _GtkCheckMenuItem GtkCheckMenuItem;
typedef struct _GtkCheckMenuItemPrivate GtkCheckMenuItemPrivate;
typedef struct _GtkCheckMenuItemClass GtkCheckMenuItemClass;

struct _GtkCheckMenuItem
{
  GtkMenuItem menu_item;


  GtkCheckMenuItemPrivate *priv;
};







struct _GtkCheckMenuItemClass
{
  GtkMenuItemClass parent_class;



  void (* toggled) (GtkCheckMenuItem *check_menu_item);
  void (* draw_indicator) (GtkCheckMenuItem *check_menu_item,
      cairo_t *cr);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_check_menu_item_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_check_menu_item_new (void);
extern
GtkWidget* gtk_check_menu_item_new_with_label (const gchar *label);
extern
GtkWidget* gtk_check_menu_item_new_with_mnemonic (const gchar *label);
extern
void gtk_check_menu_item_set_active (GtkCheckMenuItem *check_menu_item,
        gboolean is_active);
extern
gboolean gtk_check_menu_item_get_active (GtkCheckMenuItem *check_menu_item);
extern
void gtk_check_menu_item_toggled (GtkCheckMenuItem *check_menu_item);
extern
void gtk_check_menu_item_set_inconsistent (GtkCheckMenuItem *check_menu_item,
        gboolean setting);
extern
gboolean gtk_check_menu_item_get_inconsistent (GtkCheckMenuItem *check_menu_item);
extern
void gtk_check_menu_item_set_draw_as_radio (GtkCheckMenuItem *check_menu_item,
        gboolean draw_as_radio);
extern
gboolean gtk_check_menu_item_get_draw_as_radio (GtkCheckMenuItem *check_menu_item);
# 73 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkclipboard.h" 1
# 47 "/usr/include/gtk-3.0/gtk/gtkclipboard.h"
typedef void (* GtkClipboardReceivedFunc) (GtkClipboard *clipboard,
                GtkSelectionData *selection_data,
                gpointer data);
# 62 "/usr/include/gtk-3.0/gtk/gtkclipboard.h"
typedef void (* GtkClipboardTextReceivedFunc) (GtkClipboard *clipboard,
                const gchar *text,
                gpointer data);
# 82 "/usr/include/gtk-3.0/gtk/gtkclipboard.h"
typedef void (* GtkClipboardRichTextReceivedFunc) (GtkClipboard *clipboard,
                                                   GdkAtom format,
                const guint8 *text,
                                                   gsize length,
                gpointer data);
# 100 "/usr/include/gtk-3.0/gtk/gtkclipboard.h"
typedef void (* GtkClipboardImageReceivedFunc) (GtkClipboard *clipboard,
         GdkPixbuf *pixbuf,
         gpointer data);
# 117 "/usr/include/gtk-3.0/gtk/gtkclipboard.h"
typedef void (* GtkClipboardURIReceivedFunc) (GtkClipboard *clipboard,
         gchar **uris,
         gpointer data);
# 135 "/usr/include/gtk-3.0/gtk/gtkclipboard.h"
typedef void (* GtkClipboardTargetsReceivedFunc) (GtkClipboard *clipboard,
                GdkAtom *atoms,
         gint n_atoms,
                gpointer data);
# 165 "/usr/include/gtk-3.0/gtk/gtkclipboard.h"
typedef void (* GtkClipboardGetFunc) (GtkClipboard *clipboard,
            GtkSelectionData *selection_data,
            guint info,
            gpointer user_data_or_owner);
# 180 "/usr/include/gtk-3.0/gtk/gtkclipboard.h"
typedef void (* GtkClipboardClearFunc) (GtkClipboard *clipboard,
            gpointer user_data_or_owner);

extern
GType gtk_clipboard_get_type (void) __attribute__ ((__const__));

extern
GtkClipboard *gtk_clipboard_get_for_display (GdkDisplay *display,
          GdkAtom selection);
extern
GtkClipboard *gtk_clipboard_get (GdkAtom selection);

extern
GtkClipboard *gtk_clipboard_get_default (GdkDisplay *display);

extern
GdkDisplay *gtk_clipboard_get_display (GtkClipboard *clipboard);


extern
gboolean gtk_clipboard_set_with_data (GtkClipboard *clipboard,
           const GtkTargetEntry *targets,
           guint n_targets,
           GtkClipboardGetFunc get_func,
           GtkClipboardClearFunc clear_func,
           gpointer user_data);
extern
gboolean gtk_clipboard_set_with_owner (GtkClipboard *clipboard,
           const GtkTargetEntry *targets,
           guint n_targets,
           GtkClipboardGetFunc get_func,
           GtkClipboardClearFunc clear_func,
           GObject *owner);
extern
GObject *gtk_clipboard_get_owner (GtkClipboard *clipboard);
extern
void gtk_clipboard_clear (GtkClipboard *clipboard);
extern
void gtk_clipboard_set_text (GtkClipboard *clipboard,
           const gchar *text,
           gint len);
extern
void gtk_clipboard_set_image (GtkClipboard *clipboard,
           GdkPixbuf *pixbuf);

extern
void gtk_clipboard_request_contents (GtkClipboard *clipboard,
                                      GdkAtom target,
                                      GtkClipboardReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_text (GtkClipboard *clipboard,
                                      GtkClipboardTextReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_rich_text (GtkClipboard *clipboard,
                                      GtkTextBuffer *buffer,
                                      GtkClipboardRichTextReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_image (GtkClipboard *clipboard,
                                      GtkClipboardImageReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_uris (GtkClipboard *clipboard,
                                      GtkClipboardURIReceivedFunc callback,
                                      gpointer user_data);
extern
void gtk_clipboard_request_targets (GtkClipboard *clipboard,
                                      GtkClipboardTargetsReceivedFunc callback,
                                      gpointer user_data);

extern
GtkSelectionData *gtk_clipboard_wait_for_contents (GtkClipboard *clipboard,
                                                    GdkAtom target);
extern
gchar * gtk_clipboard_wait_for_text (GtkClipboard *clipboard);
extern
guint8 * gtk_clipboard_wait_for_rich_text (GtkClipboard *clipboard,
                                                    GtkTextBuffer *buffer,
                                                    GdkAtom *format,
                                                    gsize *length);
extern
GdkPixbuf * gtk_clipboard_wait_for_image (GtkClipboard *clipboard);
extern
gchar ** gtk_clipboard_wait_for_uris (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_wait_for_targets (GtkClipboard *clipboard,
                                                    GdkAtom **targets,
                                                    gint *n_targets);

extern
gboolean gtk_clipboard_wait_is_text_available (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_wait_is_rich_text_available (GtkClipboard *clipboard,
                                                    GtkTextBuffer *buffer);
extern
gboolean gtk_clipboard_wait_is_image_available (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_wait_is_uris_available (GtkClipboard *clipboard);
extern
gboolean gtk_clipboard_wait_is_target_available (GtkClipboard *clipboard,
                                                    GdkAtom target);


extern
void gtk_clipboard_set_can_store (GtkClipboard *clipboard,
      const GtkTargetEntry *targets,
      gint n_targets);

extern
void gtk_clipboard_store (GtkClipboard *clipboard);

extern
GdkAtom gtk_clipboard_get_selection (GtkClipboard *clipboard);
# 74 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcolorbutton.h" 1
# 50 "/usr/include/gtk-3.0/gtk/gtkcolorbutton.h"
typedef struct _GtkColorButton GtkColorButton;
typedef struct _GtkColorButtonClass GtkColorButtonClass;
typedef struct _GtkColorButtonPrivate GtkColorButtonPrivate;

struct _GtkColorButton {
  GtkButton button;


  GtkColorButtonPrivate *priv;
};

struct _GtkColorButtonClass {
  GtkButtonClass parent_class;

  void (* color_set) (GtkColorButton *cp);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_color_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_color_button_new (void);
extern
GtkWidget * gtk_color_button_new_with_rgba (const GdkRGBA *rgba);
extern
void gtk_color_button_set_title (GtkColorButton *button,
                                             const gchar *title);
extern
const gchar *gtk_color_button_get_title (GtkColorButton *button);

__attribute__((__deprecated__("Use '" "gtk_color_button_new_with_rgba" "' instead"))) extern
GtkWidget *gtk_color_button_new_with_color (const GdkColor *color);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_set_rgba" "' instead"))) extern
void gtk_color_button_set_color (GtkColorButton *button,
                                            const GdkColor *color);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_get_rgba" "' instead"))) extern
void gtk_color_button_get_color (GtkColorButton *button,
                                            GdkColor *color);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_set_rgba" "' instead"))) extern
void gtk_color_button_set_alpha (GtkColorButton *button,
                                            guint16 alpha);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_get_rgba" "' instead"))) extern
guint16 gtk_color_button_get_alpha (GtkColorButton *button);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_set_use_alpha" "' instead"))) extern
void gtk_color_button_set_use_alpha (GtkColorButton *button,
                                             gboolean use_alpha);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_get_use_alpha" "' instead"))) extern
gboolean gtk_color_button_get_use_alpha (GtkColorButton *button);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_set_rgba" "' instead"))) extern
void gtk_color_button_set_rgba (GtkColorButton *button,
                                             const GdkRGBA *rgba);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_get_rgba" "' instead"))) extern
void gtk_color_button_get_rgba (GtkColorButton *button,
                                             GdkRGBA *rgba);
# 75 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcolorchooser.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtkcolorchooser.h"
typedef struct _GtkColorChooser GtkColorChooser;
typedef struct _GtkColorChooserInterface GtkColorChooserInterface;

struct _GtkColorChooserInterface
{
  GTypeInterface base_interface;


  void (* get_rgba) (GtkColorChooser *chooser,
                        GdkRGBA *color);
  void (* set_rgba) (GtkColorChooser *chooser,
                        const GdkRGBA *color);

  void (* add_palette) (GtkColorChooser *chooser,
                        GtkOrientation orientation,
                        gint colors_per_line,
                        gint n_colors,
                        GdkRGBA *colors);


  void (* color_activated) (GtkColorChooser *chooser,
                            const GdkRGBA *color);


  gpointer padding[12];
};

extern
GType gtk_color_chooser_get_type (void) __attribute__ ((__const__));

extern
void gtk_color_chooser_get_rgba (GtkColorChooser *chooser,
                                           GdkRGBA *color);
extern
void gtk_color_chooser_set_rgba (GtkColorChooser *chooser,
                                           const GdkRGBA *color);
extern
gboolean gtk_color_chooser_get_use_alpha (GtkColorChooser *chooser);

extern
void gtk_color_chooser_set_use_alpha (GtkColorChooser *chooser,
                                           gboolean use_alpha);

extern
void gtk_color_chooser_add_palette (GtkColorChooser *chooser,
                                           GtkOrientation orientation,
                                           gint colors_per_line,
                                           gint n_colors,
                                           GdkRGBA *colors);
# 76 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcolorchooserdialog.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkcolorchooserdialog.h"
typedef struct _GtkColorChooserDialog GtkColorChooserDialog;
typedef struct _GtkColorChooserDialogPrivate GtkColorChooserDialogPrivate;
typedef struct _GtkColorChooserDialogClass GtkColorChooserDialogClass;

struct _GtkColorChooserDialog
{
  GtkDialog parent_instance;


  GtkColorChooserDialogPrivate *priv;
};

struct _GtkColorChooserDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_color_chooser_dialog_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_color_chooser_dialog_new (const gchar *title,
                                               GtkWindow *parent);
# 77 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcolorchooserwidget.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkcolorchooserwidget.h"
typedef struct _GtkColorChooserWidget GtkColorChooserWidget;
typedef struct _GtkColorChooserWidgetPrivate GtkColorChooserWidgetPrivate;
typedef struct _GtkColorChooserWidgetClass GtkColorChooserWidgetClass;

struct _GtkColorChooserWidget
{
  GtkBox parent_instance;


  GtkColorChooserWidgetPrivate *priv;
};





struct _GtkColorChooserWidgetClass
{
  GtkBoxClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_color_chooser_widget_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_color_chooser_widget_new (void);
# 78 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkcolorutils.h" 1
# 42 "/usr/include/gtk-3.0/gtk/gtkcolorutils.h"
extern
void gtk_hsv_to_rgb (gdouble h, gdouble s, gdouble v,
                     gdouble *r, gdouble *g, gdouble *b);
extern
void gtk_rgb_to_hsv (gdouble r, gdouble g, gdouble b,
                     gdouble *h, gdouble *s, gdouble *v);
# 79 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkcomboboxtext.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkcomboboxtext.h"
typedef struct _GtkComboBoxText GtkComboBoxText;
typedef struct _GtkComboBoxTextPrivate GtkComboBoxTextPrivate;
typedef struct _GtkComboBoxTextClass GtkComboBoxTextClass;

struct _GtkComboBoxText
{

  GtkComboBox parent_instance;

  GtkComboBoxTextPrivate *priv;
};

struct _GtkComboBoxTextClass
{
  GtkComboBoxClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_combo_box_text_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_combo_box_text_new (void);
extern
GtkWidget* gtk_combo_box_text_new_with_entry (void);
extern
void gtk_combo_box_text_append_text (GtkComboBoxText *combo_box,
                                                  const gchar *text);
extern
void gtk_combo_box_text_insert_text (GtkComboBoxText *combo_box,
                                                  gint position,
                                                  const gchar *text);
extern
void gtk_combo_box_text_prepend_text (GtkComboBoxText *combo_box,
                                                  const gchar *text);
extern
void gtk_combo_box_text_remove (GtkComboBoxText *combo_box,
                                                  gint position);
extern
void gtk_combo_box_text_remove_all (GtkComboBoxText *combo_box);
extern
gchar *gtk_combo_box_text_get_active_text (GtkComboBoxText *combo_box);

extern
void gtk_combo_box_text_insert (GtkComboBoxText *combo_box,
                                                  gint position,
                                                  const gchar *id,
                                                  const gchar *text);
extern
void gtk_combo_box_text_append (GtkComboBoxText *combo_box,
                                                  const gchar *id,
                                                  const gchar *text);
extern
void gtk_combo_box_text_prepend (GtkComboBoxText *combo_box,
                                                  const gchar *id,
                                                  const gchar *text);
# 81 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkcssprovider.h" 1
# 22 "/usr/include/gtk-3.0/gtk/gtkcssprovider.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkcsssection.h" 1
# 56 "/usr/include/gtk-3.0/gtk/gtkcsssection.h"
typedef enum
{
  GTK_CSS_SECTION_DOCUMENT,
  GTK_CSS_SECTION_IMPORT,
  GTK_CSS_SECTION_COLOR_DEFINITION,
  GTK_CSS_SECTION_BINDING_SET,
  GTK_CSS_SECTION_RULESET,
  GTK_CSS_SECTION_SELECTOR,
  GTK_CSS_SECTION_DECLARATION,
  GTK_CSS_SECTION_VALUE,
  GTK_CSS_SECTION_KEYFRAMES
} GtkCssSectionType;
# 78 "/usr/include/gtk-3.0/gtk/gtkcsssection.h"
typedef struct _GtkCssSection GtkCssSection;

extern
GType gtk_css_section_get_type (void) __attribute__ ((__const__));

extern
GtkCssSection * gtk_css_section_ref (GtkCssSection *section);
extern
void gtk_css_section_unref (GtkCssSection *section);

extern
GtkCssSectionType gtk_css_section_get_section_type (const GtkCssSection *section);
extern
GtkCssSection * gtk_css_section_get_parent (const GtkCssSection *section);
extern
GFile * gtk_css_section_get_file (const GtkCssSection *section);
extern
guint gtk_css_section_get_start_line (const GtkCssSection *section);
extern
guint gtk_css_section_get_start_position (const GtkCssSection *section);
extern
guint gtk_css_section_get_end_line (const GtkCssSection *section);
extern
guint gtk_css_section_get_end_position (const GtkCssSection *section);
# 23 "/usr/include/gtk-3.0/gtk/gtkcssprovider.h" 2
# 51 "/usr/include/gtk-3.0/gtk/gtkcssprovider.h"
typedef enum
{
  GTK_CSS_PROVIDER_ERROR_FAILED,
  GTK_CSS_PROVIDER_ERROR_SYNTAX,
  GTK_CSS_PROVIDER_ERROR_IMPORT,
  GTK_CSS_PROVIDER_ERROR_NAME,
  GTK_CSS_PROVIDER_ERROR_DEPRECATED,
  GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE
} GtkCssProviderError;

extern
GQuark gtk_css_provider_error_quark (void);

typedef struct _GtkCssProvider GtkCssProvider;
typedef struct _GtkCssProviderClass GtkCssProviderClass;
typedef struct _GtkCssProviderPrivate GtkCssProviderPrivate;

struct _GtkCssProvider
{
  GObject parent_instance;
  GtkCssProviderPrivate *priv;
};

struct _GtkCssProviderClass
{
  GObjectClass parent_class;

  void (* parsing_error) (GtkCssProvider *provider,
                                                 GtkCssSection *section,
                                                 const GError * error);


  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_css_provider_get_type (void) __attribute__ ((__const__));

extern
GtkCssProvider * gtk_css_provider_new (void);

extern
char * gtk_css_provider_to_string (GtkCssProvider *provider);

extern
gboolean gtk_css_provider_load_from_data (GtkCssProvider *css_provider,
                                                  const gchar *data,
                                                  gssize length,
                                                  GError **error);
extern
gboolean gtk_css_provider_load_from_file (GtkCssProvider *css_provider,
                                                  GFile *file,
                                                  GError **error);
extern
gboolean gtk_css_provider_load_from_path (GtkCssProvider *css_provider,
                                                  const gchar *path,
                                                  GError **error);

extern
void gtk_css_provider_load_from_resource (GtkCssProvider *css_provider,
                                                      const gchar *resource_path);

__attribute__((__deprecated__("Use '" "gtk_css_provider_new" "' instead"))) extern
GtkCssProvider * gtk_css_provider_get_default (void);

extern
GtkCssProvider * gtk_css_provider_get_named (const gchar *name,
                                             const gchar *variant);
# 83 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkdebug.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkdebug.h"
typedef enum {
  GTK_DEBUG_MISC = 1 << 0,
  GTK_DEBUG_PLUGSOCKET = 1 << 1,
  GTK_DEBUG_TEXT = 1 << 2,
  GTK_DEBUG_TREE = 1 << 3,
  GTK_DEBUG_UPDATES = 1 << 4,
  GTK_DEBUG_KEYBINDINGS = 1 << 5,
  GTK_DEBUG_MULTIHEAD = 1 << 6,
  GTK_DEBUG_MODULES = 1 << 7,
  GTK_DEBUG_GEOMETRY = 1 << 8,
  GTK_DEBUG_ICONTHEME = 1 << 9,
  GTK_DEBUG_PRINTING = 1 << 10,
  GTK_DEBUG_BUILDER = 1 << 11,
  GTK_DEBUG_SIZE_REQUEST = 1 << 12,
  GTK_DEBUG_NO_CSS_CACHE = 1 << 13,
  GTK_DEBUG_BASELINES = 1 << 14,
  GTK_DEBUG_PIXEL_CACHE = 1 << 15,
  GTK_DEBUG_NO_PIXEL_CACHE = 1 << 16,
  GTK_DEBUG_INTERACTIVE = 1 << 17,
  GTK_DEBUG_TOUCHSCREEN = 1 << 18,
  GTK_DEBUG_ACTIONS = 1 << 19,
  GTK_DEBUG_RESIZE = 1 << 20,
  GTK_DEBUG_LAYOUT = 1 << 21
} GtkDebugFlag;
# 77 "/usr/include/gtk-3.0/gtk/gtkdebug.h"
extern
guint gtk_get_debug_flags (void);
extern
void gtk_set_debug_flags (guint flags);
# 85 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtkdragdest.h" 1
# 62 "/usr/include/gtk-3.0/gtk/gtkdragdest.h"
typedef enum {
  GTK_DEST_DEFAULT_MOTION = 1 << 0,
  GTK_DEST_DEFAULT_HIGHLIGHT = 1 << 1,
  GTK_DEST_DEFAULT_DROP = 1 << 2,
  GTK_DEST_DEFAULT_ALL = 0x07
} GtkDestDefaults;

extern
void gtk_drag_dest_set (GtkWidget *widget,
                          GtkDestDefaults flags,
                          const GtkTargetEntry *targets,
                          gint n_targets,
                          GdkDragAction actions);

__attribute__((__deprecated__)) extern
void gtk_drag_dest_set_proxy (GtkWidget *widget,
                              GdkWindow *proxy_window,
                              GdkDragProtocol protocol,
                              gboolean use_coordinates);

extern
void gtk_drag_dest_unset (GtkWidget *widget);

extern
GdkAtom gtk_drag_dest_find_target (GtkWidget *widget,
                                              GdkDragContext *context,
                                              GtkTargetList *target_list);
extern
GtkTargetList* gtk_drag_dest_get_target_list (GtkWidget *widget);
extern
void gtk_drag_dest_set_target_list (GtkWidget *widget,
                                              GtkTargetList *target_list);
extern
void gtk_drag_dest_add_text_targets (GtkWidget *widget);
extern
void gtk_drag_dest_add_image_targets (GtkWidget *widget);
extern
void gtk_drag_dest_add_uri_targets (GtkWidget *widget);

extern
void gtk_drag_dest_set_track_motion (GtkWidget *widget,
                                                gboolean track_motion);
extern
gboolean gtk_drag_dest_get_track_motion (GtkWidget *widget);
# 88 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkdragsource.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkdragsource.h"
extern
void gtk_drag_source_set (GtkWidget *widget,
      GdkModifierType start_button_mask,
      const GtkTargetEntry *targets,
      gint n_targets,
      GdkDragAction actions);

extern
void gtk_drag_source_unset (GtkWidget *widget);

extern
GtkTargetList* gtk_drag_source_get_target_list (GtkWidget *widget);
extern
void gtk_drag_source_set_target_list (GtkWidget *widget,
                                                GtkTargetList *target_list);
extern
void gtk_drag_source_add_text_targets (GtkWidget *widget);
extern
void gtk_drag_source_add_image_targets (GtkWidget *widget);
extern
void gtk_drag_source_add_uri_targets (GtkWidget *widget);

extern
void gtk_drag_source_set_icon_pixbuf (GtkWidget *widget,
           GdkPixbuf *pixbuf);
__attribute__((__deprecated__("Use '" "gtk_drag_source_set_icon_name" "' instead"))) extern
void gtk_drag_source_set_icon_stock (GtkWidget *widget,
           const gchar *stock_id);
extern
void gtk_drag_source_set_icon_name (GtkWidget *widget,
           const gchar *icon_name);
extern
void gtk_drag_source_set_icon_gicon (GtkWidget *widget,
           GIcon *icon);
# 89 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkdrawingarea.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkdrawingarea.h"
typedef struct _GtkDrawingArea GtkDrawingArea;
typedef struct _GtkDrawingAreaClass GtkDrawingAreaClass;

struct _GtkDrawingArea
{
  GtkWidget widget;


  gpointer dummy;
};

struct _GtkDrawingAreaClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_drawing_area_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_drawing_area_new (void);
# 90 "/usr/include/gtk-3.0/gtk/gtk.h" 2





# 1 "/usr/include/gtk-3.0/gtk/gtkeventbox.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkeventbox.h"
typedef struct _GtkEventBox GtkEventBox;
typedef struct _GtkEventBoxClass GtkEventBoxClass;
typedef struct _GtkEventBoxPrivate GtkEventBoxPrivate;

struct _GtkEventBox
{
  GtkBin bin;


  GtkEventBoxPrivate *priv;
};





struct _GtkEventBoxClass
{
  GtkBinClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_event_box_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_event_box_new (void);
extern
gboolean gtk_event_box_get_visible_window (GtkEventBox *event_box);
extern
void gtk_event_box_set_visible_window (GtkEventBox *event_box,
                                             gboolean visible_window);
extern
gboolean gtk_event_box_get_above_child (GtkEventBox *event_box);
extern
void gtk_event_box_set_above_child (GtkEventBox *event_box,
                                             gboolean above_child);
# 96 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkeventcontroller.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkeventcontroller.h"
typedef struct _GtkEventController GtkEventController;
typedef struct _GtkEventControllerClass GtkEventControllerClass;
# 44 "/usr/include/gtk-3.0/gtk/gtkeventcontroller.h"
extern
GType gtk_event_controller_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_event_controller_get_widget (GtkEventController *controller);

extern
gboolean gtk_event_controller_handle_event (GtkEventController *controller,
                                                  const GdkEvent *event);
extern
void gtk_event_controller_reset (GtkEventController *controller);

extern
GtkPropagationPhase gtk_event_controller_get_propagation_phase (GtkEventController *controller);

extern
void gtk_event_controller_set_propagation_phase (GtkEventController *controller,
                                                                GtkPropagationPhase phase);
# 97 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkeventcontrollerkey.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkeventcontrollerkey.h"
typedef struct _GtkEventControllerKey GtkEventControllerKey;
typedef struct _GtkEventControllerKeyClass GtkEventControllerKeyClass;

extern
GType gtk_event_controller_key_get_type (void) __attribute__ ((__const__));

extern
GtkEventController *gtk_event_controller_key_new (GtkWidget *widget);

extern
void gtk_event_controller_key_set_im_context (GtkEventControllerKey *controller,
                                                             GtkIMContext *im_context);
extern
GtkIMContext * gtk_event_controller_key_get_im_context (GtkEventControllerKey *controller);

extern
gboolean gtk_event_controller_key_forward (GtkEventControllerKey *controller,
                                                             GtkWidget *widget);
extern
guint gtk_event_controller_key_get_group (GtkEventControllerKey *controller);
# 98 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkeventcontrollermotion.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkeventcontrollermotion.h"
typedef struct _GtkEventControllerMotion GtkEventControllerMotion;
typedef struct _GtkEventControllerMotionClass GtkEventControllerMotionClass;

extern
GType gtk_event_controller_motion_get_type (void) __attribute__ ((__const__));

extern
GtkEventController *gtk_event_controller_motion_new (GtkWidget *widget);
# 99 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkeventcontrollerscroll.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkeventcontrollerscroll.h"
typedef struct _GtkEventControllerScroll GtkEventControllerScroll;
typedef struct _GtkEventControllerScrollClass GtkEventControllerScrollClass;
# 56 "/usr/include/gtk-3.0/gtk/gtkeventcontrollerscroll.h"
typedef enum {
  GTK_EVENT_CONTROLLER_SCROLL_NONE = 0,
  GTK_EVENT_CONTROLLER_SCROLL_VERTICAL = 1 << 0,
  GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL = 1 << 1,
  GTK_EVENT_CONTROLLER_SCROLL_DISCRETE = 1 << 2,
  GTK_EVENT_CONTROLLER_SCROLL_KINETIC = 1 << 3,
  GTK_EVENT_CONTROLLER_SCROLL_BOTH_AXES = (GTK_EVENT_CONTROLLER_SCROLL_VERTICAL | GTK_EVENT_CONTROLLER_SCROLL_HORIZONTAL),
} GtkEventControllerScrollFlags;

extern
GType gtk_event_controller_scroll_get_type (void) __attribute__ ((__const__));

extern
GtkEventController *gtk_event_controller_scroll_new (GtkWidget *widget,
                                                     GtkEventControllerScrollFlags flags);
extern
void gtk_event_controller_scroll_set_flags (GtkEventControllerScroll *scroll,
                                                           GtkEventControllerScrollFlags flags);
extern
GtkEventControllerScrollFlags
                    gtk_event_controller_scroll_get_flags (GtkEventControllerScroll *scroll);
# 100 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkexpander.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkexpander.h"
typedef struct _GtkExpander GtkExpander;
typedef struct _GtkExpanderClass GtkExpanderClass;
typedef struct _GtkExpanderPrivate GtkExpanderPrivate;

struct _GtkExpander
{
  GtkBin bin;

  GtkExpanderPrivate *priv;
};






struct _GtkExpanderClass
{
  GtkBinClass parent_class;






  void (* activate) (GtkExpander *expander);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_expander_get_type (void) __attribute__ ((__const__));

extern
GtkWidget *gtk_expander_new (const gchar *label);
extern
GtkWidget *gtk_expander_new_with_mnemonic (const gchar *label);

extern
void gtk_expander_set_expanded (GtkExpander *expander,
                                                        gboolean expanded);
extern
gboolean gtk_expander_get_expanded (GtkExpander *expander);


extern
void gtk_expander_set_spacing (GtkExpander *expander,
                                                        gint spacing);
extern
gint gtk_expander_get_spacing (GtkExpander *expander);

extern
void gtk_expander_set_label (GtkExpander *expander,
                                                        const gchar *label);
extern
const gchar * gtk_expander_get_label (GtkExpander *expander);

extern
void gtk_expander_set_use_underline (GtkExpander *expander,
                                                        gboolean use_underline);
extern
gboolean gtk_expander_get_use_underline (GtkExpander *expander);

extern
void gtk_expander_set_use_markup (GtkExpander *expander,
                                                        gboolean use_markup);
extern
gboolean gtk_expander_get_use_markup (GtkExpander *expander);

extern
void gtk_expander_set_label_widget (GtkExpander *expander,
              GtkWidget *label_widget);
extern
GtkWidget *gtk_expander_get_label_widget (GtkExpander *expander);
extern
void gtk_expander_set_label_fill (GtkExpander *expander,
              gboolean label_fill);
extern
gboolean gtk_expander_get_label_fill (GtkExpander *expander);
extern
void gtk_expander_set_resize_toplevel (GtkExpander *expander,
                                                        gboolean resize_toplevel);
extern
gboolean gtk_expander_get_resize_toplevel (GtkExpander *expander);
# 101 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfixed.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkfixed.h"
typedef struct _GtkFixed GtkFixed;
typedef struct _GtkFixedPrivate GtkFixedPrivate;
typedef struct _GtkFixedClass GtkFixedClass;
typedef struct _GtkFixedChild GtkFixedChild;

struct _GtkFixed
{
  GtkContainer container;


  GtkFixedPrivate *priv;
};

struct _GtkFixedClass
{
  GtkContainerClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkFixedChild
{
  GtkWidget *widget;
  gint x;
  gint y;
};


extern
GType gtk_fixed_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_fixed_new (void);
extern
void gtk_fixed_put (GtkFixed *fixed,
                                        GtkWidget *widget,
                                        gint x,
                                        gint y);
extern
void gtk_fixed_move (GtkFixed *fixed,
                                        GtkWidget *widget,
                                        gint x,
                                        gint y);
# 102 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfilechooser.h" 1
# 26 "/usr/include/gtk-3.0/gtk/gtkfilechooser.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkfilefilter.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtkfilefilter.h"
typedef struct _GtkFileFilter GtkFileFilter;
typedef struct _GtkFileFilterInfo GtkFileFilterInfo;
# 49 "/usr/include/gtk-3.0/gtk/gtkfilefilter.h"
typedef enum {
  GTK_FILE_FILTER_FILENAME = 1 << 0,
  GTK_FILE_FILTER_URI = 1 << 1,
  GTK_FILE_FILTER_DISPLAY_NAME = 1 << 2,
  GTK_FILE_FILTER_MIME_TYPE = 1 << 3
} GtkFileFilterFlags;
# 67 "/usr/include/gtk-3.0/gtk/gtkfilefilter.h"
typedef gboolean (*GtkFileFilterFunc) (const GtkFileFilterInfo *filter_info,
           gpointer data);
# 83 "/usr/include/gtk-3.0/gtk/gtkfilefilter.h"
struct _GtkFileFilterInfo
{
  GtkFileFilterFlags contains;

  const gchar *filename;
  const gchar *uri;
  const gchar *display_name;
  const gchar *mime_type;
};

extern
GType gtk_file_filter_get_type (void) __attribute__ ((__const__));

extern
GtkFileFilter * gtk_file_filter_new (void);
extern
void gtk_file_filter_set_name (GtkFileFilter *filter,
      const gchar *name);
extern
const gchar * gtk_file_filter_get_name (GtkFileFilter *filter);

extern
void gtk_file_filter_add_mime_type (GtkFileFilter *filter,
      const gchar *mime_type);
extern
void gtk_file_filter_add_pattern (GtkFileFilter *filter,
      const gchar *pattern);
extern
void gtk_file_filter_add_pixbuf_formats (GtkFileFilter *filter);
extern
void gtk_file_filter_add_custom (GtkFileFilter *filter,
      GtkFileFilterFlags needed,
      GtkFileFilterFunc func,
      gpointer data,
      GDestroyNotify notify);

extern
GtkFileFilterFlags gtk_file_filter_get_needed (GtkFileFilter *filter);
extern
gboolean gtk_file_filter_filter (GtkFileFilter *filter,
            const GtkFileFilterInfo *filter_info);

extern
GVariant *gtk_file_filter_to_gvariant (GtkFileFilter *filter);
extern
GtkFileFilter *gtk_file_filter_new_from_gvariant (GVariant *variant);
# 27 "/usr/include/gtk-3.0/gtk/gtkfilechooser.h" 2








typedef struct _GtkFileChooser GtkFileChooser;
# 54 "/usr/include/gtk-3.0/gtk/gtkfilechooser.h"
typedef enum
{
  GTK_FILE_CHOOSER_ACTION_OPEN,
  GTK_FILE_CHOOSER_ACTION_SAVE,
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER,
  GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
} GtkFileChooserAction;
# 79 "/usr/include/gtk-3.0/gtk/gtkfilechooser.h"
typedef enum
{
  GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM,
  GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME,
  GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN
} GtkFileChooserConfirmation;

extern
GType gtk_file_chooser_get_type (void) __attribute__ ((__const__));
# 108 "/usr/include/gtk-3.0/gtk/gtkfilechooser.h"
typedef enum {
  GTK_FILE_CHOOSER_ERROR_NONEXISTENT,
  GTK_FILE_CHOOSER_ERROR_BAD_FILENAME,
  GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS,
  GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME
} GtkFileChooserError;

extern
GQuark gtk_file_chooser_error_quark (void);



extern
void gtk_file_chooser_set_action (GtkFileChooser *chooser,
          GtkFileChooserAction action);
extern
GtkFileChooserAction gtk_file_chooser_get_action (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_local_only (GtkFileChooser *chooser,
          gboolean local_only);
extern
gboolean gtk_file_chooser_get_local_only (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_select_multiple (GtkFileChooser *chooser,
          gboolean select_multiple);
extern
gboolean gtk_file_chooser_get_select_multiple (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_show_hidden (GtkFileChooser *chooser,
          gboolean show_hidden);
extern
gboolean gtk_file_chooser_get_show_hidden (GtkFileChooser *chooser);

extern
void gtk_file_chooser_set_do_overwrite_confirmation (GtkFileChooser *chooser,
             gboolean do_overwrite_confirmation);
extern
gboolean gtk_file_chooser_get_do_overwrite_confirmation (GtkFileChooser *chooser);

extern
void gtk_file_chooser_set_create_folders (GtkFileChooser *chooser,
         gboolean create_folders);
extern
gboolean gtk_file_chooser_get_create_folders (GtkFileChooser *chooser);



extern
void gtk_file_chooser_set_current_name (GtkFileChooser *chooser,
             const gchar *name);
extern
gchar *gtk_file_chooser_get_current_name (GtkFileChooser *chooser);



extern
gchar * gtk_file_chooser_get_filename (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_filename (GtkFileChooser *chooser,
           const char *filename);
extern
gboolean gtk_file_chooser_select_filename (GtkFileChooser *chooser,
           const char *filename);
extern
void gtk_file_chooser_unselect_filename (GtkFileChooser *chooser,
           const char *filename);
extern
void gtk_file_chooser_select_all (GtkFileChooser *chooser);
extern
void gtk_file_chooser_unselect_all (GtkFileChooser *chooser);
extern
GSList * gtk_file_chooser_get_filenames (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_current_folder (GtkFileChooser *chooser,
           const gchar *filename);
extern
gchar * gtk_file_chooser_get_current_folder (GtkFileChooser *chooser);




extern
gchar * gtk_file_chooser_get_uri (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_uri (GtkFileChooser *chooser,
        const char *uri);
extern
gboolean gtk_file_chooser_select_uri (GtkFileChooser *chooser,
        const char *uri);
extern
void gtk_file_chooser_unselect_uri (GtkFileChooser *chooser,
        const char *uri);
extern
GSList * gtk_file_chooser_get_uris (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_current_folder_uri (GtkFileChooser *chooser,
        const gchar *uri);
extern
gchar * gtk_file_chooser_get_current_folder_uri (GtkFileChooser *chooser);


extern
GFile * gtk_file_chooser_get_file (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
extern
gboolean gtk_file_chooser_select_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
extern
void gtk_file_chooser_unselect_file (GtkFileChooser *chooser,
                                                   GFile *file);
extern
GSList * gtk_file_chooser_get_files (GtkFileChooser *chooser);
extern
gboolean gtk_file_chooser_set_current_folder_file (GtkFileChooser *chooser,
                                                   GFile *file,
                                                   GError **error);
extern
GFile * gtk_file_chooser_get_current_folder_file (GtkFileChooser *chooser);



extern
void gtk_file_chooser_set_preview_widget (GtkFileChooser *chooser,
             GtkWidget *preview_widget);
extern
GtkWidget *gtk_file_chooser_get_preview_widget (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_preview_widget_active (GtkFileChooser *chooser,
             gboolean active);
extern
gboolean gtk_file_chooser_get_preview_widget_active (GtkFileChooser *chooser);
extern
void gtk_file_chooser_set_use_preview_label (GtkFileChooser *chooser,
             gboolean use_label);
extern
gboolean gtk_file_chooser_get_use_preview_label (GtkFileChooser *chooser);

extern
char *gtk_file_chooser_get_preview_filename (GtkFileChooser *chooser);
extern
char *gtk_file_chooser_get_preview_uri (GtkFileChooser *chooser);
extern
GFile *gtk_file_chooser_get_preview_file (GtkFileChooser *chooser);



extern
void gtk_file_chooser_set_extra_widget (GtkFileChooser *chooser,
           GtkWidget *extra_widget);
extern
GtkWidget *gtk_file_chooser_get_extra_widget (GtkFileChooser *chooser);



extern
void gtk_file_chooser_add_filter (GtkFileChooser *chooser,
     GtkFileFilter *filter);
extern
void gtk_file_chooser_remove_filter (GtkFileChooser *chooser,
     GtkFileFilter *filter);
extern
GSList *gtk_file_chooser_list_filters (GtkFileChooser *chooser);



extern
void gtk_file_chooser_set_filter (GtkFileChooser *chooser,
        GtkFileFilter *filter);
extern
GtkFileFilter *gtk_file_chooser_get_filter (GtkFileChooser *chooser);



extern
gboolean gtk_file_chooser_add_shortcut_folder (GtkFileChooser *chooser,
        const char *folder,
        GError **error);
extern
gboolean gtk_file_chooser_remove_shortcut_folder (GtkFileChooser *chooser,
        const char *folder,
        GError **error);
extern
GSList *gtk_file_chooser_list_shortcut_folders (GtkFileChooser *chooser);

extern
gboolean gtk_file_chooser_add_shortcut_folder_uri (GtkFileChooser *chooser,
            const char *uri,
            GError **error);
extern
gboolean gtk_file_chooser_remove_shortcut_folder_uri (GtkFileChooser *chooser,
            const char *uri,
            GError **error);
extern
GSList *gtk_file_chooser_list_shortcut_folder_uris (GtkFileChooser *chooser);

extern
void gtk_file_chooser_add_choice (GtkFileChooser *chooser,
                                                      const char *id,
                                                      const char *label,
                                                      const char **options,
                                                      const char **option_labels);
extern
void gtk_file_chooser_remove_choice (GtkFileChooser *chooser,
                                                      const char *id);
extern
void gtk_file_chooser_set_choice (GtkFileChooser *chooser,
                                                      const char *id,
                                                      const char *option);
extern
const char *gtk_file_chooser_get_choice (GtkFileChooser *chooser,
                                                      const char *id);
# 103 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfilechooserbutton.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkfilechooserbutton.h"
typedef struct _GtkFileChooserButton GtkFileChooserButton;
typedef struct _GtkFileChooserButtonPrivate GtkFileChooserButtonPrivate;
typedef struct _GtkFileChooserButtonClass GtkFileChooserButtonClass;

struct _GtkFileChooserButton
{
  GtkBox parent;


  GtkFileChooserButtonPrivate *priv;
};






struct _GtkFileChooserButtonClass
{
  GtkBoxClass parent_class;



  void (* file_set) (GtkFileChooserButton *fc);




  void (*__gtk_reserved1) (void);
  void (*__gtk_reserved2) (void);
  void (*__gtk_reserved3) (void);
  void (*__gtk_reserved4) (void);
};


extern
GType gtk_file_chooser_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_file_chooser_button_new (const gchar *title,
        GtkFileChooserAction action);
extern
GtkWidget * gtk_file_chooser_button_new_with_dialog (GtkWidget *dialog);
extern
const gchar * gtk_file_chooser_button_get_title (GtkFileChooserButton *button);
extern
void gtk_file_chooser_button_set_title (GtkFileChooserButton *button,
        const gchar *title);
extern
gint gtk_file_chooser_button_get_width_chars (GtkFileChooserButton *button);
extern
void gtk_file_chooser_button_set_width_chars (GtkFileChooserButton *button,
        gint n_chars);
__attribute__((__deprecated__("Use '" "gtk_widget_get_focus_on_click" "' instead"))) extern
gboolean gtk_file_chooser_button_get_focus_on_click (GtkFileChooserButton *button);
__attribute__((__deprecated__("Use '" "gtk_widget_set_focus_on_click" "' instead"))) extern
void gtk_file_chooser_button_set_focus_on_click (GtkFileChooserButton *button,
                                                                  gboolean focus_on_click);
# 104 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfilechooserdialog.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkfilechooserdialog.h"
typedef struct _GtkFileChooserDialog GtkFileChooserDialog;
typedef struct _GtkFileChooserDialogPrivate GtkFileChooserDialogPrivate;
typedef struct _GtkFileChooserDialogClass GtkFileChooserDialogClass;

struct _GtkFileChooserDialog
{
  GtkDialog parent_instance;

  GtkFileChooserDialogPrivate *priv;
};

struct _GtkFileChooserDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_file_chooser_dialog_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_file_chooser_dialog_new (const gchar *title,
           GtkWindow *parent,
           GtkFileChooserAction action,
           const gchar *first_button_text,
           ...) __attribute__((__sentinel__));
# 105 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
# 1 "/usr/include/gtk-3.0/gtk/gtknativedialog.h" 1
# 32 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
extern
GType gtk_native_dialog_get_type (void);
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic push
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
 typedef struct _GtkNativeDialog GtkNativeDialog; typedef struct _GtkNativeDialogClass GtkNativeDialogClass; struct _GtkNativeDialog { GObject parent_instance; }; typedef GtkNativeDialog *GtkNativeDialog_autoptr; typedef GList *GtkNativeDialog_listautoptr; typedef GSList *GtkNativeDialog_slistautoptr; typedef GQueue *GtkNativeDialog_queueautoptr;
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic push
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkNativeDialog (GtkNativeDialog *_ptr) { if (_ptr) (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkNativeDialog (GtkNativeDialog **_ptr) { glib_autoptr_clear_GtkNativeDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkNativeDialog (void *_ptr) { (glib_autoptr_clear_GObject) ((GObject *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkNativeDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkNativeDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkNativeDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkNativeDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkNativeDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkNativeDialog); }
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic pop
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
 typedef GtkNativeDialogClass *GtkNativeDialogClass_autoptr; typedef GList *GtkNativeDialogClass_listautoptr; typedef GSList *GtkNativeDialogClass_slistautoptr; typedef GQueue *GtkNativeDialogClass_queueautoptr;
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic push
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkNativeDialogClass (GtkNativeDialogClass *_ptr) { if (_ptr) (g_type_class_unref) ((GtkNativeDialogClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkNativeDialogClass (GtkNativeDialogClass **_ptr) { glib_autoptr_clear_GtkNativeDialogClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkNativeDialogClass (void *_ptr) { (g_type_class_unref) ((GtkNativeDialogClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkNativeDialogClass (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkNativeDialogClass); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkNativeDialogClass (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkNativeDialogClass); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkNativeDialogClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkNativeDialogClass); }
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic pop
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
 __attribute__ ((__unused__)) static inline GtkNativeDialog * GTK_NATIVE_DIALOG (gpointer ptr) { return (((GtkNativeDialog*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline GtkNativeDialogClass * GTK_NATIVE_DIALOG_CLASS (gpointer ptr) { return (((GtkNativeDialogClass*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline gboolean GTK_IS_NATIVE_DIALOG (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (gtk_native_dialog_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); } __attribute__ ((__unused__)) static inline gboolean GTK_IS_NATIVE_DIALOG_CLASS (gpointer ptr) { return ((__extension__ ({ GTypeClass *__class = (GTypeClass*) (ptr); GType __t = (gtk_native_dialog_get_type ()); gboolean __r; if (!__class) __r = (0); else if (__class->g_type == __t) __r = (!(0)); else __r = g_type_check_class_is_a (__class, __t); __r; }))); } __attribute__ ((__unused__)) static inline GtkNativeDialogClass * GTK_NATIVE_DIALOG_GET_CLASS (gpointer ptr) { return (((GtkNativeDialogClass*) (((GTypeInstance*) (ptr))->g_class))); }
# 33 "/usr/include/gtk-3.0/gtk/gtknativedialog.h"
#pragma clang diagnostic pop

struct _GtkNativeDialogClass
{
  GObjectClass parent_class;

  void (* response) (GtkNativeDialog *self, gint response_id);


  void (* show) (GtkNativeDialog *self);
  void (* hide) (GtkNativeDialog *self);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
void gtk_native_dialog_show (GtkNativeDialog *self);
extern
void gtk_native_dialog_hide (GtkNativeDialog *self);
extern
void gtk_native_dialog_destroy (GtkNativeDialog *self);
extern
gboolean gtk_native_dialog_get_visible (GtkNativeDialog *self);
extern
void gtk_native_dialog_set_modal (GtkNativeDialog *self,
                                                   gboolean modal);
extern
gboolean gtk_native_dialog_get_modal (GtkNativeDialog *self);
extern
void gtk_native_dialog_set_title (GtkNativeDialog *self,
                                                   const char *title);
extern
const char * gtk_native_dialog_get_title (GtkNativeDialog *self);
extern
void gtk_native_dialog_set_transient_for (GtkNativeDialog *self,
                                                           GtkWindow *parent);
extern
GtkWindow * gtk_native_dialog_get_transient_for (GtkNativeDialog *self);

extern
gint gtk_native_dialog_run (GtkNativeDialog *self);
# 28 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h" 2





extern
GType gtk_file_chooser_native_get_type (void);
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic push
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
 typedef struct _GtkFileChooserNative GtkFileChooserNative; typedef struct { GtkNativeDialogClass parent_class; } GtkFileChooserNativeClass; typedef GtkFileChooserNative *GtkFileChooserNative_autoptr; typedef GList *GtkFileChooserNative_listautoptr; typedef GSList *GtkFileChooserNative_slistautoptr; typedef GQueue *GtkFileChooserNative_queueautoptr;
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic push
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFileChooserNative (GtkFileChooserNative *_ptr) { if (_ptr) (glib_autoptr_clear_GtkNativeDialog) ((GtkNativeDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFileChooserNative (GtkFileChooserNative **_ptr) { glib_autoptr_clear_GtkFileChooserNative (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFileChooserNative (void *_ptr) { (glib_autoptr_clear_GtkNativeDialog) ((GtkNativeDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFileChooserNative (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFileChooserNative); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFileChooserNative (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFileChooserNative); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFileChooserNative (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFileChooserNative); }
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic pop
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
 typedef GtkFileChooserNativeClass *GtkFileChooserNativeClass_autoptr; typedef GList *GtkFileChooserNativeClass_listautoptr; typedef GSList *GtkFileChooserNativeClass_slistautoptr; typedef GQueue *GtkFileChooserNativeClass_queueautoptr;
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic push
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFileChooserNativeClass (GtkFileChooserNativeClass *_ptr) { if (_ptr) (g_type_class_unref) ((GtkFileChooserNativeClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFileChooserNativeClass (GtkFileChooserNativeClass **_ptr) { glib_autoptr_clear_GtkFileChooserNativeClass (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFileChooserNativeClass (void *_ptr) { (g_type_class_unref) ((GtkFileChooserNativeClass *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFileChooserNativeClass (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFileChooserNativeClass); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFileChooserNativeClass (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFileChooserNativeClass); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFileChooserNativeClass (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFileChooserNativeClass); }
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic pop
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
 __attribute__ ((__unused__)) static inline GtkFileChooserNative * GTK_FILE_CHOOSER_NATIVE (gpointer ptr) { return (((GtkFileChooserNative*) (void *) (ptr))); } __attribute__ ((__unused__)) static inline gboolean GTK_IS_FILE_CHOOSER_NATIVE (gpointer ptr) { return ((__extension__ ({ GTypeInstance *__inst = (GTypeInstance*) (ptr); GType __t = (gtk_file_chooser_native_get_type ()); gboolean __r; if (!__inst) __r = (0); else if (__inst->g_class && __inst->g_class->g_type == __t) __r = (!(0)); else __r = g_type_check_instance_is_a (__inst, __t); __r; }))); }
# 34 "/usr/include/gtk-3.0/gtk/gtkfilechoosernative.h"
#pragma clang diagnostic pop

extern
GtkFileChooserNative *gtk_file_chooser_native_new (const gchar *title,
                                                   GtkWindow *parent,
                                                   GtkFileChooserAction action,
                                                   const gchar *accept_label,
                                                   const gchar *cancel_label);

extern
const char *gtk_file_chooser_native_get_accept_label (GtkFileChooserNative *self);
extern
void gtk_file_chooser_native_set_accept_label (GtkFileChooserNative *self,
                                                      const char *accept_label);
extern
const char *gtk_file_chooser_native_get_cancel_label (GtkFileChooserNative *self);
extern
void gtk_file_chooser_native_set_cancel_label (GtkFileChooserNative *self,
                                                      const char *cancel_label);
# 106 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfilechooserwidget.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkfilechooserwidget.h"
typedef struct _GtkFileChooserWidget GtkFileChooserWidget;
typedef struct _GtkFileChooserWidgetPrivate GtkFileChooserWidgetPrivate;
typedef struct _GtkFileChooserWidgetClass GtkFileChooserWidgetClass;

struct _GtkFileChooserWidget
{
  GtkBox parent_instance;

  GtkFileChooserWidgetPrivate *priv;
};





struct _GtkFileChooserWidgetClass
{
  GtkBoxClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_file_chooser_widget_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_file_chooser_widget_new (GtkFileChooserAction action);
# 107 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkflowbox.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkflowbox.h"
typedef struct _GtkFlowBox GtkFlowBox;
typedef struct _GtkFlowBoxClass GtkFlowBoxClass;

typedef struct _GtkFlowBoxChild GtkFlowBoxChild;
typedef struct _GtkFlowBoxChildClass GtkFlowBoxChildClass;

struct _GtkFlowBox
{
  GtkContainer container;
};

struct _GtkFlowBoxClass
{
  GtkContainerClass parent_class;

  void (*child_activated) (GtkFlowBox *box,
                                      GtkFlowBoxChild *child);
  void (*selected_children_changed) (GtkFlowBox *box);
  void (*activate_cursor_child) (GtkFlowBox *box);
  void (*toggle_cursor_child) (GtkFlowBox *box);
  gboolean (*move_cursor) (GtkFlowBox *box,
                                      GtkMovementStep step,
                                      gint count);
  void (*select_all) (GtkFlowBox *box);
  void (*unselect_all) (GtkFlowBox *box);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};
# 86 "/usr/include/gtk-3.0/gtk/gtkflowbox.h"
struct _GtkFlowBoxChild
{
  GtkBin parent_instance;
};

struct _GtkFlowBoxChildClass
{
  GtkBinClass parent_class;

  void (* activate) (GtkFlowBoxChild *child);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};
# 114 "/usr/include/gtk-3.0/gtk/gtkflowbox.h"
typedef GtkWidget * (*GtkFlowBoxCreateWidgetFunc) (gpointer item,
                                                   gpointer user_data);

extern
GType gtk_flow_box_child_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_flow_box_child_new (void);
extern
gint gtk_flow_box_child_get_index (GtkFlowBoxChild *child);
extern
gboolean gtk_flow_box_child_is_selected (GtkFlowBoxChild *child);
extern
void gtk_flow_box_child_changed (GtkFlowBoxChild *child);


extern
GType gtk_flow_box_get_type (void) __attribute__ ((__const__));

extern
GtkWidget *gtk_flow_box_new (void);

extern
void gtk_flow_box_bind_model (GtkFlowBox *box,
                                                              GListModel *model,
                                                              GtkFlowBoxCreateWidgetFunc create_widget_func,
                                                              gpointer user_data,
                                                              GDestroyNotify user_data_free_func);

extern
void gtk_flow_box_set_homogeneous (GtkFlowBox *box,
                                                              gboolean homogeneous);
extern
gboolean gtk_flow_box_get_homogeneous (GtkFlowBox *box);
extern
void gtk_flow_box_set_row_spacing (GtkFlowBox *box,
                                                              guint spacing);
extern
guint gtk_flow_box_get_row_spacing (GtkFlowBox *box);

extern
void gtk_flow_box_set_column_spacing (GtkFlowBox *box,
                                                              guint spacing);
extern
guint gtk_flow_box_get_column_spacing (GtkFlowBox *box);

extern
void gtk_flow_box_set_min_children_per_line (GtkFlowBox *box,
                                                              guint n_children);
extern
guint gtk_flow_box_get_min_children_per_line (GtkFlowBox *box);

extern
void gtk_flow_box_set_max_children_per_line (GtkFlowBox *box,
                                                              guint n_children);
extern
guint gtk_flow_box_get_max_children_per_line (GtkFlowBox *box);
extern
void gtk_flow_box_set_activate_on_single_click (GtkFlowBox *box,
                                                                 gboolean single);
extern
gboolean gtk_flow_box_get_activate_on_single_click (GtkFlowBox *box);

extern
void gtk_flow_box_insert (GtkFlowBox *box,
                                                                 GtkWidget *widget,
                                                                 gint position);
extern
GtkFlowBoxChild *gtk_flow_box_get_child_at_index (GtkFlowBox *box,
                                                                 gint idx);

extern
GtkFlowBoxChild *gtk_flow_box_get_child_at_pos (GtkFlowBox *box,
                                                                 gint x,
                                                                 gint y);

typedef void (* GtkFlowBoxForeachFunc) (GtkFlowBox *box,
                                        GtkFlowBoxChild *child,
                                        gpointer user_data);

extern
void gtk_flow_box_selected_foreach (GtkFlowBox *box,
                                                                 GtkFlowBoxForeachFunc func,
                                                                 gpointer data);
extern
GList *gtk_flow_box_get_selected_children (GtkFlowBox *box);
extern
void gtk_flow_box_select_child (GtkFlowBox *box,
                                                                 GtkFlowBoxChild *child);
extern
void gtk_flow_box_unselect_child (GtkFlowBox *box,
                                                                 GtkFlowBoxChild *child);
extern
void gtk_flow_box_select_all (GtkFlowBox *box);
extern
void gtk_flow_box_unselect_all (GtkFlowBox *box);
extern
void gtk_flow_box_set_selection_mode (GtkFlowBox *box,
                                                                 GtkSelectionMode mode);
extern
GtkSelectionMode gtk_flow_box_get_selection_mode (GtkFlowBox *box);
extern
void gtk_flow_box_set_hadjustment (GtkFlowBox *box,
                                                                 GtkAdjustment *adjustment);
extern
void gtk_flow_box_set_vadjustment (GtkFlowBox *box,
                                                                 GtkAdjustment *adjustment);

typedef gboolean (*GtkFlowBoxFilterFunc) (GtkFlowBoxChild *child,
                                          gpointer user_data);

extern
void gtk_flow_box_set_filter_func (GtkFlowBox *box,
                                                                 GtkFlowBoxFilterFunc filter_func,
                                                                 gpointer user_data,
                                                                 GDestroyNotify destroy);
extern
void gtk_flow_box_invalidate_filter (GtkFlowBox *box);

typedef gint (*GtkFlowBoxSortFunc) (GtkFlowBoxChild *child1,
                                    GtkFlowBoxChild *child2,
                                    gpointer user_data);

extern
void gtk_flow_box_set_sort_func (GtkFlowBox *box,
                                                                 GtkFlowBoxSortFunc sort_func,
                                                                 gpointer user_data,
                                                                 GDestroyNotify destroy);
extern
void gtk_flow_box_invalidate_sort (GtkFlowBox *box);
# 109 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfontbutton.h" 1
# 48 "/usr/include/gtk-3.0/gtk/gtkfontbutton.h"
typedef struct _GtkFontButton GtkFontButton;
typedef struct _GtkFontButtonClass GtkFontButtonClass;
typedef struct _GtkFontButtonPrivate GtkFontButtonPrivate;

struct _GtkFontButton {
  GtkButton button;


  GtkFontButtonPrivate *priv;
};

struct _GtkFontButtonClass {
  GtkButtonClass parent_class;


  void (* font_set) (GtkFontButton *gfp);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_font_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_font_button_new (void);
extern
GtkWidget *gtk_font_button_new_with_font (const gchar *fontname);

extern
const gchar * gtk_font_button_get_title (GtkFontButton *font_button);
extern
void gtk_font_button_set_title (GtkFontButton *font_button,
                                                      const gchar *title);
extern
gboolean gtk_font_button_get_use_font (GtkFontButton *font_button);
extern
void gtk_font_button_set_use_font (GtkFontButton *font_button,
                                                      gboolean use_font);
extern
gboolean gtk_font_button_get_use_size (GtkFontButton *font_button);
extern
void gtk_font_button_set_use_size (GtkFontButton *font_button,
                                                      gboolean use_size);
__attribute__((__deprecated__)) extern
const gchar * gtk_font_button_get_font_name (GtkFontButton *font_button);
__attribute__((__deprecated__)) extern
gboolean gtk_font_button_set_font_name (GtkFontButton *font_button,
                                                      const gchar *fontname);
extern
gboolean gtk_font_button_get_show_style (GtkFontButton *font_button);
extern
void gtk_font_button_set_show_style (GtkFontButton *font_button,
                                                      gboolean show_style);
extern
gboolean gtk_font_button_get_show_size (GtkFontButton *font_button);
extern
void gtk_font_button_set_show_size (GtkFontButton *font_button,
                                                      gboolean show_size);
# 110 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfontchooser.h" 1
# 43 "/usr/include/gtk-3.0/gtk/gtkfontchooser.h"
typedef gboolean (*GtkFontFilterFunc) (const PangoFontFamily *family,
                                       const PangoFontFace *face,
                                       gpointer data);
# 61 "/usr/include/gtk-3.0/gtk/gtkfontchooser.h"
typedef enum {
  GTK_FONT_CHOOSER_LEVEL_FAMILY = 0,
  GTK_FONT_CHOOSER_LEVEL_STYLE = 1 << 0,
  GTK_FONT_CHOOSER_LEVEL_SIZE = 1 << 1,
  GTK_FONT_CHOOSER_LEVEL_VARIATIONS = 1 << 2,
  GTK_FONT_CHOOSER_LEVEL_FEATURES = 1 << 3
} GtkFontChooserLevel;






typedef struct _GtkFontChooser GtkFontChooser;
typedef struct _GtkFontChooserIface GtkFontChooserIface;

struct _GtkFontChooserIface
{
  GTypeInterface base_iface;


  PangoFontFamily * (* get_font_family) (GtkFontChooser *fontchooser);
  PangoFontFace * (* get_font_face) (GtkFontChooser *fontchooser);
  gint (* get_font_size) (GtkFontChooser *fontchooser);

  void (* set_filter_func) (GtkFontChooser *fontchooser,
                                                 GtkFontFilterFunc filter,
                                                 gpointer user_data,
                                                 GDestroyNotify destroy);


  void (* font_activated) (GtkFontChooser *chooser,
                           const gchar *fontname);


  void (* set_font_map) (GtkFontChooser *fontchooser,
                                                 PangoFontMap *fontmap);
  PangoFontMap * (* get_font_map) (GtkFontChooser *fontchooser);


  gpointer padding[10];
};

extern
GType gtk_font_chooser_get_type (void) __attribute__ ((__const__));

extern
PangoFontFamily *gtk_font_chooser_get_font_family (GtkFontChooser *fontchooser);
extern
PangoFontFace *gtk_font_chooser_get_font_face (GtkFontChooser *fontchooser);
extern
gint gtk_font_chooser_get_font_size (GtkFontChooser *fontchooser);

extern
PangoFontDescription *
                 gtk_font_chooser_get_font_desc (GtkFontChooser *fontchooser);
extern
void gtk_font_chooser_set_font_desc (GtkFontChooser *fontchooser,
                                                            const PangoFontDescription *font_desc);

extern
gchar* gtk_font_chooser_get_font (GtkFontChooser *fontchooser);

extern
void gtk_font_chooser_set_font (GtkFontChooser *fontchooser,
                                                            const gchar *fontname);
extern
gchar* gtk_font_chooser_get_preview_text (GtkFontChooser *fontchooser);
extern
void gtk_font_chooser_set_preview_text (GtkFontChooser *fontchooser,
                                                            const gchar *text);
extern
gboolean gtk_font_chooser_get_show_preview_entry (GtkFontChooser *fontchooser);
extern
void gtk_font_chooser_set_show_preview_entry (GtkFontChooser *fontchooser,
                                                            gboolean show_preview_entry);
extern
void gtk_font_chooser_set_filter_func (GtkFontChooser *fontchooser,
                                                            GtkFontFilterFunc filter,
                                                            gpointer user_data,
                                                            GDestroyNotify destroy);
extern
void gtk_font_chooser_set_font_map (GtkFontChooser *fontchooser,
                                                            PangoFontMap *fontmap);
extern
PangoFontMap * gtk_font_chooser_get_font_map (GtkFontChooser *fontchooser);

extern
void gtk_font_chooser_set_level (GtkFontChooser *fontchooser,
                                                            GtkFontChooserLevel level);
extern
GtkFontChooserLevel
                 gtk_font_chooser_get_level (GtkFontChooser *fontchooser);
extern
char * gtk_font_chooser_get_font_features (GtkFontChooser *fontchooser);
extern
char * gtk_font_chooser_get_language (GtkFontChooser *fontchooser);
extern
void gtk_font_chooser_set_language (GtkFontChooser *fontchooser,
                                                            const char *language);
# 111 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfontchooserdialog.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkfontchooserdialog.h"
typedef struct _GtkFontChooserDialog GtkFontChooserDialog;
typedef struct _GtkFontChooserDialogPrivate GtkFontChooserDialogPrivate;
typedef struct _GtkFontChooserDialogClass GtkFontChooserDialogClass;

struct _GtkFontChooserDialog
{
  GtkDialog parent_instance;


  GtkFontChooserDialogPrivate *priv;
};





struct _GtkFontChooserDialogClass
{
  GtkDialogClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_font_chooser_dialog_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_font_chooser_dialog_new (const gchar *title,
                                                     GtkWindow *parent);
# 112 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkfontchooserwidget.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkfontchooserwidget.h"
typedef struct _GtkFontChooserWidget GtkFontChooserWidget;
typedef struct _GtkFontChooserWidgetPrivate GtkFontChooserWidgetPrivate;
typedef struct _GtkFontChooserWidgetClass GtkFontChooserWidgetClass;

struct _GtkFontChooserWidget
{
  GtkBox parent_instance;


  GtkFontChooserWidgetPrivate *priv;
};





struct _GtkFontChooserWidgetClass
{
  GtkBoxClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_font_chooser_widget_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_font_chooser_widget_new (void);
# 113 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkgesture.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkgesture.h"
typedef struct _GtkGesture GtkGesture;
typedef struct _GtkGestureClass GtkGestureClass;

extern
GType gtk_gesture_get_type (void) __attribute__ ((__const__));

extern
GdkDevice * gtk_gesture_get_device (GtkGesture *gesture);

extern
gboolean gtk_gesture_set_state (GtkGesture *gesture,
                                              GtkEventSequenceState state);
extern
GtkEventSequenceState
            gtk_gesture_get_sequence_state (GtkGesture *gesture,
                                              GdkEventSequence *sequence);
extern
gboolean gtk_gesture_set_sequence_state (GtkGesture *gesture,
                                              GdkEventSequence *sequence,
                                              GtkEventSequenceState state);
extern
GList * gtk_gesture_get_sequences (GtkGesture *gesture);

extern
GdkEventSequence * gtk_gesture_get_last_updated_sequence
                                             (GtkGesture *gesture);

extern
gboolean gtk_gesture_handles_sequence (GtkGesture *gesture,
                                              GdkEventSequence *sequence);
extern
const GdkEvent *
            gtk_gesture_get_last_event (GtkGesture *gesture,
                                              GdkEventSequence *sequence);
extern
gboolean gtk_gesture_get_point (GtkGesture *gesture,
                                              GdkEventSequence *sequence,
                                              gdouble *x,
                                              gdouble *y);
extern
gboolean gtk_gesture_get_bounding_box (GtkGesture *gesture,
                                              GdkRectangle *rect);
extern
gboolean gtk_gesture_get_bounding_box_center
                                             (GtkGesture *gesture,
                                              gdouble *x,
                                              gdouble *y);
extern
gboolean gtk_gesture_is_active (GtkGesture *gesture);

extern
gboolean gtk_gesture_is_recognized (GtkGesture *gesture);

extern
GdkWindow * gtk_gesture_get_window (GtkGesture *gesture);

extern
void gtk_gesture_set_window (GtkGesture *gesture,
                                              GdkWindow *window);

extern
void gtk_gesture_group (GtkGesture *group_gesture,
                                              GtkGesture *gesture);
extern
void gtk_gesture_ungroup (GtkGesture *gesture);

extern
GList * gtk_gesture_get_group (GtkGesture *gesture);

extern
gboolean gtk_gesture_is_grouped_with (GtkGesture *gesture,
                                              GtkGesture *other);
# 115 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkgesturedrag.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkgesturedrag.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkgesturesingle.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkgesturesingle.h"
typedef struct _GtkGestureSingle GtkGestureSingle;
typedef struct _GtkGestureSingleClass GtkGestureSingleClass;

extern
GType gtk_gesture_single_get_type (void) __attribute__ ((__const__));

extern
gboolean gtk_gesture_single_get_touch_only (GtkGestureSingle *gesture);

extern
void gtk_gesture_single_set_touch_only (GtkGestureSingle *gesture,
                                               gboolean touch_only);
extern
gboolean gtk_gesture_single_get_exclusive (GtkGestureSingle *gesture);

extern
void gtk_gesture_single_set_exclusive (GtkGestureSingle *gesture,
                                               gboolean exclusive);

extern
guint gtk_gesture_single_get_button (GtkGestureSingle *gesture);

extern
void gtk_gesture_single_set_button (GtkGestureSingle *gesture,
                                               guint button);

extern
guint gtk_gesture_single_get_current_button
                                              (GtkGestureSingle *gesture);

extern
GdkEventSequence * gtk_gesture_single_get_current_sequence
                                              (GtkGestureSingle *gesture);
# 28 "/usr/include/gtk-3.0/gtk/gtkgesturedrag.h" 2
# 38 "/usr/include/gtk-3.0/gtk/gtkgesturedrag.h"
typedef struct _GtkGestureDrag GtkGestureDrag;
typedef struct _GtkGestureDragClass GtkGestureDragClass;

extern
GType gtk_gesture_drag_get_type (void) __attribute__ ((__const__));

extern
GtkGesture * gtk_gesture_drag_new (GtkWidget *widget);

extern
gboolean gtk_gesture_drag_get_start_point (GtkGestureDrag *gesture,
                                                 gdouble *x,
                                                 gdouble *y);
extern
gboolean gtk_gesture_drag_get_offset (GtkGestureDrag *gesture,
                                                 gdouble *x,
                                                 gdouble *y);
# 116 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkgesturelongpress.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkgesturelongpress.h"
typedef struct _GtkGestureLongPress GtkGestureLongPress;
typedef struct _GtkGestureLongPressClass GtkGestureLongPressClass;

extern
GType gtk_gesture_long_press_get_type (void) __attribute__ ((__const__));

extern
GtkGesture * gtk_gesture_long_press_new (GtkWidget *widget);
# 117 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkgesturemultipress.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkgesturemultipress.h"
typedef struct _GtkGestureMultiPress GtkGestureMultiPress;
typedef struct _GtkGestureMultiPressClass GtkGestureMultiPressClass;

extern
GType gtk_gesture_multi_press_get_type (void) __attribute__ ((__const__));

extern
GtkGesture * gtk_gesture_multi_press_new (GtkWidget *widget);

extern
void gtk_gesture_multi_press_set_area (GtkGestureMultiPress *gesture,
            const GdkRectangle *rect);
extern
gboolean gtk_gesture_multi_press_get_area (GtkGestureMultiPress *gesture,
                                               GdkRectangle *rect);
# 118 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkgesturepan.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkgesturepan.h"
typedef struct _GtkGesturePan GtkGesturePan;
typedef struct _GtkGesturePanClass GtkGesturePanClass;

extern
GType gtk_gesture_pan_get_type (void) __attribute__ ((__const__));

extern
GtkGesture * gtk_gesture_pan_new (GtkWidget *widget,
                                                   GtkOrientation orientation);

extern
GtkOrientation gtk_gesture_pan_get_orientation (GtkGesturePan *gesture);

extern
void gtk_gesture_pan_set_orientation (GtkGesturePan *gesture,
                                                   GtkOrientation orientation);
# 119 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkgesturerotate.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkgesturerotate.h"
typedef struct _GtkGestureRotate GtkGestureRotate;
typedef struct _GtkGestureRotateClass GtkGestureRotateClass;

extern
GType gtk_gesture_rotate_get_type (void) __attribute__ ((__const__));

extern
GtkGesture * gtk_gesture_rotate_new (GtkWidget *widget);

extern
gdouble gtk_gesture_rotate_get_angle_delta (GtkGestureRotate *gesture);
# 120 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkgesturestylus.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkgesturestylus.h"
typedef struct _GtkGestureStylus GtkGestureStylus;
typedef struct _GtkGestureStylusClass GtkGestureStylusClass;

extern
GType gtk_gesture_stylus_get_type (void) __attribute__ ((__const__));

extern
GtkGesture * gtk_gesture_stylus_new (GtkWidget *widget);

extern
gboolean gtk_gesture_stylus_get_axis (GtkGestureStylus *gesture,
            GdkAxisUse axis,
            gdouble *value);
extern
gboolean gtk_gesture_stylus_get_axes (GtkGestureStylus *gesture,
            GdkAxisUse axes[],
            gdouble **values);
extern
GdkDeviceTool * gtk_gesture_stylus_get_device_tool (GtkGestureStylus *gesture);
# 122 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkgestureswipe.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkgestureswipe.h"
typedef struct _GtkGestureSwipe GtkGestureSwipe;
typedef struct _GtkGestureSwipeClass GtkGestureSwipeClass;

extern
GType gtk_gesture_swipe_get_type (void) __attribute__ ((__const__));

extern
GtkGesture * gtk_gesture_swipe_new (GtkWidget *widget);

extern
gboolean gtk_gesture_swipe_get_velocity (GtkGestureSwipe *gesture,
                                             gdouble *velocity_x,
                                             gdouble *velocity_y);
# 123 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkgesturezoom.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkgesturezoom.h"
typedef struct _GtkGestureZoom GtkGestureZoom;
typedef struct _GtkGestureZoomClass GtkGestureZoomClass;

extern
GType gtk_gesture_zoom_get_type (void) __attribute__ ((__const__));

extern
GtkGesture * gtk_gesture_zoom_new (GtkWidget *widget);

extern
gdouble gtk_gesture_zoom_get_scale_delta (GtkGestureZoom *gesture);
# 124 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkglarea.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkglarea.h"
typedef struct _GtkGLArea GtkGLArea;
typedef struct _GtkGLAreaClass GtkGLAreaClass;
# 49 "/usr/include/gtk-3.0/gtk/gtkglarea.h"
struct _GtkGLArea
{

  GtkWidget parent_instance;
};
# 65 "/usr/include/gtk-3.0/gtk/gtkglarea.h"
struct _GtkGLAreaClass
{

  GtkWidgetClass parent_class;


  gboolean (* render) (GtkGLArea *area,
                                     GdkGLContext *context);
  void (* resize) (GtkGLArea *area,
                                     int width,
                                     int height);
  GdkGLContext * (* create_context) (GtkGLArea *area);


  gpointer _padding[6];
};

extern
GType gtk_gl_area_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_gl_area_new (void);

extern
void gtk_gl_area_set_use_es (GtkGLArea *area,
                                                         gboolean use_es);
extern
gboolean gtk_gl_area_get_use_es (GtkGLArea *area);
extern
void gtk_gl_area_set_required_version (GtkGLArea *area,
                                                         gint major,
                                                         gint minor);
extern
void gtk_gl_area_get_required_version (GtkGLArea *area,
                                                         gint *major,
                                                         gint *minor);
extern
gboolean gtk_gl_area_get_has_alpha (GtkGLArea *area);
extern
void gtk_gl_area_set_has_alpha (GtkGLArea *area,
                                                         gboolean has_alpha);
extern
gboolean gtk_gl_area_get_has_depth_buffer (GtkGLArea *area);
extern
void gtk_gl_area_set_has_depth_buffer (GtkGLArea *area,
                                                         gboolean has_depth_buffer);
extern
gboolean gtk_gl_area_get_has_stencil_buffer (GtkGLArea *area);
extern
void gtk_gl_area_set_has_stencil_buffer (GtkGLArea *area,
                                                         gboolean has_stencil_buffer);
extern
gboolean gtk_gl_area_get_auto_render (GtkGLArea *area);
extern
void gtk_gl_area_set_auto_render (GtkGLArea *area,
                                                         gboolean auto_render);
extern
void gtk_gl_area_queue_render (GtkGLArea *area);


extern
GdkGLContext * gtk_gl_area_get_context (GtkGLArea *area);

extern
void gtk_gl_area_make_current (GtkGLArea *area);
extern
void gtk_gl_area_attach_buffers (GtkGLArea *area);

extern
void gtk_gl_area_set_error (GtkGLArea *area,
                                                         const GError *error);
extern
GError * gtk_gl_area_get_error (GtkGLArea *area);
# 125 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkgrid.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtkgrid.h"
typedef struct _GtkGrid GtkGrid;
typedef struct _GtkGridPrivate GtkGridPrivate;
typedef struct _GtkGridClass GtkGridClass;

struct _GtkGrid
{

  GtkContainer container;

  GtkGridPrivate *priv;
};





struct _GtkGridClass
{
  GtkContainerClass parent_class;



  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_grid_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_grid_new (void);
extern
void gtk_grid_attach (GtkGrid *grid,
                                            GtkWidget *child,
                                            gint left,
                                            gint top,
                                            gint width,
                                            gint height);
extern
void gtk_grid_attach_next_to (GtkGrid *grid,
                                            GtkWidget *child,
                                            GtkWidget *sibling,
                                            GtkPositionType side,
                                            gint width,
                                            gint height);
extern
GtkWidget *gtk_grid_get_child_at (GtkGrid *grid,
                                            gint left,
                                            gint top);
extern
void gtk_grid_insert_row (GtkGrid *grid,
                                            gint position);
extern
void gtk_grid_insert_column (GtkGrid *grid,
                                            gint position);
extern
void gtk_grid_remove_row (GtkGrid *grid,
                                            gint position);
extern
void gtk_grid_remove_column (GtkGrid *grid,
                                            gint position);
extern
void gtk_grid_insert_next_to (GtkGrid *grid,
                                            GtkWidget *sibling,
                                            GtkPositionType side);
extern
void gtk_grid_set_row_homogeneous (GtkGrid *grid,
                                            gboolean homogeneous);
extern
gboolean gtk_grid_get_row_homogeneous (GtkGrid *grid);
extern
void gtk_grid_set_row_spacing (GtkGrid *grid,
                                            guint spacing);
extern
guint gtk_grid_get_row_spacing (GtkGrid *grid);
extern
void gtk_grid_set_column_homogeneous (GtkGrid *grid,
                                            gboolean homogeneous);
extern
gboolean gtk_grid_get_column_homogeneous (GtkGrid *grid);
extern
void gtk_grid_set_column_spacing (GtkGrid *grid,
                                            guint spacing);
extern
guint gtk_grid_get_column_spacing (GtkGrid *grid);
extern
void gtk_grid_set_row_baseline_position (GtkGrid *grid,
            gint row,
            GtkBaselinePosition pos);
extern
GtkBaselinePosition gtk_grid_get_row_baseline_position (GtkGrid *grid,
       gint row);
extern
void gtk_grid_set_baseline_row (GtkGrid *grid,
         gint row);
extern
gint gtk_grid_get_baseline_row (GtkGrid *grid);
# 126 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkheaderbar.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkheaderbar.h"
typedef struct _GtkHeaderBar GtkHeaderBar;
typedef struct _GtkHeaderBarPrivate GtkHeaderBarPrivate;
typedef struct _GtkHeaderBarClass GtkHeaderBarClass;

struct _GtkHeaderBar
{
  GtkContainer container;
};

struct _GtkHeaderBarClass
{
  GtkContainerClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_header_bar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_header_bar_new (void);
extern
void gtk_header_bar_set_title (GtkHeaderBar *bar,
                                               const gchar *title);
extern
const gchar *gtk_header_bar_get_title (GtkHeaderBar *bar);
extern
void gtk_header_bar_set_subtitle (GtkHeaderBar *bar,
                                               const gchar *subtitle);
extern
const gchar *gtk_header_bar_get_subtitle (GtkHeaderBar *bar);


extern
void gtk_header_bar_set_custom_title (GtkHeaderBar *bar,
                                               GtkWidget *title_widget);
extern
GtkWidget *gtk_header_bar_get_custom_title (GtkHeaderBar *bar);
extern
void gtk_header_bar_pack_start (GtkHeaderBar *bar,
                                               GtkWidget *child);
extern
void gtk_header_bar_pack_end (GtkHeaderBar *bar,
                                               GtkWidget *child);

extern
gboolean gtk_header_bar_get_show_close_button (GtkHeaderBar *bar);

extern
void gtk_header_bar_set_show_close_button (GtkHeaderBar *bar,
                                                   gboolean setting);

extern
void gtk_header_bar_set_has_subtitle (GtkHeaderBar *bar,
                                              gboolean setting);
extern
gboolean gtk_header_bar_get_has_subtitle (GtkHeaderBar *bar);

extern
void gtk_header_bar_set_decoration_layout (GtkHeaderBar *bar,
                                                   const gchar *layout);
extern
const gchar *gtk_header_bar_get_decoration_layout (GtkHeaderBar *bar);
# 127 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkicontheme.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkicontheme.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkstylecontext.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkstylecontext.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkstyleprovider.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkstyleprovider.h"
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkiconfactory.h" 1
# 48 "/usr/include/gtk-3.0/gtk/deprecated/gtkiconfactory.h"
typedef struct _GtkIconFactory GtkIconFactory;
typedef struct _GtkIconFactoryPrivate GtkIconFactoryPrivate;
typedef struct _GtkIconFactoryClass GtkIconFactoryClass;

struct _GtkIconFactory
{
  GObject parent_instance;


  GtkIconFactoryPrivate *priv;
};





struct _GtkIconFactoryClass
{
  GObjectClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

__attribute__((__deprecated__)) extern
GType gtk_icon_factory_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkIconFactory* gtk_icon_factory_new (void);
__attribute__((__deprecated__)) extern
void gtk_icon_factory_add (GtkIconFactory *factory,
                                           const gchar *stock_id,
                                           GtkIconSet *icon_set);
__attribute__((__deprecated__)) extern
GtkIconSet* gtk_icon_factory_lookup (GtkIconFactory *factory,
                                           const gchar *stock_id);



__attribute__((__deprecated__)) extern
void gtk_icon_factory_add_default (GtkIconFactory *factory);
__attribute__((__deprecated__)) extern
void gtk_icon_factory_remove_default (GtkIconFactory *factory);
__attribute__((__deprecated__)) extern
GtkIconSet* gtk_icon_factory_lookup_default (const gchar *stock_id);
# 110 "/usr/include/gtk-3.0/gtk/deprecated/gtkiconfactory.h"
extern
gboolean gtk_icon_size_lookup (GtkIconSize size,
         gint *width,
         gint *height);

__attribute__((__deprecated__("Use '" "gtk_icon_size_lookup" "' instead"))) extern
gboolean gtk_icon_size_lookup_for_settings (GtkSettings *settings,
         GtkIconSize size,
         gint *width,
         gint *height);

__attribute__((__deprecated__)) extern
GtkIconSize gtk_icon_size_register (const gchar *name,
                                                    gint width,
                                                    gint height);
__attribute__((__deprecated__)) extern
void gtk_icon_size_register_alias (const gchar *alias,
                                                    GtkIconSize target);
__attribute__((__deprecated__)) extern
GtkIconSize gtk_icon_size_from_name (const gchar *name);
__attribute__((__deprecated__)) extern
const gchar* gtk_icon_size_get_name (GtkIconSize size);



__attribute__((__deprecated__)) extern
GType gtk_icon_set_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkIconSet* gtk_icon_set_new (void);
__attribute__((__deprecated__)) extern
GtkIconSet* gtk_icon_set_new_from_pixbuf (GdkPixbuf *pixbuf);

__attribute__((__deprecated__)) extern
GtkIconSet* gtk_icon_set_ref (GtkIconSet *icon_set);
__attribute__((__deprecated__)) extern
void gtk_icon_set_unref (GtkIconSet *icon_set);
__attribute__((__deprecated__)) extern
GtkIconSet* gtk_icon_set_copy (GtkIconSet *icon_set);

__attribute__((__deprecated__("Use '" "gtk_icon_set_render_icon_pixbuf" "' instead"))) extern
GdkPixbuf* gtk_icon_set_render_icon (GtkIconSet *icon_set,
                                          GtkStyle *style,
                                          GtkTextDirection direction,
                                          GtkStateType state,
                                          GtkIconSize size,
                                          GtkWidget *widget,
                                          const gchar *detail);

__attribute__((__deprecated__)) extern
void gtk_icon_set_add_source (GtkIconSet *icon_set,
                                          const GtkIconSource *source);

__attribute__((__deprecated__)) extern
void gtk_icon_set_get_sizes (GtkIconSet *icon_set,
                                          GtkIconSize **sizes,
                                          gint *n_sizes);

__attribute__((__deprecated__)) extern
GType gtk_icon_source_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkIconSource* gtk_icon_source_new (void);
__attribute__((__deprecated__)) extern
GtkIconSource* gtk_icon_source_copy (const GtkIconSource *source);
__attribute__((__deprecated__)) extern
void gtk_icon_source_free (GtkIconSource *source);

__attribute__((__deprecated__)) extern
void gtk_icon_source_set_filename (GtkIconSource *source,
                                                         const gchar *filename);
__attribute__((__deprecated__)) extern
void gtk_icon_source_set_icon_name (GtkIconSource *source,
                                                         const gchar *icon_name);
__attribute__((__deprecated__)) extern
void gtk_icon_source_set_pixbuf (GtkIconSource *source,
                                                         GdkPixbuf *pixbuf);

__attribute__((__deprecated__)) extern
const gchar * gtk_icon_source_get_filename (const GtkIconSource *source);
__attribute__((__deprecated__)) extern
const gchar * gtk_icon_source_get_icon_name (const GtkIconSource *source);
__attribute__((__deprecated__)) extern
GdkPixbuf* gtk_icon_source_get_pixbuf (const GtkIconSource *source);

__attribute__((__deprecated__)) extern
void gtk_icon_source_set_direction_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
__attribute__((__deprecated__)) extern
void gtk_icon_source_set_state_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
__attribute__((__deprecated__)) extern
void gtk_icon_source_set_size_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
__attribute__((__deprecated__)) extern
gboolean gtk_icon_source_get_size_wildcarded (const GtkIconSource *source);
__attribute__((__deprecated__)) extern
gboolean gtk_icon_source_get_state_wildcarded (const GtkIconSource *source);
__attribute__((__deprecated__)) extern
gboolean gtk_icon_source_get_direction_wildcarded (const GtkIconSource *source);
__attribute__((__deprecated__)) extern
void gtk_icon_source_set_direction (GtkIconSource *source,
                                                           GtkTextDirection direction);
__attribute__((__deprecated__)) extern
void gtk_icon_source_set_state (GtkIconSource *source,
                                                           GtkStateType state);
__attribute__((__deprecated__)) extern
void gtk_icon_source_set_size (GtkIconSource *source,
                                                           GtkIconSize size);
__attribute__((__deprecated__)) extern
GtkTextDirection gtk_icon_source_get_direction (const GtkIconSource *source);
__attribute__((__deprecated__)) extern
GtkStateType gtk_icon_source_get_state (const GtkIconSource *source);
__attribute__((__deprecated__)) extern
GtkIconSize gtk_icon_source_get_size (const GtkIconSource *source);
# 28 "/usr/include/gtk-3.0/gtk/gtkstyleprovider.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkstyleproperties.h" 1
# 38 "/usr/include/gtk-3.0/gtk/deprecated/gtkstyleproperties.h"
typedef struct _GtkStyleProperties GtkStyleProperties;
typedef struct _GtkStylePropertiesClass GtkStylePropertiesClass;
typedef struct _GtkStylePropertiesPrivate GtkStylePropertiesPrivate;

typedef struct _GtkSymbolicColor GtkSymbolicColor;
typedef struct _GtkGradient GtkGradient;

struct _GtkStyleProperties
{

  GObject parent_object;
  GtkStylePropertiesPrivate *priv;
};

struct _GtkStylePropertiesClass
{

  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

typedef gboolean (* GtkStylePropertyParser) (const gchar *string,
                                             GValue *value,
                                             GError **error);

__attribute__((__deprecated__)) extern
GType gtk_style_properties_get_type (void) __attribute__ ((__const__));


__attribute__((__deprecated__)) extern
void gtk_style_properties_register_property (GtkStylePropertyParser parse_func,
                                                 GParamSpec *pspec);
__attribute__((__deprecated__)) extern
gboolean gtk_style_properties_lookup_property (const gchar *property_name,
                                                 GtkStylePropertyParser *parse_func,
                                                 GParamSpec **pspec);

__attribute__((__deprecated__)) extern
GtkStyleProperties * gtk_style_properties_new (void);

__attribute__((__deprecated__)) extern
void gtk_style_properties_map_color (GtkStyleProperties *props,
                                                      const gchar *name,
                                                      GtkSymbolicColor *color);
__attribute__((__deprecated__)) extern
GtkSymbolicColor * gtk_style_properties_lookup_color (GtkStyleProperties *props,
                                                      const gchar *name);

__attribute__((__deprecated__)) extern
void gtk_style_properties_set_property (GtkStyleProperties *props,
                                            const gchar *property,
                                            GtkStateFlags state,
                                            const GValue *value);
__attribute__((__deprecated__)) extern
void gtk_style_properties_set_valist (GtkStyleProperties *props,
                                            GtkStateFlags state,
                                            va_list args);
__attribute__((__deprecated__)) extern
void gtk_style_properties_set (GtkStyleProperties *props,
                                            GtkStateFlags state,
                                            ...) __attribute__((__sentinel__));

__attribute__((__deprecated__)) extern
gboolean gtk_style_properties_get_property (GtkStyleProperties *props,
                                            const gchar *property,
                                            GtkStateFlags state,
                                            GValue *value);
__attribute__((__deprecated__)) extern
void gtk_style_properties_get_valist (GtkStyleProperties *props,
                                            GtkStateFlags state,
                                            va_list args);
__attribute__((__deprecated__)) extern
void gtk_style_properties_get (GtkStyleProperties *props,
                                            GtkStateFlags state,
                                            ...) __attribute__((__sentinel__));

__attribute__((__deprecated__)) extern
void gtk_style_properties_unset_property (GtkStyleProperties *props,
                                              const gchar *property,
                                              GtkStateFlags state);

__attribute__((__deprecated__)) extern
void gtk_style_properties_clear (GtkStyleProperties *props);

__attribute__((__deprecated__)) extern
void gtk_style_properties_merge (GtkStyleProperties *props,
                                              const GtkStyleProperties *props_to_merge,
                                              gboolean replace);
# 29 "/usr/include/gtk-3.0/gtk/gtkstyleprovider.h" 2
# 89 "/usr/include/gtk-3.0/gtk/gtkstyleprovider.h"
typedef struct _GtkStyleProviderIface GtkStyleProviderIface;
typedef struct _GtkStyleProvider GtkStyleProvider;







struct _GtkStyleProviderIface
{

  GTypeInterface g_iface;



  GtkStyleProperties * (* get_style) (GtkStyleProvider *provider,
                                      GtkWidgetPath *path);

  gboolean (* get_style_property) (GtkStyleProvider *provider,
                                   GtkWidgetPath *path,
                                   GtkStateFlags state,
                                   GParamSpec *pspec,
                                   GValue *value);

  GtkIconFactory * (* get_icon_factory) (GtkStyleProvider *provider,
      GtkWidgetPath *path);
};

extern
GType gtk_style_provider_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
GtkStyleProperties *gtk_style_provider_get_style (GtkStyleProvider *provider,
                                                  GtkWidgetPath *path);

extern
gboolean gtk_style_provider_get_style_property (GtkStyleProvider *provider,
                                                GtkWidgetPath *path,
                                                GtkStateFlags state,
                                                GParamSpec *pspec,
                                                GValue *value);

__attribute__((__deprecated__("Use '" "((void*)0)" "' instead"))) extern
GtkIconFactory * gtk_style_provider_get_icon_factory (GtkStyleProvider *provider,
            GtkWidgetPath *path);
# 28 "/usr/include/gtk-3.0/gtk/gtkstylecontext.h" 2
# 40 "/usr/include/gtk-3.0/gtk/gtkstylecontext.h"
typedef struct _GtkStyleContextClass GtkStyleContextClass;
typedef struct _GtkStyleContextPrivate GtkStyleContextPrivate;

struct _GtkStyleContext
{
  GObject parent_object;
  GtkStyleContextPrivate *priv;
};

struct _GtkStyleContextClass
{
  GObjectClass parent_class;

  void (* changed) (GtkStyleContext *context);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 1018 "/usr/include/gtk-3.0/gtk/gtkstylecontext.h"
extern
GType gtk_style_context_get_type (void) __attribute__ ((__const__));

extern
GtkStyleContext * gtk_style_context_new (void);

extern
void gtk_style_context_add_provider_for_screen (GdkScreen *screen,
                                                   GtkStyleProvider *provider,
                                                   guint priority);
extern
void gtk_style_context_remove_provider_for_screen (GdkScreen *screen,
                                                   GtkStyleProvider *provider);

extern
void gtk_style_context_add_provider (GtkStyleContext *context,
                                        GtkStyleProvider *provider,
                                        guint priority);

extern
void gtk_style_context_remove_provider (GtkStyleContext *context,
                                        GtkStyleProvider *provider);

extern
void gtk_style_context_save (GtkStyleContext *context);
extern
void gtk_style_context_restore (GtkStyleContext *context);

extern
GtkCssSection * gtk_style_context_get_section (GtkStyleContext *context,
                                               const gchar *property);
extern
void gtk_style_context_get_property (GtkStyleContext *context,
                                     const gchar *property,
                                     GtkStateFlags state,
                                     GValue *value);
extern
void gtk_style_context_get_valist (GtkStyleContext *context,
                                     GtkStateFlags state,
                                     va_list args);
extern
void gtk_style_context_get (GtkStyleContext *context,
                                     GtkStateFlags state,
                                     ...) __attribute__((__sentinel__));

extern
void gtk_style_context_set_state (GtkStyleContext *context,
                                              GtkStateFlags flags);
extern
GtkStateFlags gtk_style_context_get_state (GtkStyleContext *context);

extern
void gtk_style_context_set_scale (GtkStyleContext *context,
                                              gint scale);
extern
gint gtk_style_context_get_scale (GtkStyleContext *context);

__attribute__((__deprecated__)) extern
gboolean gtk_style_context_state_is_running (GtkStyleContext *context,
                                                  GtkStateType state,
                                                  gdouble *progress);

extern
void gtk_style_context_set_path (GtkStyleContext *context,
                                              GtkWidgetPath *path);
extern
const GtkWidgetPath * gtk_style_context_get_path (GtkStyleContext *context);
extern
void gtk_style_context_set_parent (GtkStyleContext *context,
                                              GtkStyleContext *parent);
extern
GtkStyleContext *gtk_style_context_get_parent (GtkStyleContext *context);

extern
GList * gtk_style_context_list_classes (GtkStyleContext *context);

extern
void gtk_style_context_add_class (GtkStyleContext *context,
                                         const gchar *class_name);
extern
void gtk_style_context_remove_class (GtkStyleContext *context,
                                         const gchar *class_name);
extern
gboolean gtk_style_context_has_class (GtkStyleContext *context,
                                         const gchar *class_name);

__attribute__((__deprecated__)) extern
GList * gtk_style_context_list_regions (GtkStyleContext *context);

__attribute__((__deprecated__)) extern
void gtk_style_context_add_region (GtkStyleContext *context,
                                          const gchar *region_name,
                                          GtkRegionFlags flags);
__attribute__((__deprecated__)) extern
void gtk_style_context_remove_region (GtkStyleContext *context,
                                          const gchar *region_name);
__attribute__((__deprecated__)) extern
gboolean gtk_style_context_has_region (GtkStyleContext *context,
                                          const gchar *region_name,
                                          GtkRegionFlags *flags_return);

extern
void gtk_style_context_get_style_property (GtkStyleContext *context,
                                           const gchar *property_name,
                                           GValue *value);
extern
void gtk_style_context_get_style_valist (GtkStyleContext *context,
                                           va_list args);
extern
void gtk_style_context_get_style (GtkStyleContext *context,
                                           ...);

__attribute__((__deprecated__("Use '" "gtk_icon_theme_lookup_icon" "' instead"))) extern
GtkIconSet * gtk_style_context_lookup_icon_set (GtkStyleContext *context,
                                                const gchar *stock_id);
__attribute__((__deprecated__)) extern
GdkPixbuf * gtk_icon_set_render_icon_pixbuf (GtkIconSet *icon_set,
                                                GtkStyleContext *context,
                                                GtkIconSize size);
__attribute__((__deprecated__)) extern
cairo_surface_t *
gtk_icon_set_render_icon_surface (GtkIconSet *icon_set,
      GtkStyleContext *context,
      GtkIconSize size,
      int scale,
      GdkWindow *for_window);

extern
void gtk_style_context_set_screen (GtkStyleContext *context,
                                          GdkScreen *screen);
extern
GdkScreen * gtk_style_context_get_screen (GtkStyleContext *context);

extern
void gtk_style_context_set_frame_clock (GtkStyleContext *context,
                                                  GdkFrameClock *frame_clock);
extern
GdkFrameClock *gtk_style_context_get_frame_clock (GtkStyleContext *context);

__attribute__((__deprecated__("Use '" "gtk_style_context_set_state" "' instead"))) extern
void gtk_style_context_set_direction (GtkStyleContext *context,
                                                  GtkTextDirection direction);
__attribute__((__deprecated__("Use '" "gtk_style_context_get_state" "' instead"))) extern
GtkTextDirection gtk_style_context_get_direction (GtkStyleContext *context);

extern
void gtk_style_context_set_junction_sides (GtkStyleContext *context,
                                                       GtkJunctionSides sides);
extern
GtkJunctionSides gtk_style_context_get_junction_sides (GtkStyleContext *context);

extern
gboolean gtk_style_context_lookup_color (GtkStyleContext *context,
                                         const gchar *color_name,
                                         GdkRGBA *color);

__attribute__((__deprecated__)) extern
void gtk_style_context_notify_state_change (GtkStyleContext *context,
                                             GdkWindow *window,
                                             gpointer region_id,
                                             GtkStateType state,
                                             gboolean state_value);
__attribute__((__deprecated__)) extern
void gtk_style_context_cancel_animations (GtkStyleContext *context,
                                             gpointer region_id);
__attribute__((__deprecated__)) extern
void gtk_style_context_scroll_animations (GtkStyleContext *context,
                                             GdkWindow *window,
                                             gint dx,
                                             gint dy);

__attribute__((__deprecated__)) extern
void gtk_style_context_push_animatable_region (GtkStyleContext *context,
                                               gpointer region_id);
__attribute__((__deprecated__)) extern
void gtk_style_context_pop_animatable_region (GtkStyleContext *context);


extern
void gtk_style_context_get_color (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GdkRGBA *color);
__attribute__((__deprecated__("Use '" "gtk_render_background" "' instead"))) extern
void gtk_style_context_get_background_color (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GdkRGBA *color);
__attribute__((__deprecated__("Use '" "gtk_render_frame" "' instead"))) extern
void gtk_style_context_get_border_color (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GdkRGBA *color);

__attribute__((__deprecated__("Use '" "gtk_style_context_get" "' instead"))) extern
const PangoFontDescription *
     gtk_style_context_get_font (GtkStyleContext *context,
                                             GtkStateFlags state);
extern
void gtk_style_context_get_border (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GtkBorder *border);
extern
void gtk_style_context_get_padding (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GtkBorder *padding);
extern
void gtk_style_context_get_margin (GtkStyleContext *context,
                                             GtkStateFlags state,
                                             GtkBorder *margin);

__attribute__((__deprecated__)) extern
void gtk_style_context_invalidate (GtkStyleContext *context);
extern
void gtk_style_context_reset_widgets (GdkScreen *screen);

__attribute__((__deprecated__("Use '" "gtk_render_background" "' instead"))) extern
void gtk_style_context_set_background (GtkStyleContext *context,
                                             GdkWindow *window);

extern
void gtk_render_insertion_cursor
                                   (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    PangoLayout *layout,
                                    int index,
                                    PangoDirection direction);
__attribute__((__deprecated__)) extern
void gtk_draw_insertion_cursor (GtkWidget *widget,
                                     cairo_t *cr,
                                     const GdkRectangle *location,
                                     gboolean is_primary,
                                     GtkTextDirection direction,
                                     gboolean draw_arrow);

typedef enum {
  GTK_STYLE_CONTEXT_PRINT_NONE = 0,
  GTK_STYLE_CONTEXT_PRINT_RECURSE = 1 << 0,
  GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE = 1 << 1
} GtkStyleContextPrintFlags;

extern
char * gtk_style_context_to_string (GtkStyleContext *context,
                                    GtkStyleContextPrintFlags flags);
# 28 "/usr/include/gtk-3.0/gtk/gtkicontheme.h" 2
# 51 "/usr/include/gtk-3.0/gtk/gtkicontheme.h"
typedef struct _GtkIconInfo GtkIconInfo;
typedef struct _GtkIconInfoClass GtkIconInfoClass;
typedef struct _GtkIconTheme GtkIconTheme;
typedef struct _GtkIconThemeClass GtkIconThemeClass;
typedef struct _GtkIconThemePrivate GtkIconThemePrivate;
# 68 "/usr/include/gtk-3.0/gtk/gtkicontheme.h"
struct _GtkIconTheme
{

  GObject parent_instance;

  GtkIconThemePrivate *priv;
};
# 83 "/usr/include/gtk-3.0/gtk/gtkicontheme.h"
struct _GtkIconThemeClass
{
  GObjectClass parent_class;



  void (* changed) (GtkIconTheme *icon_theme);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 128 "/usr/include/gtk-3.0/gtk/gtkicontheme.h"
typedef enum
{
  GTK_ICON_LOOKUP_NO_SVG = 1 << 0,
  GTK_ICON_LOOKUP_FORCE_SVG = 1 << 1,
  GTK_ICON_LOOKUP_USE_BUILTIN = 1 << 2,
  GTK_ICON_LOOKUP_GENERIC_FALLBACK = 1 << 3,
  GTK_ICON_LOOKUP_FORCE_SIZE = 1 << 4,
  GTK_ICON_LOOKUP_FORCE_REGULAR = 1 << 5,
  GTK_ICON_LOOKUP_FORCE_SYMBOLIC = 1 << 6,
  GTK_ICON_LOOKUP_DIR_LTR = 1 << 7,
  GTK_ICON_LOOKUP_DIR_RTL = 1 << 8
} GtkIconLookupFlags;
# 155 "/usr/include/gtk-3.0/gtk/gtkicontheme.h"
typedef enum {
  GTK_ICON_THEME_NOT_FOUND,
  GTK_ICON_THEME_FAILED
} GtkIconThemeError;

extern
GQuark gtk_icon_theme_error_quark (void);

extern
GType gtk_icon_theme_get_type (void) __attribute__ ((__const__));

extern
GtkIconTheme *gtk_icon_theme_new (void);
extern
GtkIconTheme *gtk_icon_theme_get_default (void);
extern
GtkIconTheme *gtk_icon_theme_get_for_screen (GdkScreen *screen);
extern
void gtk_icon_theme_set_screen (GtkIconTheme *icon_theme,
          GdkScreen *screen);

extern
void gtk_icon_theme_set_search_path (GtkIconTheme *icon_theme,
          const gchar *path[],
          gint n_elements);
extern
void gtk_icon_theme_get_search_path (GtkIconTheme *icon_theme,
          gchar **path[],
          gint *n_elements);
extern
void gtk_icon_theme_append_search_path (GtkIconTheme *icon_theme,
          const gchar *path);
extern
void gtk_icon_theme_prepend_search_path (GtkIconTheme *icon_theme,
          const gchar *path);

extern
void gtk_icon_theme_add_resource_path (GtkIconTheme *icon_theme,
                                                    const gchar *path);

extern
void gtk_icon_theme_set_custom_theme (GtkIconTheme *icon_theme,
          const gchar *theme_name);

extern
gboolean gtk_icon_theme_has_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name);
extern
gint *gtk_icon_theme_get_icon_sizes (GtkIconTheme *icon_theme,
          const gchar *icon_name);
extern
GtkIconInfo * gtk_icon_theme_lookup_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name,
          gint size,
          GtkIconLookupFlags flags);
extern
GtkIconInfo * gtk_icon_theme_lookup_icon_for_scale (GtkIconTheme *icon_theme,
                                                    const gchar *icon_name,
                                                    gint size,
                                                    gint scale,
                                                    GtkIconLookupFlags flags);

extern
GtkIconInfo * gtk_icon_theme_choose_icon (GtkIconTheme *icon_theme,
          const gchar *icon_names[],
          gint size,
          GtkIconLookupFlags flags);
extern
GtkIconInfo * gtk_icon_theme_choose_icon_for_scale (GtkIconTheme *icon_theme,
          const gchar *icon_names[],
          gint size,
                                                    gint scale,
          GtkIconLookupFlags flags);
extern
GdkPixbuf * gtk_icon_theme_load_icon (GtkIconTheme *icon_theme,
          const gchar *icon_name,
          gint size,
          GtkIconLookupFlags flags,
          GError **error);
extern
GdkPixbuf * gtk_icon_theme_load_icon_for_scale (GtkIconTheme *icon_theme,
                                                    const gchar *icon_name,
                                                    gint size,
                                                    gint scale,
                                                    GtkIconLookupFlags flags,
                                                    GError **error);
extern
cairo_surface_t * gtk_icon_theme_load_surface (GtkIconTheme *icon_theme,
          const gchar *icon_name,
          gint size,
          gint scale,
          GdkWindow *for_window,
          GtkIconLookupFlags flags,
          GError **error);

extern
GtkIconInfo * gtk_icon_theme_lookup_by_gicon (GtkIconTheme *icon_theme,
                                                    GIcon *icon,
                                                    gint size,
                                                    GtkIconLookupFlags flags);
extern
GtkIconInfo * gtk_icon_theme_lookup_by_gicon_for_scale (GtkIconTheme *icon_theme,
                                                        GIcon *icon,
                                                        gint size,
                                                        gint scale,
                                                        GtkIconLookupFlags flags);


extern
GList * gtk_icon_theme_list_icons (GtkIconTheme *icon_theme,
          const gchar *context);
extern
GList * gtk_icon_theme_list_contexts (GtkIconTheme *icon_theme);
extern
char * gtk_icon_theme_get_example_icon_name (GtkIconTheme *icon_theme);

extern
gboolean gtk_icon_theme_rescan_if_needed (GtkIconTheme *icon_theme);

__attribute__((__deprecated__("Use '" "gtk_icon_theme_add_resource_path" "' instead"))) extern
void gtk_icon_theme_add_builtin_icon (const gchar *icon_name,
                 gint size,
                 GdkPixbuf *pixbuf);

extern
GType gtk_icon_info_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "g_object_ref" "' instead"))) extern
GtkIconInfo * gtk_icon_info_copy (GtkIconInfo *icon_info);
__attribute__((__deprecated__("Use '" "g_object_unref" "' instead"))) extern
void gtk_icon_info_free (GtkIconInfo *icon_info);

extern
GtkIconInfo * gtk_icon_info_new_for_pixbuf (GtkIconTheme *icon_theme,
                                                        GdkPixbuf *pixbuf);

extern
gint gtk_icon_info_get_base_size (GtkIconInfo *icon_info);
extern
gint gtk_icon_info_get_base_scale (GtkIconInfo *icon_info);
extern
const gchar * gtk_icon_info_get_filename (GtkIconInfo *icon_info);
__attribute__((__deprecated__)) extern
GdkPixbuf * gtk_icon_info_get_builtin_pixbuf (GtkIconInfo *icon_info);
extern
gboolean gtk_icon_info_is_symbolic (GtkIconInfo *icon_info);
extern
GdkPixbuf * gtk_icon_info_load_icon (GtkIconInfo *icon_info,
       GError **error);
extern
cairo_surface_t * gtk_icon_info_load_surface (GtkIconInfo *icon_info,
       GdkWindow *for_window,
       GError **error);
extern
void gtk_icon_info_load_icon_async (GtkIconInfo *icon_info,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
extern
GdkPixbuf * gtk_icon_info_load_icon_finish (GtkIconInfo *icon_info,
             GAsyncResult *res,
             GError **error);
extern
GdkPixbuf * gtk_icon_info_load_symbolic (GtkIconInfo *icon_info,
                                                        const GdkRGBA *fg,
                                                        const GdkRGBA *success_color,
                                                        const GdkRGBA *warning_color,
                                                        const GdkRGBA *error_color,
                                                        gboolean *was_symbolic,
                                                        GError **error);
extern
void gtk_icon_info_load_symbolic_async (GtkIconInfo *icon_info,
        const GdkRGBA *fg,
        const GdkRGBA *success_color,
        const GdkRGBA *warning_color,
        const GdkRGBA *error_color,
        GCancellable *cancellable,
        GAsyncReadyCallback callback,
        gpointer user_data);
extern
GdkPixbuf * gtk_icon_info_load_symbolic_finish (GtkIconInfo *icon_info,
         GAsyncResult *res,
         gboolean *was_symbolic,
         GError **error);
extern
GdkPixbuf * gtk_icon_info_load_symbolic_for_context (GtkIconInfo *icon_info,
                                                               GtkStyleContext *context,
                                                               gboolean *was_symbolic,
                                                               GError **error);
extern
void gtk_icon_info_load_symbolic_for_context_async (GtkIconInfo *icon_info,
             GtkStyleContext *context,
             GCancellable *cancellable,
             GAsyncReadyCallback callback,
             gpointer user_data);
extern
GdkPixbuf * gtk_icon_info_load_symbolic_for_context_finish (GtkIconInfo *icon_info,
              GAsyncResult *res,
              gboolean *was_symbolic,
              GError **error);
__attribute__((__deprecated__("Use '" "gtk_icon_info_load_symbol_for_context" "' instead"))) extern
GdkPixbuf * gtk_icon_info_load_symbolic_for_style (GtkIconInfo *icon_info,
                                                              GtkStyle *style,
                                                              GtkStateType state,
                                                              gboolean *was_symbolic,
                                                              GError **error);
__attribute__((__deprecated__)) extern
void gtk_icon_info_set_raw_coordinates (GtkIconInfo *icon_info,
        gboolean raw_coordinates);

__attribute__((__deprecated__)) extern
gboolean gtk_icon_info_get_embedded_rect (GtkIconInfo *icon_info,
             GdkRectangle *rectangle);
__attribute__((__deprecated__)) extern
gboolean gtk_icon_info_get_attach_points (GtkIconInfo *icon_info,
             GdkPoint **points,
             gint *n_points);
__attribute__((__deprecated__)) extern
const gchar * gtk_icon_info_get_display_name (GtkIconInfo *icon_info);
# 128 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkiconview.h" 1
# 30 "/usr/include/gtk-3.0/gtk/gtkiconview.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktooltip.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtktooltip.h"
extern
GType gtk_tooltip_get_type (void);

extern
void gtk_tooltip_set_markup (GtkTooltip *tooltip,
                                          const gchar *markup);
extern
void gtk_tooltip_set_text (GtkTooltip *tooltip,
                                          const gchar *text);
extern
void gtk_tooltip_set_icon (GtkTooltip *tooltip,
                                          GdkPixbuf *pixbuf);
__attribute__((__deprecated__("Use '" "gtk_tooltip_set_icon_from_icon_name" "' instead"))) extern
void gtk_tooltip_set_icon_from_stock (GtkTooltip *tooltip,
                                          const gchar *stock_id,
                                          GtkIconSize size);
extern
void gtk_tooltip_set_icon_from_icon_name (GtkTooltip *tooltip,
              const gchar *icon_name,
              GtkIconSize size);
extern
void gtk_tooltip_set_icon_from_gicon (GtkTooltip *tooltip,
       GIcon *gicon,
       GtkIconSize size);
extern
void gtk_tooltip_set_custom (GtkTooltip *tooltip,
                                          GtkWidget *custom_widget);

extern
void gtk_tooltip_set_tip_area (GtkTooltip *tooltip,
                                          const GdkRectangle *rect);

extern
void gtk_tooltip_trigger_tooltip_query (GdkDisplay *display);
# 31 "/usr/include/gtk-3.0/gtk/gtkiconview.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtkiconview.h"
typedef struct _GtkIconView GtkIconView;
typedef struct _GtkIconViewClass GtkIconViewClass;
typedef struct _GtkIconViewPrivate GtkIconViewPrivate;
# 54 "/usr/include/gtk-3.0/gtk/gtkiconview.h"
typedef void (* GtkIconViewForeachFunc) (GtkIconView *icon_view,
          GtkTreePath *path,
          gpointer data);
# 69 "/usr/include/gtk-3.0/gtk/gtkiconview.h"
typedef enum
{
  GTK_ICON_VIEW_NO_DROP,
  GTK_ICON_VIEW_DROP_INTO,
  GTK_ICON_VIEW_DROP_LEFT,
  GTK_ICON_VIEW_DROP_RIGHT,
  GTK_ICON_VIEW_DROP_ABOVE,
  GTK_ICON_VIEW_DROP_BELOW
} GtkIconViewDropPosition;

struct _GtkIconView
{
  GtkContainer parent;


  GtkIconViewPrivate *priv;
};

struct _GtkIconViewClass
{
  GtkContainerClass parent_class;

  void (* item_activated) (GtkIconView *icon_view,
          GtkTreePath *path);
  void (* selection_changed) (GtkIconView *icon_view);


  void (* select_all) (GtkIconView *icon_view);
  void (* unselect_all) (GtkIconView *icon_view);
  void (* select_cursor_item) (GtkIconView *icon_view);
  void (* toggle_cursor_item) (GtkIconView *icon_view);
  gboolean (* move_cursor) (GtkIconView *icon_view,
          GtkMovementStep step,
          gint count);
  gboolean (* activate_cursor_item) (GtkIconView *icon_view);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_icon_view_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_icon_view_new (void);
extern
GtkWidget * gtk_icon_view_new_with_area (GtkCellArea *area);
extern
GtkWidget * gtk_icon_view_new_with_model (GtkTreeModel *model);

extern
void gtk_icon_view_set_model (GtkIconView *icon_view,
              GtkTreeModel *model);
extern
GtkTreeModel * gtk_icon_view_get_model (GtkIconView *icon_view);
extern
void gtk_icon_view_set_text_column (GtkIconView *icon_view,
               gint column);
extern
gint gtk_icon_view_get_text_column (GtkIconView *icon_view);
extern
void gtk_icon_view_set_markup_column (GtkIconView *icon_view,
             gint column);
extern
gint gtk_icon_view_get_markup_column (GtkIconView *icon_view);
extern
void gtk_icon_view_set_pixbuf_column (GtkIconView *icon_view,
             gint column);
extern
gint gtk_icon_view_get_pixbuf_column (GtkIconView *icon_view);

extern
void gtk_icon_view_set_item_orientation (GtkIconView *icon_view,
                                                   GtkOrientation orientation);
extern
GtkOrientation gtk_icon_view_get_item_orientation (GtkIconView *icon_view);
extern
void gtk_icon_view_set_columns (GtkIconView *icon_view,
              gint columns);
extern
gint gtk_icon_view_get_columns (GtkIconView *icon_view);
extern
void gtk_icon_view_set_item_width (GtkIconView *icon_view,
             gint item_width);
extern
gint gtk_icon_view_get_item_width (GtkIconView *icon_view);
extern
void gtk_icon_view_set_spacing (GtkIconView *icon_view,
              gint spacing);
extern
gint gtk_icon_view_get_spacing (GtkIconView *icon_view);
extern
void gtk_icon_view_set_row_spacing (GtkIconView *icon_view,
             gint row_spacing);
extern
gint gtk_icon_view_get_row_spacing (GtkIconView *icon_view);
extern
void gtk_icon_view_set_column_spacing (GtkIconView *icon_view,
             gint column_spacing);
extern
gint gtk_icon_view_get_column_spacing (GtkIconView *icon_view);
extern
void gtk_icon_view_set_margin (GtkIconView *icon_view,
             gint margin);
extern
gint gtk_icon_view_get_margin (GtkIconView *icon_view);
extern
void gtk_icon_view_set_item_padding (GtkIconView *icon_view,
             gint item_padding);
extern
gint gtk_icon_view_get_item_padding (GtkIconView *icon_view);

extern
GtkTreePath * gtk_icon_view_get_path_at_pos (GtkIconView *icon_view,
      gint x,
      gint y);
extern
gboolean gtk_icon_view_get_item_at_pos (GtkIconView *icon_view,
      gint x,
      gint y,
      GtkTreePath **path,
      GtkCellRenderer **cell);
extern
gboolean gtk_icon_view_get_visible_range (GtkIconView *icon_view,
      GtkTreePath **start_path,
      GtkTreePath **end_path);
extern
void gtk_icon_view_set_activate_on_single_click (GtkIconView *icon_view,
                                                           gboolean single);
extern
gboolean gtk_icon_view_get_activate_on_single_click (GtkIconView *icon_view);

extern
void gtk_icon_view_selected_foreach (GtkIconView *icon_view,
       GtkIconViewForeachFunc func,
       gpointer data);
extern
void gtk_icon_view_set_selection_mode (GtkIconView *icon_view,
       GtkSelectionMode mode);
extern
GtkSelectionMode gtk_icon_view_get_selection_mode (GtkIconView *icon_view);
extern
void gtk_icon_view_select_path (GtkIconView *icon_view,
         GtkTreePath *path);
extern
void gtk_icon_view_unselect_path (GtkIconView *icon_view,
         GtkTreePath *path);
extern
gboolean gtk_icon_view_path_is_selected (GtkIconView *icon_view,
         GtkTreePath *path);
extern
gint gtk_icon_view_get_item_row (GtkIconView *icon_view,
                                                   GtkTreePath *path);
extern
gint gtk_icon_view_get_item_column (GtkIconView *icon_view,
                                                   GtkTreePath *path);
extern
GList *gtk_icon_view_get_selected_items (GtkIconView *icon_view);
extern
void gtk_icon_view_select_all (GtkIconView *icon_view);
extern
void gtk_icon_view_unselect_all (GtkIconView *icon_view);
extern
void gtk_icon_view_item_activated (GtkIconView *icon_view,
         GtkTreePath *path);
extern
void gtk_icon_view_set_cursor (GtkIconView *icon_view,
         GtkTreePath *path,
         GtkCellRenderer *cell,
         gboolean start_editing);
extern
gboolean gtk_icon_view_get_cursor (GtkIconView *icon_view,
         GtkTreePath **path,
         GtkCellRenderer **cell);
extern
void gtk_icon_view_scroll_to_path (GtkIconView *icon_view,
                                                   GtkTreePath *path,
         gboolean use_align,
         gfloat row_align,
                                                   gfloat col_align);


extern
void gtk_icon_view_enable_model_drag_source (GtkIconView *icon_view,
              GdkModifierType start_button_mask,
              const GtkTargetEntry *targets,
              gint n_targets,
              GdkDragAction actions);
extern
void gtk_icon_view_enable_model_drag_dest (GtkIconView *icon_view,
              const GtkTargetEntry *targets,
              gint n_targets,
              GdkDragAction actions);
extern
void gtk_icon_view_unset_model_drag_source (GtkIconView *icon_view);
extern
void gtk_icon_view_unset_model_drag_dest (GtkIconView *icon_view);
extern
void gtk_icon_view_set_reorderable (GtkIconView *icon_view,
              gboolean reorderable);
extern
gboolean gtk_icon_view_get_reorderable (GtkIconView *icon_view);



extern
void gtk_icon_view_set_drag_dest_item (GtkIconView *icon_view,
              GtkTreePath *path,
              GtkIconViewDropPosition pos);
extern
void gtk_icon_view_get_drag_dest_item (GtkIconView *icon_view,
              GtkTreePath **path,
              GtkIconViewDropPosition *pos);
extern
gboolean gtk_icon_view_get_dest_item_at_pos (GtkIconView *icon_view,
              gint drag_x,
              gint drag_y,
              GtkTreePath **path,
              GtkIconViewDropPosition *pos);
extern
cairo_surface_t *gtk_icon_view_create_drag_icon (GtkIconView *icon_view,
              GtkTreePath *path);

extern
void gtk_icon_view_convert_widget_to_bin_window_coords (GtkIconView *icon_view,
                                                               gint wx,
                                                               gint wy,
                                                               gint *bx,
                                                               gint *by);
extern
gboolean gtk_icon_view_get_cell_rect (GtkIconView *icon_view,
              GtkTreePath *path,
              GtkCellRenderer *cell,
              GdkRectangle *rect);


extern
void gtk_icon_view_set_tooltip_item (GtkIconView *icon_view,
                                                               GtkTooltip *tooltip,
                                                               GtkTreePath *path);
extern
void gtk_icon_view_set_tooltip_cell (GtkIconView *icon_view,
                                                               GtkTooltip *tooltip,
                                                               GtkTreePath *path,
                                                               GtkCellRenderer *cell);
extern
gboolean gtk_icon_view_get_tooltip_context (GtkIconView *icon_view,
                                                               gint *x,
                                                               gint *y,
                                                               gboolean keyboard_tip,
                                                               GtkTreeModel **model,
                                                               GtkTreePath **path,
                                                               GtkTreeIter *iter);
extern
void gtk_icon_view_set_tooltip_column (GtkIconView *icon_view,
                                                               gint column);
extern
gint gtk_icon_view_get_tooltip_column (GtkIconView *icon_view);
# 129 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtkimcontextinfo.h" 1
# 30 "/usr/include/gtk-3.0/gtk/gtkimcontextinfo.h"
typedef struct _GtkIMContextInfo GtkIMContextInfo;

struct _GtkIMContextInfo
{
  const gchar *context_id;
  const gchar *context_name;
  const gchar *domain;
  const gchar *domain_dirname;
  const gchar *default_locales;
};
# 132 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkimcontextsimple.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkimcontextsimple.h"
typedef struct _GtkIMContextSimple GtkIMContextSimple;
typedef struct _GtkIMContextSimplePrivate GtkIMContextSimplePrivate;
typedef struct _GtkIMContextSimpleClass GtkIMContextSimpleClass;

struct _GtkIMContextSimple
{
  GtkIMContext object;


  GtkIMContextSimplePrivate *priv;
};

struct _GtkIMContextSimpleClass
{
  GtkIMContextClass parent_class;
};

extern
GType gtk_im_context_simple_get_type (void) __attribute__ ((__const__));
extern
GtkIMContext *gtk_im_context_simple_new (void);

extern
void gtk_im_context_simple_add_table (GtkIMContextSimple *context_simple,
            guint16 *data,
            gint max_seq_len,
            gint n_seqs);
extern
void gtk_im_context_simple_add_compose_file (GtkIMContextSimple *context_simple,
                                                      const gchar *compose_file);
# 133 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkimmulticontext.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkimmulticontext.h"
typedef struct _GtkIMMulticontext GtkIMMulticontext;
typedef struct _GtkIMMulticontextClass GtkIMMulticontextClass;
typedef struct _GtkIMMulticontextPrivate GtkIMMulticontextPrivate;

struct _GtkIMMulticontext
{
  GtkIMContext object;


  GtkIMMulticontextPrivate *priv;
};

struct _GtkIMMulticontextClass
{
  GtkIMContextClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_im_multicontext_get_type (void) __attribute__ ((__const__));
extern
GtkIMContext *gtk_im_multicontext_new (void);

__attribute__((__deprecated__)) extern
void gtk_im_multicontext_append_menuitems (GtkIMMulticontext *context,
          GtkMenuShell *menushell);
extern
const char * gtk_im_multicontext_get_context_id (GtkIMMulticontext *context);

extern
void gtk_im_multicontext_set_context_id (GtkIMMulticontext *context,
                                                    const char *context_id);
# 134 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkinfobar.h" 1
# 52 "/usr/include/gtk-3.0/gtk/gtkinfobar.h"
typedef struct _GtkInfoBarPrivate GtkInfoBarPrivate;
typedef struct _GtkInfoBarClass GtkInfoBarClass;
typedef struct _GtkInfoBar GtkInfoBar;


struct _GtkInfoBar
{
  GtkBox parent;


  GtkInfoBarPrivate *priv;
};


struct _GtkInfoBarClass
{
  GtkBoxClass parent_class;


  void (* response) (GtkInfoBar *info_bar, gint response_id);


  void (* close) (GtkInfoBar *info_bar);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_info_bar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_info_bar_new (void);

extern
GtkWidget *gtk_info_bar_new_with_buttons (const gchar *first_button_text,
                                                    ...);

extern
GtkWidget *gtk_info_bar_get_action_area (GtkInfoBar *info_bar);
extern
GtkWidget *gtk_info_bar_get_content_area (GtkInfoBar *info_bar);
extern
void gtk_info_bar_add_action_widget (GtkInfoBar *info_bar,
                                                    GtkWidget *child,
                                                    gint response_id);
extern
GtkWidget *gtk_info_bar_add_button (GtkInfoBar *info_bar,
                                                    const gchar *button_text,
                                                    gint response_id);
extern
void gtk_info_bar_add_buttons (GtkInfoBar *info_bar,
                                                    const gchar *first_button_text,
                                                    ...);
extern
void gtk_info_bar_set_response_sensitive (GtkInfoBar *info_bar,
                                                    gint response_id,
                                                    gboolean setting);
extern
void gtk_info_bar_set_default_response (GtkInfoBar *info_bar,
                                                    gint response_id);


extern
void gtk_info_bar_response (GtkInfoBar *info_bar,
                                                    gint response_id);

extern
void gtk_info_bar_set_message_type (GtkInfoBar *info_bar,
                                                    GtkMessageType message_type);
extern
GtkMessageType gtk_info_bar_get_message_type (GtkInfoBar *info_bar);

extern
void gtk_info_bar_set_show_close_button (GtkInfoBar *info_bar,
                                                    gboolean setting);
extern
gboolean gtk_info_bar_get_show_close_button (GtkInfoBar *info_bar);

extern
void gtk_info_bar_set_revealed (GtkInfoBar *info_bar,
                                                    gboolean revealed);
extern
gboolean gtk_info_bar_get_revealed (GtkInfoBar *info_bar);
# 135 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkinvisible.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkinvisible.h"
typedef struct _GtkInvisible GtkInvisible;
typedef struct _GtkInvisiblePrivate GtkInvisiblePrivate;
typedef struct _GtkInvisibleClass GtkInvisibleClass;

struct _GtkInvisible
{
  GtkWidget widget;


  GtkInvisiblePrivate *priv;
};

struct _GtkInvisibleClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_invisible_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_invisible_new (void);
extern
GtkWidget* gtk_invisible_new_for_screen (GdkScreen *screen);
extern
void gtk_invisible_set_screen (GtkInvisible *invisible,
      GdkScreen *screen);
extern
GdkScreen* gtk_invisible_get_screen (GtkInvisible *invisible);
# 136 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtklayout.h" 1
# 50 "/usr/include/gtk-3.0/gtk/gtklayout.h"
typedef struct _GtkLayout GtkLayout;
typedef struct _GtkLayoutPrivate GtkLayoutPrivate;
typedef struct _GtkLayoutClass GtkLayoutClass;

struct _GtkLayout
{
  GtkContainer container;


  GtkLayoutPrivate *priv;
};

struct _GtkLayoutClass
{
  GtkContainerClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_layout_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_layout_new (GtkAdjustment *hadjustment,
               GtkAdjustment *vadjustment);
extern
GdkWindow* gtk_layout_get_bin_window (GtkLayout *layout);
extern
void gtk_layout_put (GtkLayout *layout,
                             GtkWidget *child_widget,
                             gint x,
                             gint y);

extern
void gtk_layout_move (GtkLayout *layout,
                             GtkWidget *child_widget,
                             gint x,
                             gint y);

extern
void gtk_layout_set_size (GtkLayout *layout,
                      guint width,
                      guint height);
extern
void gtk_layout_get_size (GtkLayout *layout,
        guint *width,
        guint *height);

__attribute__((__deprecated__("Use '" "gtk_scrollable_get_hadjustment" "' instead"))) extern
GtkAdjustment* gtk_layout_get_hadjustment (GtkLayout *layout);
__attribute__((__deprecated__("Use '" "gtk_scrollable_get_vadjustment" "' instead"))) extern
GtkAdjustment* gtk_layout_get_vadjustment (GtkLayout *layout);
__attribute__((__deprecated__("Use '" "gtk_scrollable_set_hadjustment" "' instead"))) extern
void gtk_layout_set_hadjustment (GtkLayout *layout,
                                           GtkAdjustment *adjustment);
__attribute__((__deprecated__("Use '" "gtk_scrollable_set_vadjustment" "' instead"))) extern
void gtk_layout_set_vadjustment (GtkLayout *layout,
                                           GtkAdjustment *adjustment);
# 138 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtklevelbar.h" 1
# 66 "/usr/include/gtk-3.0/gtk/gtklevelbar.h"
typedef struct _GtkLevelBarClass GtkLevelBarClass;
typedef struct _GtkLevelBar GtkLevelBar;
typedef struct _GtkLevelBarPrivate GtkLevelBarPrivate;

struct _GtkLevelBar {

  GtkWidget parent;

  GtkLevelBarPrivate *priv;
};

struct _GtkLevelBarClass {

  GtkWidgetClass parent_class;

  void (* offset_changed) (GtkLevelBar *self,
                           const gchar *name);


  gpointer padding[16];
};

extern
GType gtk_level_bar_get_type (void) __attribute__ ((__const__));

extern
GtkWidget *gtk_level_bar_new (void);

extern
GtkWidget *gtk_level_bar_new_for_interval (gdouble min_value,
                                             gdouble max_value);

extern
void gtk_level_bar_set_mode (GtkLevelBar *self,
                                             GtkLevelBarMode mode);
extern
GtkLevelBarMode gtk_level_bar_get_mode (GtkLevelBar *self);

extern
void gtk_level_bar_set_value (GtkLevelBar *self,
                                             gdouble value);
extern
gdouble gtk_level_bar_get_value (GtkLevelBar *self);

extern
void gtk_level_bar_set_min_value (GtkLevelBar *self,
                                             gdouble value);
extern
gdouble gtk_level_bar_get_min_value (GtkLevelBar *self);

extern
void gtk_level_bar_set_max_value (GtkLevelBar *self,
                                             gdouble value);
extern
gdouble gtk_level_bar_get_max_value (GtkLevelBar *self);

extern
void gtk_level_bar_set_inverted (GtkLevelBar *self,
                                             gboolean inverted);

extern
gboolean gtk_level_bar_get_inverted (GtkLevelBar *self);

extern
void gtk_level_bar_add_offset_value (GtkLevelBar *self,
                                             const gchar *name,
                                             gdouble value);
extern
void gtk_level_bar_remove_offset_value (GtkLevelBar *self,
                                              const gchar *name);
extern
gboolean gtk_level_bar_get_offset_value (GtkLevelBar *self,
                                             const gchar *name,
                                             gdouble *value);
# 139 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtklinkbutton.h" 1
# 42 "/usr/include/gtk-3.0/gtk/gtklinkbutton.h"
typedef struct _GtkLinkButton GtkLinkButton;
typedef struct _GtkLinkButtonClass GtkLinkButtonClass;
typedef struct _GtkLinkButtonPrivate GtkLinkButtonPrivate;







struct _GtkLinkButton
{

  GtkButton parent_instance;

  GtkLinkButtonPrivate *priv;
};
# 67 "/usr/include/gtk-3.0/gtk/gtklinkbutton.h"
struct _GtkLinkButtonClass
{

  GtkButtonClass parent_class;


  gboolean (* activate_link) (GtkLinkButton *button);



  void (*_gtk_padding1) (void);
  void (*_gtk_padding2) (void);
  void (*_gtk_padding3) (void);
  void (*_gtk_padding4) (void);
};

extern
GType gtk_link_button_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_link_button_new (const gchar *uri);
extern
GtkWidget * gtk_link_button_new_with_label (const gchar *uri,
               const gchar *label);

extern
const gchar * gtk_link_button_get_uri (GtkLinkButton *link_button);
extern
void gtk_link_button_set_uri (GtkLinkButton *link_button,
               const gchar *uri);

extern
gboolean gtk_link_button_get_visited (GtkLinkButton *link_button);
extern
void gtk_link_button_set_visited (GtkLinkButton *link_button,
                                                         gboolean visited);
# 140 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtklistbox.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
typedef struct _GtkListBox GtkListBox;
typedef struct _GtkListBoxClass GtkListBoxClass;

typedef struct _GtkListBoxRow GtkListBoxRow;
typedef struct _GtkListBoxRowClass GtkListBoxRowClass;

struct _GtkListBox
{
  GtkContainer parent_instance;
};
# 64 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
struct _GtkListBoxClass
{
  GtkContainerClass parent_class;



  void (*row_selected) (GtkListBox *box,
                               GtkListBoxRow *row);
  void (*row_activated) (GtkListBox *box,
                               GtkListBoxRow *row);
  void (*activate_cursor_row) (GtkListBox *box);
  void (*toggle_cursor_row) (GtkListBox *box);
  void (*move_cursor) (GtkListBox *box,
                               GtkMovementStep step,
                               gint count);
  void (*selected_rows_changed) (GtkListBox *box);
  void (*select_all) (GtkListBox *box);
  void (*unselect_all) (GtkListBox *box);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
# 98 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
struct _GtkListBoxRow
{
  GtkBin parent_instance;
};






struct _GtkListBoxRowClass
{
  GtkBinClass parent_class;



  void (* activate) (GtkListBoxRow *row);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};
# 135 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
typedef gboolean (*GtkListBoxFilterFunc) (GtkListBoxRow *row,
                                          gpointer user_data);
# 151 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
typedef gint (*GtkListBoxSortFunc) (GtkListBoxRow *row1,
                                    GtkListBoxRow *row2,
                                    gpointer user_data);
# 168 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
typedef void (*GtkListBoxUpdateHeaderFunc) (GtkListBoxRow *row,
                                            GtkListBoxRow *before,
                                            gpointer user_data);
# 189 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
typedef GtkWidget * (*GtkListBoxCreateWidgetFunc) (gpointer item,
                                                   gpointer user_data);

extern
GType gtk_list_box_row_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_list_box_row_new (void);
extern
GtkWidget* gtk_list_box_row_get_header (GtkListBoxRow *row);
extern
void gtk_list_box_row_set_header (GtkListBoxRow *row,
                                           GtkWidget *header);
extern
gint gtk_list_box_row_get_index (GtkListBoxRow *row);
extern
void gtk_list_box_row_changed (GtkListBoxRow *row);

extern
gboolean gtk_list_box_row_is_selected (GtkListBoxRow *row);

extern
void gtk_list_box_row_set_selectable (GtkListBoxRow *row,
                                            gboolean selectable);
extern
gboolean gtk_list_box_row_get_selectable (GtkListBoxRow *row);


extern
void gtk_list_box_row_set_activatable (GtkListBoxRow *row,
                                             gboolean activatable);
extern
gboolean gtk_list_box_row_get_activatable (GtkListBoxRow *row);

extern
GType gtk_list_box_get_type (void) __attribute__ ((__const__));
extern
void gtk_list_box_prepend (GtkListBox *box,
                                                          GtkWidget *child);
extern
void gtk_list_box_insert (GtkListBox *box,
                                                          GtkWidget *child,
                                                          gint position);
extern
GtkListBoxRow* gtk_list_box_get_selected_row (GtkListBox *box);
extern
GtkListBoxRow* gtk_list_box_get_row_at_index (GtkListBox *box,
                                                          gint index_);
extern
GtkListBoxRow* gtk_list_box_get_row_at_y (GtkListBox *box,
                                                          gint y);
extern
void gtk_list_box_select_row (GtkListBox *box,
                                                          GtkListBoxRow *row);
extern
void gtk_list_box_set_placeholder (GtkListBox *box,
                                                          GtkWidget *placeholder);
extern
void gtk_list_box_set_adjustment (GtkListBox *box,
                                                          GtkAdjustment *adjustment);
extern
GtkAdjustment *gtk_list_box_get_adjustment (GtkListBox *box);

typedef void (* GtkListBoxForeachFunc) (GtkListBox *box,
                                        GtkListBoxRow *row,
                                        gpointer user_data);

extern
void gtk_list_box_selected_foreach (GtkListBox *box,
                                                          GtkListBoxForeachFunc func,
                                                          gpointer data);
extern
GList *gtk_list_box_get_selected_rows (GtkListBox *box);
extern
void gtk_list_box_unselect_row (GtkListBox *box,
                                                          GtkListBoxRow *row);
extern
void gtk_list_box_select_all (GtkListBox *box);
extern
void gtk_list_box_unselect_all (GtkListBox *box);

extern
void gtk_list_box_set_selection_mode (GtkListBox *box,
                                                          GtkSelectionMode mode);
extern
GtkSelectionMode gtk_list_box_get_selection_mode (GtkListBox *box);
extern
void gtk_list_box_set_filter_func (GtkListBox *box,
                                                          GtkListBoxFilterFunc filter_func,
                                                          gpointer user_data,
                                                          GDestroyNotify destroy);
extern
void gtk_list_box_set_header_func (GtkListBox *box,
                                                          GtkListBoxUpdateHeaderFunc update_header,
                                                          gpointer user_data,
                                                          GDestroyNotify destroy);
extern
void gtk_list_box_invalidate_filter (GtkListBox *box);
extern
void gtk_list_box_invalidate_sort (GtkListBox *box);
extern
void gtk_list_box_invalidate_headers (GtkListBox *box);
extern
void gtk_list_box_set_sort_func (GtkListBox *box,
                                                          GtkListBoxSortFunc sort_func,
                                                          gpointer user_data,
                                                          GDestroyNotify destroy);
extern
void gtk_list_box_set_activate_on_single_click (GtkListBox *box,
                                                          gboolean single);
extern
gboolean gtk_list_box_get_activate_on_single_click (GtkListBox *box);
extern
void gtk_list_box_drag_unhighlight_row (GtkListBox *box);
extern
void gtk_list_box_drag_highlight_row (GtkListBox *box,
                                                          GtkListBoxRow *row);
extern
GtkWidget* gtk_list_box_new (void);


extern
void gtk_list_box_bind_model (GtkListBox *box,
                                                          GListModel *model,
                                                          GtkListBoxCreateWidgetFunc create_widget_func,
                                                          gpointer user_data,
                                                          GDestroyNotify user_data_free_func);

typedef GtkListBox *GtkListBox_autoptr; typedef GList *GtkListBox_listautoptr; typedef GSList *GtkListBox_slistautoptr; typedef GQueue *GtkListBox_queueautoptr;
# 316 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
#pragma clang diagnostic push
# 316 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 316 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkListBox (GtkListBox *_ptr) { if (_ptr) (g_object_unref) ((GtkListBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkListBox (GtkListBox **_ptr) { glib_autoptr_clear_GtkListBox (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkListBox (void *_ptr) { (g_object_unref) ((GtkListBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkListBox (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkListBox); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkListBox (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkListBox); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkListBox (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkListBox); }
# 316 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
#pragma clang diagnostic pop
typedef GtkListBoxRow *GtkListBoxRow_autoptr; typedef GList *GtkListBoxRow_listautoptr; typedef GSList *GtkListBoxRow_slistautoptr; typedef GQueue *GtkListBoxRow_queueautoptr;
# 317 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
#pragma clang diagnostic push
# 317 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 317 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkListBoxRow (GtkListBoxRow *_ptr) { if (_ptr) (g_object_unref) ((GtkListBoxRow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkListBoxRow (GtkListBoxRow **_ptr) { glib_autoptr_clear_GtkListBoxRow (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkListBoxRow (void *_ptr) { (g_object_unref) ((GtkListBoxRow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkListBoxRow (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkListBoxRow); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkListBoxRow (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkListBoxRow); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkListBoxRow (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkListBoxRow); }
# 317 "/usr/include/gtk-3.0/gtk/gtklistbox.h"
#pragma clang diagnostic pop
# 141 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtklockbutton.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtklockbutton.h"
typedef struct _GtkLockButton GtkLockButton;
typedef struct _GtkLockButtonClass GtkLockButtonClass;
typedef struct _GtkLockButtonPrivate GtkLockButtonPrivate;

struct _GtkLockButton
{
  GtkButton parent;

  GtkLockButtonPrivate *priv;
};





struct _GtkLockButtonClass
{
  GtkButtonClass parent_class;



  void (*reserved0) (void);
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
  void (*reserved6) (void);
  void (*reserved7) (void);
};

extern
GType gtk_lock_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_lock_button_new (GPermission *permission);
extern
GPermission *gtk_lock_button_get_permission (GtkLockButton *button);
extern
void gtk_lock_button_set_permission (GtkLockButton *button,
                                             GPermission *permission);
# 143 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkmain.h" 1
# 64 "/usr/include/gtk-3.0/gtk/gtkmain.h"
typedef gint (*GtkKeySnoopFunc) (GtkWidget *grab_widget,
                                 GdkEventKey *event,
                                 gpointer func_data);



extern
guint gtk_get_major_version (void) __attribute__ ((__const__));
extern
guint gtk_get_minor_version (void) __attribute__ ((__const__));
extern
guint gtk_get_micro_version (void) __attribute__ ((__const__));
extern
guint gtk_get_binary_age (void) __attribute__ ((__const__));
extern
guint gtk_get_interface_age (void) __attribute__ ((__const__));







extern
const gchar* gtk_check_version (guint required_major,
                                guint required_minor,
                                guint required_micro);





extern
gboolean gtk_parse_args (int *argc,
                                   char ***argv);

extern
void gtk_init (int *argc,
                                   char ***argv);

extern
gboolean gtk_init_check (int *argc,
                                   char ***argv);

extern
gboolean gtk_init_with_args (gint *argc,
                                   gchar ***argv,
                                   const gchar *parameter_string,
                                   const GOptionEntry *entries,
                                   const gchar *translation_domain,
                                   GError **error);

extern
GOptionGroup *gtk_get_option_group (gboolean open_default_display);
# 142 "/usr/include/gtk-3.0/gtk/gtkmain.h"
extern
void gtk_disable_setlocale (void);
extern
PangoLanguage *gtk_get_default_language (void);
extern
GtkTextDirection gtk_get_locale_direction (void);
extern
gboolean gtk_events_pending (void);

extern
void gtk_main_do_event (GdkEvent *event);
extern
void gtk_main (void);
extern
guint gtk_main_level (void);
extern
void gtk_main_quit (void);
extern
gboolean gtk_main_iteration (void);
extern
gboolean gtk_main_iteration_do (gboolean blocking);

extern
gboolean gtk_true (void) __attribute__ ((__const__));
extern
gboolean gtk_false (void) __attribute__ ((__const__));

extern
void gtk_grab_add (GtkWidget *widget);
extern
GtkWidget* gtk_grab_get_current (void);
extern
void gtk_grab_remove (GtkWidget *widget);

extern
void gtk_device_grab_add (GtkWidget *widget,
                                    GdkDevice *device,
                                    gboolean block_others);
extern
void gtk_device_grab_remove (GtkWidget *widget,
                                    GdkDevice *device);

__attribute__((__deprecated__)) extern
guint gtk_key_snooper_install (GtkKeySnoopFunc snooper,
                                    gpointer func_data);
__attribute__((__deprecated__)) extern
void gtk_key_snooper_remove (guint snooper_handler_id);

extern
GdkEvent * gtk_get_current_event (void);
extern
guint32 gtk_get_current_event_time (void);
extern
gboolean gtk_get_current_event_state (GdkModifierType *state);
extern
GdkDevice *gtk_get_current_event_device (void);

extern
GtkWidget *gtk_get_event_widget (GdkEvent *event);

extern
void gtk_propagate_event (GtkWidget *widget,
                                         GdkEvent *event);
# 144 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkmenubar.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkmenubar.h"
typedef struct _GtkMenuBar GtkMenuBar;
typedef struct _GtkMenuBarPrivate GtkMenuBarPrivate;
typedef struct _GtkMenuBarClass GtkMenuBarClass;

struct _GtkMenuBar
{
  GtkMenuShell menu_shell;


  GtkMenuBarPrivate *priv;
};

struct _GtkMenuBarClass
{
  GtkMenuShellClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_menu_bar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_menu_bar_new (void);
extern
GtkWidget* gtk_menu_bar_new_from_model (GMenuModel *model);

extern
GtkPackDirection gtk_menu_bar_get_pack_direction (GtkMenuBar *menubar);
extern
void gtk_menu_bar_set_pack_direction (GtkMenuBar *menubar,
        GtkPackDirection pack_dir);
extern
GtkPackDirection gtk_menu_bar_get_child_pack_direction (GtkMenuBar *menubar);
extern
void gtk_menu_bar_set_child_pack_direction (GtkMenuBar *menubar,
       GtkPackDirection child_pack_dir);


void _gtk_menu_bar_cycle_focus (GtkMenuBar *menubar,
    GtkDirectionType dir);
GList* _gtk_menu_bar_get_viewable_menu_bars (GtkWindow *window);
# 146 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkmenubutton.h" 1
# 30 "/usr/include/gtk-3.0/gtk/gtkmenubutton.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkpopover.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkpopover.h"
typedef struct _GtkPopover GtkPopover;
typedef struct _GtkPopoverClass GtkPopoverClass;
typedef struct _GtkPopoverPrivate GtkPopoverPrivate;

struct _GtkPopover
{
  GtkBin parent_instance;



  GtkPopoverPrivate *priv;
};

struct _GtkPopoverClass
{
  GtkBinClass parent_class;

  void (* closed) (GtkPopover *popover);




  gpointer reserved[10];
};

extern
GType gtk_popover_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_popover_new (GtkWidget *relative_to);

extern
GtkWidget * gtk_popover_new_from_model (GtkWidget *relative_to,
                                             GMenuModel *model);

extern
void gtk_popover_set_relative_to (GtkPopover *popover,
                                             GtkWidget *relative_to);
extern
GtkWidget * gtk_popover_get_relative_to (GtkPopover *popover);

extern
void gtk_popover_set_pointing_to (GtkPopover *popover,
                                             const GdkRectangle *rect);
extern
gboolean gtk_popover_get_pointing_to (GtkPopover *popover,
                                             GdkRectangle *rect);
extern
void gtk_popover_set_position (GtkPopover *popover,
                                             GtkPositionType position);
extern
GtkPositionType gtk_popover_get_position (GtkPopover *popover);

extern
void gtk_popover_set_modal (GtkPopover *popover,
                                             gboolean modal);
extern
gboolean gtk_popover_get_modal (GtkPopover *popover);

extern
void gtk_popover_bind_model (GtkPopover *popover,
                                             GMenuModel *model,
                                             const gchar *action_namespace);

__attribute__((__deprecated__)) extern
void gtk_popover_set_transitions_enabled (GtkPopover *popover,
                                                     gboolean transitions_enabled);
__attribute__((__deprecated__)) extern
gboolean gtk_popover_get_transitions_enabled (GtkPopover *popover);

extern
void gtk_popover_set_default_widget (GtkPopover *popover,
                                                GtkWidget *widget);
extern
GtkWidget * gtk_popover_get_default_widget (GtkPopover *popover);

extern
void gtk_popover_set_constrain_to (GtkPopover *popover,
                                                   GtkPopoverConstraint constraint);

extern
GtkPopoverConstraint gtk_popover_get_constrain_to (GtkPopover *popover);

extern
void gtk_popover_popup (GtkPopover *popover);

extern
void gtk_popover_popdown (GtkPopover *popover);
# 31 "/usr/include/gtk-3.0/gtk/gtkmenubutton.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtkmenubutton.h"
typedef struct _GtkMenuButton GtkMenuButton;
typedef struct _GtkMenuButtonClass GtkMenuButtonClass;
typedef struct _GtkMenuButtonPrivate GtkMenuButtonPrivate;

struct _GtkMenuButton
{
  GtkToggleButton parent;


  GtkMenuButtonPrivate *priv;
};

struct _GtkMenuButtonClass
{
  GtkToggleButtonClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_menu_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_menu_button_new (void);

extern
void gtk_menu_button_set_popup (GtkMenuButton *menu_button,
                                             GtkWidget *menu);
extern
GtkMenu *gtk_menu_button_get_popup (GtkMenuButton *menu_button);

extern
void gtk_menu_button_set_popover (GtkMenuButton *menu_button,
                                             GtkWidget *popover);
extern
GtkPopover *gtk_menu_button_get_popover (GtkMenuButton *menu_button);

extern
void gtk_menu_button_set_direction (GtkMenuButton *menu_button,
                                             GtkArrowType direction);
extern
GtkArrowType gtk_menu_button_get_direction (GtkMenuButton *menu_button);

extern
void gtk_menu_button_set_menu_model (GtkMenuButton *menu_button,
                                             GMenuModel *menu_model);
extern
GMenuModel *gtk_menu_button_get_menu_model (GtkMenuButton *menu_button);

extern
void gtk_menu_button_set_align_widget (GtkMenuButton *menu_button,
                                               GtkWidget *align_widget);
extern
GtkWidget *gtk_menu_button_get_align_widget (GtkMenuButton *menu_button);

extern
void gtk_menu_button_set_use_popover (GtkMenuButton *menu_button,
                                              gboolean use_popover);

extern
gboolean gtk_menu_button_get_use_popover (GtkMenuButton *menu_button);
# 147 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtkmenutoolbutton.h" 1
# 28 "/usr/include/gtk-3.0/gtk/gtkmenutoolbutton.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktoolbutton.h" 1
# 28 "/usr/include/gtk-3.0/gtk/gtktoolbutton.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktoolitem.h" 1
# 30 "/usr/include/gtk-3.0/gtk/gtktoolitem.h"
# 1 "/usr/include/gtk-3.0/gtk/gtksizegroup.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtksizegroup.h"
typedef struct _GtkSizeGroup GtkSizeGroup;
typedef struct _GtkSizeGroupPrivate GtkSizeGroupPrivate;
typedef struct _GtkSizeGroupClass GtkSizeGroupClass;

struct _GtkSizeGroup
{
  GObject parent_instance;


  GtkSizeGroupPrivate *priv;
};

struct _GtkSizeGroupClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_size_group_get_type (void) __attribute__ ((__const__));

extern
GtkSizeGroup * gtk_size_group_new (GtkSizeGroupMode mode);
extern
void gtk_size_group_set_mode (GtkSizeGroup *size_group,
            GtkSizeGroupMode mode);
extern
GtkSizeGroupMode gtk_size_group_get_mode (GtkSizeGroup *size_group);
__attribute__((__deprecated__)) extern
void gtk_size_group_set_ignore_hidden (GtkSizeGroup *size_group,
         gboolean ignore_hidden);
__attribute__((__deprecated__)) extern
gboolean gtk_size_group_get_ignore_hidden (GtkSizeGroup *size_group);
extern
void gtk_size_group_add_widget (GtkSizeGroup *size_group,
            GtkWidget *widget);
extern
void gtk_size_group_remove_widget (GtkSizeGroup *size_group,
            GtkWidget *widget);
extern
GSList * gtk_size_group_get_widgets (GtkSizeGroup *size_group);
# 31 "/usr/include/gtk-3.0/gtk/gtktoolitem.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtktoolitem.h"
typedef struct _GtkToolItem GtkToolItem;
typedef struct _GtkToolItemClass GtkToolItemClass;
typedef struct _GtkToolItemPrivate GtkToolItemPrivate;

struct _GtkToolItem
{
  GtkBin parent;


  GtkToolItemPrivate *priv;
};
# 62 "/usr/include/gtk-3.0/gtk/gtktoolitem.h"
struct _GtkToolItemClass
{
  GtkBinClass parent_class;


  gboolean (* create_menu_proxy) (GtkToolItem *tool_item);
  void (* toolbar_reconfigured) (GtkToolItem *tool_item);




  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};


extern
GType gtk_tool_item_get_type (void) __attribute__ ((__const__));
extern
GtkToolItem *gtk_tool_item_new (void);

extern
void gtk_tool_item_set_homogeneous (GtkToolItem *tool_item,
       gboolean homogeneous);
extern
gboolean gtk_tool_item_get_homogeneous (GtkToolItem *tool_item);

extern
void gtk_tool_item_set_expand (GtkToolItem *tool_item,
       gboolean expand);
extern
gboolean gtk_tool_item_get_expand (GtkToolItem *tool_item);
extern
void gtk_tool_item_set_tooltip_text (GtkToolItem *tool_item,
       const gchar *text);
extern
void gtk_tool_item_set_tooltip_markup (GtkToolItem *tool_item,
       const gchar *markup);

extern
void gtk_tool_item_set_use_drag_window (GtkToolItem *tool_item,
       gboolean use_drag_window);
extern
gboolean gtk_tool_item_get_use_drag_window (GtkToolItem *tool_item);

extern
void gtk_tool_item_set_visible_horizontal (GtkToolItem *tool_item,
       gboolean visible_horizontal);
extern
gboolean gtk_tool_item_get_visible_horizontal (GtkToolItem *tool_item);

extern
void gtk_tool_item_set_visible_vertical (GtkToolItem *tool_item,
       gboolean visible_vertical);
extern
gboolean gtk_tool_item_get_visible_vertical (GtkToolItem *tool_item);

extern
gboolean gtk_tool_item_get_is_important (GtkToolItem *tool_item);
extern
void gtk_tool_item_set_is_important (GtkToolItem *tool_item,
       gboolean is_important);

extern
PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode (GtkToolItem *tool_item);
extern
GtkIconSize gtk_tool_item_get_icon_size (GtkToolItem *tool_item);
extern
GtkOrientation gtk_tool_item_get_orientation (GtkToolItem *tool_item);
extern
GtkToolbarStyle gtk_tool_item_get_toolbar_style (GtkToolItem *tool_item);
extern
GtkReliefStyle gtk_tool_item_get_relief_style (GtkToolItem *tool_item);
extern
gfloat gtk_tool_item_get_text_alignment (GtkToolItem *tool_item);
extern
GtkOrientation gtk_tool_item_get_text_orientation (GtkToolItem *tool_item);
extern
GtkSizeGroup * gtk_tool_item_get_text_size_group (GtkToolItem *tool_item);

extern
GtkWidget * gtk_tool_item_retrieve_proxy_menu_item (GtkToolItem *tool_item);
extern
GtkWidget * gtk_tool_item_get_proxy_menu_item (GtkToolItem *tool_item,
       const gchar *menu_item_id);
extern
void gtk_tool_item_set_proxy_menu_item (GtkToolItem *tool_item,
       const gchar *menu_item_id,
       GtkWidget *menu_item);
extern
void gtk_tool_item_rebuild_menu (GtkToolItem *tool_item);

extern
void gtk_tool_item_toolbar_reconfigured (GtkToolItem *tool_item);



gboolean _gtk_tool_item_create_menu_proxy (GtkToolItem *tool_item);
# 29 "/usr/include/gtk-3.0/gtk/gtktoolbutton.h" 2
# 39 "/usr/include/gtk-3.0/gtk/gtktoolbutton.h"
typedef struct _GtkToolButton GtkToolButton;
typedef struct _GtkToolButtonClass GtkToolButtonClass;
typedef struct _GtkToolButtonPrivate GtkToolButtonPrivate;

struct _GtkToolButton
{
  GtkToolItem parent;


  GtkToolButtonPrivate *priv;
};
# 58 "/usr/include/gtk-3.0/gtk/gtktoolbutton.h"
struct _GtkToolButtonClass
{
  GtkToolItemClass parent_class;

  GType button_type;




  void (* clicked) (GtkToolButton *tool_item);




  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

extern
GType gtk_tool_button_get_type (void) __attribute__ ((__const__));
extern
GtkToolItem *gtk_tool_button_new (GtkWidget *icon_widget,
          const gchar *label);
__attribute__((__deprecated__("Use '" "gtk_tool_button_new" "' instead"))) extern
GtkToolItem *gtk_tool_button_new_from_stock (const gchar *stock_id);

extern
void gtk_tool_button_set_label (GtkToolButton *button,
        const gchar *label);
extern
const gchar * gtk_tool_button_get_label (GtkToolButton *button);
extern
void gtk_tool_button_set_use_underline (GtkToolButton *button,
        gboolean use_underline);
extern
gboolean gtk_tool_button_get_use_underline (GtkToolButton *button);
__attribute__((__deprecated__("Use '" "gtk_tool_button_set_icon_name" "' instead"))) extern
void gtk_tool_button_set_stock_id (GtkToolButton *button,
        const gchar *stock_id);
__attribute__((__deprecated__("Use '" "gtk_tool_button_get_icon_name" "' instead"))) extern
const gchar * gtk_tool_button_get_stock_id (GtkToolButton *button);
extern
void gtk_tool_button_set_icon_name (GtkToolButton *button,
        const gchar *icon_name);
extern
const gchar * gtk_tool_button_get_icon_name (GtkToolButton *button);
extern
void gtk_tool_button_set_icon_widget (GtkToolButton *button,
        GtkWidget *icon_widget);
extern
GtkWidget * gtk_tool_button_get_icon_widget (GtkToolButton *button);
extern
void gtk_tool_button_set_label_widget (GtkToolButton *button,
        GtkWidget *label_widget);
extern
GtkWidget * gtk_tool_button_get_label_widget (GtkToolButton *button);



GtkWidget *_gtk_tool_button_get_button (GtkToolButton *button);
# 29 "/usr/include/gtk-3.0/gtk/gtkmenutoolbutton.h" 2
# 39 "/usr/include/gtk-3.0/gtk/gtkmenutoolbutton.h"
typedef struct _GtkMenuToolButtonClass GtkMenuToolButtonClass;
typedef struct _GtkMenuToolButton GtkMenuToolButton;
typedef struct _GtkMenuToolButtonPrivate GtkMenuToolButtonPrivate;

struct _GtkMenuToolButton
{
  GtkToolButton parent;


  GtkMenuToolButtonPrivate *priv;
};






struct _GtkMenuToolButtonClass
{
  GtkToolButtonClass parent_class;



  void (*show_menu) (GtkMenuToolButton *button);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_menu_tool_button_get_type (void) __attribute__ ((__const__));
extern
GtkToolItem *gtk_menu_tool_button_new (GtkWidget *icon_widget,
                                                   const gchar *label);
__attribute__((__deprecated__("Use '" "gtk_menu_tool_button_new" "' instead"))) extern
GtkToolItem *gtk_menu_tool_button_new_from_stock (const gchar *stock_id);

extern
void gtk_menu_tool_button_set_menu (GtkMenuToolButton *button,
                                                   GtkWidget *menu);
extern
GtkWidget *gtk_menu_tool_button_get_menu (GtkMenuToolButton *button);
extern
void gtk_menu_tool_button_set_arrow_tooltip_text (GtkMenuToolButton *button,
            const gchar *text);
extern
void gtk_menu_tool_button_set_arrow_tooltip_markup (GtkMenuToolButton *button,
            const gchar *markup);
# 150 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkmessagedialog.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkmessagedialog.h"
typedef struct _GtkMessageDialog GtkMessageDialog;
typedef struct _GtkMessageDialogPrivate GtkMessageDialogPrivate;
typedef struct _GtkMessageDialogClass GtkMessageDialogClass;

struct _GtkMessageDialog
{
  GtkDialog parent_instance;


  GtkMessageDialogPrivate *priv;
};

struct _GtkMessageDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 85 "/usr/include/gtk-3.0/gtk/gtkmessagedialog.h"
typedef enum
{
  GTK_BUTTONS_NONE,
  GTK_BUTTONS_OK,
  GTK_BUTTONS_CLOSE,
  GTK_BUTTONS_CANCEL,
  GTK_BUTTONS_YES_NO,
  GTK_BUTTONS_OK_CANCEL
} GtkButtonsType;

extern
GType gtk_message_dialog_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_message_dialog_new (GtkWindow *parent,
                                        GtkDialogFlags flags,
                                        GtkMessageType type,
                                        GtkButtonsType buttons,
                                        const gchar *message_format,
                                        ...) __attribute__((__format__ (__printf__, 5, 6)));

extern
GtkWidget* gtk_message_dialog_new_with_markup (GtkWindow *parent,
                                                 GtkDialogFlags flags,
                                                 GtkMessageType type,
                                                 GtkButtonsType buttons,
                                                 const gchar *message_format,
                                                 ...) __attribute__((__format__ (__printf__, 5, 6)));

__attribute__((__deprecated__)) extern
void gtk_message_dialog_set_image (GtkMessageDialog *dialog,
         GtkWidget *image);

__attribute__((__deprecated__)) extern
GtkWidget * gtk_message_dialog_get_image (GtkMessageDialog *dialog);

extern
void gtk_message_dialog_set_markup (GtkMessageDialog *message_dialog,
                                           const gchar *str);

extern
void gtk_message_dialog_format_secondary_text (GtkMessageDialog *message_dialog,
                                                     const gchar *message_format,
                                                     ...) __attribute__((__format__ (__printf__, 2, 3)));

extern
void gtk_message_dialog_format_secondary_markup (GtkMessageDialog *message_dialog,
                                                       const gchar *message_format,
                                                       ...) __attribute__((__format__ (__printf__, 2, 3)));

extern
GtkWidget *gtk_message_dialog_get_message_area (GtkMessageDialog *message_dialog);
# 151 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkmodelbutton.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkmodelbutton.h"
typedef struct _GtkModelButton GtkModelButton;
# 47 "/usr/include/gtk-3.0/gtk/gtkmodelbutton.h"
typedef enum {
  GTK_BUTTON_ROLE_NORMAL,
  GTK_BUTTON_ROLE_CHECK,
  GTK_BUTTON_ROLE_RADIO
} GtkButtonRole;

extern
GType gtk_model_button_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_model_button_new (void);
# 152 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkmodules.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkmodules.h"
typedef void (*GtkModuleInitFunc) (gint *argc,
                                              gchar ***argv);
# 50 "/usr/include/gtk-3.0/gtk/gtkmodules.h"
typedef void (*GtkModuleDisplayInitFunc) (GdkDisplay *display);
# 153 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkmountoperation.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtkmountoperation.h"
typedef struct _GtkMountOperation GtkMountOperation;
typedef struct _GtkMountOperationClass GtkMountOperationClass;
typedef struct _GtkMountOperationPrivate GtkMountOperationPrivate;






struct _GtkMountOperation
{
  GMountOperation parent_instance;

  GtkMountOperationPrivate *priv;
};





struct _GtkMountOperationClass
{
  GMountOperationClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_mount_operation_get_type (void);
extern
GMountOperation *gtk_mount_operation_new (GtkWindow *parent);
extern
gboolean gtk_mount_operation_is_showing (GtkMountOperation *op);
extern
void gtk_mount_operation_set_parent (GtkMountOperation *op,
                                                 GtkWindow *parent);
extern
GtkWindow * gtk_mount_operation_get_parent (GtkMountOperation *op);
extern
void gtk_mount_operation_set_screen (GtkMountOperation *op,
                                                 GdkScreen *screen);
extern
GdkScreen *gtk_mount_operation_get_screen (GtkMountOperation *op);
# 154 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtknotebook.h" 1
# 47 "/usr/include/gtk-3.0/gtk/gtknotebook.h"
typedef enum
{
  GTK_NOTEBOOK_TAB_FIRST,
  GTK_NOTEBOOK_TAB_LAST
} GtkNotebookTab;

typedef struct _GtkNotebook GtkNotebook;
typedef struct _GtkNotebookPrivate GtkNotebookPrivate;
typedef struct _GtkNotebookClass GtkNotebookClass;

struct _GtkNotebook
{

  GtkContainer container;

  GtkNotebookPrivate *priv;
};

struct _GtkNotebookClass
{
  GtkContainerClass parent_class;

  void (* switch_page) (GtkNotebook *notebook,
                              GtkWidget *page,
         guint page_num);


  gboolean (* select_page) (GtkNotebook *notebook,
                                gboolean move_focus);
  gboolean (* focus_tab) (GtkNotebook *notebook,
                                GtkNotebookTab type);
  gboolean (* change_current_page) (GtkNotebook *notebook,
                                gint offset);
  void (* move_focus_out) (GtkNotebook *notebook,
    GtkDirectionType direction);
  gboolean (* reorder_tab) (GtkNotebook *notebook,
    GtkDirectionType direction,
    gboolean move_to_last);


  gint (* insert_page) (GtkNotebook *notebook,
           GtkWidget *child,
    GtkWidget *tab_label,
    GtkWidget *menu_label,
    gint position);

  GtkNotebook * (* create_window) (GtkNotebook *notebook,
                                   GtkWidget *page,
                                   gint x,
                                   gint y);

  void (* page_reordered) (GtkNotebook *notebook,
                                GtkWidget *child,
                                guint page_num);

  void (* page_removed) (GtkNotebook *notebook,
                                GtkWidget *child,
                                guint page_num);

  void (* page_added) (GtkNotebook *notebook,
                                GtkWidget *child,
                                guint page_num);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};





extern
GType gtk_notebook_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_notebook_new (void);
extern
gint gtk_notebook_append_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label);
extern
gint gtk_notebook_append_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label);
extern
gint gtk_notebook_prepend_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label);
extern
gint gtk_notebook_prepend_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label);
extern
gint gtk_notebook_insert_page (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         gint position);
extern
gint gtk_notebook_insert_page_menu (GtkNotebook *notebook,
         GtkWidget *child,
         GtkWidget *tab_label,
         GtkWidget *menu_label,
         gint position);
extern
void gtk_notebook_remove_page (GtkNotebook *notebook,
         gint page_num);





extern
void gtk_notebook_set_group_name (GtkNotebook *notebook,
                                          const gchar *group_name);
extern
const gchar *gtk_notebook_get_group_name (GtkNotebook *notebook);







extern
gint gtk_notebook_get_current_page (GtkNotebook *notebook);
extern
GtkWidget* gtk_notebook_get_nth_page (GtkNotebook *notebook,
       gint page_num);
extern
gint gtk_notebook_get_n_pages (GtkNotebook *notebook);
extern
gint gtk_notebook_page_num (GtkNotebook *notebook,
       GtkWidget *child);
extern
void gtk_notebook_set_current_page (GtkNotebook *notebook,
       gint page_num);
extern
void gtk_notebook_next_page (GtkNotebook *notebook);
extern
void gtk_notebook_prev_page (GtkNotebook *notebook);





extern
void gtk_notebook_set_show_border (GtkNotebook *notebook,
         gboolean show_border);
extern
gboolean gtk_notebook_get_show_border (GtkNotebook *notebook);
extern
void gtk_notebook_set_show_tabs (GtkNotebook *notebook,
         gboolean show_tabs);
extern
gboolean gtk_notebook_get_show_tabs (GtkNotebook *notebook);
extern
void gtk_notebook_set_tab_pos (GtkNotebook *notebook,
                GtkPositionType pos);
extern
GtkPositionType gtk_notebook_get_tab_pos (GtkNotebook *notebook);
extern
void gtk_notebook_set_scrollable (GtkNotebook *notebook,
         gboolean scrollable);
extern
gboolean gtk_notebook_get_scrollable (GtkNotebook *notebook);
__attribute__((__deprecated__)) extern
guint16 gtk_notebook_get_tab_hborder (GtkNotebook *notebook);
__attribute__((__deprecated__)) extern
guint16 gtk_notebook_get_tab_vborder (GtkNotebook *notebook);





extern
void gtk_notebook_popup_enable (GtkNotebook *notebook);
extern
void gtk_notebook_popup_disable (GtkNotebook *notebook);





extern
GtkWidget * gtk_notebook_get_tab_label (GtkNotebook *notebook,
        GtkWidget *child);
extern
void gtk_notebook_set_tab_label (GtkNotebook *notebook,
        GtkWidget *child,
        GtkWidget *tab_label);
extern
void gtk_notebook_set_tab_label_text (GtkNotebook *notebook,
                                               GtkWidget *child,
                                               const gchar *tab_text);
extern
const gchar * gtk_notebook_get_tab_label_text (GtkNotebook *notebook,
                                               GtkWidget *child);
extern
GtkWidget * gtk_notebook_get_menu_label (GtkNotebook *notebook,
        GtkWidget *child);
extern
void gtk_notebook_set_menu_label (GtkNotebook *notebook,
        GtkWidget *child,
        GtkWidget *menu_label);
extern
void gtk_notebook_set_menu_label_text (GtkNotebook *notebook,
                                                GtkWidget *child,
                                                const gchar *menu_text);
extern
const gchar * gtk_notebook_get_menu_label_text (GtkNotebook *notebook,
       GtkWidget *child);
extern
void gtk_notebook_reorder_child (GtkNotebook *notebook,
        GtkWidget *child,
        gint position);
extern
gboolean gtk_notebook_get_tab_reorderable (GtkNotebook *notebook,
        GtkWidget *child);
extern
void gtk_notebook_set_tab_reorderable (GtkNotebook *notebook,
        GtkWidget *child,
        gboolean reorderable);
extern
gboolean gtk_notebook_get_tab_detachable (GtkNotebook *notebook,
        GtkWidget *child);
extern
void gtk_notebook_set_tab_detachable (GtkNotebook *notebook,
        GtkWidget *child,
        gboolean detachable);
extern
void gtk_notebook_detach_tab (GtkNotebook *notebook,
                                           GtkWidget *child);

extern
GtkWidget* gtk_notebook_get_action_widget (GtkNotebook *notebook,
                                           GtkPackType pack_type);
extern
void gtk_notebook_set_action_widget (GtkNotebook *notebook,
                                           GtkWidget *widget,
                                           GtkPackType pack_type);
# 156 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkoffscreenwindow.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkoffscreenwindow.h"
typedef struct _GtkOffscreenWindow GtkOffscreenWindow;
typedef struct _GtkOffscreenWindowClass GtkOffscreenWindowClass;

struct _GtkOffscreenWindow
{
  GtkWindow parent_object;
};





struct _GtkOffscreenWindowClass
{
  GtkWindowClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_offscreen_window_get_type (void) __attribute__ ((__const__));

extern
GtkWidget *gtk_offscreen_window_new (void);
extern
cairo_surface_t *gtk_offscreen_window_get_surface (GtkOffscreenWindow *offscreen);
extern
GdkPixbuf *gtk_offscreen_window_get_pixbuf (GtkOffscreenWindow *offscreen);
# 157 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkorientable.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtkorientable.h"
typedef struct _GtkOrientable GtkOrientable;
typedef struct _GtkOrientableIface GtkOrientableIface;

struct _GtkOrientableIface
{
  GTypeInterface base_iface;
};


extern
GType gtk_orientable_get_type (void) __attribute__ ((__const__));

extern
void gtk_orientable_set_orientation (GtkOrientable *orientable,
                                               GtkOrientation orientation);
extern
GtkOrientation gtk_orientable_get_orientation (GtkOrientable *orientable);
# 158 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkoverlay.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkoverlay.h"
typedef struct _GtkOverlay GtkOverlay;
typedef struct _GtkOverlayClass GtkOverlayClass;
typedef struct _GtkOverlayPrivate GtkOverlayPrivate;

struct _GtkOverlay
{
  GtkBin parent;

  GtkOverlayPrivate *priv;
};







struct _GtkOverlayClass
{
  GtkBinClass parent_class;



  gboolean (*get_child_position) (GtkOverlay *overlay,
                                  GtkWidget *widget,
                                  GtkAllocation *allocation);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_overlay_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_overlay_new (void);
extern
void gtk_overlay_add_overlay (GtkOverlay *overlay,
                                    GtkWidget *widget);
extern
void gtk_overlay_reorder_overlay (GtkOverlay *overlay,
                                        GtkWidget *child,
                                        int index_);
extern
gboolean gtk_overlay_get_overlay_pass_through (GtkOverlay *overlay,
       GtkWidget *widget);
extern
void gtk_overlay_set_overlay_pass_through (GtkOverlay *overlay,
       GtkWidget *widget,
       gboolean pass_through);
# 159 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkpadcontroller.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkpadcontroller.h"
typedef struct _GtkPadController GtkPadController;
typedef struct _GtkPadControllerClass GtkPadControllerClass;
typedef struct _GtkPadActionEntry GtkPadActionEntry;
# 51 "/usr/include/gtk-3.0/gtk/gtkpadcontroller.h"
typedef enum {
  GTK_PAD_ACTION_BUTTON,
  GTK_PAD_ACTION_RING,
  GTK_PAD_ACTION_STRIP
} GtkPadActionType;
# 69 "/usr/include/gtk-3.0/gtk/gtkpadcontroller.h"
struct _GtkPadActionEntry {
  GtkPadActionType type;
  gint index;
  gint mode;
  gchar *label;
  gchar *action_name;
};

extern
GType gtk_pad_controller_get_type (void) __attribute__ ((__const__));

extern
GtkPadController *gtk_pad_controller_new (GtkWindow *window,
                                             GActionGroup *group,
                                             GdkDevice *pad);

extern
void gtk_pad_controller_set_action_entries (GtkPadController *controller,
                                             const GtkPadActionEntry *entries,
                                             gint n_entries);
extern
void gtk_pad_controller_set_action (GtkPadController *controller,
                                             GtkPadActionType type,
                                             gint index,
                                             gint mode,
                                             const gchar *label,
                                             const gchar *action_name);
# 160 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkpagesetup.h" 1
# 27 "/usr/include/gtk-3.0/gtk/gtkpagesetup.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkpapersize.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkpapersize.h"
typedef struct _GtkPaperSize GtkPaperSize;
# 87 "/usr/include/gtk-3.0/gtk/gtkpapersize.h"
extern
GType gtk_paper_size_get_type (void) __attribute__ ((__const__));

extern
GtkPaperSize *gtk_paper_size_new (const gchar *name);
extern
GtkPaperSize *gtk_paper_size_new_from_ppd (const gchar *ppd_name,
        const gchar *ppd_display_name,
        gdouble width,
        gdouble height);
extern
GtkPaperSize *gtk_paper_size_new_from_ipp (const gchar *ipp_name,
        gdouble width,
        gdouble height);
extern
GtkPaperSize *gtk_paper_size_new_custom (const gchar *name,
        const gchar *display_name,
        gdouble width,
        gdouble height,
        GtkUnit unit);
extern
GtkPaperSize *gtk_paper_size_copy (GtkPaperSize *other);
extern
void gtk_paper_size_free (GtkPaperSize *size);
extern
gboolean gtk_paper_size_is_equal (GtkPaperSize *size1,
        GtkPaperSize *size2);

extern
GList *gtk_paper_size_get_paper_sizes (gboolean include_custom);


extern
const gchar *gtk_paper_size_get_name (GtkPaperSize *size);
extern
const gchar *gtk_paper_size_get_display_name (GtkPaperSize *size);
extern
const gchar *gtk_paper_size_get_ppd_name (GtkPaperSize *size);

extern
gdouble gtk_paper_size_get_width (GtkPaperSize *size, GtkUnit unit);
extern
gdouble gtk_paper_size_get_height (GtkPaperSize *size, GtkUnit unit);
extern
gboolean gtk_paper_size_is_custom (GtkPaperSize *size);
extern
gboolean gtk_paper_size_is_ipp (GtkPaperSize *size);


extern
void gtk_paper_size_set_size (GtkPaperSize *size,
                                                  gdouble width,
                                                  gdouble height,
                                                  GtkUnit unit);

extern
gdouble gtk_paper_size_get_default_top_margin (GtkPaperSize *size,
        GtkUnit unit);
extern
gdouble gtk_paper_size_get_default_bottom_margin (GtkPaperSize *size,
        GtkUnit unit);
extern
gdouble gtk_paper_size_get_default_left_margin (GtkPaperSize *size,
        GtkUnit unit);
extern
gdouble gtk_paper_size_get_default_right_margin (GtkPaperSize *size,
        GtkUnit unit);

extern
const gchar *gtk_paper_size_get_default (void);

extern
GtkPaperSize *gtk_paper_size_new_from_key_file (GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
extern
void gtk_paper_size_to_key_file (GtkPaperSize *size,
             GKeyFile *key_file,
             const gchar *group_name);

extern
GtkPaperSize *gtk_paper_size_new_from_gvariant (GVariant *variant);
extern
GVariant *gtk_paper_size_to_gvariant (GtkPaperSize *paper_size);
# 28 "/usr/include/gtk-3.0/gtk/gtkpagesetup.h" 2




typedef struct _GtkPageSetup GtkPageSetup;





extern
GType gtk_page_setup_get_type (void) __attribute__ ((__const__));
extern
GtkPageSetup * gtk_page_setup_new (void);
extern
GtkPageSetup * gtk_page_setup_copy (GtkPageSetup *other);
extern
GtkPageOrientation gtk_page_setup_get_orientation (GtkPageSetup *setup);
extern
void gtk_page_setup_set_orientation (GtkPageSetup *setup,
           GtkPageOrientation orientation);
extern
GtkPaperSize * gtk_page_setup_get_paper_size (GtkPageSetup *setup);
extern
void gtk_page_setup_set_paper_size (GtkPageSetup *setup,
           GtkPaperSize *size);
extern
gdouble gtk_page_setup_get_top_margin (GtkPageSetup *setup,
           GtkUnit unit);
extern
void gtk_page_setup_set_top_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_bottom_margin (GtkPageSetup *setup,
           GtkUnit unit);
extern
void gtk_page_setup_set_bottom_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_left_margin (GtkPageSetup *setup,
           GtkUnit unit);
extern
void gtk_page_setup_set_left_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_right_margin (GtkPageSetup *setup,
           GtkUnit unit);
extern
void gtk_page_setup_set_right_margin (GtkPageSetup *setup,
           gdouble margin,
           GtkUnit unit);

extern
void gtk_page_setup_set_paper_size_and_default_margins (GtkPageSetup *setup,
       GtkPaperSize *size);


extern
gdouble gtk_page_setup_get_paper_width (GtkPageSetup *setup,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_paper_height (GtkPageSetup *setup,
           GtkUnit unit);



extern
gdouble gtk_page_setup_get_page_width (GtkPageSetup *setup,
           GtkUnit unit);
extern
gdouble gtk_page_setup_get_page_height (GtkPageSetup *setup,
           GtkUnit unit);


extern
GtkPageSetup *gtk_page_setup_new_from_file (const gchar *file_name,
           GError **error);
extern
gboolean gtk_page_setup_load_file (GtkPageSetup *setup,
           const char *file_name,
           GError **error);
extern
gboolean gtk_page_setup_to_file (GtkPageSetup *setup,
           const char *file_name,
           GError **error);
extern
GtkPageSetup *gtk_page_setup_new_from_key_file (GKeyFile *key_file,
           const gchar *group_name,
           GError **error);
extern
gboolean gtk_page_setup_load_key_file (GtkPageSetup *setup,
                         GKeyFile *key_file,
                         const gchar *group_name,
                         GError **error);
extern
void gtk_page_setup_to_key_file (GtkPageSetup *setup,
           GKeyFile *key_file,
           const gchar *group_name);

extern
GVariant *gtk_page_setup_to_gvariant (GtkPageSetup *setup);
extern
GtkPageSetup *gtk_page_setup_new_from_gvariant (GVariant *variant);
# 161 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkpaned.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkpaned.h"
typedef struct _GtkPaned GtkPaned;
typedef struct _GtkPanedClass GtkPanedClass;
typedef struct _GtkPanedPrivate GtkPanedPrivate;

struct _GtkPaned
{
  GtkContainer container;


  GtkPanedPrivate *priv;
};

struct _GtkPanedClass
{
  GtkContainerClass parent_class;

  gboolean (* cycle_child_focus) (GtkPaned *paned,
        gboolean reverse);
  gboolean (* toggle_handle_focus) (GtkPaned *paned);
  gboolean (* move_handle) (GtkPaned *paned,
        GtkScrollType scroll);
  gboolean (* cycle_handle_focus) (GtkPaned *paned,
        gboolean reverse);
  gboolean (* accept_position) (GtkPaned *paned);
  gboolean (* cancel_position) (GtkPaned *paned);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_paned_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_paned_new (GtkOrientation orientation);
extern
void gtk_paned_add1 (GtkPaned *paned,
                                    GtkWidget *child);
extern
void gtk_paned_add2 (GtkPaned *paned,
                                    GtkWidget *child);
extern
void gtk_paned_pack1 (GtkPaned *paned,
                                    GtkWidget *child,
                                    gboolean resize,
                                    gboolean shrink);
extern
void gtk_paned_pack2 (GtkPaned *paned,
                                    GtkWidget *child,
                                    gboolean resize,
                                    gboolean shrink);

extern
gint gtk_paned_get_position (GtkPaned *paned);
extern
void gtk_paned_set_position (GtkPaned *paned,
                                    gint position);

extern
GtkWidget * gtk_paned_get_child1 (GtkPaned *paned);
extern
GtkWidget * gtk_paned_get_child2 (GtkPaned *paned);

extern
GdkWindow * gtk_paned_get_handle_window (GtkPaned *paned);

extern
void gtk_paned_set_wide_handle (GtkPaned *paned,
                                       gboolean wide);
extern
gboolean gtk_paned_get_wide_handle (GtkPaned *paned);
# 163 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkplacessidebar.h" 1
# 42 "/usr/include/gtk-3.0/gtk/gtkplacessidebar.h"
typedef struct _GtkPlacesSidebar GtkPlacesSidebar;
typedef struct _GtkPlacesSidebarClass GtkPlacesSidebarClass;
# 72 "/usr/include/gtk-3.0/gtk/gtkplacessidebar.h"
typedef enum {
  GTK_PLACES_OPEN_NORMAL = 1 << 0,
  GTK_PLACES_OPEN_NEW_TAB = 1 << 1,
  GTK_PLACES_OPEN_NEW_WINDOW = 1 << 2
} GtkPlacesOpenFlags;

extern
GType gtk_places_sidebar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_places_sidebar_new (void);

extern
GtkPlacesOpenFlags gtk_places_sidebar_get_open_flags (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_open_flags (GtkPlacesSidebar *sidebar,
                                                                  GtkPlacesOpenFlags flags);

extern
GFile * gtk_places_sidebar_get_location (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_location (GtkPlacesSidebar *sidebar,
                                                                  GFile *location);

extern
gboolean gtk_places_sidebar_get_show_recent (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_recent (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_recent);

extern
gboolean gtk_places_sidebar_get_show_desktop (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_desktop (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_desktop);

__attribute__((__deprecated__)) extern
gboolean gtk_places_sidebar_get_show_connect_to_server (GtkPlacesSidebar *sidebar);
__attribute__((__deprecated__)) extern
void gtk_places_sidebar_set_show_connect_to_server (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_connect_to_server);
extern
gboolean gtk_places_sidebar_get_show_enter_location (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_enter_location (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_enter_location);

extern
void gtk_places_sidebar_set_local_only (GtkPlacesSidebar *sidebar,
                                                                  gboolean local_only);
extern
gboolean gtk_places_sidebar_get_local_only (GtkPlacesSidebar *sidebar);


extern
void gtk_places_sidebar_add_shortcut (GtkPlacesSidebar *sidebar,
                                                                  GFile *location);
extern
void gtk_places_sidebar_remove_shortcut (GtkPlacesSidebar *sidebar,
                                                                  GFile *location);
extern
GSList * gtk_places_sidebar_list_shortcuts (GtkPlacesSidebar *sidebar);

extern
GFile * gtk_places_sidebar_get_nth_bookmark (GtkPlacesSidebar *sidebar,
                                                                  gint n);
extern
void gtk_places_sidebar_set_drop_targets_visible (GtkPlacesSidebar *sidebar,
                                                                  gboolean visible,
                                                                  GdkDragContext *context);
extern
gboolean gtk_places_sidebar_get_show_trash (GtkPlacesSidebar *sidebar);
extern
void gtk_places_sidebar_set_show_trash (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_trash);

extern
void gtk_places_sidebar_set_show_other_locations (GtkPlacesSidebar *sidebar,
                                                                  gboolean show_other_locations);
extern
gboolean gtk_places_sidebar_get_show_other_locations (GtkPlacesSidebar *sidebar);

extern
void gtk_places_sidebar_set_show_starred_location (GtkPlacesSidebar *sidebar,
                                                                   gboolean show_starred_location);
extern
gboolean gtk_places_sidebar_get_show_starred_location (GtkPlacesSidebar *sidebar);
# 164 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkpopovermenu.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkpopovermenu.h"
typedef struct _GtkPopoverMenu GtkPopoverMenu;
typedef struct _GtkPopoverMenuClass GtkPopoverMenuClass;

struct _GtkPopoverMenuClass
{
  GtkPopoverClass parent_class;




  gpointer reserved[10];
};

extern
GType gtk_popover_menu_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_popover_menu_new (void);

extern
void gtk_popover_menu_open_submenu (GtkPopoverMenu *popover,
                                           const gchar *name);
# 166 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkprintcontext.h" 1
# 33 "/usr/include/gtk-3.0/gtk/gtkprintcontext.h"
typedef struct _GtkPrintContext GtkPrintContext;





extern
GType gtk_print_context_get_type (void) __attribute__ ((__const__));



extern
cairo_t *gtk_print_context_get_cairo_context (GtkPrintContext *context);

extern
GtkPageSetup *gtk_print_context_get_page_setup (GtkPrintContext *context);
extern
gdouble gtk_print_context_get_width (GtkPrintContext *context);
extern
gdouble gtk_print_context_get_height (GtkPrintContext *context);
extern
gdouble gtk_print_context_get_dpi_x (GtkPrintContext *context);
extern
gdouble gtk_print_context_get_dpi_y (GtkPrintContext *context);
extern
gboolean gtk_print_context_get_hard_margins (GtkPrintContext *context,
            gdouble *top,
            gdouble *bottom,
            gdouble *left,
            gdouble *right);


extern
PangoFontMap *gtk_print_context_get_pango_fontmap (GtkPrintContext *context);
extern
PangoContext *gtk_print_context_create_pango_context (GtkPrintContext *context);
extern
PangoLayout *gtk_print_context_create_pango_layout (GtkPrintContext *context);


extern
void gtk_print_context_set_cairo_context (GtkPrintContext *context,
            cairo_t *cr,
            double dpi_x,
            double dpi_y);
# 167 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h" 1
# 31 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkprintsettings.h" 1
# 30 "/usr/include/gtk-3.0/gtk/gtkprintsettings.h"
typedef struct _GtkPrintSettings GtkPrintSettings;





typedef void (*GtkPrintSettingsFunc) (const gchar *key,
     const gchar *value,
     gpointer user_data);

typedef struct _GtkPageRange GtkPageRange;







struct _GtkPageRange
{
  gint start;
  gint end;
};

extern
GType gtk_print_settings_get_type (void) __attribute__ ((__const__));
extern
GtkPrintSettings *gtk_print_settings_new (void);

extern
GtkPrintSettings *gtk_print_settings_copy (GtkPrintSettings *other);

extern
GtkPrintSettings *gtk_print_settings_new_from_file (const gchar *file_name,
             GError **error);
extern
gboolean gtk_print_settings_load_file (GtkPrintSettings *settings,
             const gchar *file_name,
             GError **error);
extern
gboolean gtk_print_settings_to_file (GtkPrintSettings *settings,
             const gchar *file_name,
             GError **error);
extern
GtkPrintSettings *gtk_print_settings_new_from_key_file (GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
extern
gboolean gtk_print_settings_load_key_file (GtkPrintSettings *settings,
             GKeyFile *key_file,
             const gchar *group_name,
             GError **error);
extern
void gtk_print_settings_to_key_file (GtkPrintSettings *settings,
             GKeyFile *key_file,
             const gchar *group_name);
extern
gboolean gtk_print_settings_has_key (GtkPrintSettings *settings,
             const gchar *key);
extern
const gchar * gtk_print_settings_get (GtkPrintSettings *settings,
             const gchar *key);
extern
void gtk_print_settings_set (GtkPrintSettings *settings,
             const gchar *key,
             const gchar *value);
extern
void gtk_print_settings_unset (GtkPrintSettings *settings,
             const gchar *key);
extern
void gtk_print_settings_foreach (GtkPrintSettings *settings,
             GtkPrintSettingsFunc func,
             gpointer user_data);
extern
gboolean gtk_print_settings_get_bool (GtkPrintSettings *settings,
             const gchar *key);
extern
void gtk_print_settings_set_bool (GtkPrintSettings *settings,
             const gchar *key,
             gboolean value);
extern
gdouble gtk_print_settings_get_double (GtkPrintSettings *settings,
             const gchar *key);
extern
gdouble gtk_print_settings_get_double_with_default (GtkPrintSettings *settings,
             const gchar *key,
             gdouble def);
extern
void gtk_print_settings_set_double (GtkPrintSettings *settings,
             const gchar *key,
             gdouble value);
extern
gdouble gtk_print_settings_get_length (GtkPrintSettings *settings,
             const gchar *key,
             GtkUnit unit);
extern
void gtk_print_settings_set_length (GtkPrintSettings *settings,
             const gchar *key,
             gdouble value,
             GtkUnit unit);
extern
gint gtk_print_settings_get_int (GtkPrintSettings *settings,
             const gchar *key);
extern
gint gtk_print_settings_get_int_with_default (GtkPrintSettings *settings,
             const gchar *key,
             gint def);
extern
void gtk_print_settings_set_int (GtkPrintSettings *settings,
             const gchar *key,
             gint value);
# 212 "/usr/include/gtk-3.0/gtk/gtkprintsettings.h"
extern
const gchar * gtk_print_settings_get_printer (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_printer (GtkPrintSettings *settings,
        const gchar *printer);
extern
GtkPageOrientation gtk_print_settings_get_orientation (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_orientation (GtkPrintSettings *settings,
        GtkPageOrientation orientation);
extern
GtkPaperSize * gtk_print_settings_get_paper_size (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_paper_size (GtkPrintSettings *settings,
        GtkPaperSize *paper_size);
extern
gdouble gtk_print_settings_get_paper_width (GtkPrintSettings *settings,
        GtkUnit unit);
extern
void gtk_print_settings_set_paper_width (GtkPrintSettings *settings,
        gdouble width,
        GtkUnit unit);
extern
gdouble gtk_print_settings_get_paper_height (GtkPrintSettings *settings,
        GtkUnit unit);
extern
void gtk_print_settings_set_paper_height (GtkPrintSettings *settings,
        gdouble height,
        GtkUnit unit);
extern
gboolean gtk_print_settings_get_use_color (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_use_color (GtkPrintSettings *settings,
        gboolean use_color);
extern
gboolean gtk_print_settings_get_collate (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_collate (GtkPrintSettings *settings,
        gboolean collate);
extern
gboolean gtk_print_settings_get_reverse (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_reverse (GtkPrintSettings *settings,
        gboolean reverse);
extern
GtkPrintDuplex gtk_print_settings_get_duplex (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_duplex (GtkPrintSettings *settings,
        GtkPrintDuplex duplex);
extern
GtkPrintQuality gtk_print_settings_get_quality (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_quality (GtkPrintSettings *settings,
        GtkPrintQuality quality);
extern
gint gtk_print_settings_get_n_copies (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_n_copies (GtkPrintSettings *settings,
        gint num_copies);
extern
gint gtk_print_settings_get_number_up (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_number_up (GtkPrintSettings *settings,
        gint number_up);
extern
GtkNumberUpLayout gtk_print_settings_get_number_up_layout (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_number_up_layout (GtkPrintSettings *settings,
        GtkNumberUpLayout number_up_layout);
extern
gint gtk_print_settings_get_resolution (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_resolution (GtkPrintSettings *settings,
        gint resolution);
extern
gint gtk_print_settings_get_resolution_x (GtkPrintSettings *settings);
extern
gint gtk_print_settings_get_resolution_y (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_resolution_xy (GtkPrintSettings *settings,
        gint resolution_x,
        gint resolution_y);
extern
gdouble gtk_print_settings_get_printer_lpi (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_printer_lpi (GtkPrintSettings *settings,
        gdouble lpi);
extern
gdouble gtk_print_settings_get_scale (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_scale (GtkPrintSettings *settings,
        gdouble scale);
extern
GtkPrintPages gtk_print_settings_get_print_pages (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_print_pages (GtkPrintSettings *settings,
        GtkPrintPages pages);
extern
GtkPageRange * gtk_print_settings_get_page_ranges (GtkPrintSettings *settings,
        gint *num_ranges);
extern
void gtk_print_settings_set_page_ranges (GtkPrintSettings *settings,
        GtkPageRange *page_ranges,
        gint num_ranges);
extern
GtkPageSet gtk_print_settings_get_page_set (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_page_set (GtkPrintSettings *settings,
        GtkPageSet page_set);
extern
const gchar * gtk_print_settings_get_default_source (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_default_source (GtkPrintSettings *settings,
        const gchar *default_source);
extern
const gchar * gtk_print_settings_get_media_type (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_media_type (GtkPrintSettings *settings,
        const gchar *media_type);
extern
const gchar * gtk_print_settings_get_dither (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_dither (GtkPrintSettings *settings,
        const gchar *dither);
extern
const gchar * gtk_print_settings_get_finishings (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_finishings (GtkPrintSettings *settings,
        const gchar *finishings);
extern
const gchar * gtk_print_settings_get_output_bin (GtkPrintSettings *settings);
extern
void gtk_print_settings_set_output_bin (GtkPrintSettings *settings,
        const gchar *output_bin);

extern
GVariant *gtk_print_settings_to_gvariant (GtkPrintSettings *settings);
extern
GtkPrintSettings *gtk_print_settings_new_from_gvariant (GVariant *variant);
# 32 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkprintoperationpreview.h" 1
# 36 "/usr/include/gtk-3.0/gtk/gtkprintoperationpreview.h"
typedef struct _GtkPrintOperationPreview GtkPrintOperationPreview;
typedef struct _GtkPrintOperationPreviewIface GtkPrintOperationPreviewIface;


struct _GtkPrintOperationPreviewIface
{
  GTypeInterface g_iface;


  void (*ready) (GtkPrintOperationPreview *preview,
           GtkPrintContext *context);
  void (*got_page_size) (GtkPrintOperationPreview *preview,
           GtkPrintContext *context,
           GtkPageSetup *page_setup);


  void (*render_page) (GtkPrintOperationPreview *preview,
           gint page_nr);
  gboolean (*is_selected) (GtkPrintOperationPreview *preview,
           gint page_nr);
  void (*end_preview) (GtkPrintOperationPreview *preview);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

extern
GType gtk_print_operation_preview_get_type (void) __attribute__ ((__const__));

extern
void gtk_print_operation_preview_render_page (GtkPrintOperationPreview *preview,
        gint page_nr);
extern
void gtk_print_operation_preview_end_preview (GtkPrintOperationPreview *preview);
extern
gboolean gtk_print_operation_preview_is_selected (GtkPrintOperationPreview *preview,
        gint page_nr);
# 34 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h" 2
# 45 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h"
typedef struct _GtkPrintOperationClass GtkPrintOperationClass;
typedef struct _GtkPrintOperationPrivate GtkPrintOperationPrivate;
typedef struct _GtkPrintOperation GtkPrintOperation;
# 70 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h"
typedef enum {
  GTK_PRINT_STATUS_INITIAL,
  GTK_PRINT_STATUS_PREPARING,
  GTK_PRINT_STATUS_GENERATING_DATA,
  GTK_PRINT_STATUS_SENDING_DATA,
  GTK_PRINT_STATUS_PENDING,
  GTK_PRINT_STATUS_PENDING_ISSUE,
  GTK_PRINT_STATUS_PRINTING,
  GTK_PRINT_STATUS_FINISHED,
  GTK_PRINT_STATUS_FINISHED_ABORTED
} GtkPrintStatus;
# 93 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h"
typedef enum {
  GTK_PRINT_OPERATION_RESULT_ERROR,
  GTK_PRINT_OPERATION_RESULT_APPLY,
  GTK_PRINT_OPERATION_RESULT_CANCEL,
  GTK_PRINT_OPERATION_RESULT_IN_PROGRESS
} GtkPrintOperationResult;
# 112 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h"
typedef enum {
  GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
  GTK_PRINT_OPERATION_ACTION_PRINT,
  GTK_PRINT_OPERATION_ACTION_PREVIEW,
  GTK_PRINT_OPERATION_ACTION_EXPORT
} GtkPrintOperationAction;


struct _GtkPrintOperation
{
  GObject parent_instance;


  GtkPrintOperationPrivate *priv;
};
# 150 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h"
struct _GtkPrintOperationClass
{
  GObjectClass parent_class;



  void (*done) (GtkPrintOperation *operation,
                                  GtkPrintOperationResult result);
  void (*begin_print) (GtkPrintOperation *operation,
                                  GtkPrintContext *context);
  gboolean (*paginate) (GtkPrintOperation *operation,
                                  GtkPrintContext *context);
  void (*request_page_setup) (GtkPrintOperation *operation,
                                  GtkPrintContext *context,
                                  gint page_nr,
                                  GtkPageSetup *setup);
  void (*draw_page) (GtkPrintOperation *operation,
                                  GtkPrintContext *context,
                                  gint page_nr);
  void (*end_print) (GtkPrintOperation *operation,
                                  GtkPrintContext *context);
  void (*status_changed) (GtkPrintOperation *operation);

  GtkWidget *(*create_custom_widget) (GtkPrintOperation *operation);
  void (*custom_widget_apply) (GtkPrintOperation *operation,
                                      GtkWidget *widget);

  gboolean (*preview) (GtkPrintOperation *operation,
                              GtkPrintOperationPreview *preview,
                              GtkPrintContext *context,
                              GtkWindow *parent);

  void (*update_custom_widget) (GtkPrintOperation *operation,
                                    GtkWidget *widget,
                                    GtkPageSetup *setup,
                                    GtkPrintSettings *settings);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
# 218 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h"
typedef enum
{
  GTK_PRINT_ERROR_GENERAL,
  GTK_PRINT_ERROR_INTERNAL_ERROR,
  GTK_PRINT_ERROR_NOMEM,
  GTK_PRINT_ERROR_INVALID_FILE
} GtkPrintError;

extern
GQuark gtk_print_error_quark (void);

extern
GType gtk_print_operation_get_type (void) __attribute__ ((__const__));
extern
GtkPrintOperation * gtk_print_operation_new (void);
extern
void gtk_print_operation_set_default_page_setup (GtkPrintOperation *op,
                                                                    GtkPageSetup *default_page_setup);
extern
GtkPageSetup * gtk_print_operation_get_default_page_setup (GtkPrintOperation *op);
extern
void gtk_print_operation_set_print_settings (GtkPrintOperation *op,
                                                                    GtkPrintSettings *print_settings);
extern
GtkPrintSettings * gtk_print_operation_get_print_settings (GtkPrintOperation *op);
extern
void gtk_print_operation_set_job_name (GtkPrintOperation *op,
                                                                    const gchar *job_name);
extern
void gtk_print_operation_set_n_pages (GtkPrintOperation *op,
                                                                    gint n_pages);
extern
void gtk_print_operation_set_current_page (GtkPrintOperation *op,
                                                                    gint current_page);
extern
void gtk_print_operation_set_use_full_page (GtkPrintOperation *op,
                                                                    gboolean full_page);
extern
void gtk_print_operation_set_unit (GtkPrintOperation *op,
                                                                    GtkUnit unit);
extern
void gtk_print_operation_set_export_filename (GtkPrintOperation *op,
                                                                    const gchar *filename);
extern
void gtk_print_operation_set_track_print_status (GtkPrintOperation *op,
                                                                    gboolean track_status);
extern
void gtk_print_operation_set_show_progress (GtkPrintOperation *op,
                                                                    gboolean show_progress);
extern
void gtk_print_operation_set_allow_async (GtkPrintOperation *op,
                                                                    gboolean allow_async);
extern
void gtk_print_operation_set_custom_tab_label (GtkPrintOperation *op,
                                                                    const gchar *label);
extern
GtkPrintOperationResult gtk_print_operation_run (GtkPrintOperation *op,
                                                                    GtkPrintOperationAction action,
                                                                    GtkWindow *parent,
                                                                    GError **error);
extern
void gtk_print_operation_get_error (GtkPrintOperation *op,
                                                                    GError **error);
extern
GtkPrintStatus gtk_print_operation_get_status (GtkPrintOperation *op);
extern
const gchar * gtk_print_operation_get_status_string (GtkPrintOperation *op);
extern
gboolean gtk_print_operation_is_finished (GtkPrintOperation *op);
extern
void gtk_print_operation_cancel (GtkPrintOperation *op);
extern
void gtk_print_operation_draw_page_finish (GtkPrintOperation *op);
extern
void gtk_print_operation_set_defer_drawing (GtkPrintOperation *op);
extern
void gtk_print_operation_set_support_selection (GtkPrintOperation *op,
                                                                    gboolean support_selection);
extern
gboolean gtk_print_operation_get_support_selection (GtkPrintOperation *op);
extern
void gtk_print_operation_set_has_selection (GtkPrintOperation *op,
                                                                    gboolean has_selection);
extern
gboolean gtk_print_operation_get_has_selection (GtkPrintOperation *op);
extern
void gtk_print_operation_set_embed_page_setup (GtkPrintOperation *op,
                                                                    gboolean embed);
extern
gboolean gtk_print_operation_get_embed_page_setup (GtkPrintOperation *op);
extern
gint gtk_print_operation_get_n_pages_to_print (GtkPrintOperation *op);

extern
GtkPageSetup *gtk_print_run_page_setup_dialog (GtkWindow *parent,
                                                                    GtkPageSetup *page_setup,
                                                                    GtkPrintSettings *settings);
# 328 "/usr/include/gtk-3.0/gtk/gtkprintoperation.h"
typedef void (* GtkPageSetupDoneFunc) (GtkPageSetup *page_setup,
                                        gpointer data);

extern
void gtk_print_run_page_setup_dialog_async (GtkWindow *parent,
                                                                    GtkPageSetup *page_setup,
                                                                    GtkPrintSettings *settings,
                                                                    GtkPageSetupDoneFunc done_cb,
                                                                    gpointer data);
# 168 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtkprogressbar.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkprogressbar.h"
typedef struct _GtkProgressBar GtkProgressBar;
typedef struct _GtkProgressBarPrivate GtkProgressBarPrivate;
typedef struct _GtkProgressBarClass GtkProgressBarClass;

struct _GtkProgressBar
{
  GtkWidget parent;


  GtkProgressBarPrivate *priv;
};

struct _GtkProgressBarClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_progress_bar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_progress_bar_new (void);

extern
void gtk_progress_bar_pulse (GtkProgressBar *pbar);
extern
void gtk_progress_bar_set_text (GtkProgressBar *pbar,
                                                  const gchar *text);
extern
void gtk_progress_bar_set_fraction (GtkProgressBar *pbar,
                                                  gdouble fraction);

extern
void gtk_progress_bar_set_pulse_step (GtkProgressBar *pbar,
                                                  gdouble fraction);
extern
void gtk_progress_bar_set_inverted (GtkProgressBar *pbar,
                                                  gboolean inverted);

extern
const gchar * gtk_progress_bar_get_text (GtkProgressBar *pbar);
extern
gdouble gtk_progress_bar_get_fraction (GtkProgressBar *pbar);
extern
gdouble gtk_progress_bar_get_pulse_step (GtkProgressBar *pbar);

extern
gboolean gtk_progress_bar_get_inverted (GtkProgressBar *pbar);
extern
void gtk_progress_bar_set_ellipsize (GtkProgressBar *pbar,
                                                   PangoEllipsizeMode mode);
extern
PangoEllipsizeMode gtk_progress_bar_get_ellipsize (GtkProgressBar *pbar);

extern
void gtk_progress_bar_set_show_text (GtkProgressBar *pbar,
                                                   gboolean show_text);
extern
gboolean gtk_progress_bar_get_show_text (GtkProgressBar *pbar);
# 171 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkradiobutton.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkradiobutton.h"
typedef struct _GtkRadioButton GtkRadioButton;
typedef struct _GtkRadioButtonPrivate GtkRadioButtonPrivate;
typedef struct _GtkRadioButtonClass GtkRadioButtonClass;

struct _GtkRadioButton
{
  GtkCheckButton check_button;


  GtkRadioButtonPrivate *priv;
};

struct _GtkRadioButtonClass
{
  GtkCheckButtonClass parent_class;


  void (*group_changed) (GtkRadioButton *radio_button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_radio_button_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_radio_button_new (GSList *group);
extern
GtkWidget* gtk_radio_button_new_from_widget (GtkRadioButton *radio_group_member);
extern
GtkWidget* gtk_radio_button_new_with_label (GSList *group,
                                                           const gchar *label);
extern
GtkWidget* gtk_radio_button_new_with_label_from_widget (GtkRadioButton *radio_group_member,
                                                           const gchar *label);
extern
GtkWidget* gtk_radio_button_new_with_mnemonic (GSList *group,
                                                           const gchar *label);
extern
GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget (GtkRadioButton *radio_group_member,
                                                           const gchar *label);
extern
GSList* gtk_radio_button_get_group (GtkRadioButton *radio_button);
extern
void gtk_radio_button_set_group (GtkRadioButton *radio_button,
                                                           GSList *group);
extern
void gtk_radio_button_join_group (GtkRadioButton *radio_button,
                                                    GtkRadioButton *group_source);
# 172 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkradiomenuitem.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkradiomenuitem.h"
typedef struct _GtkRadioMenuItem GtkRadioMenuItem;
typedef struct _GtkRadioMenuItemPrivate GtkRadioMenuItemPrivate;
typedef struct _GtkRadioMenuItemClass GtkRadioMenuItemClass;

struct _GtkRadioMenuItem
{
  GtkCheckMenuItem check_menu_item;


  GtkRadioMenuItemPrivate *priv;
};

struct _GtkRadioMenuItemClass
{
  GtkCheckMenuItemClass parent_class;


  void (*group_changed) (GtkRadioMenuItem *radio_menu_item);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_radio_menu_item_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_radio_menu_item_new (GSList *group);
extern
GtkWidget* gtk_radio_menu_item_new_with_label (GSList *group,
             const gchar *label);
extern
GtkWidget* gtk_radio_menu_item_new_with_mnemonic (GSList *group,
             const gchar *label);
extern
GtkWidget* gtk_radio_menu_item_new_from_widget (GtkRadioMenuItem *group);
extern
GtkWidget *gtk_radio_menu_item_new_with_mnemonic_from_widget (GtkRadioMenuItem *group,
             const gchar *label);
extern
GtkWidget *gtk_radio_menu_item_new_with_label_from_widget (GtkRadioMenuItem *group,
             const gchar *label);
extern
GSList* gtk_radio_menu_item_get_group (GtkRadioMenuItem *radio_menu_item);
extern
void gtk_radio_menu_item_set_group (GtkRadioMenuItem *radio_menu_item,
             GSList *group);

extern
void gtk_radio_menu_item_join_group (GtkRadioMenuItem *radio_menu_item,
                                                              GtkRadioMenuItem *group_source);
# 173 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkradiotoolbutton.h" 1
# 28 "/usr/include/gtk-3.0/gtk/gtkradiotoolbutton.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktoggletoolbutton.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtktoggletoolbutton.h"
typedef struct _GtkToggleToolButton GtkToggleToolButton;
typedef struct _GtkToggleToolButtonClass GtkToggleToolButtonClass;
typedef struct _GtkToggleToolButtonPrivate GtkToggleToolButtonPrivate;

struct _GtkToggleToolButton
{
  GtkToolButton parent;


  GtkToggleToolButtonPrivate *priv;
};






struct _GtkToggleToolButtonClass
{
  GtkToolButtonClass parent_class;




  void (* toggled) (GtkToggleToolButton *button);




  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

extern
GType gtk_toggle_tool_button_get_type (void) __attribute__ ((__const__));
extern
GtkToolItem *gtk_toggle_tool_button_new (void);
__attribute__((__deprecated__("Use '" "gtk_toggle_tool_button_new" "' instead"))) extern
GtkToolItem *gtk_toggle_tool_button_new_from_stock (const gchar *stock_id);

extern
void gtk_toggle_tool_button_set_active (GtkToggleToolButton *button,
          gboolean is_active);
extern
gboolean gtk_toggle_tool_button_get_active (GtkToggleToolButton *button);
# 29 "/usr/include/gtk-3.0/gtk/gtkradiotoolbutton.h" 2
# 39 "/usr/include/gtk-3.0/gtk/gtkradiotoolbutton.h"
typedef struct _GtkRadioToolButton GtkRadioToolButton;
typedef struct _GtkRadioToolButtonClass GtkRadioToolButtonClass;

struct _GtkRadioToolButton
{
  GtkToggleToolButton parent;
};

struct _GtkRadioToolButtonClass
{
  GtkToggleToolButtonClass parent_class;


  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

extern
GType gtk_radio_tool_button_get_type (void) __attribute__ ((__const__));

extern
GtkToolItem *gtk_radio_tool_button_new (GSList *group);
__attribute__((__deprecated__("Use '" "gtk_radio_tool_button_new" "' instead"))) extern
GtkToolItem *gtk_radio_tool_button_new_from_stock (GSList *group,
              const gchar *stock_id);
extern
GtkToolItem *gtk_radio_tool_button_new_from_widget (GtkRadioToolButton *group);
__attribute__((__deprecated__("Use '" "gtk_radio_tool_button_new_from_widget" "' instead"))) extern
GtkToolItem *gtk_radio_tool_button_new_with_stock_from_widget (GtkRadioToolButton *group,
              const gchar *stock_id);
extern
GSList * gtk_radio_tool_button_get_group (GtkRadioToolButton *button);
extern
void gtk_radio_tool_button_set_group (GtkRadioToolButton *button,
              GSList *group);
# 174 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkrange.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkrange.h"
typedef struct _GtkRange GtkRange;
typedef struct _GtkRangePrivate GtkRangePrivate;
typedef struct _GtkRangeClass GtkRangeClass;

struct _GtkRange
{
  GtkWidget widget;

  GtkRangePrivate *priv;
};

struct _GtkRangeClass
{
  GtkWidgetClass parent_class;


  __attribute__((__deprecated__)) gchar *slider_detail;
  __attribute__((__deprecated__)) gchar *stepper_detail;

  void (* value_changed) (GtkRange *range);
  void (* adjust_bounds) (GtkRange *range,
                             gdouble new_value);


  void (* move_slider) (GtkRange *range,
                             GtkScrollType scroll);


  void (* get_range_border) (GtkRange *range,
                             GtkBorder *border_);

  gboolean (* change_value) (GtkRange *range,
                             GtkScrollType scroll,
                             gdouble new_value);

   void (* get_range_size_request) (GtkRange *range,
                                    GtkOrientation orientation,
                                    gint *minimum,
                                    gint *natural);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};


extern
GType gtk_range_get_type (void) __attribute__ ((__const__));

extern
void gtk_range_set_adjustment (GtkRange *range,
                                                            GtkAdjustment *adjustment);
extern
GtkAdjustment* gtk_range_get_adjustment (GtkRange *range);

extern
void gtk_range_set_inverted (GtkRange *range,
                                                            gboolean setting);
extern
gboolean gtk_range_get_inverted (GtkRange *range);

extern
void gtk_range_set_flippable (GtkRange *range,
                                                            gboolean flippable);
extern
gboolean gtk_range_get_flippable (GtkRange *range);

extern
void gtk_range_set_slider_size_fixed (GtkRange *range,
                                                            gboolean size_fixed);
extern
gboolean gtk_range_get_slider_size_fixed (GtkRange *range);

__attribute__((__deprecated__)) extern
void gtk_range_set_min_slider_size (GtkRange *range,
                                                            gint min_size);
__attribute__((__deprecated__)) extern
gint gtk_range_get_min_slider_size (GtkRange *range);

extern
void gtk_range_get_range_rect (GtkRange *range,
                                                            GdkRectangle *range_rect);
extern
void gtk_range_get_slider_range (GtkRange *range,
                                                            gint *slider_start,
                                                            gint *slider_end);

extern
void gtk_range_set_lower_stepper_sensitivity (GtkRange *range,
                                                            GtkSensitivityType sensitivity);
extern
GtkSensitivityType gtk_range_get_lower_stepper_sensitivity (GtkRange *range);
extern
void gtk_range_set_upper_stepper_sensitivity (GtkRange *range,
                                                            GtkSensitivityType sensitivity);
extern
GtkSensitivityType gtk_range_get_upper_stepper_sensitivity (GtkRange *range);

extern
void gtk_range_set_increments (GtkRange *range,
                                                            gdouble step,
                                                            gdouble page);
extern
void gtk_range_set_range (GtkRange *range,
                                                            gdouble min,
                                                            gdouble max);
extern
void gtk_range_set_value (GtkRange *range,
                                                            gdouble value);
extern
gdouble gtk_range_get_value (GtkRange *range);

extern
void gtk_range_set_show_fill_level (GtkRange *range,
                                                            gboolean show_fill_level);
extern
gboolean gtk_range_get_show_fill_level (GtkRange *range);
extern
void gtk_range_set_restrict_to_fill_level (GtkRange *range,
                                                            gboolean restrict_to_fill_level);
extern
gboolean gtk_range_get_restrict_to_fill_level (GtkRange *range);
extern
void gtk_range_set_fill_level (GtkRange *range,
                                                            gdouble fill_level);
extern
gdouble gtk_range_get_fill_level (GtkRange *range);
extern
void gtk_range_set_round_digits (GtkRange *range,
                                                            gint round_digits);
extern
gint gtk_range_get_round_digits (GtkRange *range);
# 175 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkrecentchooser.h" 1
# 28 "/usr/include/gtk-3.0/gtk/gtkrecentchooser.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkrecentmanager.h" 1
# 42 "/usr/include/gtk-3.0/gtk/gtkrecentmanager.h"
typedef struct _GtkRecentInfo GtkRecentInfo;
typedef struct _GtkRecentData GtkRecentData;
typedef struct _GtkRecentManager GtkRecentManager;
typedef struct _GtkRecentManagerClass GtkRecentManagerClass;
typedef struct _GtkRecentManagerPrivate GtkRecentManagerPrivate;
# 69 "/usr/include/gtk-3.0/gtk/gtkrecentmanager.h"
struct _GtkRecentData
{
  gchar *display_name;
  gchar *description;

  gchar *mime_type;

  gchar *app_name;
  gchar *app_exec;

  gchar **groups;

  gboolean is_private;
};
# 92 "/usr/include/gtk-3.0/gtk/gtkrecentmanager.h"
struct _GtkRecentManager
{

  GObject parent_instance;

  GtkRecentManagerPrivate *priv;
};
# 107 "/usr/include/gtk-3.0/gtk/gtkrecentmanager.h"
struct _GtkRecentManagerClass
{

  GObjectClass parent_class;

  void (*changed) (GtkRecentManager *manager);


  void (*_gtk_recent1) (void);
  void (*_gtk_recent2) (void);
  void (*_gtk_recent3) (void);
  void (*_gtk_recent4) (void);
};
# 140 "/usr/include/gtk-3.0/gtk/gtkrecentmanager.h"
typedef enum
{
  GTK_RECENT_MANAGER_ERROR_NOT_FOUND,
  GTK_RECENT_MANAGER_ERROR_INVALID_URI,
  GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING,
  GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED,
  GTK_RECENT_MANAGER_ERROR_READ,
  GTK_RECENT_MANAGER_ERROR_WRITE,
  GTK_RECENT_MANAGER_ERROR_UNKNOWN
} GtkRecentManagerError;
# 159 "/usr/include/gtk-3.0/gtk/gtkrecentmanager.h"
extern
GQuark gtk_recent_manager_error_quark (void);


extern
GType gtk_recent_manager_get_type (void) __attribute__ ((__const__));

extern
GtkRecentManager *gtk_recent_manager_new (void);
extern
GtkRecentManager *gtk_recent_manager_get_default (void);

extern
gboolean gtk_recent_manager_add_item (GtkRecentManager *manager,
           const gchar *uri);
extern
gboolean gtk_recent_manager_add_full (GtkRecentManager *manager,
           const gchar *uri,
           const GtkRecentData *recent_data);
extern
gboolean gtk_recent_manager_remove_item (GtkRecentManager *manager,
           const gchar *uri,
           GError **error);
extern
GtkRecentInfo * gtk_recent_manager_lookup_item (GtkRecentManager *manager,
           const gchar *uri,
           GError **error);
extern
gboolean gtk_recent_manager_has_item (GtkRecentManager *manager,
           const gchar *uri);
extern
gboolean gtk_recent_manager_move_item (GtkRecentManager *manager,
           const gchar *uri,
           const gchar *new_uri,
           GError **error);
extern
GList * gtk_recent_manager_get_items (GtkRecentManager *manager);
extern
gint gtk_recent_manager_purge_items (GtkRecentManager *manager,
           GError **error);


extern
GType gtk_recent_info_get_type (void) __attribute__ ((__const__));

extern
GtkRecentInfo * gtk_recent_info_ref (GtkRecentInfo *info);
extern
void gtk_recent_info_unref (GtkRecentInfo *info);

extern
const gchar * gtk_recent_info_get_uri (GtkRecentInfo *info);
extern
const gchar * gtk_recent_info_get_display_name (GtkRecentInfo *info);
extern
const gchar * gtk_recent_info_get_description (GtkRecentInfo *info);
extern
const gchar * gtk_recent_info_get_mime_type (GtkRecentInfo *info);
extern
time_t gtk_recent_info_get_added (GtkRecentInfo *info);
extern
time_t gtk_recent_info_get_modified (GtkRecentInfo *info);
extern
time_t gtk_recent_info_get_visited (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_get_private_hint (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_get_application_info (GtkRecentInfo *info,
           const gchar *app_name,
           const gchar **app_exec,
           guint *count,
           time_t *time_);
extern
GAppInfo * gtk_recent_info_create_app_info (GtkRecentInfo *info,
                                                            const gchar *app_name,
                                                            GError **error);
extern
gchar ** gtk_recent_info_get_applications (GtkRecentInfo *info,
           gsize *length) __attribute__ ((__malloc__));
extern
gchar * gtk_recent_info_last_application (GtkRecentInfo *info) __attribute__ ((__malloc__));
extern
gboolean gtk_recent_info_has_application (GtkRecentInfo *info,
           const gchar *app_name);
extern
gchar ** gtk_recent_info_get_groups (GtkRecentInfo *info,
           gsize *length) __attribute__ ((__malloc__));
extern
gboolean gtk_recent_info_has_group (GtkRecentInfo *info,
           const gchar *group_name);
extern
GdkPixbuf * gtk_recent_info_get_icon (GtkRecentInfo *info,
           gint size);
extern
GIcon * gtk_recent_info_get_gicon (GtkRecentInfo *info);
extern
gchar * gtk_recent_info_get_short_name (GtkRecentInfo *info) __attribute__ ((__malloc__));
extern
gchar * gtk_recent_info_get_uri_display (GtkRecentInfo *info) __attribute__ ((__malloc__));
extern
gint gtk_recent_info_get_age (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_is_local (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_exists (GtkRecentInfo *info);
extern
gboolean gtk_recent_info_match (GtkRecentInfo *info_a,
           GtkRecentInfo *info_b);


void _gtk_recent_manager_sync (void);
# 29 "/usr/include/gtk-3.0/gtk/gtkrecentchooser.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkrecentfilter.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtkrecentfilter.h"
typedef struct _GtkRecentFilter GtkRecentFilter;
typedef struct _GtkRecentFilterInfo GtkRecentFilterInfo;
# 53 "/usr/include/gtk-3.0/gtk/gtkrecentfilter.h"
typedef enum {
  GTK_RECENT_FILTER_URI = 1 << 0,
  GTK_RECENT_FILTER_DISPLAY_NAME = 1 << 1,
  GTK_RECENT_FILTER_MIME_TYPE = 1 << 2,
  GTK_RECENT_FILTER_APPLICATION = 1 << 3,
  GTK_RECENT_FILTER_GROUP = 1 << 4,
  GTK_RECENT_FILTER_AGE = 1 << 5
} GtkRecentFilterFlags;
# 73 "/usr/include/gtk-3.0/gtk/gtkrecentfilter.h"
typedef gboolean (*GtkRecentFilterFunc) (const GtkRecentFilterInfo *filter_info,
      gpointer user_data);
# 94 "/usr/include/gtk-3.0/gtk/gtkrecentfilter.h"
struct _GtkRecentFilterInfo
{
  GtkRecentFilterFlags contains;

  const gchar *uri;
  const gchar *display_name;
  const gchar *mime_type;
  const gchar **applications;
  const gchar **groups;

  gint age;
};

extern
GType gtk_recent_filter_get_type (void) __attribute__ ((__const__));

extern
GtkRecentFilter * gtk_recent_filter_new (void);
extern
void gtk_recent_filter_set_name (GtkRecentFilter *filter,
        const gchar *name);
extern
const gchar * gtk_recent_filter_get_name (GtkRecentFilter *filter);

extern
void gtk_recent_filter_add_mime_type (GtkRecentFilter *filter,
        const gchar *mime_type);
extern
void gtk_recent_filter_add_pattern (GtkRecentFilter *filter,
        const gchar *pattern);
extern
void gtk_recent_filter_add_pixbuf_formats (GtkRecentFilter *filter);
extern
void gtk_recent_filter_add_application (GtkRecentFilter *filter,
        const gchar *application);
extern
void gtk_recent_filter_add_group (GtkRecentFilter *filter,
        const gchar *group);
extern
void gtk_recent_filter_add_age (GtkRecentFilter *filter,
        gint days);
extern
void gtk_recent_filter_add_custom (GtkRecentFilter *filter,
        GtkRecentFilterFlags needed,
        GtkRecentFilterFunc func,
        gpointer data,
        GDestroyNotify data_destroy);

extern
GtkRecentFilterFlags gtk_recent_filter_get_needed (GtkRecentFilter *filter);
extern
gboolean gtk_recent_filter_filter (GtkRecentFilter *filter,
         const GtkRecentFilterInfo *filter_info);
# 30 "/usr/include/gtk-3.0/gtk/gtkrecentchooser.h" 2
# 54 "/usr/include/gtk-3.0/gtk/gtkrecentchooser.h"
typedef enum
{
  GTK_RECENT_SORT_NONE = 0,
  GTK_RECENT_SORT_MRU,
  GTK_RECENT_SORT_LRU,
  GTK_RECENT_SORT_CUSTOM
} GtkRecentSortType;

typedef gint (*GtkRecentSortFunc) (GtkRecentInfo *a,
       GtkRecentInfo *b,
       gpointer user_data);


typedef struct _GtkRecentChooser GtkRecentChooser;
typedef struct _GtkRecentChooserIface GtkRecentChooserIface;
# 89 "/usr/include/gtk-3.0/gtk/gtkrecentchooser.h"
typedef enum
{
  GTK_RECENT_CHOOSER_ERROR_NOT_FOUND,
  GTK_RECENT_CHOOSER_ERROR_INVALID_URI
} GtkRecentChooserError;

extern
GQuark gtk_recent_chooser_error_quark (void);
# 123 "/usr/include/gtk-3.0/gtk/gtkrecentchooser.h"
struct _GtkRecentChooserIface
{

  GTypeInterface base_iface;






  gboolean (* set_current_uri) (GtkRecentChooser *chooser,
           const gchar *uri,
           GError **error);
  gchar * (* get_current_uri) (GtkRecentChooser *chooser);
  gboolean (* select_uri) (GtkRecentChooser *chooser,
           const gchar *uri,
           GError **error);
  void (* unselect_uri) (GtkRecentChooser *chooser,
                                            const gchar *uri);
  void (* select_all) (GtkRecentChooser *chooser);
  void (* unselect_all) (GtkRecentChooser *chooser);
  GList * (* get_items) (GtkRecentChooser *chooser);
  GtkRecentManager *(* get_recent_manager) (GtkRecentChooser *chooser);
  void (* add_filter) (GtkRecentChooser *chooser,
           GtkRecentFilter *filter);
  void (* remove_filter) (GtkRecentChooser *chooser,
           GtkRecentFilter *filter);
  GSList * (* list_filters) (GtkRecentChooser *chooser);
  void (* set_sort_func) (GtkRecentChooser *chooser,
           GtkRecentSortFunc sort_func,
           gpointer sort_data,
           GDestroyNotify data_destroy);




  void (* item_activated) (GtkRecentChooser *chooser);
  void (* selection_changed) (GtkRecentChooser *chooser);
};

extern
GType gtk_recent_chooser_get_type (void) __attribute__ ((__const__));




extern
void gtk_recent_chooser_set_show_private (GtkRecentChooser *chooser,
         gboolean show_private);
extern
gboolean gtk_recent_chooser_get_show_private (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_show_not_found (GtkRecentChooser *chooser,
         gboolean show_not_found);
extern
gboolean gtk_recent_chooser_get_show_not_found (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_select_multiple (GtkRecentChooser *chooser,
         gboolean select_multiple);
extern
gboolean gtk_recent_chooser_get_select_multiple (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_limit (GtkRecentChooser *chooser,
         gint limit);
extern
gint gtk_recent_chooser_get_limit (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_local_only (GtkRecentChooser *chooser,
         gboolean local_only);
extern
gboolean gtk_recent_chooser_get_local_only (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_show_tips (GtkRecentChooser *chooser,
         gboolean show_tips);
extern
gboolean gtk_recent_chooser_get_show_tips (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_show_icons (GtkRecentChooser *chooser,
         gboolean show_icons);
extern
gboolean gtk_recent_chooser_get_show_icons (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_sort_type (GtkRecentChooser *chooser,
         GtkRecentSortType sort_type);
extern
GtkRecentSortType gtk_recent_chooser_get_sort_type (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_sort_func (GtkRecentChooser *chooser,
         GtkRecentSortFunc sort_func,
         gpointer sort_data,
         GDestroyNotify data_destroy);




extern
gboolean gtk_recent_chooser_set_current_uri (GtkRecentChooser *chooser,
          const gchar *uri,
          GError **error);
extern
gchar * gtk_recent_chooser_get_current_uri (GtkRecentChooser *chooser);
extern
GtkRecentInfo *gtk_recent_chooser_get_current_item (GtkRecentChooser *chooser);
extern
gboolean gtk_recent_chooser_select_uri (GtkRecentChooser *chooser,
          const gchar *uri,
          GError **error);
extern
void gtk_recent_chooser_unselect_uri (GtkRecentChooser *chooser,
                 const gchar *uri);
extern
void gtk_recent_chooser_select_all (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_unselect_all (GtkRecentChooser *chooser);
extern
GList * gtk_recent_chooser_get_items (GtkRecentChooser *chooser);
extern
gchar ** gtk_recent_chooser_get_uris (GtkRecentChooser *chooser,
          gsize *length);




extern
void gtk_recent_chooser_add_filter (GtkRecentChooser *chooser,
          GtkRecentFilter *filter);
extern
void gtk_recent_chooser_remove_filter (GtkRecentChooser *chooser,
         GtkRecentFilter *filter);
extern
GSList * gtk_recent_chooser_list_filters (GtkRecentChooser *chooser);
extern
void gtk_recent_chooser_set_filter (GtkRecentChooser *chooser,
         GtkRecentFilter *filter);
extern
GtkRecentFilter *gtk_recent_chooser_get_filter (GtkRecentChooser *chooser);
# 176 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkrecentchooserdialog.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkrecentchooserdialog.h"
typedef struct _GtkRecentChooserDialog GtkRecentChooserDialog;
typedef struct _GtkRecentChooserDialogClass GtkRecentChooserDialogClass;

typedef struct _GtkRecentChooserDialogPrivate GtkRecentChooserDialogPrivate;


struct _GtkRecentChooserDialog
{
  GtkDialog parent_instance;


  GtkRecentChooserDialogPrivate *priv;
};

struct _GtkRecentChooserDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_recent_chooser_dialog_get_type (void) __attribute__ ((__const__));

extern
GtkWidget *gtk_recent_chooser_dialog_new (const gchar *title,
                   GtkWindow *parent,
                   const gchar *first_button_text,
                   ...) __attribute__((__sentinel__));
extern
GtkWidget *gtk_recent_chooser_dialog_new_for_manager (const gchar *title,
            GtkWindow *parent,
            GtkRecentManager *manager,
            const gchar *first_button_text,
            ...) __attribute__((__sentinel__));
# 177 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkrecentchoosermenu.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkrecentchoosermenu.h"
typedef struct _GtkRecentChooserMenu GtkRecentChooserMenu;
typedef struct _GtkRecentChooserMenuClass GtkRecentChooserMenuClass;
typedef struct _GtkRecentChooserMenuPrivate GtkRecentChooserMenuPrivate;

struct _GtkRecentChooserMenu
{
  GtkMenu parent_instance;


  GtkRecentChooserMenuPrivate *priv;
};

struct _GtkRecentChooserMenuClass
{
  GtkMenuClass parent_class;


  void (* gtk_recent1) (void);
  void (* gtk_recent2) (void);
  void (* gtk_recent3) (void);
  void (* gtk_recent4) (void);
};

extern
GType gtk_recent_chooser_menu_get_type (void) __attribute__ ((__const__));

extern
GtkWidget *gtk_recent_chooser_menu_new (void);
extern
GtkWidget *gtk_recent_chooser_menu_new_for_manager (GtkRecentManager *manager);

extern
gboolean gtk_recent_chooser_menu_get_show_numbers (GtkRecentChooserMenu *menu);
extern
void gtk_recent_chooser_menu_set_show_numbers (GtkRecentChooserMenu *menu,
           gboolean show_numbers);
# 178 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkrecentchooserwidget.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkrecentchooserwidget.h"
typedef struct _GtkRecentChooserWidget GtkRecentChooserWidget;
typedef struct _GtkRecentChooserWidgetClass GtkRecentChooserWidgetClass;

typedef struct _GtkRecentChooserWidgetPrivate GtkRecentChooserWidgetPrivate;

struct _GtkRecentChooserWidget
{
  GtkBox parent_instance;


  GtkRecentChooserWidgetPrivate *priv;
};

struct _GtkRecentChooserWidgetClass
{
  GtkBoxClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_recent_chooser_widget_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_recent_chooser_widget_new (void);
extern
GtkWidget *gtk_recent_chooser_widget_new_for_manager (GtkRecentManager *manager);
# 179 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtkrender.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtkrender.h"
extern
void gtk_render_check (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_option (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_arrow (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble angle,
                                    gdouble x,
                                    gdouble y,
                                    gdouble size);
extern
void gtk_render_background (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);

extern
void gtk_render_background_get_clip (GtkStyleContext *context,
                                             gdouble x,
                                             gdouble y,
                                             gdouble width,
                                             gdouble height,
                                             GdkRectangle *out_clip);

extern
void gtk_render_frame (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_expander (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_focus (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_layout (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    PangoLayout *layout);
extern
void gtk_render_line (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x0,
                                    gdouble y0,
                                    gdouble x1,
                                    gdouble y1);
extern
void gtk_render_slider (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height,
                                    GtkOrientation orientation);
__attribute__((__deprecated__("Use '" "gtk_render_frame" "' instead"))) extern
void gtk_render_frame_gap (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height,
                                    GtkPositionType gap_side,
                                    gdouble xy0_gap,
                                    gdouble xy1_gap);
extern
void gtk_render_extension (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height,
                                    GtkPositionType gap_side);
extern
void gtk_render_handle (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
extern
void gtk_render_activity (GtkStyleContext *context,
                                    cairo_t *cr,
                                    gdouble x,
                                    gdouble y,
                                    gdouble width,
                                    gdouble height);
__attribute__((__deprecated__("Use '" "gtk_icon_theme_load_icon" "' instead"))) extern
GdkPixbuf * gtk_render_icon_pixbuf (GtkStyleContext *context,
                                    const GtkIconSource *source,
                                    GtkIconSize size);
extern
void gtk_render_icon (GtkStyleContext *context,
                                    cairo_t *cr,
                                    GdkPixbuf *pixbuf,
                                    gdouble x,
                                    gdouble y);
extern
void gtk_render_icon_surface (GtkStyleContext *context,
         cairo_t *cr,
         cairo_surface_t *surface,
         gdouble x,
         gdouble y);
# 182 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkrevealer.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkrevealer.h"
typedef struct _GtkRevealer GtkRevealer;
typedef struct _GtkRevealerClass GtkRevealerClass;

typedef enum {
  GTK_REVEALER_TRANSITION_TYPE_NONE,
  GTK_REVEALER_TRANSITION_TYPE_CROSSFADE,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN
} GtkRevealerTransitionType;

struct _GtkRevealer {
  GtkBin parent_instance;
};





struct _GtkRevealerClass {
  GtkBinClass parent_class;
};

extern
GType gtk_revealer_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_revealer_new (void);
extern
gboolean gtk_revealer_get_reveal_child (GtkRevealer *revealer);
extern
void gtk_revealer_set_reveal_child (GtkRevealer *revealer,
                                                                 gboolean reveal_child);
extern
gboolean gtk_revealer_get_child_revealed (GtkRevealer *revealer);
extern
guint gtk_revealer_get_transition_duration (GtkRevealer *revealer);
extern
void gtk_revealer_set_transition_duration (GtkRevealer *revealer,
                                                                 guint duration);
extern
void gtk_revealer_set_transition_type (GtkRevealer *revealer,
                                                                 GtkRevealerTransitionType transition);
extern
GtkRevealerTransitionType gtk_revealer_get_transition_type (GtkRevealer *revealer);
# 183 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkscale.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkscale.h"
typedef struct _GtkScale GtkScale;
typedef struct _GtkScalePrivate GtkScalePrivate;
typedef struct _GtkScaleClass GtkScaleClass;

struct _GtkScale
{
  GtkRange range;


  GtkScalePrivate *priv;
};

struct _GtkScaleClass
{
  GtkRangeClass parent_class;

  gchar* (* format_value) (GtkScale *scale,
                           gdouble value);

  void (* draw_value) (GtkScale *scale);

  void (* get_layout_offsets) (GtkScale *scale,
                               gint *x,
                               gint *y);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_scale_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_scale_new (GtkOrientation orientation,
                                                GtkAdjustment *adjustment);
extern
GtkWidget * gtk_scale_new_with_range (GtkOrientation orientation,
                                                gdouble min,
                                                gdouble max,
                                                gdouble step);
extern
void gtk_scale_set_digits (GtkScale *scale,
                                                gint digits);
extern
gint gtk_scale_get_digits (GtkScale *scale);
extern
void gtk_scale_set_draw_value (GtkScale *scale,
                                                gboolean draw_value);
extern
gboolean gtk_scale_get_draw_value (GtkScale *scale);
extern
void gtk_scale_set_has_origin (GtkScale *scale,
                                                gboolean has_origin);
extern
gboolean gtk_scale_get_has_origin (GtkScale *scale);
extern
void gtk_scale_set_value_pos (GtkScale *scale,
                                                GtkPositionType pos);
extern
GtkPositionType gtk_scale_get_value_pos (GtkScale *scale);

extern
PangoLayout * gtk_scale_get_layout (GtkScale *scale);
extern
void gtk_scale_get_layout_offsets (GtkScale *scale,
                                                gint *x,
                                                gint *y);

extern
void gtk_scale_add_mark (GtkScale *scale,
                                                gdouble value,
                                                GtkPositionType position,
                                                const gchar *markup);
extern
void gtk_scale_clear_marks (GtkScale *scale);
# 184 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkscalebutton.h" 1
# 52 "/usr/include/gtk-3.0/gtk/gtkscalebutton.h"
typedef struct _GtkScaleButton GtkScaleButton;
typedef struct _GtkScaleButtonClass GtkScaleButtonClass;
typedef struct _GtkScaleButtonPrivate GtkScaleButtonPrivate;

struct _GtkScaleButton
{
  GtkButton parent;


  GtkScaleButtonPrivate *priv;
};

struct _GtkScaleButtonClass
{
  GtkButtonClass parent_class;


  void (* value_changed) (GtkScaleButton *button,
                           gdouble value);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_scale_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_scale_button_new (GtkIconSize size,
                                                    gdouble min,
                                                    gdouble max,
                                                    gdouble step,
                                                    const gchar **icons);
extern
void gtk_scale_button_set_icons (GtkScaleButton *button,
                                                    const gchar **icons);
extern
gdouble gtk_scale_button_get_value (GtkScaleButton *button);
extern
void gtk_scale_button_set_value (GtkScaleButton *button,
                                                    gdouble value);
extern
GtkAdjustment * gtk_scale_button_get_adjustment (GtkScaleButton *button);
extern
void gtk_scale_button_set_adjustment (GtkScaleButton *button,
                                                    GtkAdjustment *adjustment);
extern
GtkWidget * gtk_scale_button_get_plus_button (GtkScaleButton *button);
extern
GtkWidget * gtk_scale_button_get_minus_button (GtkScaleButton *button);
extern
GtkWidget * gtk_scale_button_get_popup (GtkScaleButton *button);
# 185 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkscrollable.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtkscrollable.h"
typedef struct _GtkScrollable GtkScrollable;
typedef struct _GtkScrollableInterface GtkScrollableInterface;

struct _GtkScrollableInterface
{
  GTypeInterface base_iface;

  gboolean (* get_border) (GtkScrollable *scrollable,
                           GtkBorder *border);
};


extern
GType gtk_scrollable_get_type (void) __attribute__ ((__const__));
extern
GtkAdjustment *gtk_scrollable_get_hadjustment (GtkScrollable *scrollable);
extern
void gtk_scrollable_set_hadjustment (GtkScrollable *scrollable,
           GtkAdjustment *hadjustment);
extern
GtkAdjustment *gtk_scrollable_get_vadjustment (GtkScrollable *scrollable);
extern
void gtk_scrollable_set_vadjustment (GtkScrollable *scrollable,
           GtkAdjustment *vadjustment);
extern
GtkScrollablePolicy gtk_scrollable_get_hscroll_policy (GtkScrollable *scrollable);
extern
void gtk_scrollable_set_hscroll_policy (GtkScrollable *scrollable,
           GtkScrollablePolicy policy);
extern
GtkScrollablePolicy gtk_scrollable_get_vscroll_policy (GtkScrollable *scrollable);
extern
void gtk_scrollable_set_vscroll_policy (GtkScrollable *scrollable,
           GtkScrollablePolicy policy);

extern
gboolean gtk_scrollable_get_border (GtkScrollable *scrollable,
                                                            GtkBorder *border);
# 186 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkscrollbar.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkscrollbar.h"
typedef struct _GtkScrollbar GtkScrollbar;
typedef struct _GtkScrollbarClass GtkScrollbarClass;

struct _GtkScrollbar
{
  GtkRange range;
};

struct _GtkScrollbarClass
{
  GtkRangeClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_scrollbar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_scrollbar_new (GtkOrientation orientation,
                                    GtkAdjustment *adjustment);
# 187 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkscrolledwindow.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkscrolledwindow.h"
typedef struct _GtkScrolledWindow GtkScrolledWindow;
typedef struct _GtkScrolledWindowPrivate GtkScrolledWindowPrivate;
typedef struct _GtkScrolledWindowClass GtkScrolledWindowClass;

struct _GtkScrolledWindow
{
  GtkBin container;

  GtkScrolledWindowPrivate *priv;
};
# 65 "/usr/include/gtk-3.0/gtk/gtkscrolledwindow.h"
struct _GtkScrolledWindowClass
{
  GtkBinClass parent_class;

  gint scrollbar_spacing;
# 80 "/usr/include/gtk-3.0/gtk/gtkscrolledwindow.h"
  gboolean (*scroll_child) (GtkScrolledWindow *scrolled_window,
         GtkScrollType scroll,
       gboolean horizontal);

  void (* move_focus_out) (GtkScrolledWindow *scrolled_window,
      GtkDirectionType direction);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 112 "/usr/include/gtk-3.0/gtk/gtkscrolledwindow.h"
typedef enum
{
  GTK_CORNER_TOP_LEFT,
  GTK_CORNER_BOTTOM_LEFT,
  GTK_CORNER_TOP_RIGHT,
  GTK_CORNER_BOTTOM_RIGHT
} GtkCornerType;
# 136 "/usr/include/gtk-3.0/gtk/gtkscrolledwindow.h"
typedef enum
{
  GTK_POLICY_ALWAYS,
  GTK_POLICY_AUTOMATIC,
  GTK_POLICY_NEVER,
  GTK_POLICY_EXTERNAL
} GtkPolicyType;


extern
GType gtk_scrolled_window_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_scrolled_window_new (GtkAdjustment *hadjustment,
            GtkAdjustment *vadjustment);
extern
void gtk_scrolled_window_set_hadjustment (GtkScrolledWindow *scrolled_window,
            GtkAdjustment *hadjustment);
extern
void gtk_scrolled_window_set_vadjustment (GtkScrolledWindow *scrolled_window,
            GtkAdjustment *vadjustment);
extern
GtkAdjustment* gtk_scrolled_window_get_hadjustment (GtkScrolledWindow *scrolled_window);
extern
GtkAdjustment* gtk_scrolled_window_get_vadjustment (GtkScrolledWindow *scrolled_window);
extern
GtkWidget* gtk_scrolled_window_get_hscrollbar (GtkScrolledWindow *scrolled_window);
extern
GtkWidget* gtk_scrolled_window_get_vscrollbar (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_policy (GtkScrolledWindow *scrolled_window,
            GtkPolicyType hscrollbar_policy,
            GtkPolicyType vscrollbar_policy);
extern
void gtk_scrolled_window_get_policy (GtkScrolledWindow *scrolled_window,
            GtkPolicyType *hscrollbar_policy,
            GtkPolicyType *vscrollbar_policy);
extern
void gtk_scrolled_window_set_placement (GtkScrolledWindow *scrolled_window,
            GtkCornerType window_placement);
extern
void gtk_scrolled_window_unset_placement (GtkScrolledWindow *scrolled_window);

extern
GtkCornerType gtk_scrolled_window_get_placement (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_shadow_type (GtkScrolledWindow *scrolled_window,
            GtkShadowType type);
extern
GtkShadowType gtk_scrolled_window_get_shadow_type (GtkScrolledWindow *scrolled_window);
__attribute__((__deprecated__("Use '" "gtk_container_add" "' instead"))) extern
void gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window,
            GtkWidget *child);

extern
gint gtk_scrolled_window_get_min_content_width (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_min_content_width (GtkScrolledWindow *scrolled_window,
                                                           gint width);
extern
gint gtk_scrolled_window_get_min_content_height (GtkScrolledWindow *scrolled_window);
extern
void gtk_scrolled_window_set_min_content_height (GtkScrolledWindow *scrolled_window,
                                                           gint height);
extern
void gtk_scrolled_window_set_kinetic_scrolling (GtkScrolledWindow *scrolled_window,
                                                           gboolean kinetic_scrolling);
extern
gboolean gtk_scrolled_window_get_kinetic_scrolling (GtkScrolledWindow *scrolled_window);

extern
void gtk_scrolled_window_set_capture_button_press (GtkScrolledWindow *scrolled_window,
                                                             gboolean capture_button_press);
extern
gboolean gtk_scrolled_window_get_capture_button_press (GtkScrolledWindow *scrolled_window);

extern
void gtk_scrolled_window_set_overlay_scrolling (GtkScrolledWindow *scrolled_window,
                                                           gboolean overlay_scrolling);
extern
gboolean gtk_scrolled_window_get_overlay_scrolling (GtkScrolledWindow *scrolled_window);

extern
void gtk_scrolled_window_set_max_content_width (GtkScrolledWindow *scrolled_window,
                                                           gint width);
extern
gint gtk_scrolled_window_get_max_content_width (GtkScrolledWindow *scrolled_window);

extern
void gtk_scrolled_window_set_max_content_height (GtkScrolledWindow *scrolled_window,
                                                           gint height);
extern
gint gtk_scrolled_window_get_max_content_height (GtkScrolledWindow *scrolled_window);

extern
void gtk_scrolled_window_set_propagate_natural_width (GtkScrolledWindow *scrolled_window,
         gboolean propagate);
extern
gboolean gtk_scrolled_window_get_propagate_natural_width (GtkScrolledWindow *scrolled_window);

extern
void gtk_scrolled_window_set_propagate_natural_height (GtkScrolledWindow *scrolled_window,
         gboolean propagate);
extern
gboolean gtk_scrolled_window_get_propagate_natural_height (GtkScrolledWindow *scrolled_window);
# 188 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtksearchbar.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtksearchbar.h"
typedef struct _GtkSearchBar GtkSearchBar;
typedef struct _GtkSearchBarClass GtkSearchBarClass;

struct _GtkSearchBar
{

  GtkBin parent;
};





struct _GtkSearchBarClass
{
  GtkBinClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_search_bar_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_search_bar_new (void);

extern
void gtk_search_bar_connect_entry (GtkSearchBar *bar,
                                            GtkEntry *entry);

extern
gboolean gtk_search_bar_get_search_mode (GtkSearchBar *bar);
extern
void gtk_search_bar_set_search_mode (GtkSearchBar *bar,
                                            gboolean search_mode);

extern
gboolean gtk_search_bar_get_show_close_button (GtkSearchBar *bar);
extern
void gtk_search_bar_set_show_close_button (GtkSearchBar *bar,
                                                  gboolean visible);

extern
gboolean gtk_search_bar_handle_event (GtkSearchBar *bar,
                                            GdkEvent *event);
# 189 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtksearchentry.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtksearchentry.h"
typedef struct _GtkSearchEntry GtkSearchEntry;
typedef struct _GtkSearchEntryClass GtkSearchEntryClass;

struct _GtkSearchEntry
{
  GtkEntry parent;
};

struct _GtkSearchEntryClass
{
  GtkEntryClass parent_class;

  void (*search_changed) (GtkSearchEntry *entry);
  void (*next_match) (GtkSearchEntry *entry);
  void (*previous_match) (GtkSearchEntry *entry);
  void (*stop_search) (GtkSearchEntry *entry);
};

extern
GType gtk_search_entry_get_type (void) __attribute__ ((__const__));

extern
GtkWidget* gtk_search_entry_new (void);

extern
gboolean gtk_search_entry_handle_event (GtkSearchEntry *entry,
                                                 GdkEvent *event);
# 190 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkseparator.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkseparator.h"
typedef struct _GtkSeparator GtkSeparator;
typedef struct _GtkSeparatorPrivate GtkSeparatorPrivate;
typedef struct _GtkSeparatorClass GtkSeparatorClass;

struct _GtkSeparator
{
  GtkWidget widget;

  GtkSeparatorPrivate *priv;
};

struct _GtkSeparatorClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_separator_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_separator_new (GtkOrientation orientation);
# 192 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkseparatormenuitem.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkseparatormenuitem.h"
typedef struct _GtkSeparatorMenuItem GtkSeparatorMenuItem;
typedef struct _GtkSeparatorMenuItemClass GtkSeparatorMenuItemClass;

struct _GtkSeparatorMenuItem
{
  GtkMenuItem menu_item;
};





struct _GtkSeparatorMenuItemClass
{
  GtkMenuItemClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_separator_menu_item_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_separator_menu_item_new (void);
# 193 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkseparatortoolitem.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtkseparatortoolitem.h"
typedef struct _GtkSeparatorToolItem GtkSeparatorToolItem;
typedef struct _GtkSeparatorToolItemClass GtkSeparatorToolItemClass;
typedef struct _GtkSeparatorToolItemPrivate GtkSeparatorToolItemPrivate;

struct _GtkSeparatorToolItem
{
  GtkToolItem parent;


  GtkSeparatorToolItemPrivate *priv;
};





struct _GtkSeparatorToolItemClass
{
  GtkToolItemClass parent_class;




  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};

extern
GType gtk_separator_tool_item_get_type (void) __attribute__ ((__const__));
extern
GtkToolItem *gtk_separator_tool_item_new (void);

extern
gboolean gtk_separator_tool_item_get_draw (GtkSeparatorToolItem *item);
extern
void gtk_separator_tool_item_set_draw (GtkSeparatorToolItem *item,
            gboolean draw);
# 194 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtksettings.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtksettings.h"
typedef struct _GtkSettingsPrivate GtkSettingsPrivate;
typedef struct _GtkSettingsClass GtkSettingsClass;
typedef struct _GtkSettingsValue GtkSettingsValue;



struct _GtkSettings
{
  GObject parent_instance;


  GtkSettingsPrivate *priv;
};

struct _GtkSettingsClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 73 "/usr/include/gtk-3.0/gtk/gtksettings.h"
struct _GtkSettingsValue
{



  gchar *origin;




  GValue value;
};



extern
GType gtk_settings_get_type (void) __attribute__ ((__const__));
extern
GtkSettings* gtk_settings_get_default (void);
extern
GtkSettings* gtk_settings_get_for_screen (GdkScreen *screen);

__attribute__((__deprecated__)) extern
void gtk_settings_install_property (GParamSpec *pspec);
__attribute__((__deprecated__)) extern
void gtk_settings_install_property_parser (GParamSpec *pspec,
                                                      GtkRcPropertyParser parser);


extern
gboolean gtk_rc_property_parse_color (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
gboolean gtk_rc_property_parse_enum (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
gboolean gtk_rc_property_parse_flags (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
gboolean gtk_rc_property_parse_requisition (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
extern
gboolean gtk_rc_property_parse_border (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);

__attribute__((__deprecated__)) extern
void gtk_settings_set_property_value (GtkSettings *settings,
                                            const gchar *name,
                                            const GtkSettingsValue *svalue);
__attribute__((__deprecated__)) extern
void gtk_settings_set_string_property (GtkSettings *settings,
                                            const gchar *name,
                                            const gchar *v_string,
                                            const gchar *origin);
__attribute__((__deprecated__)) extern
void gtk_settings_set_long_property (GtkSettings *settings,
                                            const gchar *name,
                                            glong v_long,
                                            const gchar *origin);
__attribute__((__deprecated__)) extern
void gtk_settings_set_double_property (GtkSettings *settings,
                                            const gchar *name,
                                            gdouble v_double,
                                            const gchar *origin);

extern
void gtk_settings_reset_property (GtkSettings *settings,
                                            const gchar *name);
# 195 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkshortcutlabel.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtkshortcutlabel.h"
typedef struct _GtkShortcutLabel GtkShortcutLabel;
typedef struct _GtkShortcutLabelClass GtkShortcutLabelClass;

extern
GType gtk_shortcut_label_get_type (void) __attribute__ ((__const__));

extern
GtkWidget *gtk_shortcut_label_new (const gchar *accelerator);

extern
const gchar *gtk_shortcut_label_get_accelerator (GtkShortcutLabel *self);

extern
void gtk_shortcut_label_set_accelerator (GtkShortcutLabel *self,
                                                 const gchar *accelerator);

extern
const gchar *gtk_shortcut_label_get_disabled_text (GtkShortcutLabel *self);

extern
void gtk_shortcut_label_set_disabled_text (GtkShortcutLabel *self,
                                                   const gchar *disabled_text);
# 196 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkshortcutsgroup.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtkshortcutsgroup.h"
typedef struct _GtkShortcutsGroup GtkShortcutsGroup;
typedef struct _GtkShortcutsGroupClass GtkShortcutsGroupClass;

extern
GType gtk_shortcuts_group_get_type (void) __attribute__ ((__const__));
# 197 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkshortcutssection.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtkshortcutssection.h"
typedef struct _GtkShortcutsSection GtkShortcutsSection;
typedef struct _GtkShortcutsSectionClass GtkShortcutsSectionClass;

extern
GType gtk_shortcuts_section_get_type (void) __attribute__ ((__const__));
# 198 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkshortcutsshortcut.h" 1
# 22 "/usr/include/gtk-3.0/gtk/gtkshortcutsshortcut.h"
# 1 "/usr/include/gtk-3.0/gtk/gtk.h" 1
# 23 "/usr/include/gtk-3.0/gtk/gtkshortcutsshortcut.h" 2
# 34 "/usr/include/gtk-3.0/gtk/gtkshortcutsshortcut.h"
typedef struct _GtkShortcutsShortcut GtkShortcutsShortcut;
typedef struct _GtkShortcutsShortcutClass GtkShortcutsShortcutClass;
# 63 "/usr/include/gtk-3.0/gtk/gtkshortcutsshortcut.h"
typedef enum {
  GTK_SHORTCUT_ACCELERATOR,
  GTK_SHORTCUT_GESTURE_PINCH,
  GTK_SHORTCUT_GESTURE_STRETCH,
  GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE,
  GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE,
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT,
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT,
  GTK_SHORTCUT_GESTURE
} GtkShortcutType;

extern
GType gtk_shortcuts_shortcut_get_type (void) __attribute__ ((__const__));
# 199 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkshow.h" 1
# 32 "/usr/include/gtk-3.0/gtk/gtkshow.h"
__attribute__((__deprecated__("Use '" "gtk_show_uri_on_window" "' instead"))) extern
gboolean gtk_show_uri (GdkScreen *screen,
                        const gchar *uri,
                        guint32 timestamp,
                        GError **error);

extern
gboolean gtk_show_uri_on_window (GtkWindow *parent,
                                 const char *uri,
                                 guint32 timestamp,
                                 GError **error);
# 201 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkstacksidebar.h" 1
# 30 "/usr/include/gtk-3.0/gtk/gtkstacksidebar.h"
# 1 "/usr/include/gtk-3.0/gtk/gtkstack.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtkstack.h"
typedef struct _GtkStack GtkStack;
typedef struct _GtkStackClass GtkStackClass;

typedef enum {
  GTK_STACK_TRANSITION_TYPE_NONE,
  GTK_STACK_TRANSITION_TYPE_CROSSFADE,
  GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP,
  GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN,
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_UP,
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT,
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT,
  GTK_STACK_TRANSITION_TYPE_UNDER_UP,
  GTK_STACK_TRANSITION_TYPE_UNDER_DOWN,
  GTK_STACK_TRANSITION_TYPE_UNDER_LEFT,
  GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT,
  GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP,
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT,
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT
} GtkStackTransitionType;

struct _GtkStack {
  GtkContainer parent_instance;
};

struct _GtkStackClass {
  GtkContainerClass parent_class;
};

extern
GType gtk_stack_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_stack_new (void);
extern
void gtk_stack_add_named (GtkStack *stack,
                                                          GtkWidget *child,
                                                          const gchar *name);
extern
void gtk_stack_add_titled (GtkStack *stack,
                                                          GtkWidget *child,
                                                          const gchar *name,
                                                          const gchar *title);
extern
GtkWidget * gtk_stack_get_child_by_name (GtkStack *stack,
                                                          const gchar *name);
extern
void gtk_stack_set_visible_child (GtkStack *stack,
                                                          GtkWidget *child);
extern
GtkWidget * gtk_stack_get_visible_child (GtkStack *stack);
extern
void gtk_stack_set_visible_child_name (GtkStack *stack,
                                                          const gchar *name);
extern
const gchar * gtk_stack_get_visible_child_name (GtkStack *stack);
extern
void gtk_stack_set_visible_child_full (GtkStack *stack,
                                                          const gchar *name,
                                                          GtkStackTransitionType transition);
extern
void gtk_stack_set_homogeneous (GtkStack *stack,
                                                          gboolean homogeneous);
extern
gboolean gtk_stack_get_homogeneous (GtkStack *stack);
extern
void gtk_stack_set_hhomogeneous (GtkStack *stack,
                                                          gboolean hhomogeneous);
extern
gboolean gtk_stack_get_hhomogeneous (GtkStack *stack);
extern
void gtk_stack_set_vhomogeneous (GtkStack *stack,
                                                          gboolean vhomogeneous);
extern
gboolean gtk_stack_get_vhomogeneous (GtkStack *stack);
extern
void gtk_stack_set_transition_duration (GtkStack *stack,
                                                          guint duration);
extern
guint gtk_stack_get_transition_duration (GtkStack *stack);
extern
void gtk_stack_set_transition_type (GtkStack *stack,
                                                          GtkStackTransitionType transition);
extern
GtkStackTransitionType gtk_stack_get_transition_type (GtkStack *stack);
extern
gboolean gtk_stack_get_transition_running (GtkStack *stack);
extern
void gtk_stack_set_interpolate_size (GtkStack *stack,
                                                          gboolean interpolate_size);
extern
gboolean gtk_stack_get_interpolate_size (GtkStack *stack);
# 31 "/usr/include/gtk-3.0/gtk/gtkstacksidebar.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtkstacksidebar.h"
typedef struct _GtkStackSidebar GtkStackSidebar;
typedef struct _GtkStackSidebarPrivate GtkStackSidebarPrivate;
typedef struct _GtkStackSidebarClass GtkStackSidebarClass;

struct _GtkStackSidebar
{
  GtkBin parent;
};

struct _GtkStackSidebarClass
{
  GtkBinClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_stack_sidebar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_stack_sidebar_new (void);
extern
void gtk_stack_sidebar_set_stack (GtkStackSidebar *sidebar,
                                         GtkStack *stack);
extern
GtkStack * gtk_stack_sidebar_get_stack (GtkStackSidebar *sidebar);
# 202 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtksizerequest.h" 1
# 29 "/usr/include/gtk-3.0/gtk/gtksizerequest.h"
typedef struct _GtkRequestedSize GtkRequestedSize;
# 41 "/usr/include/gtk-3.0/gtk/gtksizerequest.h"
struct _GtkRequestedSize
{
  gpointer data;
  gint minimum_size;
  gint natural_size;
};



extern
gint gtk_distribute_natural_allocation (gint extra_space,
                                                                     guint n_requested_sizes,
                                                                     GtkRequestedSize *sizes);
# 204 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkspinbutton.h" 1
# 68 "/usr/include/gtk-3.0/gtk/gtkspinbutton.h"
typedef enum
{
  GTK_UPDATE_ALWAYS,
  GTK_UPDATE_IF_VALID
} GtkSpinButtonUpdatePolicy;
# 87 "/usr/include/gtk-3.0/gtk/gtkspinbutton.h"
typedef enum
{
  GTK_SPIN_STEP_FORWARD,
  GTK_SPIN_STEP_BACKWARD,
  GTK_SPIN_PAGE_FORWARD,
  GTK_SPIN_PAGE_BACKWARD,
  GTK_SPIN_HOME,
  GTK_SPIN_END,
  GTK_SPIN_USER_DEFINED
} GtkSpinType;


typedef struct _GtkSpinButton GtkSpinButton;
typedef struct _GtkSpinButtonPrivate GtkSpinButtonPrivate;
typedef struct _GtkSpinButtonClass GtkSpinButtonClass;







struct _GtkSpinButton
{
  GtkEntry entry;


  GtkSpinButtonPrivate *priv;
};

struct _GtkSpinButtonClass
{
  GtkEntryClass parent_class;

  gint (*input) (GtkSpinButton *spin_button,
    gdouble *new_value);
  gint (*output) (GtkSpinButton *spin_button);
  void (*value_changed) (GtkSpinButton *spin_button);


  void (*change_value) (GtkSpinButton *spin_button,
   GtkScrollType scroll);

  void (*wrapped) (GtkSpinButton *spin_button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_spin_button_get_type (void) __attribute__ ((__const__));

extern
void gtk_spin_button_configure (GtkSpinButton *spin_button,
          GtkAdjustment *adjustment,
          gdouble climb_rate,
          guint digits);

extern
GtkWidget* gtk_spin_button_new (GtkAdjustment *adjustment,
          gdouble climb_rate,
          guint digits);

extern
GtkWidget* gtk_spin_button_new_with_range (gdouble min,
          gdouble max,
          gdouble step);

extern
void gtk_spin_button_set_adjustment (GtkSpinButton *spin_button,
          GtkAdjustment *adjustment);

extern
GtkAdjustment* gtk_spin_button_get_adjustment (GtkSpinButton *spin_button);

extern
void gtk_spin_button_set_digits (GtkSpinButton *spin_button,
          guint digits);
extern
guint gtk_spin_button_get_digits (GtkSpinButton *spin_button);

extern
void gtk_spin_button_set_increments (GtkSpinButton *spin_button,
          gdouble step,
          gdouble page);
extern
void gtk_spin_button_get_increments (GtkSpinButton *spin_button,
          gdouble *step,
          gdouble *page);

extern
void gtk_spin_button_set_range (GtkSpinButton *spin_button,
          gdouble min,
          gdouble max);
extern
void gtk_spin_button_get_range (GtkSpinButton *spin_button,
          gdouble *min,
          gdouble *max);

extern
gdouble gtk_spin_button_get_value (GtkSpinButton *spin_button);

extern
gint gtk_spin_button_get_value_as_int (GtkSpinButton *spin_button);

extern
void gtk_spin_button_set_value (GtkSpinButton *spin_button,
          gdouble value);

extern
void gtk_spin_button_set_update_policy (GtkSpinButton *spin_button,
          GtkSpinButtonUpdatePolicy policy);
extern
GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy (GtkSpinButton *spin_button);

extern
void gtk_spin_button_set_numeric (GtkSpinButton *spin_button,
          gboolean numeric);
extern
gboolean gtk_spin_button_get_numeric (GtkSpinButton *spin_button);

extern
void gtk_spin_button_spin (GtkSpinButton *spin_button,
          GtkSpinType direction,
          gdouble increment);

extern
void gtk_spin_button_set_wrap (GtkSpinButton *spin_button,
          gboolean wrap);
extern
gboolean gtk_spin_button_get_wrap (GtkSpinButton *spin_button);

extern
void gtk_spin_button_set_snap_to_ticks (GtkSpinButton *spin_button,
          gboolean snap_to_ticks);
extern
gboolean gtk_spin_button_get_snap_to_ticks (GtkSpinButton *spin_button);
extern
void gtk_spin_button_update (GtkSpinButton *spin_button);


void _gtk_spin_button_get_panels (GtkSpinButton *spin_button,
                                                    GdkWindow **down_panel,
                                                    GdkWindow **up_panel);
# 205 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkspinner.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtkspinner.h"
typedef struct _GtkSpinner GtkSpinner;
typedef struct _GtkSpinnerClass GtkSpinnerClass;
typedef struct _GtkSpinnerPrivate GtkSpinnerPrivate;

struct _GtkSpinner
{
  GtkWidget parent;


  GtkSpinnerPrivate *priv;
};

struct _GtkSpinnerClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_spinner_get_type (void) __attribute__ ((__const__));
extern
GtkWidget *gtk_spinner_new (void);
extern
void gtk_spinner_start (GtkSpinner *spinner);
extern
void gtk_spinner_stop (GtkSpinner *spinner);
# 206 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkstackswitcher.h" 1
# 39 "/usr/include/gtk-3.0/gtk/gtkstackswitcher.h"
typedef struct _GtkStackSwitcher GtkStackSwitcher;
typedef struct _GtkStackSwitcherClass GtkStackSwitcherClass;

struct _GtkStackSwitcher
{
  GtkBox widget;
};

struct _GtkStackSwitcherClass
{
  GtkBoxClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_stack_switcher_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_stack_switcher_new (void);
extern
void gtk_stack_switcher_set_stack (GtkStackSwitcher *switcher,
                                                   GtkStack *stack);
extern
GtkStack * gtk_stack_switcher_get_stack (GtkStackSwitcher *switcher);
# 208 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkstatusbar.h" 1
# 45 "/usr/include/gtk-3.0/gtk/gtkstatusbar.h"
typedef struct _GtkStatusbar GtkStatusbar;
typedef struct _GtkStatusbarPrivate GtkStatusbarPrivate;
typedef struct _GtkStatusbarClass GtkStatusbarClass;

struct _GtkStatusbar
{
  GtkBox parent_widget;


  GtkStatusbarPrivate *priv;
};

struct _GtkStatusbarClass
{
  GtkBoxClass parent_class;

  gpointer reserved;

  void (*text_pushed) (GtkStatusbar *statusbar,
    guint context_id,
    const gchar *text);
  void (*text_popped) (GtkStatusbar *statusbar,
    guint context_id,
    const gchar *text);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_statusbar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_statusbar_new (void);



extern
guint gtk_statusbar_get_context_id (GtkStatusbar *statusbar,
      const gchar *context_description);

extern
guint gtk_statusbar_push (GtkStatusbar *statusbar,
      guint context_id,
      const gchar *text);
extern
void gtk_statusbar_pop (GtkStatusbar *statusbar,
      guint context_id);
extern
void gtk_statusbar_remove (GtkStatusbar *statusbar,
      guint context_id,
      guint message_id);
extern
void gtk_statusbar_remove_all (GtkStatusbar *statusbar,
      guint context_id);

extern
GtkWidget* gtk_statusbar_get_message_area (GtkStatusbar *statusbar);
# 209 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtkswitch.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkswitch.h"
typedef struct _GtkSwitch GtkSwitch;
typedef struct _GtkSwitchPrivate GtkSwitchPrivate;
typedef struct _GtkSwitchClass GtkSwitchClass;







struct _GtkSwitch
{

  GtkWidget parent_instance;

  GtkSwitchPrivate *priv;
};







struct _GtkSwitchClass
{
  GtkWidgetClass parent_class;



  void (* activate) (GtkSwitch *sw);

  gboolean (* state_set) (GtkSwitch *sw, gboolean state);


  void (* _switch_padding_1) (void);
  void (* _switch_padding_2) (void);
  void (* _switch_padding_3) (void);
  void (* _switch_padding_4) (void);
  void (* _switch_padding_5) (void);
};

extern
GType gtk_switch_get_type (void) __attribute__ ((__const__));

extern
GtkWidget * gtk_switch_new (void);

extern
void gtk_switch_set_active (GtkSwitch *sw,
                                         gboolean is_active);
extern
gboolean gtk_switch_get_active (GtkSwitch *sw);

extern
void gtk_switch_set_state (GtkSwitch *sw,
                                        gboolean state);
extern
gboolean gtk_switch_get_state (GtkSwitch *sw);
# 212 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtktextbuffer.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtktextbuffer.h"
# 1 "/usr/include/gtk-3.0/gtk/gtktexttagtable.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtktexttagtable.h"
typedef void (* GtkTextTagTableForeach) (GtkTextTag *tag, gpointer data);
# 50 "/usr/include/gtk-3.0/gtk/gtktexttagtable.h"
typedef struct _GtkTextTagTablePrivate GtkTextTagTablePrivate;
typedef struct _GtkTextTagTableClass GtkTextTagTableClass;

struct _GtkTextTagTable
{
  GObject parent_instance;

  GtkTextTagTablePrivate *priv;
};

struct _GtkTextTagTableClass
{
  GObjectClass parent_class;

  void (* tag_changed) (GtkTextTagTable *table, GtkTextTag *tag, gboolean size_changed);
  void (* tag_added) (GtkTextTagTable *table, GtkTextTag *tag);
  void (* tag_removed) (GtkTextTagTable *table, GtkTextTag *tag);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_text_tag_table_get_type (void) __attribute__ ((__const__));

extern
GtkTextTagTable *gtk_text_tag_table_new (void);
extern
gboolean gtk_text_tag_table_add (GtkTextTagTable *table,
                                              GtkTextTag *tag);
extern
void gtk_text_tag_table_remove (GtkTextTagTable *table,
                                              GtkTextTag *tag);
extern
GtkTextTag *gtk_text_tag_table_lookup (GtkTextTagTable *table,
                                              const gchar *name);
extern
void gtk_text_tag_table_foreach (GtkTextTagTable *table,
                                              GtkTextTagTableForeach func,
                                              gpointer data);
extern
gint gtk_text_tag_table_get_size (GtkTextTagTable *table);
# 35 "/usr/include/gtk-3.0/gtk/gtktextbuffer.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtktextmark.h" 1
# 59 "/usr/include/gtk-3.0/gtk/gtktextmark.h"
typedef struct _GtkTextMark GtkTextMark;
typedef struct _GtkTextMarkClass GtkTextMarkClass;
# 69 "/usr/include/gtk-3.0/gtk/gtktextmark.h"
struct _GtkTextMark
{
  GObject parent_instance;


  gpointer segment;
};

struct _GtkTextMarkClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_text_mark_get_type (void) __attribute__ ((__const__));

extern
GtkTextMark *gtk_text_mark_new (const gchar *name,
                                                      gboolean left_gravity);
extern
void gtk_text_mark_set_visible (GtkTextMark *mark,
                                                      gboolean setting);
extern
gboolean gtk_text_mark_get_visible (GtkTextMark *mark);

extern
const gchar * gtk_text_mark_get_name (GtkTextMark *mark);
extern
gboolean gtk_text_mark_get_deleted (GtkTextMark *mark);
extern
GtkTextBuffer* gtk_text_mark_get_buffer (GtkTextMark *mark);
extern
gboolean gtk_text_mark_get_left_gravity (GtkTextMark *mark);
# 37 "/usr/include/gtk-3.0/gtk/gtktextbuffer.h" 2
# 59 "/usr/include/gtk-3.0/gtk/gtktextbuffer.h"
typedef enum
{
  GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = - 1,
  GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT = - 2,
  GTK_TEXT_BUFFER_TARGET_INFO_TEXT = - 3
} GtkTextBufferTargetInfo;

typedef struct _GtkTextBTree GtkTextBTree;
# 75 "/usr/include/gtk-3.0/gtk/gtktextbuffer.h"
typedef struct _GtkTextBufferPrivate GtkTextBufferPrivate;
typedef struct _GtkTextBufferClass GtkTextBufferClass;

struct _GtkTextBuffer
{
  GObject parent_instance;

  GtkTextBufferPrivate *priv;
};
# 107 "/usr/include/gtk-3.0/gtk/gtktextbuffer.h"
struct _GtkTextBufferClass
{
  GObjectClass parent_class;

  void (* insert_text) (GtkTextBuffer *buffer,
                                   GtkTextIter *pos,
                                   const gchar *new_text,
                                   gint new_text_length);

  void (* insert_pixbuf) (GtkTextBuffer *buffer,
                                   GtkTextIter *iter,
                                   GdkPixbuf *pixbuf);

  void (* insert_child_anchor) (GtkTextBuffer *buffer,
                                   GtkTextIter *iter,
                                   GtkTextChildAnchor *anchor);

  void (* delete_range) (GtkTextBuffer *buffer,
                                   GtkTextIter *start,
                                   GtkTextIter *end);

  void (* changed) (GtkTextBuffer *buffer);

  void (* modified_changed) (GtkTextBuffer *buffer);

  void (* mark_set) (GtkTextBuffer *buffer,
                                   const GtkTextIter *location,
                                   GtkTextMark *mark);

  void (* mark_deleted) (GtkTextBuffer *buffer,
                                   GtkTextMark *mark);

  void (* apply_tag) (GtkTextBuffer *buffer,
                                   GtkTextTag *tag,
                                   const GtkTextIter *start,
                                   const GtkTextIter *end);

  void (* remove_tag) (GtkTextBuffer *buffer,
                                   GtkTextTag *tag,
                                   const GtkTextIter *start,
                                   const GtkTextIter *end);

  void (* begin_user_action) (GtkTextBuffer *buffer);

  void (* end_user_action) (GtkTextBuffer *buffer);

  void (* paste_done) (GtkTextBuffer *buffer,
                                   GtkClipboard *clipboard);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_text_buffer_get_type (void) __attribute__ ((__const__));




extern
GtkTextBuffer *gtk_text_buffer_new (GtkTextTagTable *table);
extern
gint gtk_text_buffer_get_line_count (GtkTextBuffer *buffer);
extern
gint gtk_text_buffer_get_char_count (GtkTextBuffer *buffer);


extern
GtkTextTagTable* gtk_text_buffer_get_tag_table (GtkTextBuffer *buffer);


extern
void gtk_text_buffer_set_text (GtkTextBuffer *buffer,
                                        const gchar *text,
                                        gint len);


extern
void gtk_text_buffer_insert (GtkTextBuffer *buffer,
                                        GtkTextIter *iter,
                                        const gchar *text,
                                        gint len);
extern
void gtk_text_buffer_insert_at_cursor (GtkTextBuffer *buffer,
                                        const gchar *text,
                                        gint len);

extern
gboolean gtk_text_buffer_insert_interactive (GtkTextBuffer *buffer,
                                                       GtkTextIter *iter,
                                                       const gchar *text,
                                                       gint len,
                                                       gboolean default_editable);
extern
gboolean gtk_text_buffer_insert_interactive_at_cursor (GtkTextBuffer *buffer,
                                                       const gchar *text,
                                                       gint len,
                                                       gboolean default_editable);

extern
void gtk_text_buffer_insert_range (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end);
extern
gboolean gtk_text_buffer_insert_range_interactive (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end,
                                                   gboolean default_editable);

extern
void gtk_text_buffer_insert_with_tags (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *text,
                                                   gint len,
                                                   GtkTextTag *first_tag,
                                                   ...) __attribute__((__sentinel__));

extern
void gtk_text_buffer_insert_with_tags_by_name (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *text,
                                                   gint len,
                                                   const gchar *first_tag_name,
                                                   ...) __attribute__((__sentinel__));

extern
void gtk_text_buffer_insert_markup (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *markup,
                                                   gint len);


extern
void gtk_text_buffer_delete (GtkTextBuffer *buffer,
          GtkTextIter *start,
          GtkTextIter *end);
extern
gboolean gtk_text_buffer_delete_interactive (GtkTextBuffer *buffer,
          GtkTextIter *start_iter,
          GtkTextIter *end_iter,
          gboolean default_editable);
extern
gboolean gtk_text_buffer_backspace (GtkTextBuffer *buffer,
          GtkTextIter *iter,
          gboolean interactive,
          gboolean default_editable);


extern
gchar *gtk_text_buffer_get_text (GtkTextBuffer *buffer,
                                                     const GtkTextIter *start,
                                                     const GtkTextIter *end,
                                                     gboolean include_hidden_chars);

extern
gchar *gtk_text_buffer_get_slice (GtkTextBuffer *buffer,
                                                     const GtkTextIter *start,
                                                     const GtkTextIter *end,
                                                     gboolean include_hidden_chars);


extern
void gtk_text_buffer_insert_pixbuf (GtkTextBuffer *buffer,
                                            GtkTextIter *iter,
                                            GdkPixbuf *pixbuf);


extern
void gtk_text_buffer_insert_child_anchor (GtkTextBuffer *buffer,
                                                        GtkTextIter *iter,
                                                        GtkTextChildAnchor *anchor);


extern
GtkTextChildAnchor *gtk_text_buffer_create_child_anchor (GtkTextBuffer *buffer,
                                                         GtkTextIter *iter);


extern
void gtk_text_buffer_add_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark,
                                            const GtkTextIter *where);
extern
GtkTextMark *gtk_text_buffer_create_mark (GtkTextBuffer *buffer,
                                            const gchar *mark_name,
                                            const GtkTextIter *where,
                                            gboolean left_gravity);
extern
void gtk_text_buffer_move_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark,
                                            const GtkTextIter *where);
extern
void gtk_text_buffer_delete_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark);
extern
GtkTextMark* gtk_text_buffer_get_mark (GtkTextBuffer *buffer,
                                            const gchar *name);

extern
void gtk_text_buffer_move_mark_by_name (GtkTextBuffer *buffer,
                                          const gchar *name,
                                          const GtkTextIter *where);
extern
void gtk_text_buffer_delete_mark_by_name (GtkTextBuffer *buffer,
                                          const gchar *name);

extern
GtkTextMark* gtk_text_buffer_get_insert (GtkTextBuffer *buffer);
extern
GtkTextMark* gtk_text_buffer_get_selection_bound (GtkTextBuffer *buffer);


extern
void gtk_text_buffer_place_cursor (GtkTextBuffer *buffer,
                                   const GtkTextIter *where);
extern
void gtk_text_buffer_select_range (GtkTextBuffer *buffer,
                                   const GtkTextIter *ins,
       const GtkTextIter *bound);




extern
void gtk_text_buffer_apply_tag (GtkTextBuffer *buffer,
                                            GtkTextTag *tag,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
void gtk_text_buffer_remove_tag (GtkTextBuffer *buffer,
                                            GtkTextTag *tag,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
void gtk_text_buffer_apply_tag_by_name (GtkTextBuffer *buffer,
                                            const gchar *name,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
void gtk_text_buffer_remove_tag_by_name (GtkTextBuffer *buffer,
                                            const gchar *name,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
extern
void gtk_text_buffer_remove_all_tags (GtkTextBuffer *buffer,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);





extern
GtkTextTag *gtk_text_buffer_create_tag (GtkTextBuffer *buffer,
                                           const gchar *tag_name,
                                           const gchar *first_property_name,
                                           ...);




extern
void gtk_text_buffer_get_iter_at_line_offset (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number,
                                              gint char_offset);
extern
void gtk_text_buffer_get_iter_at_line_index (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number,
                                              gint byte_index);
extern
void gtk_text_buffer_get_iter_at_offset (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint char_offset);
extern
void gtk_text_buffer_get_iter_at_line (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number);
extern
void gtk_text_buffer_get_start_iter (GtkTextBuffer *buffer,
                                              GtkTextIter *iter);
extern
void gtk_text_buffer_get_end_iter (GtkTextBuffer *buffer,
                                              GtkTextIter *iter);
extern
void gtk_text_buffer_get_bounds (GtkTextBuffer *buffer,
                                              GtkTextIter *start,
                                              GtkTextIter *end);
extern
void gtk_text_buffer_get_iter_at_mark (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              GtkTextMark *mark);

extern
void gtk_text_buffer_get_iter_at_child_anchor (GtkTextBuffer *buffer,
                                               GtkTextIter *iter,
                                               GtkTextChildAnchor *anchor);
# 422 "/usr/include/gtk-3.0/gtk/gtktextbuffer.h"
extern
gboolean gtk_text_buffer_get_modified (GtkTextBuffer *buffer);
extern
void gtk_text_buffer_set_modified (GtkTextBuffer *buffer,
                                                         gboolean setting);

extern
gboolean gtk_text_buffer_get_has_selection (GtkTextBuffer *buffer);

extern
void gtk_text_buffer_add_selection_clipboard (GtkTextBuffer *buffer,
       GtkClipboard *clipboard);
extern
void gtk_text_buffer_remove_selection_clipboard (GtkTextBuffer *buffer,
       GtkClipboard *clipboard);

extern
void gtk_text_buffer_cut_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard,
                                                         gboolean default_editable);
extern
void gtk_text_buffer_copy_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard);
extern
void gtk_text_buffer_paste_clipboard (GtkTextBuffer *buffer,
        GtkClipboard *clipboard,
        GtkTextIter *override_location,
                                                         gboolean default_editable);

extern
gboolean gtk_text_buffer_get_selection_bounds (GtkTextBuffer *buffer,
                                                         GtkTextIter *start,
                                                         GtkTextIter *end);
extern
gboolean gtk_text_buffer_delete_selection (GtkTextBuffer *buffer,
                                                         gboolean interactive,
                                                         gboolean default_editable);


extern
void gtk_text_buffer_begin_user_action (GtkTextBuffer *buffer);
extern
void gtk_text_buffer_end_user_action (GtkTextBuffer *buffer);

extern
GtkTargetList * gtk_text_buffer_get_copy_target_list (GtkTextBuffer *buffer);
extern
GtkTargetList * gtk_text_buffer_get_paste_target_list (GtkTextBuffer *buffer);
# 214 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktextbufferrichtext.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtktextbufferrichtext.h"
typedef guint8 * (* GtkTextBufferSerializeFunc) (GtkTextBuffer *register_buffer,
                                                   GtkTextBuffer *content_buffer,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end,
                                                   gsize *length,
                                                   gpointer user_data);
# 69 "/usr/include/gtk-3.0/gtk/gtktextbufferrichtext.h"
typedef gboolean (* GtkTextBufferDeserializeFunc) (GtkTextBuffer *register_buffer,
                                                   GtkTextBuffer *content_buffer,
                                                   GtkTextIter *iter,
                                                   const guint8 *data,
                                                   gsize length,
                                                   gboolean create_tags,
                                                   gpointer user_data,
                                                   GError **error);

extern
GdkAtom gtk_text_buffer_register_serialize_format (GtkTextBuffer *buffer,
                                                       const gchar *mime_type,
                                                       GtkTextBufferSerializeFunc function,
                                                       gpointer user_data,
                                                       GDestroyNotify user_data_destroy);
extern
GdkAtom gtk_text_buffer_register_serialize_tagset (GtkTextBuffer *buffer,
                                                       const gchar *tagset_name);

extern
GdkAtom gtk_text_buffer_register_deserialize_format (GtkTextBuffer *buffer,
                                                       const gchar *mime_type,
                                                       GtkTextBufferDeserializeFunc function,
                                                       gpointer user_data,
                                                       GDestroyNotify user_data_destroy);
extern
GdkAtom gtk_text_buffer_register_deserialize_tagset (GtkTextBuffer *buffer,
                                                       const gchar *tagset_name);

extern
void gtk_text_buffer_unregister_serialize_format (GtkTextBuffer *buffer,
                                                       GdkAtom format);
extern
void gtk_text_buffer_unregister_deserialize_format (GtkTextBuffer *buffer,
                                                       GdkAtom format);

extern
void gtk_text_buffer_deserialize_set_can_create_tags (GtkTextBuffer *buffer,
                                                          GdkAtom format,
                                                          gboolean can_create_tags);
extern
gboolean gtk_text_buffer_deserialize_get_can_create_tags (GtkTextBuffer *buffer,
                                                          GdkAtom format);

extern
GdkAtom * gtk_text_buffer_get_serialize_formats (GtkTextBuffer *buffer,
                                                       gint *n_formats);
extern
GdkAtom * gtk_text_buffer_get_deserialize_formats (GtkTextBuffer *buffer,
                                                       gint *n_formats);

extern
guint8 * gtk_text_buffer_serialize (GtkTextBuffer *register_buffer,
                                                       GtkTextBuffer *content_buffer,
                                                       GdkAtom format,
                                                       const GtkTextIter *start,
                                                       const GtkTextIter *end,
                                                       gsize *length);
extern
gboolean gtk_text_buffer_deserialize (GtkTextBuffer *register_buffer,
                                                       GtkTextBuffer *content_buffer,
                                                       GdkAtom format,
                                                       GtkTextIter *iter,
                                                       const guint8 *data,
                                                       gsize length,
                                                       GError **error);
# 215 "/usr/include/gtk-3.0/gtk/gtk.h" 2





# 1 "/usr/include/gtk-3.0/gtk/gtktextview.h" 1
# 58 "/usr/include/gtk-3.0/gtk/gtktextview.h"
typedef enum
{
  GTK_TEXT_WINDOW_PRIVATE,
  GTK_TEXT_WINDOW_WIDGET,
  GTK_TEXT_WINDOW_TEXT,
  GTK_TEXT_WINDOW_LEFT,
  GTK_TEXT_WINDOW_RIGHT,
  GTK_TEXT_WINDOW_TOP,
  GTK_TEXT_WINDOW_BOTTOM
} GtkTextWindowType;
# 79 "/usr/include/gtk-3.0/gtk/gtktextview.h"
typedef enum
{
  GTK_TEXT_VIEW_LAYER_BELOW,
  GTK_TEXT_VIEW_LAYER_ABOVE,
  GTK_TEXT_VIEW_LAYER_BELOW_TEXT,
  GTK_TEXT_VIEW_LAYER_ABOVE_TEXT
} GtkTextViewLayer;
# 99 "/usr/include/gtk-3.0/gtk/gtktextview.h"
typedef enum
{
  GTK_TEXT_EXTEND_SELECTION_WORD,
  GTK_TEXT_EXTEND_SELECTION_LINE
} GtkTextExtendSelection;
# 113 "/usr/include/gtk-3.0/gtk/gtktextview.h"
typedef struct _GtkTextView GtkTextView;
typedef struct _GtkTextViewPrivate GtkTextViewPrivate;
typedef struct _GtkTextViewClass GtkTextViewClass;

struct _GtkTextView
{
  GtkContainer parent_instance;



  GtkTextViewPrivate *priv;
};
# 162 "/usr/include/gtk-3.0/gtk/gtktextview.h"
struct _GtkTextViewClass
{
  GtkContainerClass parent_class;



  void (* populate_popup) (GtkTextView *text_view,
                                  GtkWidget *popup);
  void (* move_cursor) (GtkTextView *text_view,
                                  GtkMovementStep step,
                                  gint count,
                                  gboolean extend_selection);
  void (* set_anchor) (GtkTextView *text_view);
  void (* insert_at_cursor) (GtkTextView *text_view,
                                  const gchar *str);
  void (* delete_from_cursor) (GtkTextView *text_view,
                                  GtkDeleteType type,
                                  gint count);
  void (* backspace) (GtkTextView *text_view);
  void (* cut_clipboard) (GtkTextView *text_view);
  void (* copy_clipboard) (GtkTextView *text_view);
  void (* paste_clipboard) (GtkTextView *text_view);
  void (* toggle_overwrite) (GtkTextView *text_view);
  GtkTextBuffer * (* create_buffer) (GtkTextView *text_view);
  void (* draw_layer) (GtkTextView *text_view,
             GtkTextViewLayer layer,
             cairo_t *cr);
  gboolean (* extend_selection) (GtkTextView *text_view,
                                  GtkTextExtendSelection granularity,
                                  const GtkTextIter *location,
                                  GtkTextIter *start,
                                  GtkTextIter *end);
  void (* insert_emoji) (GtkTextView *text_view);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_text_view_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_text_view_new (void);
extern
GtkWidget * gtk_text_view_new_with_buffer (GtkTextBuffer *buffer);
extern
void gtk_text_view_set_buffer (GtkTextView *text_view,
                                                    GtkTextBuffer *buffer);
extern
GtkTextBuffer *gtk_text_view_get_buffer (GtkTextView *text_view);
extern
gboolean gtk_text_view_scroll_to_iter (GtkTextView *text_view,
                                                    GtkTextIter *iter,
                                                    gdouble within_margin,
                                                    gboolean use_align,
                                                    gdouble xalign,
                                                    gdouble yalign);
extern
void gtk_text_view_scroll_to_mark (GtkTextView *text_view,
                                                    GtkTextMark *mark,
                                                    gdouble within_margin,
                                                    gboolean use_align,
                                                    gdouble xalign,
                                                    gdouble yalign);
extern
void gtk_text_view_scroll_mark_onscreen (GtkTextView *text_view,
                                                    GtkTextMark *mark);
extern
gboolean gtk_text_view_move_mark_onscreen (GtkTextView *text_view,
                                                    GtkTextMark *mark);
extern
gboolean gtk_text_view_place_cursor_onscreen (GtkTextView *text_view);

extern
void gtk_text_view_get_visible_rect (GtkTextView *text_view,
                                                    GdkRectangle *visible_rect);
extern
void gtk_text_view_set_cursor_visible (GtkTextView *text_view,
                                                    gboolean setting);
extern
gboolean gtk_text_view_get_cursor_visible (GtkTextView *text_view);

extern
void gtk_text_view_reset_cursor_blink (GtkTextView *text_view);

extern
void gtk_text_view_get_cursor_locations (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    GdkRectangle *strong,
                                                    GdkRectangle *weak);
extern
void gtk_text_view_get_iter_location (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    GdkRectangle *location);
extern
gboolean gtk_text_view_get_iter_at_location (GtkTextView *text_view,
                                                    GtkTextIter *iter,
                                                    gint x,
                                                    gint y);
extern
gboolean gtk_text_view_get_iter_at_position (GtkTextView *text_view,
                                                    GtkTextIter *iter,
          gint *trailing,
                                                    gint x,
                                                    gint y);
extern
void gtk_text_view_get_line_yrange (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    gint *y,
                                                    gint *height);

extern
void gtk_text_view_get_line_at_y (GtkTextView *text_view,
                                                    GtkTextIter *target_iter,
                                                    gint y,
                                                    gint *line_top);

extern
void gtk_text_view_buffer_to_window_coords (GtkTextView *text_view,
                                            GtkTextWindowType win,
                                            gint buffer_x,
                                            gint buffer_y,
                                            gint *window_x,
                                            gint *window_y);
extern
void gtk_text_view_window_to_buffer_coords (GtkTextView *text_view,
                                            GtkTextWindowType win,
                                            gint window_x,
                                            gint window_y,
                                            gint *buffer_x,
                                            gint *buffer_y);

__attribute__((__deprecated__("Use '" "gtk_scrollable_get_hadjustment" "' instead"))) extern
GtkAdjustment* gtk_text_view_get_hadjustment (GtkTextView *text_view);
__attribute__((__deprecated__("Use '" "gtk_scrollable_get_vadjustment" "' instead"))) extern
GtkAdjustment* gtk_text_view_get_vadjustment (GtkTextView *text_view);

extern
GdkWindow* gtk_text_view_get_window (GtkTextView *text_view,
                                                 GtkTextWindowType win);
extern
GtkTextWindowType gtk_text_view_get_window_type (GtkTextView *text_view,
                                                 GdkWindow *window);

extern
void gtk_text_view_set_border_window_size (GtkTextView *text_view,
                                           GtkTextWindowType type,
                                           gint size);
extern
gint gtk_text_view_get_border_window_size (GtkTextView *text_view,
        GtkTextWindowType type);

extern
gboolean gtk_text_view_forward_display_line (GtkTextView *text_view,
                                                       GtkTextIter *iter);
extern
gboolean gtk_text_view_backward_display_line (GtkTextView *text_view,
                                                       GtkTextIter *iter);
extern
gboolean gtk_text_view_forward_display_line_end (GtkTextView *text_view,
                                                       GtkTextIter *iter);
extern
gboolean gtk_text_view_backward_display_line_start (GtkTextView *text_view,
                                                       GtkTextIter *iter);
extern
gboolean gtk_text_view_starts_display_line (GtkTextView *text_view,
                                                       const GtkTextIter *iter);
extern
gboolean gtk_text_view_move_visually (GtkTextView *text_view,
                                                       GtkTextIter *iter,
                                                       gint count);

extern
gboolean gtk_text_view_im_context_filter_keypress (GtkTextView *text_view,
                                                                 GdkEventKey *event);
extern
void gtk_text_view_reset_im_context (GtkTextView *text_view);


extern
void gtk_text_view_add_child_at_anchor (GtkTextView *text_view,
                                        GtkWidget *child,
                                        GtkTextChildAnchor *anchor);

extern
void gtk_text_view_add_child_in_window (GtkTextView *text_view,
                                        GtkWidget *child,
                                        GtkTextWindowType which_window,

                                        gint xpos,
                                        gint ypos);

extern
void gtk_text_view_move_child (GtkTextView *text_view,
                                        GtkWidget *child,

                                        gint xpos,
                                        gint ypos);



extern
void gtk_text_view_set_wrap_mode (GtkTextView *text_view,
                                                       GtkWrapMode wrap_mode);
extern
GtkWrapMode gtk_text_view_get_wrap_mode (GtkTextView *text_view);
extern
void gtk_text_view_set_editable (GtkTextView *text_view,
                                                       gboolean setting);
extern
gboolean gtk_text_view_get_editable (GtkTextView *text_view);
extern
void gtk_text_view_set_overwrite (GtkTextView *text_view,
             gboolean overwrite);
extern
gboolean gtk_text_view_get_overwrite (GtkTextView *text_view);
extern
void gtk_text_view_set_accepts_tab (GtkTextView *text_view,
             gboolean accepts_tab);
extern
gboolean gtk_text_view_get_accepts_tab (GtkTextView *text_view);
extern
void gtk_text_view_set_pixels_above_lines (GtkTextView *text_view,
                                                       gint pixels_above_lines);
extern
gint gtk_text_view_get_pixels_above_lines (GtkTextView *text_view);
extern
void gtk_text_view_set_pixels_below_lines (GtkTextView *text_view,
                                                       gint pixels_below_lines);
extern
gint gtk_text_view_get_pixels_below_lines (GtkTextView *text_view);
extern
void gtk_text_view_set_pixels_inside_wrap (GtkTextView *text_view,
                                                       gint pixels_inside_wrap);
extern
gint gtk_text_view_get_pixels_inside_wrap (GtkTextView *text_view);
extern
void gtk_text_view_set_justification (GtkTextView *text_view,
                                                       GtkJustification justification);
extern
GtkJustification gtk_text_view_get_justification (GtkTextView *text_view);
extern
void gtk_text_view_set_left_margin (GtkTextView *text_view,
                                                       gint left_margin);
extern
gint gtk_text_view_get_left_margin (GtkTextView *text_view);
extern
void gtk_text_view_set_right_margin (GtkTextView *text_view,
                                                       gint right_margin);
extern
gint gtk_text_view_get_right_margin (GtkTextView *text_view);
extern
void gtk_text_view_set_top_margin (GtkTextView *text_view,
                                                       gint top_margin);
extern
gint gtk_text_view_get_top_margin (GtkTextView *text_view);
extern
void gtk_text_view_set_bottom_margin (GtkTextView *text_view,
                                                       gint bottom_margin);
extern
gint gtk_text_view_get_bottom_margin (GtkTextView *text_view);
extern
void gtk_text_view_set_indent (GtkTextView *text_view,
                                                       gint indent);
extern
gint gtk_text_view_get_indent (GtkTextView *text_view);
extern
void gtk_text_view_set_tabs (GtkTextView *text_view,
                                                       PangoTabArray *tabs);
extern
PangoTabArray* gtk_text_view_get_tabs (GtkTextView *text_view);


extern
GtkTextAttributes* gtk_text_view_get_default_attributes (GtkTextView *text_view);

extern
void gtk_text_view_set_input_purpose (GtkTextView *text_view,
                                                       GtkInputPurpose purpose);
extern
GtkInputPurpose gtk_text_view_get_input_purpose (GtkTextView *text_view);

extern
void gtk_text_view_set_input_hints (GtkTextView *text_view,
                                                       GtkInputHints hints);
extern
GtkInputHints gtk_text_view_get_input_hints (GtkTextView *text_view);

extern
void gtk_text_view_set_monospace (GtkTextView *text_view,
                                                       gboolean monospace);
extern
gboolean gtk_text_view_get_monospace (GtkTextView *text_view);
# 221 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtktoolbar.h" 1
# 60 "/usr/include/gtk-3.0/gtk/gtktoolbar.h"
typedef enum
{
  GTK_TOOLBAR_SPACE_EMPTY,
  GTK_TOOLBAR_SPACE_LINE
} GtkToolbarSpaceStyle;

typedef struct _GtkToolbar GtkToolbar;
typedef struct _GtkToolbarPrivate GtkToolbarPrivate;
typedef struct _GtkToolbarClass GtkToolbarClass;

struct _GtkToolbar
{
  GtkContainer container;

  GtkToolbarPrivate *priv;
};

struct _GtkToolbarClass
{
  GtkContainerClass parent_class;


  void (* orientation_changed) (GtkToolbar *toolbar,
        GtkOrientation orientation);
  void (* style_changed) (GtkToolbar *toolbar,
        GtkToolbarStyle style);
  gboolean (* popup_context_menu) (GtkToolbar *toolbar,
        gint x,
        gint y,
        gint button_number);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_toolbar_get_type (void) __attribute__ ((__const__));
extern
GtkWidget * gtk_toolbar_new (void);

extern
void gtk_toolbar_insert (GtkToolbar *toolbar,
           GtkToolItem *item,
           gint pos);

extern
gint gtk_toolbar_get_item_index (GtkToolbar *toolbar,
           GtkToolItem *item);
extern
gint gtk_toolbar_get_n_items (GtkToolbar *toolbar);
extern
GtkToolItem * gtk_toolbar_get_nth_item (GtkToolbar *toolbar,
           gint n);

extern
gboolean gtk_toolbar_get_show_arrow (GtkToolbar *toolbar);
extern
void gtk_toolbar_set_show_arrow (GtkToolbar *toolbar,
           gboolean show_arrow);

extern
GtkToolbarStyle gtk_toolbar_get_style (GtkToolbar *toolbar);
extern
void gtk_toolbar_set_style (GtkToolbar *toolbar,
           GtkToolbarStyle style);
extern
void gtk_toolbar_unset_style (GtkToolbar *toolbar);

extern
GtkIconSize gtk_toolbar_get_icon_size (GtkToolbar *toolbar);
extern
void gtk_toolbar_set_icon_size (GtkToolbar *toolbar,
                                                     GtkIconSize icon_size);
extern
void gtk_toolbar_unset_icon_size (GtkToolbar *toolbar);

extern
GtkReliefStyle gtk_toolbar_get_relief_style (GtkToolbar *toolbar);
extern
gint gtk_toolbar_get_drop_index (GtkToolbar *toolbar,
           gint x,
           gint y);
extern
void gtk_toolbar_set_drop_highlight_item (GtkToolbar *toolbar,
           GtkToolItem *tool_item,
           gint index_);
# 224 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtktoolitemgroup.h" 1
# 40 "/usr/include/gtk-3.0/gtk/gtktoolitemgroup.h"
typedef struct _GtkToolItemGroup GtkToolItemGroup;
typedef struct _GtkToolItemGroupClass GtkToolItemGroupClass;
typedef struct _GtkToolItemGroupPrivate GtkToolItemGroupPrivate;






struct _GtkToolItemGroup
{
  GtkContainer parent_instance;
  GtkToolItemGroupPrivate *priv;
};





struct _GtkToolItemGroupClass
{
  GtkContainerClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_tool_item_group_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_tool_item_group_new (const gchar *label);

extern
void gtk_tool_item_group_set_label (GtkToolItemGroup *group,
                                                             const gchar *label);
extern
void gtk_tool_item_group_set_label_widget (GtkToolItemGroup *group,
                                                             GtkWidget *label_widget);
extern
void gtk_tool_item_group_set_collapsed (GtkToolItemGroup *group,
                                                             gboolean collapsed);
extern
void gtk_tool_item_group_set_ellipsize (GtkToolItemGroup *group,
                                                             PangoEllipsizeMode ellipsize);
extern
void gtk_tool_item_group_set_header_relief (GtkToolItemGroup *group,
                                                             GtkReliefStyle style);

extern
const gchar * gtk_tool_item_group_get_label (GtkToolItemGroup *group);
extern
GtkWidget *gtk_tool_item_group_get_label_widget (GtkToolItemGroup *group);
extern
gboolean gtk_tool_item_group_get_collapsed (GtkToolItemGroup *group);
extern
PangoEllipsizeMode gtk_tool_item_group_get_ellipsize (GtkToolItemGroup *group);
extern
GtkReliefStyle gtk_tool_item_group_get_header_relief (GtkToolItemGroup *group);

extern
void gtk_tool_item_group_insert (GtkToolItemGroup *group,
                                                             GtkToolItem *item,
                                                             gint position);
extern
void gtk_tool_item_group_set_item_position (GtkToolItemGroup *group,
                                                             GtkToolItem *item,
                                                             gint position);
extern
gint gtk_tool_item_group_get_item_position (GtkToolItemGroup *group,
                                                             GtkToolItem *item);

extern
guint gtk_tool_item_group_get_n_items (GtkToolItemGroup *group);
extern
GtkToolItem* gtk_tool_item_group_get_nth_item (GtkToolItemGroup *group,
                                                             guint index);
extern
GtkToolItem* gtk_tool_item_group_get_drop_item (GtkToolItemGroup *group,
                                                             gint x,
                                                             gint y);
# 227 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktoolpalette.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtktoolpalette.h"
typedef struct _GtkToolPalette GtkToolPalette;
typedef struct _GtkToolPaletteClass GtkToolPaletteClass;
typedef struct _GtkToolPalettePrivate GtkToolPalettePrivate;
# 52 "/usr/include/gtk-3.0/gtk/gtktoolpalette.h"
typedef enum
{
  GTK_TOOL_PALETTE_DRAG_ITEMS = (1 << 0),
  GTK_TOOL_PALETTE_DRAG_GROUPS = (1 << 1)
}
GtkToolPaletteDragTargets;






struct _GtkToolPalette
{
  GtkContainer parent_instance;
  GtkToolPalettePrivate *priv;
};





struct _GtkToolPaletteClass
{
  GtkContainerClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_tool_palette_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_tool_palette_new (void);

extern
void gtk_tool_palette_set_group_position (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group,
                                                                       gint position);
extern
void gtk_tool_palette_set_exclusive (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group,
                                                                       gboolean exclusive);
extern
void gtk_tool_palette_set_expand (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group,
                                                                       gboolean expand);

extern
gint gtk_tool_palette_get_group_position (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group);
extern
gboolean gtk_tool_palette_get_exclusive (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group);
extern
gboolean gtk_tool_palette_get_expand (GtkToolPalette *palette,
                                                                       GtkToolItemGroup *group);

extern
void gtk_tool_palette_set_icon_size (GtkToolPalette *palette,
                                                                       GtkIconSize icon_size);
extern
void gtk_tool_palette_unset_icon_size (GtkToolPalette *palette);
extern
void gtk_tool_palette_set_style (GtkToolPalette *palette,
                                                                       GtkToolbarStyle style);
extern
void gtk_tool_palette_unset_style (GtkToolPalette *palette);

extern
GtkIconSize gtk_tool_palette_get_icon_size (GtkToolPalette *palette);
extern
GtkToolbarStyle gtk_tool_palette_get_style (GtkToolPalette *palette);

extern
GtkToolItem* gtk_tool_palette_get_drop_item (GtkToolPalette *palette,
                                                                       gint x,
                                                                       gint y);
extern
GtkToolItemGroup* gtk_tool_palette_get_drop_group (GtkToolPalette *palette,
                                                                       gint x,
                                                                       gint y);
extern
GtkWidget* gtk_tool_palette_get_drag_item (GtkToolPalette *palette,
                                                                       const GtkSelectionData *selection);

extern
void gtk_tool_palette_set_drag_source (GtkToolPalette *palette,
                                                                       GtkToolPaletteDragTargets targets);
extern
void gtk_tool_palette_add_drag_dest (GtkToolPalette *palette,
                                                                       GtkWidget *widget,
                                                                       GtkDestDefaults flags,
                                                                       GtkToolPaletteDragTargets targets,
                                                                       GdkDragAction actions);


__attribute__((__deprecated__("Use '" "gtk_scrollable_get_hadjustment" "' instead"))) extern
GtkAdjustment* gtk_tool_palette_get_hadjustment (GtkToolPalette *palette);
__attribute__((__deprecated__("Use '" "gtk_scrollable_get_vadjustment" "' instead"))) extern
GtkAdjustment* gtk_tool_palette_get_vadjustment (GtkToolPalette *palette);

extern
const GtkTargetEntry* gtk_tool_palette_get_drag_target_item (void) __attribute__ ((__const__));
extern
const GtkTargetEntry* gtk_tool_palette_get_drag_target_group (void) __attribute__ ((__const__));
# 228 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktoolshell.h" 1
# 41 "/usr/include/gtk-3.0/gtk/gtktoolshell.h"
typedef struct _GtkToolShell GtkToolShell;
typedef struct _GtkToolShellIface GtkToolShellIface;
# 58 "/usr/include/gtk-3.0/gtk/gtktoolshell.h"
struct _GtkToolShellIface
{

  GTypeInterface g_iface;


  GtkIconSize (*get_icon_size) (GtkToolShell *shell);
  GtkOrientation (*get_orientation) (GtkToolShell *shell);
  GtkToolbarStyle (*get_style) (GtkToolShell *shell);
  GtkReliefStyle (*get_relief_style) (GtkToolShell *shell);
  void (*rebuild_menu) (GtkToolShell *shell);
  GtkOrientation (*get_text_orientation) (GtkToolShell *shell);
  gfloat (*get_text_alignment) (GtkToolShell *shell);
  PangoEllipsizeMode (*get_ellipsize_mode) (GtkToolShell *shell);
  GtkSizeGroup * (*get_text_size_group) (GtkToolShell *shell);
};

extern
GType gtk_tool_shell_get_type (void) __attribute__ ((__const__));

extern
GtkIconSize gtk_tool_shell_get_icon_size (GtkToolShell *shell);
extern
GtkOrientation gtk_tool_shell_get_orientation (GtkToolShell *shell);
extern
GtkToolbarStyle gtk_tool_shell_get_style (GtkToolShell *shell);
extern
GtkReliefStyle gtk_tool_shell_get_relief_style (GtkToolShell *shell);
extern
void gtk_tool_shell_rebuild_menu (GtkToolShell *shell);
extern
GtkOrientation gtk_tool_shell_get_text_orientation (GtkToolShell *shell);
extern
gfloat gtk_tool_shell_get_text_alignment (GtkToolShell *shell);
extern
PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode (GtkToolShell *shell);
extern
GtkSizeGroup * gtk_tool_shell_get_text_size_group (GtkToolShell *shell);
# 229 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtktestutils.h" 1
# 32 "/usr/include/gtk-3.0/gtk/gtktestutils.h"
extern
void gtk_test_init (int *argcp,
                                                 char ***argvp,
                                                 ...);
extern
void gtk_test_register_all_types (void);
extern
const GType* gtk_test_list_all_types (guint *n_types);
extern
GtkWidget* gtk_test_find_widget (GtkWidget *widget,
                                                 const gchar *label_pattern,
                                                 GType widget_type);
__attribute__((__deprecated__)) extern
GtkWidget* gtk_test_create_widget (GType widget_type,
                                                 const gchar *first_property_name,
                                                 ...);
__attribute__((__deprecated__)) extern
GtkWidget* gtk_test_create_simple_window (const gchar *window_title,
                                                 const gchar *dialog_text);
__attribute__((__deprecated__)) extern
GtkWidget* gtk_test_display_button_window (const gchar *window_title,
                                                 const gchar *dialog_text,
                                                 ...);
__attribute__((__deprecated__)) extern
void gtk_test_slider_set_perc (GtkWidget *widget,
                                                 double percentage);
__attribute__((__deprecated__)) extern
double gtk_test_slider_get_value (GtkWidget *widget);
__attribute__((__deprecated__)) extern
gboolean gtk_test_spin_button_click (GtkSpinButton *spinner,
                                                 guint button,
                                                 gboolean upwards);
extern
void gtk_test_widget_wait_for_draw (GtkWidget *widget);
__attribute__((__deprecated__)) extern
gboolean gtk_test_widget_click (GtkWidget *widget,
                                                 guint button,
                                                 GdkModifierType modifiers);
extern
gboolean gtk_test_widget_send_key (GtkWidget *widget,
                                                 guint keyval,
                                                 GdkModifierType modifiers);

__attribute__((__deprecated__)) extern
void gtk_test_text_set (GtkWidget *widget,
                                                 const gchar *string);
__attribute__((__deprecated__)) extern
gchar* gtk_test_text_get (GtkWidget *widget);


extern
GtkWidget* gtk_test_find_sibling (GtkWidget *base_widget,
                                                 GType widget_type);
extern
GtkWidget* gtk_test_find_label (GtkWidget *widget,
                                                 const gchar *label_pattern);
# 231 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktreednd.h" 1
# 35 "/usr/include/gtk-3.0/gtk/gtktreednd.h"
typedef struct _GtkTreeDragSource GtkTreeDragSource;
typedef struct _GtkTreeDragSourceIface GtkTreeDragSourceIface;
# 47 "/usr/include/gtk-3.0/gtk/gtktreednd.h"
struct _GtkTreeDragSourceIface
{

  GTypeInterface g_iface;





  gboolean (* row_draggable) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path);

  gboolean (* drag_data_get) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path,
                                         GtkSelectionData *selection_data);

  gboolean (* drag_data_delete) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path);
};

extern
GType gtk_tree_drag_source_get_type (void) __attribute__ ((__const__));


extern
gboolean gtk_tree_drag_source_row_draggable (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path);


extern
gboolean gtk_tree_drag_source_drag_data_delete (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path);




extern
gboolean gtk_tree_drag_source_drag_data_get (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path,
                                                GtkSelectionData *selection_data);






typedef struct _GtkTreeDragDest GtkTreeDragDest;
typedef struct _GtkTreeDragDestIface GtkTreeDragDestIface;
# 104 "/usr/include/gtk-3.0/gtk/gtktreednd.h"
struct _GtkTreeDragDestIface
{

  GTypeInterface g_iface;





  gboolean (* drag_data_received) (GtkTreeDragDest *drag_dest,
                                       GtkTreePath *dest,
                                       GtkSelectionData *selection_data);

  gboolean (* row_drop_possible) (GtkTreeDragDest *drag_dest,
                                       GtkTreePath *dest_path,
           GtkSelectionData *selection_data);
};

extern
GType gtk_tree_drag_dest_get_type (void) __attribute__ ((__const__));




extern
gboolean gtk_tree_drag_dest_drag_data_received (GtkTreeDragDest *drag_dest,
      GtkTreePath *dest,
      GtkSelectionData *selection_data);



extern
gboolean gtk_tree_drag_dest_row_drop_possible (GtkTreeDragDest *drag_dest,
      GtkTreePath *dest_path,
      GtkSelectionData *selection_data);





extern
gboolean gtk_tree_set_row_drag_data (GtkSelectionData *selection_data,
      GtkTreeModel *tree_model,
      GtkTreePath *path);
extern
gboolean gtk_tree_get_row_drag_data (GtkSelectionData *selection_data,
      GtkTreeModel **tree_model,
      GtkTreePath **path);
# 232 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtktreemodelsort.h" 1
# 38 "/usr/include/gtk-3.0/gtk/gtktreemodelsort.h"
typedef struct _GtkTreeModelSort GtkTreeModelSort;
typedef struct _GtkTreeModelSortClass GtkTreeModelSortClass;
typedef struct _GtkTreeModelSortPrivate GtkTreeModelSortPrivate;

struct _GtkTreeModelSort
{
  GObject parent;


  GtkTreeModelSortPrivate *priv;
};

struct _GtkTreeModelSortClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_tree_model_sort_get_type (void) __attribute__ ((__const__));
extern
GtkTreeModel *gtk_tree_model_sort_new_with_model (GtkTreeModel *child_model);

extern
GtkTreeModel *gtk_tree_model_sort_get_model (GtkTreeModelSort *tree_model);
extern
GtkTreePath *gtk_tree_model_sort_convert_child_path_to_path (GtkTreeModelSort *tree_model_sort,
             GtkTreePath *child_path);
extern
gboolean gtk_tree_model_sort_convert_child_iter_to_iter (GtkTreeModelSort *tree_model_sort,
             GtkTreeIter *sort_iter,
             GtkTreeIter *child_iter);
extern
GtkTreePath *gtk_tree_model_sort_convert_path_to_child_path (GtkTreeModelSort *tree_model_sort,
             GtkTreePath *sorted_path);
extern
void gtk_tree_model_sort_convert_iter_to_child_iter (GtkTreeModelSort *tree_model_sort,
             GtkTreeIter *child_iter,
             GtkTreeIter *sorted_iter);
extern
void gtk_tree_model_sort_reset_default_sort_func (GtkTreeModelSort *tree_model_sort);
extern
void gtk_tree_model_sort_clear_cache (GtkTreeModelSort *tree_model_sort);
extern
gboolean gtk_tree_model_sort_iter_is_valid (GtkTreeModelSort *tree_model_sort,
                                                              GtkTreeIter *iter);
# 235 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtktreeselection.h" 1
# 37 "/usr/include/gtk-3.0/gtk/gtktreeselection.h"
typedef struct _GtkTreeSelectionPrivate GtkTreeSelectionPrivate;
# 54 "/usr/include/gtk-3.0/gtk/gtktreeselection.h"
typedef gboolean (* GtkTreeSelectionFunc) (GtkTreeSelection *selection,
           GtkTreeModel *model,
           GtkTreePath *path,
                                              gboolean path_currently_selected,
           gpointer data);
# 70 "/usr/include/gtk-3.0/gtk/gtktreeselection.h"
typedef void (* GtkTreeSelectionForeachFunc) (GtkTreeModel *model,
           GtkTreePath *path,
           GtkTreeIter *iter,
           gpointer data);

struct _GtkTreeSelection
{

  GObject parent;

  GtkTreeSelectionPrivate *priv;
};






struct _GtkTreeSelectionClass
{
  GObjectClass parent_class;



  void (* changed) (GtkTreeSelection *selection);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_tree_selection_get_type (void) __attribute__ ((__const__));

extern
void gtk_tree_selection_set_mode (GtkTreeSelection *selection,
        GtkSelectionMode type);
extern
GtkSelectionMode gtk_tree_selection_get_mode (GtkTreeSelection *selection);
extern
void gtk_tree_selection_set_select_function (GtkTreeSelection *selection,
        GtkTreeSelectionFunc func,
        gpointer data,
        GDestroyNotify destroy);
extern
gpointer gtk_tree_selection_get_user_data (GtkTreeSelection *selection);
extern
GtkTreeView* gtk_tree_selection_get_tree_view (GtkTreeSelection *selection);

extern
GtkTreeSelectionFunc gtk_tree_selection_get_select_function (GtkTreeSelection *selection);



extern
gboolean gtk_tree_selection_get_selected (GtkTreeSelection *selection,
        GtkTreeModel **model,
        GtkTreeIter *iter);
extern
GList * gtk_tree_selection_get_selected_rows (GtkTreeSelection *selection,
                                                         GtkTreeModel **model);
extern
gint gtk_tree_selection_count_selected_rows (GtkTreeSelection *selection);
extern
void gtk_tree_selection_selected_foreach (GtkTreeSelection *selection,
        GtkTreeSelectionForeachFunc func,
        gpointer data);
extern
void gtk_tree_selection_select_path (GtkTreeSelection *selection,
        GtkTreePath *path);
extern
void gtk_tree_selection_unselect_path (GtkTreeSelection *selection,
        GtkTreePath *path);
extern
void gtk_tree_selection_select_iter (GtkTreeSelection *selection,
        GtkTreeIter *iter);
extern
void gtk_tree_selection_unselect_iter (GtkTreeSelection *selection,
        GtkTreeIter *iter);
extern
gboolean gtk_tree_selection_path_is_selected (GtkTreeSelection *selection,
        GtkTreePath *path);
extern
gboolean gtk_tree_selection_iter_is_selected (GtkTreeSelection *selection,
        GtkTreeIter *iter);
extern
void gtk_tree_selection_select_all (GtkTreeSelection *selection);
extern
void gtk_tree_selection_unselect_all (GtkTreeSelection *selection);
extern
void gtk_tree_selection_select_range (GtkTreeSelection *selection,
        GtkTreePath *start_path,
        GtkTreePath *end_path);
extern
void gtk_tree_selection_unselect_range (GtkTreeSelection *selection,
                                                         GtkTreePath *start_path,
        GtkTreePath *end_path);
# 236 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtktreestore.h" 1
# 28 "/usr/include/gtk-3.0/gtk/gtktreestore.h"
# 1 "/usr/bin/../lib/clang/19/include/stdarg.h" 1 3
# 29 "/usr/include/gtk-3.0/gtk/gtktreestore.h" 2
# 41 "/usr/include/gtk-3.0/gtk/gtktreestore.h"
typedef struct _GtkTreeStore GtkTreeStore;
typedef struct _GtkTreeStoreClass GtkTreeStoreClass;
typedef struct _GtkTreeStorePrivate GtkTreeStorePrivate;

struct _GtkTreeStore
{
  GObject parent;

  GtkTreeStorePrivate *priv;
};

struct _GtkTreeStoreClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_tree_store_get_type (void) __attribute__ ((__const__));
extern
GtkTreeStore *gtk_tree_store_new (gint n_columns,
            ...);
extern
GtkTreeStore *gtk_tree_store_newv (gint n_columns,
            GType *types);
extern
void gtk_tree_store_set_column_types (GtkTreeStore *tree_store,
            gint n_columns,
            GType *types);



extern
void gtk_tree_store_set_value (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            gint column,
            GValue *value);
extern
void gtk_tree_store_set (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            ...);
extern
void gtk_tree_store_set_valuesv (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            gint *columns,
            GValue *values,
            gint n_values);
extern
void gtk_tree_store_set_valist (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            va_list var_args);
extern
gboolean gtk_tree_store_remove (GtkTreeStore *tree_store,
            GtkTreeIter *iter);
extern
void gtk_tree_store_insert (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            gint position);
extern
void gtk_tree_store_insert_before (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            GtkTreeIter *sibling);
extern
void gtk_tree_store_insert_after (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent,
            GtkTreeIter *sibling);
extern
void gtk_tree_store_insert_with_values (GtkTreeStore *tree_store,
       GtkTreeIter *iter,
       GtkTreeIter *parent,
       gint position,
       ...);
extern
void gtk_tree_store_insert_with_valuesv (GtkTreeStore *tree_store,
        GtkTreeIter *iter,
        GtkTreeIter *parent,
        gint position,
        gint *columns,
        GValue *values,
        gint n_values);
extern
void gtk_tree_store_prepend (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent);
extern
void gtk_tree_store_append (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *parent);
extern
gboolean gtk_tree_store_is_ancestor (GtkTreeStore *tree_store,
            GtkTreeIter *iter,
            GtkTreeIter *descendant);
extern
gint gtk_tree_store_iter_depth (GtkTreeStore *tree_store,
            GtkTreeIter *iter);
extern
void gtk_tree_store_clear (GtkTreeStore *tree_store);
extern
gboolean gtk_tree_store_iter_is_valid (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter);
extern
void gtk_tree_store_reorder (GtkTreeStore *tree_store,
                                               GtkTreeIter *parent,
                                               gint *new_order);
extern
void gtk_tree_store_swap (GtkTreeStore *tree_store,
                                               GtkTreeIter *a,
                                               GtkTreeIter *b);
extern
void gtk_tree_store_move_before (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
extern
void gtk_tree_store_move_after (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
# 238 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtktypebuiltins.h" 1
# 17 "/usr/include/gtk-3.0/gtk/gtktypebuiltins.h"
extern GType gtk_rc_flags_get_type (void) __attribute__ ((__const__));

extern GType gtk_rc_token_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_path_priority_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_path_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_expander_style_get_type (void) __attribute__ ((__const__));



extern GType gtk_attach_options_get_type (void) __attribute__ ((__const__));



extern GType gtk_ui_manager_item_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_license_get_type (void) __attribute__ ((__const__));



extern GType gtk_accel_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_application_inhibit_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_assistant_page_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_button_box_style_get_type (void) __attribute__ ((__const__));



extern GType gtk_builder_error_get_type (void) __attribute__ ((__const__));



extern GType gtk_calendar_display_options_get_type (void) __attribute__ ((__const__));



extern GType gtk_cell_renderer_state_get_type (void) __attribute__ ((__const__));

extern GType gtk_cell_renderer_mode_get_type (void) __attribute__ ((__const__));



extern GType gtk_cell_renderer_accel_mode_get_type (void) __attribute__ ((__const__));



extern GType gtk_resize_mode_get_type (void) __attribute__ ((__const__));



extern GType gtk_css_provider_error_get_type (void) __attribute__ ((__const__));



extern GType gtk_css_section_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_debug_flag_get_type (void) __attribute__ ((__const__));



extern GType gtk_dialog_flags_get_type (void) __attribute__ ((__const__));

extern GType gtk_response_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_dest_defaults_get_type (void) __attribute__ ((__const__));



extern GType gtk_entry_icon_position_get_type (void) __attribute__ ((__const__));



extern GType gtk_align_get_type (void) __attribute__ ((__const__));

extern GType gtk_arrow_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_baseline_position_get_type (void) __attribute__ ((__const__));

extern GType gtk_delete_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_direction_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_icon_size_get_type (void) __attribute__ ((__const__));

extern GType gtk_sensitivity_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_text_direction_get_type (void) __attribute__ ((__const__));

extern GType gtk_justification_get_type (void) __attribute__ ((__const__));

extern GType gtk_menu_direction_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_message_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_movement_step_get_type (void) __attribute__ ((__const__));

extern GType gtk_scroll_step_get_type (void) __attribute__ ((__const__));

extern GType gtk_orientation_get_type (void) __attribute__ ((__const__));

extern GType gtk_pack_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_position_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_relief_style_get_type (void) __attribute__ ((__const__));

extern GType gtk_scroll_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_selection_mode_get_type (void) __attribute__ ((__const__));

extern GType gtk_shadow_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_state_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_toolbar_style_get_type (void) __attribute__ ((__const__));

extern GType gtk_wrap_mode_get_type (void) __attribute__ ((__const__));

extern GType gtk_sort_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_im_preedit_style_get_type (void) __attribute__ ((__const__));

extern GType gtk_im_status_style_get_type (void) __attribute__ ((__const__));

extern GType gtk_pack_direction_get_type (void) __attribute__ ((__const__));

extern GType gtk_print_pages_get_type (void) __attribute__ ((__const__));

extern GType gtk_page_set_get_type (void) __attribute__ ((__const__));

extern GType gtk_number_up_layout_get_type (void) __attribute__ ((__const__));

extern GType gtk_page_orientation_get_type (void) __attribute__ ((__const__));

extern GType gtk_print_quality_get_type (void) __attribute__ ((__const__));

extern GType gtk_print_duplex_get_type (void) __attribute__ ((__const__));

extern GType gtk_unit_get_type (void) __attribute__ ((__const__));

extern GType gtk_tree_view_grid_lines_get_type (void) __attribute__ ((__const__));

extern GType gtk_drag_result_get_type (void) __attribute__ ((__const__));

extern GType gtk_size_group_mode_get_type (void) __attribute__ ((__const__));

extern GType gtk_size_request_mode_get_type (void) __attribute__ ((__const__));

extern GType gtk_scrollable_policy_get_type (void) __attribute__ ((__const__));

extern GType gtk_state_flags_get_type (void) __attribute__ ((__const__));

extern GType gtk_region_flags_get_type (void) __attribute__ ((__const__));

extern GType gtk_junction_sides_get_type (void) __attribute__ ((__const__));

extern GType gtk_border_style_get_type (void) __attribute__ ((__const__));

extern GType gtk_level_bar_mode_get_type (void) __attribute__ ((__const__));

extern GType gtk_input_purpose_get_type (void) __attribute__ ((__const__));

extern GType gtk_input_hints_get_type (void) __attribute__ ((__const__));

extern GType gtk_propagation_phase_get_type (void) __attribute__ ((__const__));

extern GType gtk_event_sequence_state_get_type (void) __attribute__ ((__const__));

extern GType gtk_pan_direction_get_type (void) __attribute__ ((__const__));

extern GType gtk_popover_constraint_get_type (void) __attribute__ ((__const__));



extern GType gtk_event_controller_scroll_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_file_chooser_action_get_type (void) __attribute__ ((__const__));

extern GType gtk_file_chooser_confirmation_get_type (void) __attribute__ ((__const__));

extern GType gtk_file_chooser_error_get_type (void) __attribute__ ((__const__));



extern GType gtk_file_filter_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_font_chooser_level_get_type (void) __attribute__ ((__const__));



extern GType gtk_icon_lookup_flags_get_type (void) __attribute__ ((__const__));

extern GType gtk_icon_theme_error_get_type (void) __attribute__ ((__const__));



extern GType gtk_icon_view_drop_position_get_type (void) __attribute__ ((__const__));



extern GType gtk_image_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_arrow_placement_get_type (void) __attribute__ ((__const__));



extern GType gtk_buttons_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_button_role_get_type (void) __attribute__ ((__const__));



extern GType gtk_notebook_tab_get_type (void) __attribute__ ((__const__));



extern GType gtk_pad_action_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_places_open_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_print_status_get_type (void) __attribute__ ((__const__));

extern GType gtk_print_operation_result_get_type (void) __attribute__ ((__const__));

extern GType gtk_print_operation_action_get_type (void) __attribute__ ((__const__));

extern GType gtk_print_error_get_type (void) __attribute__ ((__const__));



extern GType gtk_recent_sort_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_recent_chooser_error_get_type (void) __attribute__ ((__const__));



extern GType gtk_recent_filter_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_recent_manager_error_get_type (void) __attribute__ ((__const__));



extern GType gtk_revealer_transition_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_corner_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_policy_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_target_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_shortcut_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_spin_button_update_policy_get_type (void) __attribute__ ((__const__));

extern GType gtk_spin_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_stack_transition_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_style_context_print_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_text_buffer_target_info_get_type (void) __attribute__ ((__const__));



extern GType gtk_text_search_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_text_window_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_text_view_layer_get_type (void) __attribute__ ((__const__));

extern GType gtk_text_extend_selection_get_type (void) __attribute__ ((__const__));



extern GType gtk_toolbar_space_style_get_type (void) __attribute__ ((__const__));



extern GType gtk_tool_palette_drag_targets_get_type (void) __attribute__ ((__const__));



extern GType gtk_tree_model_flags_get_type (void) __attribute__ ((__const__));



extern GType gtk_tree_view_drop_position_get_type (void) __attribute__ ((__const__));



extern GType gtk_tree_view_column_sizing_get_type (void) __attribute__ ((__const__));



extern GType gtk_widget_help_type_get_type (void) __attribute__ ((__const__));



extern GType gtk_window_type_get_type (void) __attribute__ ((__const__));

extern GType gtk_window_position_get_type (void) __attribute__ ((__const__));
# 241 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkversion.h" 1
# 243 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkviewport.h" 1
# 47 "/usr/include/gtk-3.0/gtk/gtkviewport.h"
typedef struct _GtkViewport GtkViewport;
typedef struct _GtkViewportPrivate GtkViewportPrivate;
typedef struct _GtkViewportClass GtkViewportClass;

struct _GtkViewport
{
  GtkBin bin;


  GtkViewportPrivate *priv;
};





struct _GtkViewportClass
{
  GtkBinClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


extern
GType gtk_viewport_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_viewport_new (GtkAdjustment *hadjustment,
          GtkAdjustment *vadjustment);

__attribute__((__deprecated__("Use '" "gtk_scrollable_get_hadjustment" "' instead"))) extern
GtkAdjustment* gtk_viewport_get_hadjustment (GtkViewport *viewport);
__attribute__((__deprecated__("Use '" "gtk_scrollable_get_vadjustment" "' instead"))) extern
GtkAdjustment* gtk_viewport_get_vadjustment (GtkViewport *viewport);
__attribute__((__deprecated__("Use '" "gtk_scrollable_set_hadjustment" "' instead"))) extern
void gtk_viewport_set_hadjustment (GtkViewport *viewport,
                                             GtkAdjustment *adjustment);
__attribute__((__deprecated__("Use '" "gtk_scrollable_set_vadjustment" "' instead"))) extern
void gtk_viewport_set_vadjustment (GtkViewport *viewport,
                                             GtkAdjustment *adjustment);

extern
void gtk_viewport_set_shadow_type (GtkViewport *viewport,
          GtkShadowType type);
extern
GtkShadowType gtk_viewport_get_shadow_type (GtkViewport *viewport);
extern
GdkWindow* gtk_viewport_get_bin_window (GtkViewport *viewport);
extern
GdkWindow* gtk_viewport_get_view_window (GtkViewport *viewport);
# 244 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/gtkvolumebutton.h" 1
# 46 "/usr/include/gtk-3.0/gtk/gtkvolumebutton.h"
typedef struct _GtkVolumeButton GtkVolumeButton;
typedef struct _GtkVolumeButtonClass GtkVolumeButtonClass;

struct _GtkVolumeButton
{
  GtkScaleButton parent;
};

struct _GtkVolumeButtonClass
{
  GtkScaleButtonClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

extern
GType gtk_volume_button_get_type (void) __attribute__ ((__const__));
extern
GtkWidget* gtk_volume_button_new (void);
# 245 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkwidgetpath.h" 1
# 34 "/usr/include/gtk-3.0/gtk/gtkwidgetpath.h"
extern
GType gtk_widget_path_get_type (void) __attribute__ ((__const__));
extern
GtkWidgetPath * gtk_widget_path_new (void);

extern
GtkWidgetPath * gtk_widget_path_copy (const GtkWidgetPath *path);
extern
GtkWidgetPath * gtk_widget_path_ref (GtkWidgetPath *path);
extern
void gtk_widget_path_unref (GtkWidgetPath *path);
extern
void gtk_widget_path_free (GtkWidgetPath *path);

extern
char * gtk_widget_path_to_string (const GtkWidgetPath *path);
extern
gint gtk_widget_path_length (const GtkWidgetPath *path);

extern
gint gtk_widget_path_append_type (GtkWidgetPath *path,
                                                     GType type);
extern
void gtk_widget_path_prepend_type (GtkWidgetPath *path,
                                                     GType type);
extern
gint gtk_widget_path_append_with_siblings(GtkWidgetPath *path,
                                                     GtkWidgetPath *siblings,
                                                     guint sibling_index);

extern
gint gtk_widget_path_append_for_widget (GtkWidgetPath *path,
                                                     GtkWidget *widget);

extern
GType gtk_widget_path_iter_get_object_type (const GtkWidgetPath *path,
                                                           gint pos);
extern
void gtk_widget_path_iter_set_object_type (GtkWidgetPath *path,
                                                           gint pos,
                                                           GType type);
extern
const char * gtk_widget_path_iter_get_object_name (const GtkWidgetPath *path,
                                                           gint pos);
extern
void gtk_widget_path_iter_set_object_name (GtkWidgetPath *path,
                                                           gint pos,
                                                           const char *name);
extern
const GtkWidgetPath *
                    gtk_widget_path_iter_get_siblings (const GtkWidgetPath *path,
                                                           gint pos);
extern
guint gtk_widget_path_iter_get_sibling_index(const GtkWidgetPath *path,
                                                           gint pos);

extern
const gchar * gtk_widget_path_iter_get_name (const GtkWidgetPath *path,
                                                       gint pos);
extern
void gtk_widget_path_iter_set_name (GtkWidgetPath *path,
                                                       gint pos,
                                                       const gchar *name);
extern
gboolean gtk_widget_path_iter_has_name (const GtkWidgetPath *path,
                                                       gint pos,
                                                       const gchar *name);
extern
gboolean gtk_widget_path_iter_has_qname (const GtkWidgetPath *path,
                                                       gint pos,
                                                       GQuark qname);
extern
GtkStateFlags gtk_widget_path_iter_get_state (const GtkWidgetPath *path,
                                                       gint pos);
extern
void gtk_widget_path_iter_set_state (GtkWidgetPath *path,
                                                       gint pos,
                                                       GtkStateFlags state);

extern
void gtk_widget_path_iter_add_class (GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name);
extern
void gtk_widget_path_iter_remove_class (GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name);
extern
void gtk_widget_path_iter_clear_classes (GtkWidgetPath *path,
                                             gint pos);
extern
GSList * gtk_widget_path_iter_list_classes (const GtkWidgetPath *path,
                                             gint pos);
extern
gboolean gtk_widget_path_iter_has_class (const GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name);
extern
gboolean gtk_widget_path_iter_has_qclass (const GtkWidgetPath *path,
                                             gint pos,
                                             GQuark qname);

__attribute__((__deprecated__)) extern
void gtk_widget_path_iter_add_region (GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name,
                                             GtkRegionFlags flags);
__attribute__((__deprecated__)) extern
void gtk_widget_path_iter_remove_region (GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name);
__attribute__((__deprecated__)) extern
void gtk_widget_path_iter_clear_regions (GtkWidgetPath *path,
                                             gint pos);

__attribute__((__deprecated__)) extern
GSList * gtk_widget_path_iter_list_regions (const GtkWidgetPath *path,
                                             gint pos);

__attribute__((__deprecated__)) extern
gboolean gtk_widget_path_iter_has_region (const GtkWidgetPath *path,
                                             gint pos,
                                             const gchar *name,
                                             GtkRegionFlags *flags);
__attribute__((__deprecated__)) extern
gboolean gtk_widget_path_iter_has_qregion (const GtkWidgetPath *path,
                                             gint pos,
                                             GQuark qname,
                                             GtkRegionFlags *flags);

extern
GType gtk_widget_path_get_object_type (const GtkWidgetPath *path);

extern
gboolean gtk_widget_path_is_type (const GtkWidgetPath *path,
                                            GType type);
extern
gboolean gtk_widget_path_has_parent (const GtkWidgetPath *path,
                                            GType type);
# 247 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/gtkwindowgroup.h" 1
# 44 "/usr/include/gtk-3.0/gtk/gtkwindowgroup.h"
struct _GtkWindowGroup
{
  GObject parent_instance;

  GtkWindowGroupPrivate *priv;
};

struct _GtkWindowGroupClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};




extern
GType gtk_window_group_get_type (void) __attribute__ ((__const__));

extern
GtkWindowGroup * gtk_window_group_new (void);
extern
void gtk_window_group_add_window (GtkWindowGroup *window_group,
                                                 GtkWindow *window);
extern
void gtk_window_group_remove_window (GtkWindowGroup *window_group,
                                                 GtkWindow *window);
extern
GList * gtk_window_group_list_windows (GtkWindowGroup *window_group);

extern
GtkWidget * gtk_window_group_get_current_grab (GtkWindowGroup *window_group);
extern
GtkWidget * gtk_window_group_get_current_device_grab (GtkWindowGroup *window_group,
                                                           GdkDevice *device);
# 249 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkarrow.h" 1
# 46 "/usr/include/gtk-3.0/gtk/deprecated/gtkarrow.h"
typedef struct _GtkArrow GtkArrow;
typedef struct _GtkArrowPrivate GtkArrowPrivate;
typedef struct _GtkArrowClass GtkArrowClass;

struct _GtkArrow
{
  GtkMisc misc;


  GtkArrowPrivate *priv;
};

struct _GtkArrowClass
{
  GtkMiscClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


__attribute__((__deprecated__)) extern
GType gtk_arrow_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkWidget* gtk_arrow_new (GtkArrowType arrow_type,
     GtkShadowType shadow_type);
__attribute__((__deprecated__)) extern
void gtk_arrow_set (GtkArrow *arrow,
     GtkArrowType arrow_type,
     GtkShadowType shadow_type);
# 252 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkactivatable.h" 1
# 25 "/usr/include/gtk-3.0/gtk/deprecated/gtkactivatable.h"
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkaction.h" 1
# 47 "/usr/include/gtk-3.0/gtk/deprecated/gtkaction.h"
typedef struct _GtkAction GtkAction;
typedef struct _GtkActionClass GtkActionClass;
typedef struct _GtkActionPrivate GtkActionPrivate;

struct _GtkAction
{
  GObject object;


  GtkActionPrivate *private_data;
};






struct _GtkActionClass
{
  GObjectClass parent_class;




  void (* activate) (GtkAction *action);



  GType menu_item_type;
  GType toolbar_item_type;


  GtkWidget *(* create_menu_item) (GtkAction *action);
  GtkWidget *(* create_tool_item) (GtkAction *action);
  void (* connect_proxy) (GtkAction *action,
         GtkWidget *proxy);
  void (* disconnect_proxy) (GtkAction *action,
         GtkWidget *proxy);

  GtkWidget *(* create_menu) (GtkAction *action);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

__attribute__((__deprecated__)) extern
GType gtk_action_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkAction *gtk_action_new (const gchar *name,
      const gchar *label,
      const gchar *tooltip,
      const gchar *stock_id);
__attribute__((__deprecated__)) extern
const gchar* gtk_action_get_name (GtkAction *action);
__attribute__((__deprecated__)) extern
gboolean gtk_action_is_sensitive (GtkAction *action);
__attribute__((__deprecated__)) extern
gboolean gtk_action_get_sensitive (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_sensitive (GtkAction *action,
      gboolean sensitive);
__attribute__((__deprecated__)) extern
gboolean gtk_action_is_visible (GtkAction *action);
__attribute__((__deprecated__)) extern
gboolean gtk_action_get_visible (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_visible (GtkAction *action,
      gboolean visible);
__attribute__((__deprecated__)) extern
void gtk_action_activate (GtkAction *action);
__attribute__((__deprecated__)) extern
GtkWidget * gtk_action_create_icon (GtkAction *action,
      GtkIconSize icon_size);
__attribute__((__deprecated__)) extern
GtkWidget * gtk_action_create_menu_item (GtkAction *action);
__attribute__((__deprecated__)) extern
GtkWidget * gtk_action_create_tool_item (GtkAction *action);
__attribute__((__deprecated__)) extern
GtkWidget * gtk_action_create_menu (GtkAction *action);
__attribute__((__deprecated__)) extern
GSList * gtk_action_get_proxies (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_connect_accelerator (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_disconnect_accelerator (GtkAction *action);
__attribute__((__deprecated__)) extern
const gchar *gtk_action_get_accel_path (GtkAction *action);
__attribute__((__deprecated__)) extern
GClosure *gtk_action_get_accel_closure (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_block_activate (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_unblock_activate (GtkAction *action);

void _gtk_action_add_to_proxy_list (GtkAction *action,
      GtkWidget *proxy);
void _gtk_action_remove_from_proxy_list(GtkAction *action,
      GtkWidget *proxy);


void _gtk_action_emit_activate (GtkAction *action);


__attribute__((__deprecated__)) extern
void gtk_action_set_accel_path (GtkAction *action,
      const gchar *accel_path);
__attribute__((__deprecated__)) extern
void gtk_action_set_accel_group (GtkAction *action,
      GtkAccelGroup *accel_group);
void _gtk_action_sync_menu_visible (GtkAction *action,
      GtkWidget *proxy,
      gboolean empty);

__attribute__((__deprecated__)) extern
void gtk_action_set_label (GtkAction *action,
                                                         const gchar *label);
__attribute__((__deprecated__)) extern
const gchar * gtk_action_get_label (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_short_label (GtkAction *action,
                                                         const gchar *short_label);
__attribute__((__deprecated__)) extern
const gchar * gtk_action_get_short_label (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_tooltip (GtkAction *action,
                                                         const gchar *tooltip);
__attribute__((__deprecated__)) extern
const gchar * gtk_action_get_tooltip (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_stock_id (GtkAction *action,
                                                         const gchar *stock_id);
__attribute__((__deprecated__)) extern
const gchar * gtk_action_get_stock_id (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_gicon (GtkAction *action,
                                                         GIcon *icon);
__attribute__((__deprecated__)) extern
GIcon *gtk_action_get_gicon (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_icon_name (GtkAction *action,
                                                         const gchar *icon_name);
__attribute__((__deprecated__)) extern
const gchar * gtk_action_get_icon_name (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_visible_horizontal (GtkAction *action,
                                                         gboolean visible_horizontal);
__attribute__((__deprecated__)) extern
gboolean gtk_action_get_visible_horizontal (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_visible_vertical (GtkAction *action,
                                                         gboolean visible_vertical);
__attribute__((__deprecated__)) extern
gboolean gtk_action_get_visible_vertical (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_is_important (GtkAction *action,
                                                         gboolean is_important);
__attribute__((__deprecated__)) extern
gboolean gtk_action_get_is_important (GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_set_always_show_image (GtkAction *action,
                                                         gboolean always_show);
__attribute__((__deprecated__)) extern
gboolean gtk_action_get_always_show_image (GtkAction *action);
# 26 "/usr/include/gtk-3.0/gtk/deprecated/gtkactivatable.h" 2
# 36 "/usr/include/gtk-3.0/gtk/deprecated/gtkactivatable.h"
typedef struct _GtkActivatable GtkActivatable;
typedef struct _GtkActivatableIface GtkActivatableIface;
# 56 "/usr/include/gtk-3.0/gtk/deprecated/gtkactivatable.h"
struct _GtkActivatableIface
{

  GTypeInterface g_iface;




  void (* update) (GtkActivatable *activatable,
                         GtkAction *action,
                         const gchar *property_name);
  void (* sync_action_properties) (GtkActivatable *activatable,
                         GtkAction *action);
};


__attribute__((__deprecated__)) extern
GType gtk_activatable_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
void gtk_activatable_sync_action_properties (GtkActivatable *activatable,
             GtkAction *action);

__attribute__((__deprecated__)) extern
void gtk_activatable_set_related_action (GtkActivatable *activatable,
             GtkAction *action);
__attribute__((__deprecated__)) extern
GtkAction *gtk_activatable_get_related_action (GtkActivatable *activatable);

__attribute__((__deprecated__)) extern
void gtk_activatable_set_use_action_appearance (GtkActivatable *activatable,
             gboolean use_appearance);
__attribute__((__deprecated__)) extern
gboolean gtk_activatable_get_use_action_appearance (GtkActivatable *activatable);


__attribute__((__deprecated__)) extern
void gtk_activatable_do_set_related_action (GtkActivatable *activatable,
             GtkAction *action);
# 253 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkactiongroup.h" 1
# 37 "/usr/include/gtk-3.0/gtk/deprecated/gtkactiongroup.h"
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkstock.h" 1
# 51 "/usr/include/gtk-3.0/gtk/deprecated/gtkstock.h"
typedef gchar * (*GtkTranslateFunc) (const gchar *path,
                                     gpointer func_data);

typedef struct _GtkStockItem GtkStockItem;
# 66 "/usr/include/gtk-3.0/gtk/deprecated/gtkstock.h"
struct _GtkStockItem
{
  gchar *stock_id;
  gchar *label;
  GdkModifierType modifier;
  guint keyval;
  gchar *translation_domain;
};

__attribute__((__deprecated__)) extern
void gtk_stock_add (const GtkStockItem *items,
                               guint n_items);
__attribute__((__deprecated__)) extern
void gtk_stock_add_static (const GtkStockItem *items,
                               guint n_items);
__attribute__((__deprecated__)) extern
gboolean gtk_stock_lookup (const gchar *stock_id,
                               GtkStockItem *item);




__attribute__((__deprecated__)) extern
GSList* gtk_stock_list_ids (void);

__attribute__((__deprecated__)) extern
GtkStockItem *gtk_stock_item_copy (const GtkStockItem *item);
__attribute__((__deprecated__)) extern
void gtk_stock_item_free (GtkStockItem *item);

__attribute__((__deprecated__)) extern
void gtk_stock_set_translate_func (const gchar *domain,
         GtkTranslateFunc func,
         gpointer data,
         GDestroyNotify notify);




__attribute__((__deprecated__))


typedef char * GtkStock;
# 38 "/usr/include/gtk-3.0/gtk/deprecated/gtkactiongroup.h" 2
# 48 "/usr/include/gtk-3.0/gtk/deprecated/gtkactiongroup.h"
typedef struct _GtkActionGroup GtkActionGroup;
typedef struct _GtkActionGroupPrivate GtkActionGroupPrivate;
typedef struct _GtkActionGroupClass GtkActionGroupClass;
typedef struct _GtkActionEntry GtkActionEntry;
typedef struct _GtkToggleActionEntry GtkToggleActionEntry;
typedef struct _GtkRadioActionEntry GtkRadioActionEntry;

struct _GtkActionGroup
{
  GObject parent;


  GtkActionGroupPrivate *priv;
};






struct _GtkActionGroupClass
{
  GObjectClass parent_class;

  GtkAction *(* get_action) (GtkActionGroup *action_group,
                             const gchar *action_name);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 103 "/usr/include/gtk-3.0/gtk/deprecated/gtkactiongroup.h"
struct _GtkActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  GCallback callback;
};
# 132 "/usr/include/gtk-3.0/gtk/deprecated/gtkactiongroup.h"
struct _GtkToggleActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  GCallback callback;
  gboolean is_active;
};
# 162 "/usr/include/gtk-3.0/gtk/deprecated/gtkactiongroup.h"
struct _GtkRadioActionEntry
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  gint value;
};

__attribute__((__deprecated__)) extern
GType gtk_action_group_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkActionGroup *gtk_action_group_new (const gchar *name);
__attribute__((__deprecated__)) extern
const gchar *gtk_action_group_get_name (GtkActionGroup *action_group);
__attribute__((__deprecated__)) extern
gboolean gtk_action_group_get_sensitive (GtkActionGroup *action_group);
__attribute__((__deprecated__)) extern
void gtk_action_group_set_sensitive (GtkActionGroup *action_group,
         gboolean sensitive);
__attribute__((__deprecated__)) extern
gboolean gtk_action_group_get_visible (GtkActionGroup *action_group);
__attribute__((__deprecated__)) extern
void gtk_action_group_set_visible (GtkActionGroup *action_group,
         gboolean visible);
__attribute__((__deprecated__)) extern
GtkAccelGroup *gtk_action_group_get_accel_group (GtkActionGroup *action_group);
__attribute__((__deprecated__)) extern
void gtk_action_group_set_accel_group (GtkActionGroup *action_group,
                                                          GtkAccelGroup *accel_group);

__attribute__((__deprecated__)) extern
GtkAction *gtk_action_group_get_action (GtkActionGroup *action_group,
         const gchar *action_name);
__attribute__((__deprecated__)) extern
GList *gtk_action_group_list_actions (GtkActionGroup *action_group);
__attribute__((__deprecated__)) extern
void gtk_action_group_add_action (GtkActionGroup *action_group,
         GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_group_add_action_with_accel (GtkActionGroup *action_group,
         GtkAction *action,
         const gchar *accelerator);
__attribute__((__deprecated__)) extern
void gtk_action_group_remove_action (GtkActionGroup *action_group,
         GtkAction *action);
__attribute__((__deprecated__)) extern
void gtk_action_group_add_actions (GtkActionGroup *action_group,
         const GtkActionEntry *entries,
         guint n_entries,
         gpointer user_data);
__attribute__((__deprecated__)) extern
void gtk_action_group_add_toggle_actions (GtkActionGroup *action_group,
         const GtkToggleActionEntry *entries,
         guint n_entries,
         gpointer user_data);
__attribute__((__deprecated__)) extern
void gtk_action_group_add_radio_actions (GtkActionGroup *action_group,
         const GtkRadioActionEntry *entries,
         guint n_entries,
         gint value,
         GCallback on_change,
         gpointer user_data);
__attribute__((__deprecated__)) extern
void gtk_action_group_add_actions_full (GtkActionGroup *action_group,
         const GtkActionEntry *entries,
         guint n_entries,
         gpointer user_data,
         GDestroyNotify destroy);
__attribute__((__deprecated__)) extern
void gtk_action_group_add_toggle_actions_full (GtkActionGroup *action_group,
         const GtkToggleActionEntry *entries,
         guint n_entries,
         gpointer user_data,
         GDestroyNotify destroy);
__attribute__((__deprecated__)) extern
void gtk_action_group_add_radio_actions_full (GtkActionGroup *action_group,
         const GtkRadioActionEntry *entries,
         guint n_entries,
         gint value,
         GCallback on_change,
         gpointer user_data,
         GDestroyNotify destroy);
__attribute__((__deprecated__)) extern
void gtk_action_group_set_translate_func (GtkActionGroup *action_group,
         GtkTranslateFunc func,
         gpointer data,
         GDestroyNotify notify);
__attribute__((__deprecated__)) extern
void gtk_action_group_set_translation_domain (GtkActionGroup *action_group,
         const gchar *domain);
__attribute__((__deprecated__)) extern
const gchar * gtk_action_group_translate_string (GtkActionGroup *action_group,
                                                     const gchar *string);


void _gtk_action_group_emit_connect_proxy (GtkActionGroup *action_group,
                                              GtkAction *action,
                                              GtkWidget *proxy);
void _gtk_action_group_emit_disconnect_proxy (GtkActionGroup *action_group,
                                              GtkAction *action,
                                              GtkWidget *proxy);
void _gtk_action_group_emit_pre_activate (GtkActionGroup *action_group,
                                              GtkAction *action);
void _gtk_action_group_emit_post_activate (GtkActionGroup *action_group,
                                              GtkAction *action);
# 255 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkalignment.h" 1
# 46 "/usr/include/gtk-3.0/gtk/deprecated/gtkalignment.h"
typedef struct _GtkAlignment GtkAlignment;
typedef struct _GtkAlignmentPrivate GtkAlignmentPrivate;
typedef struct _GtkAlignmentClass GtkAlignmentClass;

struct _GtkAlignment
{
  GtkBin bin;


  GtkAlignmentPrivate *priv;
};





struct _GtkAlignmentClass
{
  GtkBinClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


__attribute__((__deprecated__)) extern
GType gtk_alignment_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkWidget* gtk_alignment_new (gfloat xalign,
         gfloat yalign,
         gfloat xscale,
         gfloat yscale);
__attribute__((__deprecated__)) extern
void gtk_alignment_set (GtkAlignment *alignment,
         gfloat xalign,
         gfloat yalign,
         gfloat xscale,
         gfloat yscale);

__attribute__((__deprecated__)) extern
void gtk_alignment_set_padding (GtkAlignment *alignment,
          guint padding_top,
          guint padding_bottom,
          guint padding_left,
          guint padding_right);

__attribute__((__deprecated__)) extern
void gtk_alignment_get_padding (GtkAlignment *alignment,
          guint *padding_top,
          guint *padding_bottom,
          guint *padding_left,
          guint *padding_right);
# 256 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkcolorsel.h" 1
# 46 "/usr/include/gtk-3.0/gtk/deprecated/gtkcolorsel.h"
typedef struct _GtkColorSelection GtkColorSelection;
typedef struct _GtkColorSelectionPrivate GtkColorSelectionPrivate;
typedef struct _GtkColorSelectionClass GtkColorSelectionClass;
# 57 "/usr/include/gtk-3.0/gtk/deprecated/gtkcolorsel.h"
typedef void (* GtkColorSelectionChangePaletteFunc) (const GdkColor *colors,
                                                     gint n_colors);
# 69 "/usr/include/gtk-3.0/gtk/deprecated/gtkcolorsel.h"
typedef void (* GtkColorSelectionChangePaletteWithScreenFunc) (GdkScreen *screen,
              const GdkColor *colors,
              gint n_colors);

struct _GtkColorSelection
{
  GtkBox parent_instance;


  GtkColorSelectionPrivate *private_data;
};






struct _GtkColorSelectionClass
{
  GtkBoxClass parent_class;

  void (*color_changed) (GtkColorSelection *color_selection);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};




__attribute__((__deprecated__)) extern
GType gtk_color_selection_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_color_chooser_widget_new" "' instead"))) extern
GtkWidget *gtk_color_selection_new (void);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_get_use_alpha" "' instead"))) extern
gboolean gtk_color_selection_get_has_opacity_control (GtkColorSelection *colorsel);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_set_use_alpha" "' instead"))) extern
void gtk_color_selection_set_has_opacity_control (GtkColorSelection *colorsel,
       gboolean has_opacity);
__attribute__((__deprecated__)) extern
gboolean gtk_color_selection_get_has_palette (GtkColorSelection *colorsel);
__attribute__((__deprecated__)) extern
void gtk_color_selection_set_has_palette (GtkColorSelection *colorsel,
       gboolean has_palette);


__attribute__((__deprecated__("Use '" "gtk_color_chooser_set_rgba" "' instead"))) extern
void gtk_color_selection_set_current_alpha (GtkColorSelection *colorsel,
        guint16 alpha);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_get_rgba" "' instead"))) extern
guint16 gtk_color_selection_get_current_alpha (GtkColorSelection *colorsel);
__attribute__((__deprecated__)) extern
void gtk_color_selection_set_previous_alpha (GtkColorSelection *colorsel,
        guint16 alpha);
__attribute__((__deprecated__)) extern
guint16 gtk_color_selection_get_previous_alpha (GtkColorSelection *colorsel);

__attribute__((__deprecated__("Use '" "gtk_color_chooser_set_rgba" "' instead"))) extern
void gtk_color_selection_set_current_rgba (GtkColorSelection *colorsel,
                                                  const GdkRGBA *rgba);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_get_rgba" "' instead"))) extern
void gtk_color_selection_get_current_rgba (GtkColorSelection *colorsel,
                                                  GdkRGBA *rgba);
__attribute__((__deprecated__)) extern
void gtk_color_selection_set_previous_rgba (GtkColorSelection *colorsel,
                                                  const GdkRGBA *rgba);
__attribute__((__deprecated__)) extern
void gtk_color_selection_get_previous_rgba (GtkColorSelection *colorsel,
                                                  GdkRGBA *rgba);

__attribute__((__deprecated__)) extern
gboolean gtk_color_selection_is_adjusting (GtkColorSelection *colorsel);

__attribute__((__deprecated__)) extern
gboolean gtk_color_selection_palette_from_string (const gchar *str,
                                                  GdkColor **colors,
                                                  gint *n_colors);
__attribute__((__deprecated__)) extern
gchar* gtk_color_selection_palette_to_string (const GdkColor *colors,
                                                  gint n_colors);

__attribute__((__deprecated__)) extern
GtkColorSelectionChangePaletteWithScreenFunc gtk_color_selection_set_change_palette_with_screen_hook (GtkColorSelectionChangePaletteWithScreenFunc func);

__attribute__((__deprecated__("Use '" "gtk_color_chooser_set_rgba" "' instead"))) extern
void gtk_color_selection_set_current_color (GtkColorSelection *colorsel,
                                                  const GdkColor *color);
__attribute__((__deprecated__("Use '" "gtk_color_chooser_get_rgba" "' instead"))) extern
void gtk_color_selection_get_current_color (GtkColorSelection *colorsel,
                                                  GdkColor *color);
__attribute__((__deprecated__)) extern
void gtk_color_selection_set_previous_color (GtkColorSelection *colorsel,
                                                  const GdkColor *color);
__attribute__((__deprecated__)) extern
void gtk_color_selection_get_previous_color (GtkColorSelection *colorsel,
                                                  GdkColor *color);
# 257 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkcolorseldialog.h" 1
# 45 "/usr/include/gtk-3.0/gtk/deprecated/gtkcolorseldialog.h"
typedef struct _GtkColorSelectionDialog GtkColorSelectionDialog;
typedef struct _GtkColorSelectionDialogPrivate GtkColorSelectionDialogPrivate;
typedef struct _GtkColorSelectionDialogClass GtkColorSelectionDialogClass;


struct _GtkColorSelectionDialog
{
  GtkDialog parent_instance;


  GtkColorSelectionDialogPrivate *priv;
};

struct _GtkColorSelectionDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};



__attribute__((__deprecated__)) extern
GType gtk_color_selection_dialog_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_color_chooser_dialog_new" "' instead"))) extern
GtkWidget* gtk_color_selection_dialog_new (const gchar *title);
__attribute__((__deprecated__("Use '" "GtkColorChooser" "' instead"))) extern
GtkWidget* gtk_color_selection_dialog_get_color_selection (GtkColorSelectionDialog *colorsel);
# 258 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkfontsel.h" 1
# 59 "/usr/include/gtk-3.0/gtk/deprecated/gtkfontsel.h"
typedef struct _GtkFontSelection GtkFontSelection;
typedef struct _GtkFontSelectionPrivate GtkFontSelectionPrivate;
typedef struct _GtkFontSelectionClass GtkFontSelectionClass;

typedef struct _GtkFontSelectionDialog GtkFontSelectionDialog;
typedef struct _GtkFontSelectionDialogPrivate GtkFontSelectionDialogPrivate;
typedef struct _GtkFontSelectionDialogClass GtkFontSelectionDialogClass;

struct _GtkFontSelection
{
  GtkBox parent_instance;


  GtkFontSelectionPrivate *priv;
};

struct _GtkFontSelectionClass
{
  GtkBoxClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


struct _GtkFontSelectionDialog
{
  GtkDialog parent_instance;


  GtkFontSelectionDialogPrivate *priv;
};

struct _GtkFontSelectionDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

__attribute__((__deprecated__)) extern
GType gtk_font_selection_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget * gtk_font_selection_new (void);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget * gtk_font_selection_get_family_list (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget * gtk_font_selection_get_face_list (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget * gtk_font_selection_get_size_entry (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget * gtk_font_selection_get_size_list (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget * gtk_font_selection_get_preview_entry (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
PangoFontFamily *
             gtk_font_selection_get_family (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
PangoFontFace *
             gtk_font_selection_get_face (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
gint gtk_font_selection_get_size (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
gchar* gtk_font_selection_get_font_name (GtkFontSelection *fontsel);

__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
gboolean gtk_font_selection_set_font_name (GtkFontSelection *fontsel,
                                                   const gchar *fontname);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
const gchar* gtk_font_selection_get_preview_text (GtkFontSelection *fontsel);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
void gtk_font_selection_set_preview_text (GtkFontSelection *fontsel,
                                                   const gchar *text);

__attribute__((__deprecated__)) extern
GType gtk_font_selection_dialog_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget *gtk_font_selection_dialog_new (const gchar *title);

__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget *gtk_font_selection_dialog_get_ok_button (GtkFontSelectionDialog *fsd);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget *gtk_font_selection_dialog_get_cancel_button (GtkFontSelectionDialog *fsd);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
GtkWidget *gtk_font_selection_dialog_get_font_selection (GtkFontSelectionDialog *fsd);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
gchar* gtk_font_selection_dialog_get_font_name (GtkFontSelectionDialog *fsd);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
gboolean gtk_font_selection_dialog_set_font_name (GtkFontSelectionDialog *fsd,
                                                        const gchar *fontname);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
const gchar*
          gtk_font_selection_dialog_get_preview_text (GtkFontSelectionDialog *fsd);
__attribute__((__deprecated__("Use '" "GtkFontChooser" "' instead"))) extern
void gtk_font_selection_dialog_set_preview_text (GtkFontSelectionDialog *fsd,
                                                        const gchar *text);
# 259 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkgradient.h" 1
# 28 "/usr/include/gtk-3.0/gtk/deprecated/gtkgradient.h"
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtksymboliccolor.h" 1
# 32 "/usr/include/gtk-3.0/gtk/deprecated/gtksymboliccolor.h"
__attribute__((__deprecated__)) extern
GType gtk_symbolic_color_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
GtkSymbolicColor * gtk_symbolic_color_new_literal (const GdkRGBA *color);
__attribute__((__deprecated__)) extern
GtkSymbolicColor * gtk_symbolic_color_new_name (const gchar *name);
__attribute__((__deprecated__)) extern
GtkSymbolicColor * gtk_symbolic_color_new_shade (GtkSymbolicColor *color,
                                                   gdouble factor);
__attribute__((__deprecated__)) extern
GtkSymbolicColor * gtk_symbolic_color_new_alpha (GtkSymbolicColor *color,
                                                   gdouble factor);
__attribute__((__deprecated__)) extern
GtkSymbolicColor * gtk_symbolic_color_new_mix (GtkSymbolicColor *color1,
                                                   GtkSymbolicColor *color2,
                                                   gdouble factor);
__attribute__((__deprecated__)) extern
GtkSymbolicColor * gtk_symbolic_color_new_win32 (const gchar *theme_class,
                                                   gint id);

__attribute__((__deprecated__)) extern
GtkSymbolicColor * gtk_symbolic_color_ref (GtkSymbolicColor *color);
__attribute__((__deprecated__)) extern
void gtk_symbolic_color_unref (GtkSymbolicColor *color);

__attribute__((__deprecated__)) extern
char * gtk_symbolic_color_to_string (GtkSymbolicColor *color);

__attribute__((__deprecated__)) extern
gboolean gtk_symbolic_color_resolve (GtkSymbolicColor *color,
                                                   GtkStyleProperties *props,
                                                   GdkRGBA *resolved_color);
# 29 "/usr/include/gtk-3.0/gtk/deprecated/gtkgradient.h" 2





__attribute__((__deprecated__)) extern
GType gtk_gradient_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
GtkGradient * gtk_gradient_new_linear (gdouble x0,
                                           gdouble y0,
                                           gdouble x1,
                                           gdouble y1);
__attribute__((__deprecated__)) extern
GtkGradient * gtk_gradient_new_radial (gdouble x0,
                                           gdouble y0,
                                           gdouble radius0,
                                           gdouble x1,
                                           gdouble y1,
                                           gdouble radius1);

__attribute__((__deprecated__)) extern
void gtk_gradient_add_color_stop (GtkGradient *gradient,
                                           gdouble offset,
                                           GtkSymbolicColor *color);

__attribute__((__deprecated__)) extern
GtkGradient * gtk_gradient_ref (GtkGradient *gradient);
__attribute__((__deprecated__)) extern
void gtk_gradient_unref (GtkGradient *gradient);

__attribute__((__deprecated__)) extern
gboolean gtk_gradient_resolve (GtkGradient *gradient,
                                           GtkStyleProperties *props,
                                           cairo_pattern_t **resolved_gradient);
__attribute__((__deprecated__)) extern
cairo_pattern_t *
              gtk_gradient_resolve_for_context
                                          (GtkGradient *gradient,
                                           GtkStyleContext *context);

__attribute__((__deprecated__)) extern
char * gtk_gradient_to_string (GtkGradient *gradient);
# 260 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkhandlebox.h" 1
# 48 "/usr/include/gtk-3.0/gtk/deprecated/gtkhandlebox.h"
typedef struct _GtkHandleBox GtkHandleBox;
typedef struct _GtkHandleBoxPrivate GtkHandleBoxPrivate;
typedef struct _GtkHandleBoxClass GtkHandleBoxClass;

struct _GtkHandleBox
{
  GtkBin bin;


  GtkHandleBoxPrivate *priv;
};
# 68 "/usr/include/gtk-3.0/gtk/deprecated/gtkhandlebox.h"
struct _GtkHandleBoxClass
{
  GtkBinClass parent_class;

  void (*child_attached) (GtkHandleBox *handle_box,
     GtkWidget *child);
  void (*child_detached) (GtkHandleBox *handle_box,
     GtkWidget *child);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


__attribute__((__deprecated__)) extern
GType gtk_handle_box_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkWidget* gtk_handle_box_new (void);
__attribute__((__deprecated__)) extern
void gtk_handle_box_set_shadow_type (GtkHandleBox *handle_box,
                                                   GtkShadowType type);
__attribute__((__deprecated__)) extern
GtkShadowType gtk_handle_box_get_shadow_type (GtkHandleBox *handle_box);
__attribute__((__deprecated__)) extern
void gtk_handle_box_set_handle_position (GtkHandleBox *handle_box,
                GtkPositionType position);
__attribute__((__deprecated__)) extern
GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *handle_box);
__attribute__((__deprecated__)) extern
void gtk_handle_box_set_snap_edge (GtkHandleBox *handle_box,
         GtkPositionType edge);
__attribute__((__deprecated__)) extern
GtkPositionType gtk_handle_box_get_snap_edge (GtkHandleBox *handle_box);
__attribute__((__deprecated__)) extern
gboolean gtk_handle_box_get_child_detached (GtkHandleBox *handle_box);
# 261 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkhbbox.h" 1
# 45 "/usr/include/gtk-3.0/gtk/deprecated/gtkhbbox.h"
typedef struct _GtkHButtonBox GtkHButtonBox;
typedef struct _GtkHButtonBoxClass GtkHButtonBoxClass;

struct _GtkHButtonBox
{
  GtkButtonBox button_box;
};

struct _GtkHButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_hbutton_box_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_button_box_new" "' instead"))) extern
GtkWidget* gtk_hbutton_box_new (void);
# 262 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkhbox.h" 1
# 46 "/usr/include/gtk-3.0/gtk/deprecated/gtkhbox.h"
typedef struct _GtkHBox GtkHBox;
typedef struct _GtkHBoxClass GtkHBoxClass;

struct _GtkHBox
{
  GtkBox box;
};

struct _GtkHBoxClass
{
  GtkBoxClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_hbox_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_box_new" "' instead"))) extern
GtkWidget * gtk_hbox_new (gboolean homogeneous,
                               gint spacing);
# 263 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkhpaned.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkhpaned.h"
typedef struct _GtkHPaned GtkHPaned;
typedef struct _GtkHPanedClass GtkHPanedClass;

struct _GtkHPaned
{
  GtkPaned paned;
};

struct _GtkHPanedClass
{
  GtkPanedClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_hpaned_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_paned_new" "' instead"))) extern
GtkWidget * gtk_hpaned_new (void);
# 264 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkhsv.h" 1
# 49 "/usr/include/gtk-3.0/gtk/deprecated/gtkhsv.h"
typedef struct _GtkHSV GtkHSV;
typedef struct _GtkHSVPrivate GtkHSVPrivate;
typedef struct _GtkHSVClass GtkHSVClass;

struct _GtkHSV
{
  GtkWidget parent_instance;


  GtkHSVPrivate *priv;
};

struct _GtkHSVClass
{
  GtkWidgetClass parent_class;


  void (* changed) (GtkHSV *hsv);


  void (* move) (GtkHSV *hsv,
                    GtkDirectionType type);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


__attribute__((__deprecated__)) extern
GType gtk_hsv_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkWidget* gtk_hsv_new (void);
__attribute__((__deprecated__)) extern
void gtk_hsv_set_color (GtkHSV *hsv,
     double h,
     double s,
     double v);
__attribute__((__deprecated__)) extern
void gtk_hsv_get_color (GtkHSV *hsv,
     gdouble *h,
     gdouble *s,
     gdouble *v);
__attribute__((__deprecated__)) extern
void gtk_hsv_set_metrics (GtkHSV *hsv,
     gint size,
     gint ring_width);
__attribute__((__deprecated__)) extern
void gtk_hsv_get_metrics (GtkHSV *hsv,
     gint *size,
     gint *ring_width);
__attribute__((__deprecated__)) extern
gboolean gtk_hsv_is_adjusting (GtkHSV *hsv);
# 265 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkhscale.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkhscale.h"
typedef struct _GtkHScale GtkHScale;
typedef struct _GtkHScaleClass GtkHScaleClass;

struct _GtkHScale
{
  GtkScale scale;
};

struct _GtkHScaleClass
{
  GtkScaleClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_hscale_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_scale_new" "' instead"))) extern
GtkWidget* gtk_hscale_new (GtkAdjustment *adjustment);
__attribute__((__deprecated__("Use '" "gtk_scale_new_with_range" "' instead"))) extern
GtkWidget* gtk_hscale_new_with_range (gdouble min,
                                      gdouble max,
                                      gdouble step);
# 266 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkhscrollbar.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkhscrollbar.h"
typedef struct _GtkHScrollbar GtkHScrollbar;
typedef struct _GtkHScrollbarClass GtkHScrollbarClass;

struct _GtkHScrollbar
{
  GtkScrollbar scrollbar;
};

struct _GtkHScrollbarClass
{
  GtkScrollbarClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_hscrollbar_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_scrollbar_new" "' instead"))) extern
GtkWidget* gtk_hscrollbar_new (GtkAdjustment *adjustment);
# 267 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkhseparator.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkhseparator.h"
typedef struct _GtkHSeparator GtkHSeparator;
typedef struct _GtkHSeparatorClass GtkHSeparatorClass;

struct _GtkHSeparator
{
  GtkSeparator separator;
};

struct _GtkHSeparatorClass
{
  GtkSeparatorClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_hseparator_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_separator_new" "' instead"))) extern
GtkWidget* gtk_hseparator_new (void);
# 268 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkimagemenuitem.h" 1
# 46 "/usr/include/gtk-3.0/gtk/deprecated/gtkimagemenuitem.h"
typedef struct _GtkImageMenuItem GtkImageMenuItem;
typedef struct _GtkImageMenuItemPrivate GtkImageMenuItemPrivate;
typedef struct _GtkImageMenuItemClass GtkImageMenuItemClass;

struct _GtkImageMenuItem
{
  GtkMenuItem menu_item;


  GtkImageMenuItemPrivate *priv;
};





struct _GtkImageMenuItemClass
{
  GtkMenuItemClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

__attribute__((__deprecated__("Use '" "gtk_menu_item_get_type" "' instead"))) extern
GType gtk_image_menu_item_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_menu_item_new" "' instead"))) extern
GtkWidget* gtk_image_menu_item_new (void);
__attribute__((__deprecated__("Use '" "gtk_menu_item_new_with_label" "' instead"))) extern
GtkWidget* gtk_image_menu_item_new_with_label (const gchar *label);
__attribute__((__deprecated__("Use '" "gtk_menu_item_new_with_mnemonic" "' instead"))) extern
GtkWidget* gtk_image_menu_item_new_with_mnemonic (const gchar *label);
__attribute__((__deprecated__("Use '" "gtk_menu_item_new" "' instead"))) extern
GtkWidget* gtk_image_menu_item_new_from_stock (const gchar *stock_id,
                                                  GtkAccelGroup *accel_group);
__attribute__((__deprecated__)) extern
void gtk_image_menu_item_set_always_show_image (GtkImageMenuItem *image_menu_item,
                                                      gboolean always_show);
__attribute__((__deprecated__)) extern
gboolean gtk_image_menu_item_get_always_show_image (GtkImageMenuItem *image_menu_item);
__attribute__((__deprecated__)) extern
void gtk_image_menu_item_set_image (GtkImageMenuItem *image_menu_item,
                                                  GtkWidget *image);
__attribute__((__deprecated__)) extern
GtkWidget* gtk_image_menu_item_get_image (GtkImageMenuItem *image_menu_item);
__attribute__((__deprecated__)) extern
void gtk_image_menu_item_set_use_stock (GtkImageMenuItem *image_menu_item,
        gboolean use_stock);
__attribute__((__deprecated__)) extern
gboolean gtk_image_menu_item_get_use_stock (GtkImageMenuItem *image_menu_item);
__attribute__((__deprecated__)) extern
void gtk_image_menu_item_set_accel_group (GtkImageMenuItem *image_menu_item,
        GtkAccelGroup *accel_group);
# 270 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtknumerableicon.h" 1
# 41 "/usr/include/gtk-3.0/gtk/deprecated/gtknumerableicon.h"
typedef struct _GtkNumerableIcon GtkNumerableIcon;
typedef struct _GtkNumerableIconClass GtkNumerableIconClass;
typedef struct _GtkNumerableIconPrivate GtkNumerableIconPrivate;

struct _GtkNumerableIcon {
  GEmblemedIcon parent;


  GtkNumerableIconPrivate *priv;
};

struct _GtkNumerableIconClass {
  GEmblemedIconClass parent_class;


  gpointer padding[16];
};

__attribute__((__deprecated__)) extern
GType gtk_numerable_icon_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
GIcon * gtk_numerable_icon_new (GIcon *base_icon);
__attribute__((__deprecated__)) extern
GIcon * gtk_numerable_icon_new_with_style_context (GIcon *base_icon,
                                                               GtkStyleContext *context);

__attribute__((__deprecated__)) extern
GtkStyleContext * gtk_numerable_icon_get_style_context (GtkNumerableIcon *self);
__attribute__((__deprecated__)) extern
void gtk_numerable_icon_set_style_context (GtkNumerableIcon *self,
                                                               GtkStyleContext *style);

__attribute__((__deprecated__)) extern
gint gtk_numerable_icon_get_count (GtkNumerableIcon *self);
__attribute__((__deprecated__)) extern
void gtk_numerable_icon_set_count (GtkNumerableIcon *self,
                                                               gint count);

__attribute__((__deprecated__)) extern
const gchar * gtk_numerable_icon_get_label (GtkNumerableIcon *self);
__attribute__((__deprecated__)) extern
void gtk_numerable_icon_set_label (GtkNumerableIcon *self,
                                                               const gchar *label);

__attribute__((__deprecated__)) extern
void gtk_numerable_icon_set_background_gicon (GtkNumerableIcon *self,
                                                               GIcon *icon);
__attribute__((__deprecated__)) extern
GIcon * gtk_numerable_icon_get_background_gicon (GtkNumerableIcon *self);

__attribute__((__deprecated__)) extern
void gtk_numerable_icon_set_background_icon_name (GtkNumerableIcon *self,
                                                               const gchar *icon_name);
__attribute__((__deprecated__)) extern
const gchar * gtk_numerable_icon_get_background_icon_name (GtkNumerableIcon *self);
# 272 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkradioaction.h" 1
# 36 "/usr/include/gtk-3.0/gtk/deprecated/gtkradioaction.h"
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtktoggleaction.h" 1
# 47 "/usr/include/gtk-3.0/gtk/deprecated/gtktoggleaction.h"
typedef struct _GtkToggleAction GtkToggleAction;
typedef struct _GtkToggleActionPrivate GtkToggleActionPrivate;
typedef struct _GtkToggleActionClass GtkToggleActionClass;

struct _GtkToggleAction
{
  GtkAction parent;


  GtkToggleActionPrivate *private_data;
};

struct _GtkToggleActionClass
{
  GtkActionClass parent_class;

  void (* toggled) (GtkToggleAction *action);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

__attribute__((__deprecated__)) extern
GType gtk_toggle_action_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkToggleAction *gtk_toggle_action_new (const gchar *name,
                                                      const gchar *label,
                                                      const gchar *tooltip,
                                                      const gchar *stock_id);
__attribute__((__deprecated__)) extern
void gtk_toggle_action_toggled (GtkToggleAction *action);
__attribute__((__deprecated__)) extern
void gtk_toggle_action_set_active (GtkToggleAction *action,
                                                      gboolean is_active);
__attribute__((__deprecated__)) extern
gboolean gtk_toggle_action_get_active (GtkToggleAction *action);
__attribute__((__deprecated__)) extern
void gtk_toggle_action_set_draw_as_radio (GtkToggleAction *action,
                                                      gboolean draw_as_radio);
__attribute__((__deprecated__)) extern
gboolean gtk_toggle_action_get_draw_as_radio (GtkToggleAction *action);


void _gtk_toggle_action_set_active (GtkToggleAction *toggle_action,
                                                      gboolean is_active);
# 37 "/usr/include/gtk-3.0/gtk/deprecated/gtkradioaction.h" 2
# 47 "/usr/include/gtk-3.0/gtk/deprecated/gtkradioaction.h"
typedef struct _GtkRadioAction GtkRadioAction;
typedef struct _GtkRadioActionPrivate GtkRadioActionPrivate;
typedef struct _GtkRadioActionClass GtkRadioActionClass;

struct _GtkRadioAction
{
  GtkToggleAction parent;


  GtkRadioActionPrivate *private_data;
};

struct _GtkRadioActionClass
{
  GtkToggleActionClass parent_class;

  void (* changed) (GtkRadioAction *action, GtkRadioAction *current);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

__attribute__((__deprecated__)) extern
GType gtk_radio_action_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkRadioAction *gtk_radio_action_new (const gchar *name,
                                                    const gchar *label,
                                                    const gchar *tooltip,
                                                    const gchar *stock_id,
                                                    gint value);
__attribute__((__deprecated__)) extern
GSList *gtk_radio_action_get_group (GtkRadioAction *action);
__attribute__((__deprecated__)) extern
void gtk_radio_action_set_group (GtkRadioAction *action,
                                                    GSList *group);
__attribute__((__deprecated__)) extern
void gtk_radio_action_join_group (GtkRadioAction *action,
                                                    GtkRadioAction *group_source);
__attribute__((__deprecated__)) extern
gint gtk_radio_action_get_current_value (GtkRadioAction *action);
__attribute__((__deprecated__)) extern
void gtk_radio_action_set_current_value (GtkRadioAction *action,
                                                    gint current_value);
# 273 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h" 1
# 38 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
typedef struct _GtkRcContext GtkRcContext;
typedef struct _GtkRcStyleClass GtkRcStyleClass;
# 57 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
typedef enum
{
  GTK_RC_FG = 1 << 0,
  GTK_RC_BG = 1 << 1,
  GTK_RC_TEXT = 1 << 2,
  GTK_RC_BASE = 1 << 3
} GtkRcFlags;
# 83 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
struct _GtkRcStyle
{
  GObject parent_instance;



  gchar *name;
  gchar *bg_pixmap_name[5];
  PangoFontDescription *font_desc;

  GtkRcFlags color_flags[5];
  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor text[5];
  GdkColor base[5];

  gint xthickness;
  gint ythickness;


  GArray *rc_properties;


  GSList *rc_style_lists;

  GSList *icon_factories;

  guint engine_specified : 1;
};
# 121 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
struct _GtkRcStyleClass
{
  GObjectClass parent_class;
# 132 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
  GtkRcStyle * (*create_rc_style) (GtkRcStyle *rc_style);





  guint (*parse) (GtkRcStyle *rc_style,
                       GtkSettings *settings,
                       GScanner *scanner);




  void (*merge) (GtkRcStyle *dest,
                       GtkRcStyle *src);



  GtkStyle * (*create_style) (GtkRcStyle *rc_style);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GSList* _gtk_rc_parse_widget_class_path (const gchar *pattern);
void _gtk_rc_free_widget_class_path (GSList *list);
gboolean _gtk_rc_match_widget_class (GSList *list,
                                          gint length,
                                          gchar *path,
                                          gchar *path_reversed);

__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_rc_add_default_file (const gchar *filename);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_rc_set_default_files (gchar **filenames);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gchar** gtk_rc_get_default_files (void);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GtkStyle* gtk_rc_get_style (GtkWidget *widget);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GtkStyle* gtk_rc_get_style_by_paths (GtkSettings *settings,
                                         const char *widget_path,
                                         const char *class_path,
                                         GType type);

__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gboolean gtk_rc_reparse_all_for_settings (GtkSettings *settings,
                                          gboolean force_load);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_rc_reset_styles (GtkSettings *settings);

__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gchar* gtk_rc_find_pixmap_in_path (GtkSettings *settings,
                                     GScanner *scanner,
                                     const gchar *pixmap_file);

__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_rc_parse (const gchar *filename);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_rc_parse_string (const gchar *rc_string);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gboolean gtk_rc_reparse_all (void);

__attribute__((__deprecated__)) extern
GType gtk_rc_style_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GtkRcStyle* gtk_rc_style_new (void);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GtkRcStyle* gtk_rc_style_copy (GtkRcStyle *orig);

__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gchar* gtk_rc_find_module_in_path (const gchar *module_file);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gchar* gtk_rc_get_theme_dir (void);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gchar* gtk_rc_get_module_dir (void);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gchar* gtk_rc_get_im_module_path (void);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gchar* gtk_rc_get_im_module_file (void);
# 270 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
typedef enum {
  GTK_RC_TOKEN_INVALID = G_TOKEN_LAST,
  GTK_RC_TOKEN_INCLUDE,
  GTK_RC_TOKEN_NORMAL,
  GTK_RC_TOKEN_ACTIVE,
  GTK_RC_TOKEN_PRELIGHT,
  GTK_RC_TOKEN_SELECTED,
  GTK_RC_TOKEN_INSENSITIVE,
  GTK_RC_TOKEN_FG,
  GTK_RC_TOKEN_BG,
  GTK_RC_TOKEN_TEXT,
  GTK_RC_TOKEN_BASE,
  GTK_RC_TOKEN_XTHICKNESS,
  GTK_RC_TOKEN_YTHICKNESS,
  GTK_RC_TOKEN_FONT,
  GTK_RC_TOKEN_FONTSET,
  GTK_RC_TOKEN_FONT_NAME,
  GTK_RC_TOKEN_BG_PIXMAP,
  GTK_RC_TOKEN_PIXMAP_PATH,
  GTK_RC_TOKEN_STYLE,
  GTK_RC_TOKEN_BINDING,
  GTK_RC_TOKEN_BIND,
  GTK_RC_TOKEN_WIDGET,
  GTK_RC_TOKEN_WIDGET_CLASS,
  GTK_RC_TOKEN_CLASS,
  GTK_RC_TOKEN_LOWEST,
  GTK_RC_TOKEN_GTK,
  GTK_RC_TOKEN_APPLICATION,
  GTK_RC_TOKEN_THEME,
  GTK_RC_TOKEN_RC,
  GTK_RC_TOKEN_HIGHEST,
  GTK_RC_TOKEN_ENGINE,
  GTK_RC_TOKEN_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_FILE,
  GTK_RC_TOKEN_STOCK,
  GTK_RC_TOKEN_LTR,
  GTK_RC_TOKEN_RTL,
  GTK_RC_TOKEN_COLOR,
  GTK_RC_TOKEN_UNBIND,
  GTK_RC_TOKEN_LAST
} GtkRcTokenType;
# 328 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
typedef enum
{
  GTK_PATH_PRIO_LOWEST = 0,
  GTK_PATH_PRIO_GTK = 4,
  GTK_PATH_PRIO_APPLICATION = 8,
  GTK_PATH_PRIO_THEME = 10,
  GTK_PATH_PRIO_RC = 12,
  GTK_PATH_PRIO_HIGHEST = 15
} GtkPathPriorityType;
# 350 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
typedef enum
{
  GTK_PATH_WIDGET,
  GTK_PATH_WIDGET_CLASS,
  GTK_PATH_CLASS
} GtkPathType;

__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GScanner* gtk_rc_scanner_new (void);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
guint gtk_rc_parse_color (GScanner *scanner,
                                 GdkColor *color);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
guint gtk_rc_parse_color_full (GScanner *scanner,
                                   GtkRcStyle *style,
                                   GdkColor *color);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
guint gtk_rc_parse_state (GScanner *scanner,
                                 GtkStateType *state);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
guint gtk_rc_parse_priority (GScanner *scanner,
                                 GtkPathPriorityType *priority);
# 386 "/usr/include/gtk-3.0/gtk/deprecated/gtkrc.h"
struct _GtkRcProperty
{

  GQuark type_name;
  GQuark property_name;


  gchar *origin;
  GValue value;
};

__attribute__((__deprecated__)) extern
void gtk_binding_set_add_path (GtkBindingSet *binding_set,
                                    GtkPathType path_type,
                                    const gchar *path_pattern,
                                    GtkPathPriorityType priority);
# 274 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkrecentaction.h" 1
# 39 "/usr/include/gtk-3.0/gtk/deprecated/gtkrecentaction.h"
typedef struct _GtkRecentAction GtkRecentAction;
typedef struct _GtkRecentActionPrivate GtkRecentActionPrivate;
typedef struct _GtkRecentActionClass GtkRecentActionClass;

struct _GtkRecentAction
{
  GtkAction parent_instance;


  GtkRecentActionPrivate *priv;
};

struct _GtkRecentActionClass
{
  GtkActionClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

__attribute__((__deprecated__)) extern
GType gtk_recent_action_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkAction *gtk_recent_action_new (const gchar *name,
                                               const gchar *label,
                                               const gchar *tooltip,
                                               const gchar *stock_id);
__attribute__((__deprecated__)) extern
GtkAction *gtk_recent_action_new_for_manager (const gchar *name,
                                               const gchar *label,
                                               const gchar *tooltip,
                                               const gchar *stock_id,
                                               GtkRecentManager *manager);
__attribute__((__deprecated__)) extern
gboolean gtk_recent_action_get_show_numbers (GtkRecentAction *action);
__attribute__((__deprecated__)) extern
void gtk_recent_action_set_show_numbers (GtkRecentAction *action,
                                               gboolean show_numbers);
# 275 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkstatusicon.h" 1
# 41 "/usr/include/gtk-3.0/gtk/deprecated/gtkstatusicon.h"
typedef struct _GtkStatusIcon GtkStatusIcon;
typedef struct _GtkStatusIconClass GtkStatusIconClass;
typedef struct _GtkStatusIconPrivate GtkStatusIconPrivate;

struct _GtkStatusIcon
{
  GObject parent_instance;

  GtkStatusIconPrivate *priv;
};

struct _GtkStatusIconClass
{
  GObjectClass parent_class;

  void (* activate) (GtkStatusIcon *status_icon);
  void (* popup_menu) (GtkStatusIcon *status_icon,
                                     guint button,
                                     guint32 activate_time);
  gboolean (* size_changed) (GtkStatusIcon *status_icon,
                                     gint size);
  gboolean (* button_press_event) (GtkStatusIcon *status_icon,
                                     GdkEventButton *event);
  gboolean (* button_release_event) (GtkStatusIcon *status_icon,
                                     GdkEventButton *event);
  gboolean (* scroll_event) (GtkStatusIcon *status_icon,
                                     GdkEventScroll *event);
  gboolean (* query_tooltip) (GtkStatusIcon *status_icon,
                                     gint x,
                                     gint y,
                                     gboolean keyboard_mode,
                                     GtkTooltip *tooltip);

  void (*__gtk_reserved1) (void);
  void (*__gtk_reserved2) (void);
  void (*__gtk_reserved3) (void);
  void (*__gtk_reserved4) (void);
};

extern
GType gtk_status_icon_get_type (void) __attribute__ ((__const__));

__attribute__((__deprecated__)) extern
GtkStatusIcon *gtk_status_icon_new (void);
__attribute__((__deprecated__)) extern
GtkStatusIcon *gtk_status_icon_new_from_pixbuf (GdkPixbuf *pixbuf);
__attribute__((__deprecated__)) extern
GtkStatusIcon *gtk_status_icon_new_from_file (const gchar *filename);
__attribute__((__deprecated__("Use '" "gtk_status_icon_new_from_icon_name" "' instead"))) extern
GtkStatusIcon *gtk_status_icon_new_from_stock (const gchar *stock_id);
__attribute__((__deprecated__)) extern
GtkStatusIcon *gtk_status_icon_new_from_icon_name (const gchar *icon_name);
__attribute__((__deprecated__)) extern
GtkStatusIcon *gtk_status_icon_new_from_gicon (GIcon *icon);

__attribute__((__deprecated__)) extern
void gtk_status_icon_set_from_pixbuf (GtkStatusIcon *status_icon,
         GdkPixbuf *pixbuf);
__attribute__((__deprecated__)) extern
void gtk_status_icon_set_from_file (GtkStatusIcon *status_icon,
         const gchar *filename);
__attribute__((__deprecated__("Use '" "gtk_status_icon_set_from_icon_name" "' instead"))) extern
void gtk_status_icon_set_from_stock (GtkStatusIcon *status_icon,
         const gchar *stock_id);
__attribute__((__deprecated__)) extern
void gtk_status_icon_set_from_icon_name (GtkStatusIcon *status_icon,
         const gchar *icon_name);
__attribute__((__deprecated__)) extern
void gtk_status_icon_set_from_gicon (GtkStatusIcon *status_icon,
                                                          GIcon *icon);

__attribute__((__deprecated__)) extern
GtkImageType gtk_status_icon_get_storage_type (GtkStatusIcon *status_icon);

__attribute__((__deprecated__)) extern
GdkPixbuf *gtk_status_icon_get_pixbuf (GtkStatusIcon *status_icon);
__attribute__((__deprecated__("Use '" "gtk_status_icon_get_icon_name" "' instead"))) extern
const gchar * gtk_status_icon_get_stock (GtkStatusIcon *status_icon);
__attribute__((__deprecated__)) extern
const gchar * gtk_status_icon_get_icon_name (GtkStatusIcon *status_icon);
__attribute__((__deprecated__)) extern
GIcon *gtk_status_icon_get_gicon (GtkStatusIcon *status_icon);

__attribute__((__deprecated__)) extern
gint gtk_status_icon_get_size (GtkStatusIcon *status_icon);

__attribute__((__deprecated__)) extern
void gtk_status_icon_set_screen (GtkStatusIcon *status_icon,
                                                          GdkScreen *screen);
__attribute__((__deprecated__)) extern
GdkScreen *gtk_status_icon_get_screen (GtkStatusIcon *status_icon);

__attribute__((__deprecated__)) extern
void gtk_status_icon_set_has_tooltip (GtkStatusIcon *status_icon,
                                                          gboolean has_tooltip);
__attribute__((__deprecated__)) extern
void gtk_status_icon_set_tooltip_text (GtkStatusIcon *status_icon,
                                                          const gchar *text);
__attribute__((__deprecated__)) extern
void gtk_status_icon_set_tooltip_markup (GtkStatusIcon *status_icon,
                                                          const gchar *markup);
__attribute__((__deprecated__)) extern
void gtk_status_icon_set_title (GtkStatusIcon *status_icon,
                                                          const gchar *title);
__attribute__((__deprecated__)) extern
const gchar * gtk_status_icon_get_title (GtkStatusIcon *status_icon);
__attribute__((__deprecated__)) extern
void gtk_status_icon_set_name (GtkStatusIcon *status_icon,
                                                          const gchar *name);
__attribute__((__deprecated__)) extern
void gtk_status_icon_set_visible (GtkStatusIcon *status_icon,
         gboolean visible);
__attribute__((__deprecated__)) extern
gboolean gtk_status_icon_get_visible (GtkStatusIcon *status_icon);

__attribute__((__deprecated__)) extern
gboolean gtk_status_icon_is_embedded (GtkStatusIcon *status_icon);

__attribute__((__deprecated__)) extern
void gtk_status_icon_position_menu (GtkMenu *menu,
         gint *x,
         gint *y,
         gboolean *push_in,
         gpointer user_data);
__attribute__((__deprecated__)) extern
gboolean gtk_status_icon_get_geometry (GtkStatusIcon *status_icon,
         GdkScreen **screen,
         GdkRectangle *area,
         GtkOrientation *orientation);
__attribute__((__deprecated__)) extern
gboolean gtk_status_icon_get_has_tooltip (GtkStatusIcon *status_icon);
__attribute__((__deprecated__)) extern
gchar *gtk_status_icon_get_tooltip_text (GtkStatusIcon *status_icon);
__attribute__((__deprecated__)) extern
gchar *gtk_status_icon_get_tooltip_markup (GtkStatusIcon *status_icon);

__attribute__((__deprecated__)) extern
guint32 gtk_status_icon_get_x11_window_id (GtkStatusIcon *status_icon);
# 276 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkstyle.h" 1
# 50 "/usr/include/gtk-3.0/gtk/deprecated/gtkstyle.h"
typedef struct _GtkStyleClass GtkStyleClass;
typedef struct _GtkThemeEngine GtkThemeEngine;
typedef struct _GtkRcProperty GtkRcProperty;
# 63 "/usr/include/gtk-3.0/gtk/deprecated/gtkstyle.h"
typedef enum
{
  GTK_EXPANDER_COLLAPSED,
  GTK_EXPANDER_SEMI_COLLAPSED,
  GTK_EXPANDER_SEMI_EXPANDED,
  GTK_EXPANDER_EXPANDED
} GtkExpanderStyle;
# 96 "/usr/include/gtk-3.0/gtk/deprecated/gtkstyle.h"
struct _GtkStyle
{

  GObject parent_instance;



  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor light[5];
  GdkColor dark[5];
  GdkColor mid[5];
  GdkColor text[5];
  GdkColor base[5];
  GdkColor text_aa[5];

  GdkColor black;
  GdkColor white;
  PangoFontDescription *font_desc;

  gint xthickness;
  gint ythickness;

  cairo_pattern_t *background[5];



  gint attach_count;

  GdkVisual *visual;
  PangoFontDescription *private_font_desc;


  GtkRcStyle *rc_style;

  GSList *styles;
  GArray *property_cache;
  GSList *icon_factories;
};
# 167 "/usr/include/gtk-3.0/gtk/deprecated/gtkstyle.h"
struct _GtkStyleClass
{
  GObjectClass parent_class;







  void (*realize) (GtkStyle *style);




  void (*unrealize) (GtkStyle *style);



  void (*copy) (GtkStyle *style,
                                 GtkStyle *src);






  GtkStyle *(*clone) (GtkStyle *style);




  void (*init_from_rc) (GtkStyle *style,
                                 GtkRcStyle *rc_style);

  void (*set_background) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type);


  GdkPixbuf * (* render_icon) (GtkStyle *style,
                                 const GtkIconSource *source,
                                 GtkTextDirection direction,
                                 GtkStateType state,
                                 GtkIconSize size,
                                 GtkWidget *widget,
                                 const gchar *detail);




  void (*draw_hline) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x1,
                                 gint x2,
                                 gint y);
  void (*draw_vline) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint y1_,
                                 gint y2_,
                                 gint x);
  void (*draw_shadow) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_arrow) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 GtkArrowType arrow_type,
                                 gboolean fill,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_diamond) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_box) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_flat_box) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_check) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_option) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_tab) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_shadow_gap) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side,
                                 gint gap_x,
                                 gint gap_width);
  void (*draw_box_gap) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side,
                                 gint gap_x,
                                 gint gap_width);
  void (*draw_extension) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side);
  void (*draw_focus) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_slider) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkOrientation orientation);
  void (*draw_handle) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkOrientation orientation);

  void (*draw_expander) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 GtkExpanderStyle expander_style);
  void (*draw_layout) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 gboolean use_text,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 PangoLayout *layout);
  void (*draw_resize_grip) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 GdkWindowEdge edge,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_spinner) (GtkStyle *style,
                                 cairo_t *cr,
                                 GtkStateType state_type,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 guint step,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
  void (*_gtk_reserved9) (void);
  void (*_gtk_reserved10) (void);
  void (*_gtk_reserved11) (void);
};

__attribute__((__deprecated__)) extern
GType gtk_style_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GtkStyle* gtk_style_new (void);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GtkStyle* gtk_style_copy (GtkStyle *style);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GtkStyle* gtk_style_attach (GtkStyle *style,
                                              GdkWindow *window);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_style_detach (GtkStyle *style);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_style_set_background (GtkStyle *style,
                                              GdkWindow *window,
                                              GtkStateType state_type);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_background" "' instead"))) extern
void gtk_style_apply_default_background (GtkStyle *style,
                                              cairo_t *cr,
                                              GdkWindow *window,
                                              GtkStateType state_type,
                                              gint x,
                                              gint y,
                                              gint width,
                                              gint height);

__attribute__((__deprecated__("Use '" "GtkStyleContext and a style class" "' instead"))) extern
GtkIconSet* gtk_style_lookup_icon_set (GtkStyle *style,
                                              const gchar *stock_id);
__attribute__((__deprecated__("Use '" "GtkStyleContext and a style class" "' instead"))) extern
gboolean gtk_style_lookup_color (GtkStyle *style,
                                              const gchar *color_name,
                                              GdkColor *color);

__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_icon" "' instead"))) extern
GdkPixbuf* gtk_style_render_icon (GtkStyle *style,
                                       const GtkIconSource *source,
                                       GtkTextDirection direction,
                                       GtkStateType state,
                                       GtkIconSize size,
                                       GtkWidget *widget,
                                       const gchar *detail);

__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_line" "' instead"))) extern
void gtk_paint_hline (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x1,
                                  gint x2,
                                  gint y);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_line" "' instead"))) extern
void gtk_paint_vline (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint y1_,
                                  gint y2_,
                                  gint x);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_background" "' instead"))) extern
void gtk_paint_shadow (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_arrow" "' instead"))) extern
void gtk_paint_arrow (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  GtkArrowType arrow_type,
                                  gboolean fill,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_icon" "' instead"))) extern
void gtk_paint_diamond (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_frame" "' instead"))) extern
void gtk_paint_box (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_background" "' instead"))) extern
void gtk_paint_flat_box (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_check" "' instead"))) extern
void gtk_paint_check (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_option" "' instead"))) extern
void gtk_paint_option (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_background" "' instead"))) extern
void gtk_paint_tab (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_paint_shadow_gap (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkPositionType gap_side,
                                  gint gap_x,
                                  gint gap_width);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_paint_box_gap (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkPositionType gap_side,
                                  gint gap_x,
                                  gint gap_width);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_extension" "' instead"))) extern
void gtk_paint_extension (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkPositionType gap_side);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_focus" "' instead"))) extern
void gtk_paint_focus (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_focus" "' instead"))) extern
void gtk_paint_slider (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkOrientation orientation);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_handle" "' instead"))) extern
void gtk_paint_handle (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkShadowType shadow_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height,
                                  GtkOrientation orientation);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_expander" "' instead"))) extern
void gtk_paint_expander (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  GtkExpanderStyle expander_style);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_layout" "' instead"))) extern
void gtk_paint_layout (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  gboolean use_text,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  gint x,
                                  gint y,
                                  PangoLayout *layout);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_handle" "' instead"))) extern
void gtk_paint_resize_grip (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  GdkWindowEdge edge,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_render_icon" "' instead"))) extern
void gtk_paint_spinner (GtkStyle *style,
                                  cairo_t *cr,
                                  GtkStateType state_type,
                                  GtkWidget *widget,
                                  const gchar *detail,
                                  guint step,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);

__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_style_context_get_property" "' instead"))) extern
void gtk_style_get_style_property (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *property_name,
                                   GValue *value);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_style_context_get_property" "' instead"))) extern
void gtk_style_get_valist (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *first_property_name,
                                   va_list var_args);
__attribute__((__deprecated__("Use '" "GtkStyleContext and gtk_style_context_get_property" "' instead"))) extern
void gtk_style_get (GtkStyle *style,
                                   GType widget_type,
                                   const gchar *first_property_name,
                                   ...) __attribute__((__sentinel__));



GtkStyle* _gtk_style_new_for_path (GdkScreen *screen,
                                           GtkWidgetPath *path);
void _gtk_style_shade (const GdkColor *a,
                                           GdkColor *b,
                                           gdouble k);

__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gboolean gtk_style_has_context (GtkStyle *style);

__attribute__((__deprecated__)) extern
void gtk_widget_style_attach (GtkWidget *widget);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
gboolean gtk_widget_has_rc_style (GtkWidget *widget);
__attribute__((__deprecated__)) extern
void gtk_widget_set_style (GtkWidget *widget,
                                           GtkStyle *style);
__attribute__((__deprecated__)) extern
void gtk_widget_ensure_style (GtkWidget *widget);
__attribute__((__deprecated__("Use '" "gtk_widget_get_style_context" "' instead"))) extern
GtkStyle * gtk_widget_get_style (GtkWidget *widget);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
void gtk_widget_modify_style (GtkWidget *widget,
                                           GtkRcStyle *style);
__attribute__((__deprecated__("Use '" "GtkStyleContext" "' instead"))) extern
GtkRcStyle *gtk_widget_get_modifier_style (GtkWidget *widget);
__attribute__((__deprecated__("Use '" "gtk_widget_override_color" "' instead"))) extern
void gtk_widget_modify_fg (GtkWidget *widget,
                                           GtkStateType state,
                                           const GdkColor *color);
__attribute__((__deprecated__("Use '" "gtk_widget_override_background_color" "' instead"))) extern
void gtk_widget_modify_bg (GtkWidget *widget,
                                           GtkStateType state,
                                           const GdkColor *color);
__attribute__((__deprecated__("Use '" "CSS style classes" "' instead"))) extern
void gtk_widget_modify_text (GtkWidget *widget,
                                           GtkStateType state,
                                           const GdkColor *color);
__attribute__((__deprecated__("Use '" "CSS style classes" "' instead"))) extern
void gtk_widget_modify_base (GtkWidget *widget,
                                           GtkStateType state,
                                           const GdkColor *color);
__attribute__((__deprecated__("Use '" "CSS style classes" "' instead"))) extern
void gtk_widget_modify_cursor (GtkWidget *widget,
                                           const GdkColor *primary,
                                           const GdkColor *secondary);
__attribute__((__deprecated__("Use '" "gtk_widget_override_font" "' instead"))) extern
void gtk_widget_modify_font (GtkWidget *widget,
                                           PangoFontDescription *font_desc);
__attribute__((__deprecated__("Use '" "gtk_widget_reset_style" "' instead"))) extern
void gtk_widget_reset_rc_styles (GtkWidget *widget);
__attribute__((__deprecated__("Use '" "gtk_style_context_new" "' instead"))) extern
GtkStyle* gtk_widget_get_default_style (void);
__attribute__((__deprecated__("Use '" "gtk_widget_get_path" "' instead"))) extern
void gtk_widget_path (GtkWidget *widget,
                                           guint *path_length,
                                           gchar **path,
                                           gchar **path_reversed);
__attribute__((__deprecated__)) extern
void gtk_widget_class_path (GtkWidget *widget,
                                           guint *path_length,
                                           gchar **path,
                                           gchar **path_reversed);
__attribute__((__deprecated__("Use '" "gtk_widget_render_icon_pixbuf" "' instead"))) extern
GdkPixbuf *gtk_widget_render_icon (GtkWidget *widget,
                                           const gchar *stock_id,
                                           GtkIconSize size,
                                           const gchar *detail);
# 278 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtktable.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtktable.h"
typedef struct _GtkTable GtkTable;
typedef struct _GtkTablePrivate GtkTablePrivate;
typedef struct _GtkTableClass GtkTableClass;
typedef struct _GtkTableChild GtkTableChild;
typedef struct _GtkTableRowCol GtkTableRowCol;

struct _GtkTable
{
  GtkContainer container;


  GtkTablePrivate *priv;
};

struct _GtkTableClass
{
  GtkContainerClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkTableChild
{
  GtkWidget *widget;
  guint16 left_attach;
  guint16 right_attach;
  guint16 top_attach;
  guint16 bottom_attach;
  guint16 xpadding;
  guint16 ypadding;
  guint xexpand : 1;
  guint yexpand : 1;
  guint xshrink : 1;
  guint yshrink : 1;
  guint xfill : 1;
  guint yfill : 1;
};

struct _GtkTableRowCol
{
  guint16 requisition;
  guint16 allocation;
  guint16 spacing;
  guint need_expand : 1;
  guint need_shrink : 1;
  guint expand : 1;
  guint shrink : 1;
  guint empty : 1;
};
# 108 "/usr/include/gtk-3.0/gtk/deprecated/gtktable.h"
typedef enum
{
  GTK_EXPAND = 1 << 0,
  GTK_SHRINK = 1 << 1,
  GTK_FILL = 1 << 2
} GtkAttachOptions;


__attribute__((__deprecated__)) extern
GType gtk_table_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
GtkWidget* gtk_table_new (guint rows,
           guint columns,
           gboolean homogeneous);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_resize (GtkTable *table,
           guint rows,
           guint columns);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_attach (GtkTable *table,
           GtkWidget *child,
           guint left_attach,
           guint right_attach,
           guint top_attach,
           guint bottom_attach,
           GtkAttachOptions xoptions,
           GtkAttachOptions yoptions,
           guint xpadding,
           guint ypadding);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_attach_defaults (GtkTable *table,
           GtkWidget *widget,
           guint left_attach,
           guint right_attach,
           guint top_attach,
           guint bottom_attach);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_set_row_spacing (GtkTable *table,
           guint row,
           guint spacing);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
guint gtk_table_get_row_spacing (GtkTable *table,
           guint row);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_set_col_spacing (GtkTable *table,
           guint column,
           guint spacing);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
guint gtk_table_get_col_spacing (GtkTable *table,
           guint column);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_set_row_spacings (GtkTable *table,
           guint spacing);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
guint gtk_table_get_default_row_spacing (GtkTable *table);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_set_col_spacings (GtkTable *table,
           guint spacing);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
guint gtk_table_get_default_col_spacing (GtkTable *table);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_set_homogeneous (GtkTable *table,
           gboolean homogeneous);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
gboolean gtk_table_get_homogeneous (GtkTable *table);
__attribute__((__deprecated__("Use '" "GtkGrid" "' instead"))) extern
void gtk_table_get_size (GtkTable *table,
                                       guint *rows,
                                       guint *columns);
# 281 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtktearoffmenuitem.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtktearoffmenuitem.h"
typedef struct _GtkTearoffMenuItem GtkTearoffMenuItem;
typedef struct _GtkTearoffMenuItemPrivate GtkTearoffMenuItemPrivate;
typedef struct _GtkTearoffMenuItemClass GtkTearoffMenuItemClass;

struct _GtkTearoffMenuItem
{
  GtkMenuItem menu_item;


  GtkTearoffMenuItemPrivate *priv;
};





struct _GtkTearoffMenuItemClass
{
  GtkMenuItemClass parent_class;




  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


__attribute__((__deprecated__)) extern
GType gtk_tearoff_menu_item_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkWidget* gtk_tearoff_menu_item_new (void);
# 282 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkthemingengine.h" 1
# 42 "/usr/include/gtk-3.0/gtk/deprecated/gtkthemingengine.h"
typedef struct _GtkThemingEngine GtkThemingEngine;
typedef struct GtkThemingEnginePrivate GtkThemingEnginePrivate;
typedef struct _GtkThemingEngineClass GtkThemingEngineClass;

struct _GtkThemingEngine
{
  GObject parent_object;
  GtkThemingEnginePrivate *priv;
};
# 77 "/usr/include/gtk-3.0/gtk/deprecated/gtkthemingengine.h"
struct _GtkThemingEngineClass
{
  GObjectClass parent_class;



  void (* render_line) (GtkThemingEngine *engine,
                        cairo_t *cr,
                        gdouble x0,
                        gdouble y0,
                        gdouble x1,
                        gdouble y1);
  void (* render_background) (GtkThemingEngine *engine,
                              cairo_t *cr,
                              gdouble x,
                              gdouble y,
                              gdouble width,
                              gdouble height);
  void (* render_frame) (GtkThemingEngine *engine,
                         cairo_t *cr,
                         gdouble x,
                         gdouble y,
                         gdouble width,
                         gdouble height);
  void (* render_frame_gap) (GtkThemingEngine *engine,
                             cairo_t *cr,
                             gdouble x,
                             gdouble y,
                             gdouble width,
                             gdouble height,
                             GtkPositionType gap_side,
                             gdouble xy0_gap,
                             gdouble xy1_gap);
  void (* render_extension) (GtkThemingEngine *engine,
                             cairo_t *cr,
                             gdouble x,
                             gdouble y,
                             gdouble width,
                             gdouble height,
                             GtkPositionType gap_side);
  void (* render_check) (GtkThemingEngine *engine,
                         cairo_t *cr,
                         gdouble x,
                         gdouble y,
                         gdouble width,
                         gdouble height);
  void (* render_option) (GtkThemingEngine *engine,
                          cairo_t *cr,
                          gdouble x,
                          gdouble y,
                          gdouble width,
                          gdouble height);
  void (* render_arrow) (GtkThemingEngine *engine,
                         cairo_t *cr,
                         gdouble angle,
                         gdouble x,
                         gdouble y,
                         gdouble size);
  void (* render_expander) (GtkThemingEngine *engine,
                            cairo_t *cr,
                            gdouble x,
                            gdouble y,
                            gdouble width,
                            gdouble height);
  void (* render_focus) (GtkThemingEngine *engine,
                         cairo_t *cr,
                         gdouble x,
                         gdouble y,
                         gdouble width,
                         gdouble height);
  void (* render_layout) (GtkThemingEngine *engine,
                          cairo_t *cr,
                          gdouble x,
                          gdouble y,
                          PangoLayout *layout);
  void (* render_slider) (GtkThemingEngine *engine,
                          cairo_t *cr,
                          gdouble x,
                          gdouble y,
                          gdouble width,
                          gdouble height,
                          GtkOrientation orientation);
  void (* render_handle) (GtkThemingEngine *engine,
                             cairo_t *cr,
                             gdouble x,
                             gdouble y,
                             gdouble width,
                             gdouble height);
  void (* render_activity) (GtkThemingEngine *engine,
                            cairo_t *cr,
                            gdouble x,
                            gdouble y,
                            gdouble width,
                            gdouble height);

  GdkPixbuf * (* render_icon_pixbuf) (GtkThemingEngine *engine,
                                      const GtkIconSource *source,
                                      GtkIconSize size);
  void (* render_icon) (GtkThemingEngine *engine,
                        cairo_t *cr,
   GdkPixbuf *pixbuf,
                        gdouble x,
                        gdouble y);
  void (* render_icon_surface) (GtkThemingEngine *engine,
    cairo_t *cr,
    cairo_surface_t *surface,
    gdouble x,
    gdouble y);


  gpointer padding[14];
};

__attribute__((__deprecated__)) extern
GType gtk_theming_engine_get_type (void) __attribute__ ((__const__));


__attribute__((__deprecated__)) extern
void gtk_theming_engine_register_property (const gchar *name_space,
                                           GtkStylePropertyParser parse_func,
                                           GParamSpec *pspec);

__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_property (GtkThemingEngine *engine,
                                      const gchar *property,
                                      GtkStateFlags state,
                                      GValue *value);
__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_valist (GtkThemingEngine *engine,
                                      GtkStateFlags state,
                                      va_list args);
__attribute__((__deprecated__)) extern
void gtk_theming_engine_get (GtkThemingEngine *engine,
                                      GtkStateFlags state,
                                      ...) __attribute__((__sentinel__));

__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_style_property (GtkThemingEngine *engine,
                                            const gchar *property_name,
                                            GValue *value);
__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_style_valist (GtkThemingEngine *engine,
                                            va_list args);
__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_style (GtkThemingEngine *engine,
                                            ...);

__attribute__((__deprecated__)) extern
gboolean gtk_theming_engine_lookup_color (GtkThemingEngine *engine,
                                          const gchar *color_name,
                                          GdkRGBA *color);

__attribute__((__deprecated__)) extern
const GtkWidgetPath * gtk_theming_engine_get_path (GtkThemingEngine *engine);

__attribute__((__deprecated__)) extern
gboolean gtk_theming_engine_has_class (GtkThemingEngine *engine,
                                        const gchar *style_class);
__attribute__((__deprecated__)) extern
gboolean gtk_theming_engine_has_region (GtkThemingEngine *engine,
                                        const gchar *style_region,
                                        GtkRegionFlags *flags);

__attribute__((__deprecated__)) extern
GtkStateFlags gtk_theming_engine_get_state (GtkThemingEngine *engine);
__attribute__((__deprecated__)) extern
gboolean gtk_theming_engine_state_is_running (GtkThemingEngine *engine,
                                                   GtkStateType state,
                                                   gdouble *progress);

__attribute__((__deprecated__("Use '" "gtk_theming_engine_get_state" "' instead"))) extern
GtkTextDirection gtk_theming_engine_get_direction (GtkThemingEngine *engine);

__attribute__((__deprecated__)) extern
GtkJunctionSides gtk_theming_engine_get_junction_sides (GtkThemingEngine *engine);


__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_color (GtkThemingEngine *engine,
                                              GtkStateFlags state,
                                              GdkRGBA *color);
__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_background_color (GtkThemingEngine *engine,
                                              GtkStateFlags state,
                                              GdkRGBA *color);
__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_border_color (GtkThemingEngine *engine,
                                              GtkStateFlags state,
                                              GdkRGBA *color);

__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_border (GtkThemingEngine *engine,
                                     GtkStateFlags state,
                                     GtkBorder *border);
__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_padding (GtkThemingEngine *engine,
                                     GtkStateFlags state,
                                     GtkBorder *padding);
__attribute__((__deprecated__)) extern
void gtk_theming_engine_get_margin (GtkThemingEngine *engine,
                                     GtkStateFlags state,
                                     GtkBorder *margin);

__attribute__((__deprecated__("Use '" "gtk_theming_engine_get" "' instead"))) extern
const PangoFontDescription * gtk_theming_engine_get_font (GtkThemingEngine *engine,
                                                          GtkStateFlags state);

__attribute__((__deprecated__)) extern
GtkThemingEngine * gtk_theming_engine_load (const gchar *name);

__attribute__((__deprecated__)) extern
GdkScreen * gtk_theming_engine_get_screen (GtkThemingEngine *engine);
# 283 "/usr/include/gtk-3.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkuimanager.h" 1
# 50 "/usr/include/gtk-3.0/gtk/deprecated/gtkuimanager.h"
typedef struct _GtkUIManager GtkUIManager;
typedef struct _GtkUIManagerClass GtkUIManagerClass;
typedef struct _GtkUIManagerPrivate GtkUIManagerPrivate;


struct _GtkUIManager {
  GObject parent;


  GtkUIManagerPrivate *private_data;
};

struct _GtkUIManagerClass {
  GObjectClass parent_class;


  void (* add_widget) (GtkUIManager *manager,
                             GtkWidget *widget);
  void (* actions_changed) (GtkUIManager *manager);
  void (* connect_proxy) (GtkUIManager *manager,
        GtkAction *action,
        GtkWidget *proxy);
  void (* disconnect_proxy) (GtkUIManager *manager,
        GtkAction *action,
        GtkWidget *proxy);
  void (* pre_activate) (GtkUIManager *manager,
        GtkAction *action);
  void (* post_activate) (GtkUIManager *manager,
        GtkAction *action);


  GtkWidget * (* get_widget) (GtkUIManager *manager,
                              const gchar *path);
  GtkAction * (* get_action) (GtkUIManager *manager,
                              const gchar *path);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 113 "/usr/include/gtk-3.0/gtk/deprecated/gtkuimanager.h"
typedef enum {
  GTK_UI_MANAGER_AUTO = 0,
  GTK_UI_MANAGER_MENUBAR = 1 << 0,
  GTK_UI_MANAGER_MENU = 1 << 1,
  GTK_UI_MANAGER_TOOLBAR = 1 << 2,
  GTK_UI_MANAGER_PLACEHOLDER = 1 << 3,
  GTK_UI_MANAGER_POPUP = 1 << 4,
  GTK_UI_MANAGER_MENUITEM = 1 << 5,
  GTK_UI_MANAGER_TOOLITEM = 1 << 6,
  GTK_UI_MANAGER_SEPARATOR = 1 << 7,
  GTK_UI_MANAGER_ACCELERATOR = 1 << 8,
  GTK_UI_MANAGER_POPUP_WITH_ACCELS = 1 << 9
} GtkUIManagerItemType;

__attribute__((__deprecated__)) extern
GType gtk_ui_manager_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__)) extern
GtkUIManager *gtk_ui_manager_new (void);
__attribute__((__deprecated__)) extern
void gtk_ui_manager_set_add_tearoffs (GtkUIManager *manager,
                                                   gboolean add_tearoffs);
__attribute__((__deprecated__)) extern
gboolean gtk_ui_manager_get_add_tearoffs (GtkUIManager *manager);

__attribute__((__deprecated__)) extern
void gtk_ui_manager_insert_action_group (GtkUIManager *manager,
         GtkActionGroup *action_group,
         gint pos);
__attribute__((__deprecated__)) extern
void gtk_ui_manager_remove_action_group (GtkUIManager *manager,
         GtkActionGroup *action_group);
__attribute__((__deprecated__)) extern
GList *gtk_ui_manager_get_action_groups (GtkUIManager *manager);
__attribute__((__deprecated__)) extern
GtkAccelGroup *gtk_ui_manager_get_accel_group (GtkUIManager *manager);
__attribute__((__deprecated__)) extern
GtkWidget *gtk_ui_manager_get_widget (GtkUIManager *manager,
         const gchar *path);
__attribute__((__deprecated__)) extern
GSList *gtk_ui_manager_get_toplevels (GtkUIManager *manager,
         GtkUIManagerItemType types);
__attribute__((__deprecated__)) extern
GtkAction *gtk_ui_manager_get_action (GtkUIManager *manager,
         const gchar *path);
__attribute__((__deprecated__)) extern
guint gtk_ui_manager_add_ui_from_string (GtkUIManager *manager,
         const gchar *buffer,
         gssize length,
         GError **error);
__attribute__((__deprecated__)) extern
guint gtk_ui_manager_add_ui_from_file (GtkUIManager *manager,
         const gchar *filename,
         GError **error);
__attribute__((__deprecated__)) extern
guint gtk_ui_manager_add_ui_from_resource(GtkUIManager *manager,
         const gchar *resource_path,
         GError **error);
__attribute__((__deprecated__)) extern
void gtk_ui_manager_add_ui (GtkUIManager *manager,
         guint merge_id,
         const gchar *path,
         const gchar *name,
         const gchar *action,
         GtkUIManagerItemType type,
         gboolean top);
__attribute__((__deprecated__)) extern
void gtk_ui_manager_remove_ui (GtkUIManager *manager,
         guint merge_id);
__attribute__((__deprecated__)) extern
gchar *gtk_ui_manager_get_ui (GtkUIManager *manager);
__attribute__((__deprecated__)) extern
void gtk_ui_manager_ensure_update (GtkUIManager *manager);
__attribute__((__deprecated__)) extern
guint gtk_ui_manager_new_merge_id (GtkUIManager *manager);
# 285 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkvbbox.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkvbbox.h"
typedef struct _GtkVButtonBox GtkVButtonBox;
typedef struct _GtkVButtonBoxClass GtkVButtonBoxClass;

struct _GtkVButtonBox
{
  GtkButtonBox button_box;
};

struct _GtkVButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_vbutton_box_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_button_box_new" "' instead"))) extern
GtkWidget *gtk_vbutton_box_new (void);
# 286 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkvbox.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkvbox.h"
typedef struct _GtkVBox GtkVBox;
typedef struct _GtkVBoxClass GtkVBoxClass;

struct _GtkVBox
{
  GtkBox box;
};

struct _GtkVBoxClass
{
  GtkBoxClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_vbox_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_box_new" "' instead"))) extern
GtkWidget * gtk_vbox_new (gboolean homogeneous,
                               gint spacing);
# 287 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkvpaned.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkvpaned.h"
typedef struct _GtkVPaned GtkVPaned;
typedef struct _GtkVPanedClass GtkVPanedClass;

struct _GtkVPaned
{
  GtkPaned paned;
};

struct _GtkVPanedClass
{
  GtkPanedClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_vpaned_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_paned_new" "' instead"))) extern
GtkWidget * gtk_vpaned_new (void);
# 288 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkvscale.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkvscale.h"
typedef struct _GtkVScale GtkVScale;
typedef struct _GtkVScaleClass GtkVScaleClass;







struct _GtkVScale
{
  GtkScale scale;
};

struct _GtkVScaleClass
{
  GtkScaleClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_vscale_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_scale_new" "' instead"))) extern
GtkWidget* gtk_vscale_new (GtkAdjustment *adjustment);
__attribute__((__deprecated__("Use '" "gtk_scale_new_with_range" "' instead"))) extern
GtkWidget* gtk_vscale_new_with_range (gdouble min,
                                      gdouble max,
                                      gdouble step);
# 289 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkvscrollbar.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkvscrollbar.h"
typedef struct _GtkVScrollbar GtkVScrollbar;
typedef struct _GtkVScrollbarClass GtkVScrollbarClass;







struct _GtkVScrollbar
{
  GtkScrollbar scrollbar;
};

struct _GtkVScrollbarClass
{
  GtkScrollbarClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_vscrollbar_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_scrollbar_new" "' instead"))) extern
GtkWidget* gtk_vscrollbar_new (GtkAdjustment *adjustment);
# 290 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-3.0/gtk/deprecated/gtkvseparator.h" 1
# 44 "/usr/include/gtk-3.0/gtk/deprecated/gtkvseparator.h"
typedef struct _GtkVSeparator GtkVSeparator;
typedef struct _GtkVSeparatorClass GtkVSeparatorClass;







struct _GtkVSeparator
{
  GtkSeparator separator;
};

struct _GtkVSeparatorClass
{
  GtkSeparatorClass parent_class;
};


__attribute__((__deprecated__)) extern
GType gtk_vseparator_get_type (void) __attribute__ ((__const__));
__attribute__((__deprecated__("Use '" "gtk_separator_new" "' instead"))) extern
GtkWidget* gtk_vseparator_new (void);
# 291 "/usr/include/gtk-3.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h" 1
# 24 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
typedef GtkAccessible *GtkAccessible_autoptr; typedef GList *GtkAccessible_listautoptr; typedef GSList *GtkAccessible_slistautoptr; typedef GQueue *GtkAccessible_queueautoptr;
# 24 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 24 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 24 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAccessible (GtkAccessible *_ptr) { if (_ptr) (g_object_unref) ((GtkAccessible *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAccessible (GtkAccessible **_ptr) { glib_autoptr_clear_GtkAccessible (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAccessible (void *_ptr) { (g_object_unref) ((GtkAccessible *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAccessible (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAccessible); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAccessible (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAccessible); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAccessible (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAccessible); }
# 24 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkActionBar *GtkActionBar_autoptr; typedef GList *GtkActionBar_listautoptr; typedef GSList *GtkActionBar_slistautoptr; typedef GQueue *GtkActionBar_queueautoptr;
# 25 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 25 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 25 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkActionBar (GtkActionBar *_ptr) { if (_ptr) (g_object_unref) ((GtkActionBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkActionBar (GtkActionBar **_ptr) { glib_autoptr_clear_GtkActionBar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkActionBar (void *_ptr) { (g_object_unref) ((GtkActionBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkActionBar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkActionBar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkActionBar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkActionBar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkActionBar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkActionBar); }
# 25 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkActionable *GtkActionable_autoptr; typedef GList *GtkActionable_listautoptr; typedef GSList *GtkActionable_slistautoptr; typedef GQueue *GtkActionable_queueautoptr;
# 26 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 26 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 26 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkActionable (GtkActionable *_ptr) { if (_ptr) (g_object_unref) ((GtkActionable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkActionable (GtkActionable **_ptr) { glib_autoptr_clear_GtkActionable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkActionable (void *_ptr) { (g_object_unref) ((GtkActionable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkActionable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkActionable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkActionable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkActionable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkActionable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkActionable); }
# 26 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkAdjustment *GtkAdjustment_autoptr; typedef GList *GtkAdjustment_listautoptr; typedef GSList *GtkAdjustment_slistautoptr; typedef GQueue *GtkAdjustment_queueautoptr;
# 27 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 27 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 27 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAdjustment (GtkAdjustment *_ptr) { if (_ptr) (g_object_unref) ((GtkAdjustment *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAdjustment (GtkAdjustment **_ptr) { glib_autoptr_clear_GtkAdjustment (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAdjustment (void *_ptr) { (g_object_unref) ((GtkAdjustment *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAdjustment (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAdjustment); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAdjustment (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAdjustment); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAdjustment (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAdjustment); }
# 27 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkAppChooser *GtkAppChooser_autoptr; typedef GList *GtkAppChooser_listautoptr; typedef GSList *GtkAppChooser_slistautoptr; typedef GQueue *GtkAppChooser_queueautoptr;
# 28 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 28 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 28 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAppChooser (GtkAppChooser *_ptr) { if (_ptr) (g_object_unref) ((GtkAppChooser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAppChooser (GtkAppChooser **_ptr) { glib_autoptr_clear_GtkAppChooser (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAppChooser (void *_ptr) { (g_object_unref) ((GtkAppChooser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAppChooser (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAppChooser); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAppChooser (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAppChooser); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAppChooser (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAppChooser); }
# 28 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkAppChooserButton *GtkAppChooserButton_autoptr; typedef GList *GtkAppChooserButton_listautoptr; typedef GSList *GtkAppChooserButton_slistautoptr; typedef GQueue *GtkAppChooserButton_queueautoptr;
# 29 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 29 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 29 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAppChooserButton (GtkAppChooserButton *_ptr) { if (_ptr) (g_object_unref) ((GtkAppChooserButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAppChooserButton (GtkAppChooserButton **_ptr) { glib_autoptr_clear_GtkAppChooserButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAppChooserButton (void *_ptr) { (g_object_unref) ((GtkAppChooserButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAppChooserButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAppChooserButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAppChooserButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAppChooserButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAppChooserButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAppChooserButton); }
# 29 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkAppChooserDialog *GtkAppChooserDialog_autoptr; typedef GList *GtkAppChooserDialog_listautoptr; typedef GSList *GtkAppChooserDialog_slistautoptr; typedef GQueue *GtkAppChooserDialog_queueautoptr;
# 30 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 30 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 30 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAppChooserDialog (GtkAppChooserDialog *_ptr) { if (_ptr) (g_object_unref) ((GtkAppChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAppChooserDialog (GtkAppChooserDialog **_ptr) { glib_autoptr_clear_GtkAppChooserDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAppChooserDialog (void *_ptr) { (g_object_unref) ((GtkAppChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAppChooserDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAppChooserDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAppChooserDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAppChooserDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAppChooserDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAppChooserDialog); }
# 30 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkAppChooserWidget *GtkAppChooserWidget_autoptr; typedef GList *GtkAppChooserWidget_listautoptr; typedef GSList *GtkAppChooserWidget_slistautoptr; typedef GQueue *GtkAppChooserWidget_queueautoptr;
# 31 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 31 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 31 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAppChooserWidget (GtkAppChooserWidget *_ptr) { if (_ptr) (g_object_unref) ((GtkAppChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAppChooserWidget (GtkAppChooserWidget **_ptr) { glib_autoptr_clear_GtkAppChooserWidget (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAppChooserWidget (void *_ptr) { (g_object_unref) ((GtkAppChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAppChooserWidget (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAppChooserWidget); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAppChooserWidget (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAppChooserWidget); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAppChooserWidget (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAppChooserWidget); }
# 31 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkApplicationWindow *GtkApplicationWindow_autoptr; typedef GList *GtkApplicationWindow_listautoptr; typedef GSList *GtkApplicationWindow_slistautoptr; typedef GQueue *GtkApplicationWindow_queueautoptr;
# 32 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 32 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 32 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkApplicationWindow (GtkApplicationWindow *_ptr) { if (_ptr) (g_object_unref) ((GtkApplicationWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkApplicationWindow (GtkApplicationWindow **_ptr) { glib_autoptr_clear_GtkApplicationWindow (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkApplicationWindow (void *_ptr) { (g_object_unref) ((GtkApplicationWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkApplicationWindow (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkApplicationWindow); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkApplicationWindow (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkApplicationWindow); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkApplicationWindow (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkApplicationWindow); }
# 32 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkAspectFrame *GtkAspectFrame_autoptr; typedef GList *GtkAspectFrame_listautoptr; typedef GSList *GtkAspectFrame_slistautoptr; typedef GQueue *GtkAspectFrame_queueautoptr;
# 33 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 33 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 33 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAspectFrame (GtkAspectFrame *_ptr) { if (_ptr) (g_object_unref) ((GtkAspectFrame *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAspectFrame (GtkAspectFrame **_ptr) { glib_autoptr_clear_GtkAspectFrame (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAspectFrame (void *_ptr) { (g_object_unref) ((GtkAspectFrame *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAspectFrame (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAspectFrame); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAspectFrame (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAspectFrame); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAspectFrame (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAspectFrame); }
# 33 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkAssistant *GtkAssistant_autoptr; typedef GList *GtkAssistant_listautoptr; typedef GSList *GtkAssistant_slistautoptr; typedef GQueue *GtkAssistant_queueautoptr;
# 34 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 34 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 34 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkAssistant (GtkAssistant *_ptr) { if (_ptr) (g_object_unref) ((GtkAssistant *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkAssistant (GtkAssistant **_ptr) { glib_autoptr_clear_GtkAssistant (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkAssistant (void *_ptr) { (g_object_unref) ((GtkAssistant *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkAssistant (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkAssistant); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkAssistant (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkAssistant); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkAssistant (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkAssistant); }
# 34 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkBox *GtkBox_autoptr; typedef GList *GtkBox_listautoptr; typedef GSList *GtkBox_slistautoptr; typedef GQueue *GtkBox_queueautoptr;
# 35 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 35 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 35 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkBox (GtkBox *_ptr) { if (_ptr) (g_object_unref) ((GtkBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkBox (GtkBox **_ptr) { glib_autoptr_clear_GtkBox (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkBox (void *_ptr) { (g_object_unref) ((GtkBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkBox (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkBox); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkBox (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkBox); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkBox (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkBox); }
# 35 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkBuildable *GtkBuildable_autoptr; typedef GList *GtkBuildable_listautoptr; typedef GSList *GtkBuildable_slistautoptr; typedef GQueue *GtkBuildable_queueautoptr;
# 36 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 36 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 36 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkBuildable (GtkBuildable *_ptr) { if (_ptr) (g_object_unref) ((GtkBuildable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkBuildable (GtkBuildable **_ptr) { glib_autoptr_clear_GtkBuildable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkBuildable (void *_ptr) { (g_object_unref) ((GtkBuildable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkBuildable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkBuildable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkBuildable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkBuildable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkBuildable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkBuildable); }
# 36 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkBuilder *GtkBuilder_autoptr; typedef GList *GtkBuilder_listautoptr; typedef GSList *GtkBuilder_slistautoptr; typedef GQueue *GtkBuilder_queueautoptr;
# 37 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 37 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 37 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkBuilder (GtkBuilder *_ptr) { if (_ptr) (g_object_unref) ((GtkBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkBuilder (GtkBuilder **_ptr) { glib_autoptr_clear_GtkBuilder (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkBuilder (void *_ptr) { (g_object_unref) ((GtkBuilder *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkBuilder (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkBuilder); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkBuilder (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkBuilder); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkBuilder (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkBuilder); }
# 37 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkButton *GtkButton_autoptr; typedef GList *GtkButton_listautoptr; typedef GSList *GtkButton_slistautoptr; typedef GQueue *GtkButton_queueautoptr;
# 38 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 38 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 38 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkButton (GtkButton *_ptr) { if (_ptr) (g_object_unref) ((GtkButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkButton (GtkButton **_ptr) { glib_autoptr_clear_GtkButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkButton (void *_ptr) { (g_object_unref) ((GtkButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkButton); }
# 38 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkButtonBox *GtkButtonBox_autoptr; typedef GList *GtkButtonBox_listautoptr; typedef GSList *GtkButtonBox_slistautoptr; typedef GQueue *GtkButtonBox_queueautoptr;
# 39 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 39 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 39 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkButtonBox (GtkButtonBox *_ptr) { if (_ptr) (g_object_unref) ((GtkButtonBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkButtonBox (GtkButtonBox **_ptr) { glib_autoptr_clear_GtkButtonBox (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkButtonBox (void *_ptr) { (g_object_unref) ((GtkButtonBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkButtonBox (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkButtonBox); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkButtonBox (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkButtonBox); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkButtonBox (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkButtonBox); }
# 39 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCalendar *GtkCalendar_autoptr; typedef GList *GtkCalendar_listautoptr; typedef GSList *GtkCalendar_slistautoptr; typedef GQueue *GtkCalendar_queueautoptr;
# 40 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 40 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 40 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCalendar (GtkCalendar *_ptr) { if (_ptr) (g_object_unref) ((GtkCalendar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCalendar (GtkCalendar **_ptr) { glib_autoptr_clear_GtkCalendar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCalendar (void *_ptr) { (g_object_unref) ((GtkCalendar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCalendar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCalendar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCalendar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCalendar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCalendar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCalendar); }
# 40 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellArea *GtkCellArea_autoptr; typedef GList *GtkCellArea_listautoptr; typedef GSList *GtkCellArea_slistautoptr; typedef GQueue *GtkCellArea_queueautoptr;
# 41 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 41 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 41 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellArea (GtkCellArea *_ptr) { if (_ptr) (g_object_unref) ((GtkCellArea *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellArea (GtkCellArea **_ptr) { glib_autoptr_clear_GtkCellArea (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellArea (void *_ptr) { (g_object_unref) ((GtkCellArea *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellArea (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellArea); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellArea (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellArea); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellArea (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellArea); }
# 41 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellAreaBox *GtkCellAreaBox_autoptr; typedef GList *GtkCellAreaBox_listautoptr; typedef GSList *GtkCellAreaBox_slistautoptr; typedef GQueue *GtkCellAreaBox_queueautoptr;
# 42 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 42 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 42 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellAreaBox (GtkCellAreaBox *_ptr) { if (_ptr) (g_object_unref) ((GtkCellAreaBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellAreaBox (GtkCellAreaBox **_ptr) { glib_autoptr_clear_GtkCellAreaBox (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellAreaBox (void *_ptr) { (g_object_unref) ((GtkCellAreaBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellAreaBox (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellAreaBox); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellAreaBox (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellAreaBox); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellAreaBox (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellAreaBox); }
# 42 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellAreaContext *GtkCellAreaContext_autoptr; typedef GList *GtkCellAreaContext_listautoptr; typedef GSList *GtkCellAreaContext_slistautoptr; typedef GQueue *GtkCellAreaContext_queueautoptr;
# 43 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 43 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 43 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellAreaContext (GtkCellAreaContext *_ptr) { if (_ptr) (g_object_unref) ((GtkCellAreaContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellAreaContext (GtkCellAreaContext **_ptr) { glib_autoptr_clear_GtkCellAreaContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellAreaContext (void *_ptr) { (g_object_unref) ((GtkCellAreaContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellAreaContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellAreaContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellAreaContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellAreaContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellAreaContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellAreaContext); }
# 43 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellEditable *GtkCellEditable_autoptr; typedef GList *GtkCellEditable_listautoptr; typedef GSList *GtkCellEditable_slistautoptr; typedef GQueue *GtkCellEditable_queueautoptr;
# 44 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 44 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 44 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellEditable (GtkCellEditable *_ptr) { if (_ptr) (g_object_unref) ((GtkCellEditable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellEditable (GtkCellEditable **_ptr) { glib_autoptr_clear_GtkCellEditable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellEditable (void *_ptr) { (g_object_unref) ((GtkCellEditable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellEditable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellEditable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellEditable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellEditable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellEditable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellEditable); }
# 44 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellLayout *GtkCellLayout_autoptr; typedef GList *GtkCellLayout_listautoptr; typedef GSList *GtkCellLayout_slistautoptr; typedef GQueue *GtkCellLayout_queueautoptr;
# 45 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 45 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 45 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellLayout (GtkCellLayout *_ptr) { if (_ptr) (g_object_unref) ((GtkCellLayout *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellLayout (GtkCellLayout **_ptr) { glib_autoptr_clear_GtkCellLayout (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellLayout (void *_ptr) { (g_object_unref) ((GtkCellLayout *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellLayout (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellLayout); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellLayout (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellLayout); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellLayout (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellLayout); }
# 45 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRenderer *GtkCellRenderer_autoptr; typedef GList *GtkCellRenderer_listautoptr; typedef GSList *GtkCellRenderer_slistautoptr; typedef GQueue *GtkCellRenderer_queueautoptr;
# 46 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 46 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 46 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRenderer (GtkCellRenderer *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRenderer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRenderer (GtkCellRenderer **_ptr) { glib_autoptr_clear_GtkCellRenderer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRenderer (void *_ptr) { (g_object_unref) ((GtkCellRenderer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRenderer (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRenderer); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRenderer (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRenderer); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRenderer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRenderer); }
# 46 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRendererAccel *GtkCellRendererAccel_autoptr; typedef GList *GtkCellRendererAccel_listautoptr; typedef GSList *GtkCellRendererAccel_slistautoptr; typedef GQueue *GtkCellRendererAccel_queueautoptr;
# 47 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 47 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 47 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRendererAccel (GtkCellRendererAccel *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRendererAccel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRendererAccel (GtkCellRendererAccel **_ptr) { glib_autoptr_clear_GtkCellRendererAccel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRendererAccel (void *_ptr) { (g_object_unref) ((GtkCellRendererAccel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRendererAccel (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRendererAccel); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRendererAccel (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRendererAccel); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRendererAccel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRendererAccel); }
# 47 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRendererCombo *GtkCellRendererCombo_autoptr; typedef GList *GtkCellRendererCombo_listautoptr; typedef GSList *GtkCellRendererCombo_slistautoptr; typedef GQueue *GtkCellRendererCombo_queueautoptr;
# 48 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 48 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 48 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRendererCombo (GtkCellRendererCombo *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRendererCombo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRendererCombo (GtkCellRendererCombo **_ptr) { glib_autoptr_clear_GtkCellRendererCombo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRendererCombo (void *_ptr) { (g_object_unref) ((GtkCellRendererCombo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRendererCombo (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRendererCombo); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRendererCombo (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRendererCombo); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRendererCombo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRendererCombo); }
# 48 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRendererPixbuf *GtkCellRendererPixbuf_autoptr; typedef GList *GtkCellRendererPixbuf_listautoptr; typedef GSList *GtkCellRendererPixbuf_slistautoptr; typedef GQueue *GtkCellRendererPixbuf_queueautoptr;
# 49 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 49 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 49 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRendererPixbuf (GtkCellRendererPixbuf *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRendererPixbuf *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRendererPixbuf (GtkCellRendererPixbuf **_ptr) { glib_autoptr_clear_GtkCellRendererPixbuf (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRendererPixbuf (void *_ptr) { (g_object_unref) ((GtkCellRendererPixbuf *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRendererPixbuf (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRendererPixbuf); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRendererPixbuf (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRendererPixbuf); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRendererPixbuf (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRendererPixbuf); }
# 49 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRendererProgress *GtkCellRendererProgress_autoptr; typedef GList *GtkCellRendererProgress_listautoptr; typedef GSList *GtkCellRendererProgress_slistautoptr; typedef GQueue *GtkCellRendererProgress_queueautoptr;
# 50 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 50 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 50 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRendererProgress (GtkCellRendererProgress *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRendererProgress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRendererProgress (GtkCellRendererProgress **_ptr) { glib_autoptr_clear_GtkCellRendererProgress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRendererProgress (void *_ptr) { (g_object_unref) ((GtkCellRendererProgress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRendererProgress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRendererProgress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRendererProgress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRendererProgress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRendererProgress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRendererProgress); }
# 50 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRendererSpin *GtkCellRendererSpin_autoptr; typedef GList *GtkCellRendererSpin_listautoptr; typedef GSList *GtkCellRendererSpin_slistautoptr; typedef GQueue *GtkCellRendererSpin_queueautoptr;
# 51 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 51 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 51 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRendererSpin (GtkCellRendererSpin *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRendererSpin *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRendererSpin (GtkCellRendererSpin **_ptr) { glib_autoptr_clear_GtkCellRendererSpin (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRendererSpin (void *_ptr) { (g_object_unref) ((GtkCellRendererSpin *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRendererSpin (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRendererSpin); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRendererSpin (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRendererSpin); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRendererSpin (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRendererSpin); }
# 51 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRendererSpinner *GtkCellRendererSpinner_autoptr; typedef GList *GtkCellRendererSpinner_listautoptr; typedef GSList *GtkCellRendererSpinner_slistautoptr; typedef GQueue *GtkCellRendererSpinner_queueautoptr;
# 52 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 52 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 52 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRendererSpinner (GtkCellRendererSpinner *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRendererSpinner *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRendererSpinner (GtkCellRendererSpinner **_ptr) { glib_autoptr_clear_GtkCellRendererSpinner (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRendererSpinner (void *_ptr) { (g_object_unref) ((GtkCellRendererSpinner *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRendererSpinner (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRendererSpinner); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRendererSpinner (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRendererSpinner); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRendererSpinner (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRendererSpinner); }
# 52 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRendererText *GtkCellRendererText_autoptr; typedef GList *GtkCellRendererText_listautoptr; typedef GSList *GtkCellRendererText_slistautoptr; typedef GQueue *GtkCellRendererText_queueautoptr;
# 53 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 53 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 53 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRendererText (GtkCellRendererText *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRendererText *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRendererText (GtkCellRendererText **_ptr) { glib_autoptr_clear_GtkCellRendererText (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRendererText (void *_ptr) { (g_object_unref) ((GtkCellRendererText *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRendererText (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRendererText); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRendererText (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRendererText); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRendererText (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRendererText); }
# 53 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellRendererToggle *GtkCellRendererToggle_autoptr; typedef GList *GtkCellRendererToggle_listautoptr; typedef GSList *GtkCellRendererToggle_slistautoptr; typedef GQueue *GtkCellRendererToggle_queueautoptr;
# 54 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 54 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 54 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellRendererToggle (GtkCellRendererToggle *_ptr) { if (_ptr) (g_object_unref) ((GtkCellRendererToggle *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellRendererToggle (GtkCellRendererToggle **_ptr) { glib_autoptr_clear_GtkCellRendererToggle (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellRendererToggle (void *_ptr) { (g_object_unref) ((GtkCellRendererToggle *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellRendererToggle (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellRendererToggle); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellRendererToggle (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellRendererToggle); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellRendererToggle (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellRendererToggle); }
# 54 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCellView *GtkCellView_autoptr; typedef GList *GtkCellView_listautoptr; typedef GSList *GtkCellView_slistautoptr; typedef GQueue *GtkCellView_queueautoptr;
# 55 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 55 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 55 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCellView (GtkCellView *_ptr) { if (_ptr) (g_object_unref) ((GtkCellView *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCellView (GtkCellView **_ptr) { glib_autoptr_clear_GtkCellView (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCellView (void *_ptr) { (g_object_unref) ((GtkCellView *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCellView (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCellView); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCellView (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCellView); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCellView (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCellView); }
# 55 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCheckButton *GtkCheckButton_autoptr; typedef GList *GtkCheckButton_listautoptr; typedef GSList *GtkCheckButton_slistautoptr; typedef GQueue *GtkCheckButton_queueautoptr;
# 56 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 56 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 56 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCheckButton (GtkCheckButton *_ptr) { if (_ptr) (g_object_unref) ((GtkCheckButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCheckButton (GtkCheckButton **_ptr) { glib_autoptr_clear_GtkCheckButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCheckButton (void *_ptr) { (g_object_unref) ((GtkCheckButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCheckButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCheckButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCheckButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCheckButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCheckButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCheckButton); }
# 56 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCheckMenuItem *GtkCheckMenuItem_autoptr; typedef GList *GtkCheckMenuItem_listautoptr; typedef GSList *GtkCheckMenuItem_slistautoptr; typedef GQueue *GtkCheckMenuItem_queueautoptr;
# 57 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 57 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 57 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCheckMenuItem (GtkCheckMenuItem *_ptr) { if (_ptr) (g_object_unref) ((GtkCheckMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCheckMenuItem (GtkCheckMenuItem **_ptr) { glib_autoptr_clear_GtkCheckMenuItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCheckMenuItem (void *_ptr) { (g_object_unref) ((GtkCheckMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCheckMenuItem (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCheckMenuItem); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCheckMenuItem (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCheckMenuItem); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCheckMenuItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCheckMenuItem); }
# 57 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkClipboard *GtkClipboard_autoptr; typedef GList *GtkClipboard_listautoptr; typedef GSList *GtkClipboard_slistautoptr; typedef GQueue *GtkClipboard_queueautoptr;
# 58 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 58 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 58 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkClipboard (GtkClipboard *_ptr) { if (_ptr) (g_object_unref) ((GtkClipboard *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkClipboard (GtkClipboard **_ptr) { glib_autoptr_clear_GtkClipboard (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkClipboard (void *_ptr) { (g_object_unref) ((GtkClipboard *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkClipboard (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkClipboard); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkClipboard (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkClipboard); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkClipboard (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkClipboard); }
# 58 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkColorButton *GtkColorButton_autoptr; typedef GList *GtkColorButton_listautoptr; typedef GSList *GtkColorButton_slistautoptr; typedef GQueue *GtkColorButton_queueautoptr;
# 59 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 59 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 59 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkColorButton (GtkColorButton *_ptr) { if (_ptr) (g_object_unref) ((GtkColorButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkColorButton (GtkColorButton **_ptr) { glib_autoptr_clear_GtkColorButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkColorButton (void *_ptr) { (g_object_unref) ((GtkColorButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkColorButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkColorButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkColorButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkColorButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkColorButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkColorButton); }
# 59 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkColorChooser *GtkColorChooser_autoptr; typedef GList *GtkColorChooser_listautoptr; typedef GSList *GtkColorChooser_slistautoptr; typedef GQueue *GtkColorChooser_queueautoptr;
# 60 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 60 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 60 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkColorChooser (GtkColorChooser *_ptr) { if (_ptr) (g_object_unref) ((GtkColorChooser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkColorChooser (GtkColorChooser **_ptr) { glib_autoptr_clear_GtkColorChooser (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkColorChooser (void *_ptr) { (g_object_unref) ((GtkColorChooser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkColorChooser (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkColorChooser); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkColorChooser (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkColorChooser); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkColorChooser (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkColorChooser); }
# 60 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkColorChooserDialog *GtkColorChooserDialog_autoptr; typedef GList *GtkColorChooserDialog_listautoptr; typedef GSList *GtkColorChooserDialog_slistautoptr; typedef GQueue *GtkColorChooserDialog_queueautoptr;
# 61 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 61 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 61 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkColorChooserDialog (GtkColorChooserDialog *_ptr) { if (_ptr) (g_object_unref) ((GtkColorChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkColorChooserDialog (GtkColorChooserDialog **_ptr) { glib_autoptr_clear_GtkColorChooserDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkColorChooserDialog (void *_ptr) { (g_object_unref) ((GtkColorChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkColorChooserDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkColorChooserDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkColorChooserDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkColorChooserDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkColorChooserDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkColorChooserDialog); }
# 61 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkColorChooserWidget *GtkColorChooserWidget_autoptr; typedef GList *GtkColorChooserWidget_listautoptr; typedef GSList *GtkColorChooserWidget_slistautoptr; typedef GQueue *GtkColorChooserWidget_queueautoptr;
# 62 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 62 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 62 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkColorChooserWidget (GtkColorChooserWidget *_ptr) { if (_ptr) (g_object_unref) ((GtkColorChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkColorChooserWidget (GtkColorChooserWidget **_ptr) { glib_autoptr_clear_GtkColorChooserWidget (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkColorChooserWidget (void *_ptr) { (g_object_unref) ((GtkColorChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkColorChooserWidget (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkColorChooserWidget); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkColorChooserWidget (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkColorChooserWidget); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkColorChooserWidget (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkColorChooserWidget); }
# 62 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkComboBox *GtkComboBox_autoptr; typedef GList *GtkComboBox_listautoptr; typedef GSList *GtkComboBox_slistautoptr; typedef GQueue *GtkComboBox_queueautoptr;
# 63 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 63 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 63 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkComboBox (GtkComboBox *_ptr) { if (_ptr) (g_object_unref) ((GtkComboBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkComboBox (GtkComboBox **_ptr) { glib_autoptr_clear_GtkComboBox (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkComboBox (void *_ptr) { (g_object_unref) ((GtkComboBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkComboBox (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkComboBox); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkComboBox (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkComboBox); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkComboBox (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkComboBox); }
# 63 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkComboBoxText *GtkComboBoxText_autoptr; typedef GList *GtkComboBoxText_listautoptr; typedef GSList *GtkComboBoxText_slistautoptr; typedef GQueue *GtkComboBoxText_queueautoptr;
# 64 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 64 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 64 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkComboBoxText (GtkComboBoxText *_ptr) { if (_ptr) (g_object_unref) ((GtkComboBoxText *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkComboBoxText (GtkComboBoxText **_ptr) { glib_autoptr_clear_GtkComboBoxText (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkComboBoxText (void *_ptr) { (g_object_unref) ((GtkComboBoxText *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkComboBoxText (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkComboBoxText); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkComboBoxText (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkComboBoxText); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkComboBoxText (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkComboBoxText); }
# 64 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkCssProvider *GtkCssProvider_autoptr; typedef GList *GtkCssProvider_listautoptr; typedef GSList *GtkCssProvider_slistautoptr; typedef GQueue *GtkCssProvider_queueautoptr;
# 65 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 65 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 65 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkCssProvider (GtkCssProvider *_ptr) { if (_ptr) (g_object_unref) ((GtkCssProvider *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkCssProvider (GtkCssProvider **_ptr) { glib_autoptr_clear_GtkCssProvider (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkCssProvider (void *_ptr) { (g_object_unref) ((GtkCssProvider *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkCssProvider (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkCssProvider); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkCssProvider (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkCssProvider); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkCssProvider (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkCssProvider); }
# 65 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkDrawingArea *GtkDrawingArea_autoptr; typedef GList *GtkDrawingArea_listautoptr; typedef GSList *GtkDrawingArea_slistautoptr; typedef GQueue *GtkDrawingArea_queueautoptr;
# 66 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 66 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 66 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkDrawingArea (GtkDrawingArea *_ptr) { if (_ptr) (g_object_unref) ((GtkDrawingArea *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkDrawingArea (GtkDrawingArea **_ptr) { glib_autoptr_clear_GtkDrawingArea (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkDrawingArea (void *_ptr) { (g_object_unref) ((GtkDrawingArea *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkDrawingArea (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkDrawingArea); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkDrawingArea (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkDrawingArea); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkDrawingArea (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkDrawingArea); }
# 66 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkEditable *GtkEditable_autoptr; typedef GList *GtkEditable_listautoptr; typedef GSList *GtkEditable_slistautoptr; typedef GQueue *GtkEditable_queueautoptr;
# 67 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 67 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 67 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkEditable (GtkEditable *_ptr) { if (_ptr) (g_object_unref) ((GtkEditable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkEditable (GtkEditable **_ptr) { glib_autoptr_clear_GtkEditable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkEditable (void *_ptr) { (g_object_unref) ((GtkEditable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkEditable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkEditable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkEditable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkEditable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkEditable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkEditable); }
# 67 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkEntry *GtkEntry_autoptr; typedef GList *GtkEntry_listautoptr; typedef GSList *GtkEntry_slistautoptr; typedef GQueue *GtkEntry_queueautoptr;
# 68 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 68 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 68 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkEntry (GtkEntry *_ptr) { if (_ptr) (g_object_unref) ((GtkEntry *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkEntry (GtkEntry **_ptr) { glib_autoptr_clear_GtkEntry (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkEntry (void *_ptr) { (g_object_unref) ((GtkEntry *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkEntry (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkEntry); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkEntry (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkEntry); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkEntry (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkEntry); }
# 68 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkEntryBuffer *GtkEntryBuffer_autoptr; typedef GList *GtkEntryBuffer_listautoptr; typedef GSList *GtkEntryBuffer_slistautoptr; typedef GQueue *GtkEntryBuffer_queueautoptr;
# 69 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 69 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 69 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkEntryBuffer (GtkEntryBuffer *_ptr) { if (_ptr) (g_object_unref) ((GtkEntryBuffer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkEntryBuffer (GtkEntryBuffer **_ptr) { glib_autoptr_clear_GtkEntryBuffer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkEntryBuffer (void *_ptr) { (g_object_unref) ((GtkEntryBuffer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkEntryBuffer (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkEntryBuffer); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkEntryBuffer (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkEntryBuffer); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkEntryBuffer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkEntryBuffer); }
# 69 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkEntryCompletion *GtkEntryCompletion_autoptr; typedef GList *GtkEntryCompletion_listautoptr; typedef GSList *GtkEntryCompletion_slistautoptr; typedef GQueue *GtkEntryCompletion_queueautoptr;
# 70 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 70 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 70 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkEntryCompletion (GtkEntryCompletion *_ptr) { if (_ptr) (g_object_unref) ((GtkEntryCompletion *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkEntryCompletion (GtkEntryCompletion **_ptr) { glib_autoptr_clear_GtkEntryCompletion (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkEntryCompletion (void *_ptr) { (g_object_unref) ((GtkEntryCompletion *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkEntryCompletion (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkEntryCompletion); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkEntryCompletion (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkEntryCompletion); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkEntryCompletion (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkEntryCompletion); }
# 70 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkEventBox *GtkEventBox_autoptr; typedef GList *GtkEventBox_listautoptr; typedef GSList *GtkEventBox_slistautoptr; typedef GQueue *GtkEventBox_queueautoptr;
# 71 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 71 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 71 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkEventBox (GtkEventBox *_ptr) { if (_ptr) (g_object_unref) ((GtkEventBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkEventBox (GtkEventBox **_ptr) { glib_autoptr_clear_GtkEventBox (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkEventBox (void *_ptr) { (g_object_unref) ((GtkEventBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkEventBox (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkEventBox); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkEventBox (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkEventBox); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkEventBox (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkEventBox); }
# 71 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkEventController *GtkEventController_autoptr; typedef GList *GtkEventController_listautoptr; typedef GSList *GtkEventController_slistautoptr; typedef GQueue *GtkEventController_queueautoptr;
# 72 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 72 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 72 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkEventController (GtkEventController *_ptr) { if (_ptr) (g_object_unref) ((GtkEventController *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkEventController (GtkEventController **_ptr) { glib_autoptr_clear_GtkEventController (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkEventController (void *_ptr) { (g_object_unref) ((GtkEventController *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkEventController (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkEventController); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkEventController (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkEventController); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkEventController (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkEventController); }
# 72 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkExpander *GtkExpander_autoptr; typedef GList *GtkExpander_listautoptr; typedef GSList *GtkExpander_slistautoptr; typedef GQueue *GtkExpander_queueautoptr;
# 73 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 73 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 73 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkExpander (GtkExpander *_ptr) { if (_ptr) (g_object_unref) ((GtkExpander *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkExpander (GtkExpander **_ptr) { glib_autoptr_clear_GtkExpander (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkExpander (void *_ptr) { (g_object_unref) ((GtkExpander *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkExpander (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkExpander); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkExpander (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkExpander); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkExpander (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkExpander); }
# 73 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFileChooserButton *GtkFileChooserButton_autoptr; typedef GList *GtkFileChooserButton_listautoptr; typedef GSList *GtkFileChooserButton_slistautoptr; typedef GQueue *GtkFileChooserButton_queueautoptr;
# 74 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 74 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 74 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFileChooserButton (GtkFileChooserButton *_ptr) { if (_ptr) (g_object_unref) ((GtkFileChooserButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFileChooserButton (GtkFileChooserButton **_ptr) { glib_autoptr_clear_GtkFileChooserButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFileChooserButton (void *_ptr) { (g_object_unref) ((GtkFileChooserButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFileChooserButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFileChooserButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFileChooserButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFileChooserButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFileChooserButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFileChooserButton); }
# 74 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFileChooserDialog *GtkFileChooserDialog_autoptr; typedef GList *GtkFileChooserDialog_listautoptr; typedef GSList *GtkFileChooserDialog_slistautoptr; typedef GQueue *GtkFileChooserDialog_queueautoptr;
# 75 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 75 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 75 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFileChooserDialog (GtkFileChooserDialog *_ptr) { if (_ptr) (g_object_unref) ((GtkFileChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFileChooserDialog (GtkFileChooserDialog **_ptr) { glib_autoptr_clear_GtkFileChooserDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFileChooserDialog (void *_ptr) { (g_object_unref) ((GtkFileChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFileChooserDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFileChooserDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFileChooserDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFileChooserDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFileChooserDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFileChooserDialog); }
# 75 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFileChooserWidget *GtkFileChooserWidget_autoptr; typedef GList *GtkFileChooserWidget_listautoptr; typedef GSList *GtkFileChooserWidget_slistautoptr; typedef GQueue *GtkFileChooserWidget_queueautoptr;
# 76 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 76 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 76 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFileChooserWidget (GtkFileChooserWidget *_ptr) { if (_ptr) (g_object_unref) ((GtkFileChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFileChooserWidget (GtkFileChooserWidget **_ptr) { glib_autoptr_clear_GtkFileChooserWidget (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFileChooserWidget (void *_ptr) { (g_object_unref) ((GtkFileChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFileChooserWidget (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFileChooserWidget); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFileChooserWidget (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFileChooserWidget); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFileChooserWidget (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFileChooserWidget); }
# 76 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFileFilter *GtkFileFilter_autoptr; typedef GList *GtkFileFilter_listautoptr; typedef GSList *GtkFileFilter_slistautoptr; typedef GQueue *GtkFileFilter_queueautoptr;
# 77 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 77 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 77 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFileFilter (GtkFileFilter *_ptr) { if (_ptr) (g_object_unref) ((GtkFileFilter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFileFilter (GtkFileFilter **_ptr) { glib_autoptr_clear_GtkFileFilter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFileFilter (void *_ptr) { (g_object_unref) ((GtkFileFilter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFileFilter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFileFilter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFileFilter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFileFilter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFileFilter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFileFilter); }
# 77 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFixed *GtkFixed_autoptr; typedef GList *GtkFixed_listautoptr; typedef GSList *GtkFixed_slistautoptr; typedef GQueue *GtkFixed_queueautoptr;
# 78 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 78 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 78 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFixed (GtkFixed *_ptr) { if (_ptr) (g_object_unref) ((GtkFixed *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFixed (GtkFixed **_ptr) { glib_autoptr_clear_GtkFixed (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFixed (void *_ptr) { (g_object_unref) ((GtkFixed *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFixed (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFixed); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFixed (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFixed); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFixed (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFixed); }
# 78 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFlowBox *GtkFlowBox_autoptr; typedef GList *GtkFlowBox_listautoptr; typedef GSList *GtkFlowBox_slistautoptr; typedef GQueue *GtkFlowBox_queueautoptr;
# 79 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 79 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 79 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFlowBox (GtkFlowBox *_ptr) { if (_ptr) (g_object_unref) ((GtkFlowBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFlowBox (GtkFlowBox **_ptr) { glib_autoptr_clear_GtkFlowBox (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFlowBox (void *_ptr) { (g_object_unref) ((GtkFlowBox *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFlowBox (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFlowBox); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFlowBox (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFlowBox); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFlowBox (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFlowBox); }
# 79 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFlowBoxChild *GtkFlowBoxChild_autoptr; typedef GList *GtkFlowBoxChild_listautoptr; typedef GSList *GtkFlowBoxChild_slistautoptr; typedef GQueue *GtkFlowBoxChild_queueautoptr;
# 80 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 80 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 80 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFlowBoxChild (GtkFlowBoxChild *_ptr) { if (_ptr) (g_object_unref) ((GtkFlowBoxChild *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFlowBoxChild (GtkFlowBoxChild **_ptr) { glib_autoptr_clear_GtkFlowBoxChild (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFlowBoxChild (void *_ptr) { (g_object_unref) ((GtkFlowBoxChild *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFlowBoxChild (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFlowBoxChild); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFlowBoxChild (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFlowBoxChild); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFlowBoxChild (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFlowBoxChild); }
# 80 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFontButton *GtkFontButton_autoptr; typedef GList *GtkFontButton_listautoptr; typedef GSList *GtkFontButton_slistautoptr; typedef GQueue *GtkFontButton_queueautoptr;
# 81 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 81 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 81 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFontButton (GtkFontButton *_ptr) { if (_ptr) (g_object_unref) ((GtkFontButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFontButton (GtkFontButton **_ptr) { glib_autoptr_clear_GtkFontButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFontButton (void *_ptr) { (g_object_unref) ((GtkFontButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFontButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFontButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFontButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFontButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFontButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFontButton); }
# 81 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFontChooser *GtkFontChooser_autoptr; typedef GList *GtkFontChooser_listautoptr; typedef GSList *GtkFontChooser_slistautoptr; typedef GQueue *GtkFontChooser_queueautoptr;
# 82 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 82 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 82 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFontChooser (GtkFontChooser *_ptr) { if (_ptr) (g_object_unref) ((GtkFontChooser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFontChooser (GtkFontChooser **_ptr) { glib_autoptr_clear_GtkFontChooser (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFontChooser (void *_ptr) { (g_object_unref) ((GtkFontChooser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFontChooser (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFontChooser); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFontChooser (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFontChooser); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFontChooser (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFontChooser); }
# 82 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFontChooserDialog *GtkFontChooserDialog_autoptr; typedef GList *GtkFontChooserDialog_listautoptr; typedef GSList *GtkFontChooserDialog_slistautoptr; typedef GQueue *GtkFontChooserDialog_queueautoptr;
# 83 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 83 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 83 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFontChooserDialog (GtkFontChooserDialog *_ptr) { if (_ptr) (g_object_unref) ((GtkFontChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFontChooserDialog (GtkFontChooserDialog **_ptr) { glib_autoptr_clear_GtkFontChooserDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFontChooserDialog (void *_ptr) { (g_object_unref) ((GtkFontChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFontChooserDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFontChooserDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFontChooserDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFontChooserDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFontChooserDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFontChooserDialog); }
# 83 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFontChooserWidget *GtkFontChooserWidget_autoptr; typedef GList *GtkFontChooserWidget_listautoptr; typedef GSList *GtkFontChooserWidget_slistautoptr; typedef GQueue *GtkFontChooserWidget_queueautoptr;
# 84 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 84 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 84 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFontChooserWidget (GtkFontChooserWidget *_ptr) { if (_ptr) (g_object_unref) ((GtkFontChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFontChooserWidget (GtkFontChooserWidget **_ptr) { glib_autoptr_clear_GtkFontChooserWidget (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFontChooserWidget (void *_ptr) { (g_object_unref) ((GtkFontChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFontChooserWidget (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFontChooserWidget); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFontChooserWidget (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFontChooserWidget); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFontChooserWidget (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFontChooserWidget); }
# 84 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkFrame *GtkFrame_autoptr; typedef GList *GtkFrame_listautoptr; typedef GSList *GtkFrame_slistautoptr; typedef GQueue *GtkFrame_queueautoptr;
# 85 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 85 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 85 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkFrame (GtkFrame *_ptr) { if (_ptr) (g_object_unref) ((GtkFrame *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkFrame (GtkFrame **_ptr) { glib_autoptr_clear_GtkFrame (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkFrame (void *_ptr) { (g_object_unref) ((GtkFrame *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkFrame (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkFrame); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkFrame (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkFrame); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkFrame (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkFrame); }
# 85 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGLArea *GtkGLArea_autoptr; typedef GList *GtkGLArea_listautoptr; typedef GSList *GtkGLArea_slistautoptr; typedef GQueue *GtkGLArea_queueautoptr;
# 86 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 86 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 86 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGLArea (GtkGLArea *_ptr) { if (_ptr) (g_object_unref) ((GtkGLArea *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGLArea (GtkGLArea **_ptr) { glib_autoptr_clear_GtkGLArea (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGLArea (void *_ptr) { (g_object_unref) ((GtkGLArea *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGLArea (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGLArea); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGLArea (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGLArea); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGLArea (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGLArea); }
# 86 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGesture *GtkGesture_autoptr; typedef GList *GtkGesture_listautoptr; typedef GSList *GtkGesture_slistautoptr; typedef GQueue *GtkGesture_queueautoptr;
# 87 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 87 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 87 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGesture (GtkGesture *_ptr) { if (_ptr) (g_object_unref) ((GtkGesture *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGesture (GtkGesture **_ptr) { glib_autoptr_clear_GtkGesture (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGesture (void *_ptr) { (g_object_unref) ((GtkGesture *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGesture (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGesture); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGesture (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGesture); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGesture (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGesture); }
# 87 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGestureDrag *GtkGestureDrag_autoptr; typedef GList *GtkGestureDrag_listautoptr; typedef GSList *GtkGestureDrag_slistautoptr; typedef GQueue *GtkGestureDrag_queueautoptr;
# 88 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 88 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 88 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGestureDrag (GtkGestureDrag *_ptr) { if (_ptr) (g_object_unref) ((GtkGestureDrag *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGestureDrag (GtkGestureDrag **_ptr) { glib_autoptr_clear_GtkGestureDrag (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGestureDrag (void *_ptr) { (g_object_unref) ((GtkGestureDrag *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGestureDrag (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGestureDrag); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGestureDrag (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGestureDrag); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGestureDrag (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGestureDrag); }
# 88 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGestureLongPress *GtkGestureLongPress_autoptr; typedef GList *GtkGestureLongPress_listautoptr; typedef GSList *GtkGestureLongPress_slistautoptr; typedef GQueue *GtkGestureLongPress_queueautoptr;
# 89 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 89 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 89 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGestureLongPress (GtkGestureLongPress *_ptr) { if (_ptr) (g_object_unref) ((GtkGestureLongPress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGestureLongPress (GtkGestureLongPress **_ptr) { glib_autoptr_clear_GtkGestureLongPress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGestureLongPress (void *_ptr) { (g_object_unref) ((GtkGestureLongPress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGestureLongPress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGestureLongPress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGestureLongPress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGestureLongPress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGestureLongPress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGestureLongPress); }
# 89 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGestureMultiPress *GtkGestureMultiPress_autoptr; typedef GList *GtkGestureMultiPress_listautoptr; typedef GSList *GtkGestureMultiPress_slistautoptr; typedef GQueue *GtkGestureMultiPress_queueautoptr;
# 90 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 90 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 90 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGestureMultiPress (GtkGestureMultiPress *_ptr) { if (_ptr) (g_object_unref) ((GtkGestureMultiPress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGestureMultiPress (GtkGestureMultiPress **_ptr) { glib_autoptr_clear_GtkGestureMultiPress (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGestureMultiPress (void *_ptr) { (g_object_unref) ((GtkGestureMultiPress *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGestureMultiPress (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGestureMultiPress); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGestureMultiPress (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGestureMultiPress); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGestureMultiPress (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGestureMultiPress); }
# 90 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGesturePan *GtkGesturePan_autoptr; typedef GList *GtkGesturePan_listautoptr; typedef GSList *GtkGesturePan_slistautoptr; typedef GQueue *GtkGesturePan_queueautoptr;
# 91 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 91 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 91 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGesturePan (GtkGesturePan *_ptr) { if (_ptr) (g_object_unref) ((GtkGesturePan *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGesturePan (GtkGesturePan **_ptr) { glib_autoptr_clear_GtkGesturePan (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGesturePan (void *_ptr) { (g_object_unref) ((GtkGesturePan *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGesturePan (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGesturePan); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGesturePan (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGesturePan); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGesturePan (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGesturePan); }
# 91 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGestureRotate *GtkGestureRotate_autoptr; typedef GList *GtkGestureRotate_listautoptr; typedef GSList *GtkGestureRotate_slistautoptr; typedef GQueue *GtkGestureRotate_queueautoptr;
# 92 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 92 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 92 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGestureRotate (GtkGestureRotate *_ptr) { if (_ptr) (g_object_unref) ((GtkGestureRotate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGestureRotate (GtkGestureRotate **_ptr) { glib_autoptr_clear_GtkGestureRotate (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGestureRotate (void *_ptr) { (g_object_unref) ((GtkGestureRotate *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGestureRotate (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGestureRotate); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGestureRotate (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGestureRotate); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGestureRotate (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGestureRotate); }
# 92 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGestureSingle *GtkGestureSingle_autoptr; typedef GList *GtkGestureSingle_listautoptr; typedef GSList *GtkGestureSingle_slistautoptr; typedef GQueue *GtkGestureSingle_queueautoptr;
# 93 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 93 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 93 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGestureSingle (GtkGestureSingle *_ptr) { if (_ptr) (g_object_unref) ((GtkGestureSingle *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGestureSingle (GtkGestureSingle **_ptr) { glib_autoptr_clear_GtkGestureSingle (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGestureSingle (void *_ptr) { (g_object_unref) ((GtkGestureSingle *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGestureSingle (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGestureSingle); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGestureSingle (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGestureSingle); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGestureSingle (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGestureSingle); }
# 93 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGestureSwipe *GtkGestureSwipe_autoptr; typedef GList *GtkGestureSwipe_listautoptr; typedef GSList *GtkGestureSwipe_slistautoptr; typedef GQueue *GtkGestureSwipe_queueautoptr;
# 94 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 94 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 94 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGestureSwipe (GtkGestureSwipe *_ptr) { if (_ptr) (g_object_unref) ((GtkGestureSwipe *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGestureSwipe (GtkGestureSwipe **_ptr) { glib_autoptr_clear_GtkGestureSwipe (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGestureSwipe (void *_ptr) { (g_object_unref) ((GtkGestureSwipe *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGestureSwipe (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGestureSwipe); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGestureSwipe (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGestureSwipe); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGestureSwipe (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGestureSwipe); }
# 94 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGestureZoom *GtkGestureZoom_autoptr; typedef GList *GtkGestureZoom_listautoptr; typedef GSList *GtkGestureZoom_slistautoptr; typedef GQueue *GtkGestureZoom_queueautoptr;
# 95 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 95 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 95 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGestureZoom (GtkGestureZoom *_ptr) { if (_ptr) (g_object_unref) ((GtkGestureZoom *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGestureZoom (GtkGestureZoom **_ptr) { glib_autoptr_clear_GtkGestureZoom (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGestureZoom (void *_ptr) { (g_object_unref) ((GtkGestureZoom *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGestureZoom (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGestureZoom); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGestureZoom (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGestureZoom); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGestureZoom (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGestureZoom); }
# 95 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkGrid *GtkGrid_autoptr; typedef GList *GtkGrid_listautoptr; typedef GSList *GtkGrid_slistautoptr; typedef GQueue *GtkGrid_queueautoptr;
# 96 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 96 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 96 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkGrid (GtkGrid *_ptr) { if (_ptr) (g_object_unref) ((GtkGrid *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkGrid (GtkGrid **_ptr) { glib_autoptr_clear_GtkGrid (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkGrid (void *_ptr) { (g_object_unref) ((GtkGrid *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkGrid (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkGrid); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkGrid (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkGrid); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkGrid (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkGrid); }
# 96 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkHeaderBar *GtkHeaderBar_autoptr; typedef GList *GtkHeaderBar_listautoptr; typedef GSList *GtkHeaderBar_slistautoptr; typedef GQueue *GtkHeaderBar_queueautoptr;
# 97 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 97 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 97 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkHeaderBar (GtkHeaderBar *_ptr) { if (_ptr) (g_object_unref) ((GtkHeaderBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkHeaderBar (GtkHeaderBar **_ptr) { glib_autoptr_clear_GtkHeaderBar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkHeaderBar (void *_ptr) { (g_object_unref) ((GtkHeaderBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkHeaderBar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkHeaderBar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkHeaderBar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkHeaderBar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkHeaderBar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkHeaderBar); }
# 97 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkIMContext *GtkIMContext_autoptr; typedef GList *GtkIMContext_listautoptr; typedef GSList *GtkIMContext_slistautoptr; typedef GQueue *GtkIMContext_queueautoptr;
# 98 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 98 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 98 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkIMContext (GtkIMContext *_ptr) { if (_ptr) (g_object_unref) ((GtkIMContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkIMContext (GtkIMContext **_ptr) { glib_autoptr_clear_GtkIMContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkIMContext (void *_ptr) { (g_object_unref) ((GtkIMContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkIMContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkIMContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkIMContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkIMContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkIMContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkIMContext); }
# 98 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkIMContextSimple *GtkIMContextSimple_autoptr; typedef GList *GtkIMContextSimple_listautoptr; typedef GSList *GtkIMContextSimple_slistautoptr; typedef GQueue *GtkIMContextSimple_queueautoptr;
# 99 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 99 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 99 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkIMContextSimple (GtkIMContextSimple *_ptr) { if (_ptr) (g_object_unref) ((GtkIMContextSimple *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkIMContextSimple (GtkIMContextSimple **_ptr) { glib_autoptr_clear_GtkIMContextSimple (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkIMContextSimple (void *_ptr) { (g_object_unref) ((GtkIMContextSimple *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkIMContextSimple (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkIMContextSimple); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkIMContextSimple (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkIMContextSimple); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkIMContextSimple (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkIMContextSimple); }
# 99 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkIMMulticontext *GtkIMMulticontext_autoptr; typedef GList *GtkIMMulticontext_listautoptr; typedef GSList *GtkIMMulticontext_slistautoptr; typedef GQueue *GtkIMMulticontext_queueautoptr;
# 100 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 100 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 100 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkIMMulticontext (GtkIMMulticontext *_ptr) { if (_ptr) (g_object_unref) ((GtkIMMulticontext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkIMMulticontext (GtkIMMulticontext **_ptr) { glib_autoptr_clear_GtkIMMulticontext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkIMMulticontext (void *_ptr) { (g_object_unref) ((GtkIMMulticontext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkIMMulticontext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkIMMulticontext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkIMMulticontext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkIMMulticontext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkIMMulticontext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkIMMulticontext); }
# 100 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkIconInfo *GtkIconInfo_autoptr; typedef GList *GtkIconInfo_listautoptr; typedef GSList *GtkIconInfo_slistautoptr; typedef GQueue *GtkIconInfo_queueautoptr;
# 101 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 101 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 101 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkIconInfo (GtkIconInfo *_ptr) { if (_ptr) (g_object_unref) ((GtkIconInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkIconInfo (GtkIconInfo **_ptr) { glib_autoptr_clear_GtkIconInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkIconInfo (void *_ptr) { (g_object_unref) ((GtkIconInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkIconInfo (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkIconInfo); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkIconInfo (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkIconInfo); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkIconInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkIconInfo); }
# 101 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkIconTheme *GtkIconTheme_autoptr; typedef GList *GtkIconTheme_listautoptr; typedef GSList *GtkIconTheme_slistautoptr; typedef GQueue *GtkIconTheme_queueautoptr;
# 102 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 102 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 102 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkIconTheme (GtkIconTheme *_ptr) { if (_ptr) (g_object_unref) ((GtkIconTheme *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkIconTheme (GtkIconTheme **_ptr) { glib_autoptr_clear_GtkIconTheme (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkIconTheme (void *_ptr) { (g_object_unref) ((GtkIconTheme *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkIconTheme (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkIconTheme); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkIconTheme (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkIconTheme); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkIconTheme (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkIconTheme); }
# 102 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkIconView *GtkIconView_autoptr; typedef GList *GtkIconView_listautoptr; typedef GSList *GtkIconView_slistautoptr; typedef GQueue *GtkIconView_queueautoptr;
# 103 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 103 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 103 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkIconView (GtkIconView *_ptr) { if (_ptr) (g_object_unref) ((GtkIconView *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkIconView (GtkIconView **_ptr) { glib_autoptr_clear_GtkIconView (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkIconView (void *_ptr) { (g_object_unref) ((GtkIconView *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkIconView (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkIconView); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkIconView (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkIconView); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkIconView (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkIconView); }
# 103 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkImage *GtkImage_autoptr; typedef GList *GtkImage_listautoptr; typedef GSList *GtkImage_slistautoptr; typedef GQueue *GtkImage_queueautoptr;
# 104 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 104 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 104 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkImage (GtkImage *_ptr) { if (_ptr) (g_object_unref) ((GtkImage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkImage (GtkImage **_ptr) { glib_autoptr_clear_GtkImage (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkImage (void *_ptr) { (g_object_unref) ((GtkImage *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkImage (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkImage); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkImage (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkImage); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkImage (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkImage); }
# 104 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkInfoBar *GtkInfoBar_autoptr; typedef GList *GtkInfoBar_listautoptr; typedef GSList *GtkInfoBar_slistautoptr; typedef GQueue *GtkInfoBar_queueautoptr;
# 105 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 105 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 105 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkInfoBar (GtkInfoBar *_ptr) { if (_ptr) (g_object_unref) ((GtkInfoBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkInfoBar (GtkInfoBar **_ptr) { glib_autoptr_clear_GtkInfoBar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkInfoBar (void *_ptr) { (g_object_unref) ((GtkInfoBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkInfoBar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkInfoBar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkInfoBar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkInfoBar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkInfoBar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkInfoBar); }
# 105 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkInvisible *GtkInvisible_autoptr; typedef GList *GtkInvisible_listautoptr; typedef GSList *GtkInvisible_slistautoptr; typedef GQueue *GtkInvisible_queueautoptr;
# 106 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 106 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 106 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkInvisible (GtkInvisible *_ptr) { if (_ptr) (g_object_unref) ((GtkInvisible *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkInvisible (GtkInvisible **_ptr) { glib_autoptr_clear_GtkInvisible (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkInvisible (void *_ptr) { (g_object_unref) ((GtkInvisible *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkInvisible (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkInvisible); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkInvisible (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkInvisible); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkInvisible (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkInvisible); }
# 106 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkLayout *GtkLayout_autoptr; typedef GList *GtkLayout_listautoptr; typedef GSList *GtkLayout_slistautoptr; typedef GQueue *GtkLayout_queueautoptr;
# 107 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 107 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 107 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkLayout (GtkLayout *_ptr) { if (_ptr) (g_object_unref) ((GtkLayout *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkLayout (GtkLayout **_ptr) { glib_autoptr_clear_GtkLayout (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkLayout (void *_ptr) { (g_object_unref) ((GtkLayout *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkLayout (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkLayout); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkLayout (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkLayout); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkLayout (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkLayout); }
# 107 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkLevelBar *GtkLevelBar_autoptr; typedef GList *GtkLevelBar_listautoptr; typedef GSList *GtkLevelBar_slistautoptr; typedef GQueue *GtkLevelBar_queueautoptr;
# 108 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 108 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 108 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkLevelBar (GtkLevelBar *_ptr) { if (_ptr) (g_object_unref) ((GtkLevelBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkLevelBar (GtkLevelBar **_ptr) { glib_autoptr_clear_GtkLevelBar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkLevelBar (void *_ptr) { (g_object_unref) ((GtkLevelBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkLevelBar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkLevelBar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkLevelBar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkLevelBar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkLevelBar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkLevelBar); }
# 108 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkLinkButton *GtkLinkButton_autoptr; typedef GList *GtkLinkButton_listautoptr; typedef GSList *GtkLinkButton_slistautoptr; typedef GQueue *GtkLinkButton_queueautoptr;
# 109 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 109 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 109 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkLinkButton (GtkLinkButton *_ptr) { if (_ptr) (g_object_unref) ((GtkLinkButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkLinkButton (GtkLinkButton **_ptr) { glib_autoptr_clear_GtkLinkButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkLinkButton (void *_ptr) { (g_object_unref) ((GtkLinkButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkLinkButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkLinkButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkLinkButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkLinkButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkLinkButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkLinkButton); }
# 109 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkListStore *GtkListStore_autoptr; typedef GList *GtkListStore_listautoptr; typedef GSList *GtkListStore_slistautoptr; typedef GQueue *GtkListStore_queueautoptr;
# 110 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 110 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 110 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkListStore (GtkListStore *_ptr) { if (_ptr) (g_object_unref) ((GtkListStore *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkListStore (GtkListStore **_ptr) { glib_autoptr_clear_GtkListStore (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkListStore (void *_ptr) { (g_object_unref) ((GtkListStore *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkListStore (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkListStore); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkListStore (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkListStore); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkListStore (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkListStore); }
# 110 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkLockButton *GtkLockButton_autoptr; typedef GList *GtkLockButton_listautoptr; typedef GSList *GtkLockButton_slistautoptr; typedef GQueue *GtkLockButton_queueautoptr;
# 111 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 111 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 111 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkLockButton (GtkLockButton *_ptr) { if (_ptr) (g_object_unref) ((GtkLockButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkLockButton (GtkLockButton **_ptr) { glib_autoptr_clear_GtkLockButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkLockButton (void *_ptr) { (g_object_unref) ((GtkLockButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkLockButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkLockButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkLockButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkLockButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkLockButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkLockButton); }
# 111 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkMenuBar *GtkMenuBar_autoptr; typedef GList *GtkMenuBar_listautoptr; typedef GSList *GtkMenuBar_slistautoptr; typedef GQueue *GtkMenuBar_queueautoptr;
# 112 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 112 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 112 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkMenuBar (GtkMenuBar *_ptr) { if (_ptr) (g_object_unref) ((GtkMenuBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkMenuBar (GtkMenuBar **_ptr) { glib_autoptr_clear_GtkMenuBar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkMenuBar (void *_ptr) { (g_object_unref) ((GtkMenuBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkMenuBar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkMenuBar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkMenuBar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkMenuBar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkMenuBar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkMenuBar); }
# 112 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkMenuButton *GtkMenuButton_autoptr; typedef GList *GtkMenuButton_listautoptr; typedef GSList *GtkMenuButton_slistautoptr; typedef GQueue *GtkMenuButton_queueautoptr;
# 113 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 113 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 113 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkMenuButton (GtkMenuButton *_ptr) { if (_ptr) (g_object_unref) ((GtkMenuButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkMenuButton (GtkMenuButton **_ptr) { glib_autoptr_clear_GtkMenuButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkMenuButton (void *_ptr) { (g_object_unref) ((GtkMenuButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkMenuButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkMenuButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkMenuButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkMenuButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkMenuButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkMenuButton); }
# 113 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkMenuItem *GtkMenuItem_autoptr; typedef GList *GtkMenuItem_listautoptr; typedef GSList *GtkMenuItem_slistautoptr; typedef GQueue *GtkMenuItem_queueautoptr;
# 114 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 114 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 114 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkMenuItem (GtkMenuItem *_ptr) { if (_ptr) (g_object_unref) ((GtkMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkMenuItem (GtkMenuItem **_ptr) { glib_autoptr_clear_GtkMenuItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkMenuItem (void *_ptr) { (g_object_unref) ((GtkMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkMenuItem (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkMenuItem); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkMenuItem (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkMenuItem); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkMenuItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkMenuItem); }
# 114 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkMenuToolButton *GtkMenuToolButton_autoptr; typedef GList *GtkMenuToolButton_listautoptr; typedef GSList *GtkMenuToolButton_slistautoptr; typedef GQueue *GtkMenuToolButton_queueautoptr;
# 115 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 115 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 115 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkMenuToolButton (GtkMenuToolButton *_ptr) { if (_ptr) (g_object_unref) ((GtkMenuToolButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkMenuToolButton (GtkMenuToolButton **_ptr) { glib_autoptr_clear_GtkMenuToolButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkMenuToolButton (void *_ptr) { (g_object_unref) ((GtkMenuToolButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkMenuToolButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkMenuToolButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkMenuToolButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkMenuToolButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkMenuToolButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkMenuToolButton); }
# 115 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkMessageDialog *GtkMessageDialog_autoptr; typedef GList *GtkMessageDialog_listautoptr; typedef GSList *GtkMessageDialog_slistautoptr; typedef GQueue *GtkMessageDialog_queueautoptr;
# 116 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 116 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 116 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkMessageDialog (GtkMessageDialog *_ptr) { if (_ptr) (g_object_unref) ((GtkMessageDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkMessageDialog (GtkMessageDialog **_ptr) { glib_autoptr_clear_GtkMessageDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkMessageDialog (void *_ptr) { (g_object_unref) ((GtkMessageDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkMessageDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkMessageDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkMessageDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkMessageDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkMessageDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkMessageDialog); }
# 116 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkMountOperation *GtkMountOperation_autoptr; typedef GList *GtkMountOperation_listautoptr; typedef GSList *GtkMountOperation_slistautoptr; typedef GQueue *GtkMountOperation_queueautoptr;
# 117 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 117 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 117 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkMountOperation (GtkMountOperation *_ptr) { if (_ptr) (g_object_unref) ((GtkMountOperation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkMountOperation (GtkMountOperation **_ptr) { glib_autoptr_clear_GtkMountOperation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkMountOperation (void *_ptr) { (g_object_unref) ((GtkMountOperation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkMountOperation (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkMountOperation); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkMountOperation (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkMountOperation); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkMountOperation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkMountOperation); }
# 117 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkNotebook *GtkNotebook_autoptr; typedef GList *GtkNotebook_listautoptr; typedef GSList *GtkNotebook_slistautoptr; typedef GQueue *GtkNotebook_queueautoptr;
# 118 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 118 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 118 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkNotebook (GtkNotebook *_ptr) { if (_ptr) (g_object_unref) ((GtkNotebook *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkNotebook (GtkNotebook **_ptr) { glib_autoptr_clear_GtkNotebook (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkNotebook (void *_ptr) { (g_object_unref) ((GtkNotebook *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkNotebook (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkNotebook); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkNotebook (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkNotebook); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkNotebook (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkNotebook); }
# 118 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkOffscreenWindow *GtkOffscreenWindow_autoptr; typedef GList *GtkOffscreenWindow_listautoptr; typedef GSList *GtkOffscreenWindow_slistautoptr; typedef GQueue *GtkOffscreenWindow_queueautoptr;
# 119 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 119 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 119 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkOffscreenWindow (GtkOffscreenWindow *_ptr) { if (_ptr) (g_object_unref) ((GtkOffscreenWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkOffscreenWindow (GtkOffscreenWindow **_ptr) { glib_autoptr_clear_GtkOffscreenWindow (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkOffscreenWindow (void *_ptr) { (g_object_unref) ((GtkOffscreenWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkOffscreenWindow (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkOffscreenWindow); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkOffscreenWindow (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkOffscreenWindow); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkOffscreenWindow (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkOffscreenWindow); }
# 119 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkOrientable *GtkOrientable_autoptr; typedef GList *GtkOrientable_listautoptr; typedef GSList *GtkOrientable_slistautoptr; typedef GQueue *GtkOrientable_queueautoptr;
# 120 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 120 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 120 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkOrientable (GtkOrientable *_ptr) { if (_ptr) (g_object_unref) ((GtkOrientable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkOrientable (GtkOrientable **_ptr) { glib_autoptr_clear_GtkOrientable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkOrientable (void *_ptr) { (g_object_unref) ((GtkOrientable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkOrientable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkOrientable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkOrientable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkOrientable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkOrientable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkOrientable); }
# 120 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkOverlay *GtkOverlay_autoptr; typedef GList *GtkOverlay_listautoptr; typedef GSList *GtkOverlay_slistautoptr; typedef GQueue *GtkOverlay_queueautoptr;
# 121 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 121 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 121 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkOverlay (GtkOverlay *_ptr) { if (_ptr) (g_object_unref) ((GtkOverlay *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkOverlay (GtkOverlay **_ptr) { glib_autoptr_clear_GtkOverlay (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkOverlay (void *_ptr) { (g_object_unref) ((GtkOverlay *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkOverlay (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkOverlay); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkOverlay (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkOverlay); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkOverlay (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkOverlay); }
# 121 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPageSetup *GtkPageSetup_autoptr; typedef GList *GtkPageSetup_listautoptr; typedef GSList *GtkPageSetup_slistautoptr; typedef GQueue *GtkPageSetup_queueautoptr;
# 122 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 122 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 122 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPageSetup (GtkPageSetup *_ptr) { if (_ptr) (g_object_unref) ((GtkPageSetup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPageSetup (GtkPageSetup **_ptr) { glib_autoptr_clear_GtkPageSetup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPageSetup (void *_ptr) { (g_object_unref) ((GtkPageSetup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPageSetup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPageSetup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPageSetup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPageSetup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPageSetup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPageSetup); }
# 122 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPaned *GtkPaned_autoptr; typedef GList *GtkPaned_listautoptr; typedef GSList *GtkPaned_slistautoptr; typedef GQueue *GtkPaned_queueautoptr;
# 123 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 123 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 123 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPaned (GtkPaned *_ptr) { if (_ptr) (g_object_unref) ((GtkPaned *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPaned (GtkPaned **_ptr) { glib_autoptr_clear_GtkPaned (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPaned (void *_ptr) { (g_object_unref) ((GtkPaned *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPaned (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPaned); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPaned (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPaned); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPaned (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPaned); }
# 123 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPlacesSidebar *GtkPlacesSidebar_autoptr; typedef GList *GtkPlacesSidebar_listautoptr; typedef GSList *GtkPlacesSidebar_slistautoptr; typedef GQueue *GtkPlacesSidebar_queueautoptr;
# 124 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 124 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 124 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPlacesSidebar (GtkPlacesSidebar *_ptr) { if (_ptr) (g_object_unref) ((GtkPlacesSidebar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPlacesSidebar (GtkPlacesSidebar **_ptr) { glib_autoptr_clear_GtkPlacesSidebar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPlacesSidebar (void *_ptr) { (g_object_unref) ((GtkPlacesSidebar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPlacesSidebar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPlacesSidebar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPlacesSidebar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPlacesSidebar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPlacesSidebar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPlacesSidebar); }
# 124 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPopover *GtkPopover_autoptr; typedef GList *GtkPopover_listautoptr; typedef GSList *GtkPopover_slistautoptr; typedef GQueue *GtkPopover_queueautoptr;
# 125 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 125 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 125 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPopover (GtkPopover *_ptr) { if (_ptr) (g_object_unref) ((GtkPopover *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPopover (GtkPopover **_ptr) { glib_autoptr_clear_GtkPopover (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPopover (void *_ptr) { (g_object_unref) ((GtkPopover *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPopover (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPopover); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPopover (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPopover); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPopover (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPopover); }
# 125 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPopoverMenu *GtkPopoverMenu_autoptr; typedef GList *GtkPopoverMenu_listautoptr; typedef GSList *GtkPopoverMenu_slistautoptr; typedef GQueue *GtkPopoverMenu_queueautoptr;
# 126 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 126 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 126 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPopoverMenu (GtkPopoverMenu *_ptr) { if (_ptr) (g_object_unref) ((GtkPopoverMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPopoverMenu (GtkPopoverMenu **_ptr) { glib_autoptr_clear_GtkPopoverMenu (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPopoverMenu (void *_ptr) { (g_object_unref) ((GtkPopoverMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPopoverMenu (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPopoverMenu); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPopoverMenu (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPopoverMenu); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPopoverMenu (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPopoverMenu); }
# 126 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPrintContext *GtkPrintContext_autoptr; typedef GList *GtkPrintContext_listautoptr; typedef GSList *GtkPrintContext_slistautoptr; typedef GQueue *GtkPrintContext_queueautoptr;
# 127 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 127 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 127 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPrintContext (GtkPrintContext *_ptr) { if (_ptr) (g_object_unref) ((GtkPrintContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPrintContext (GtkPrintContext **_ptr) { glib_autoptr_clear_GtkPrintContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPrintContext (void *_ptr) { (g_object_unref) ((GtkPrintContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPrintContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPrintContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPrintContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPrintContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPrintContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPrintContext); }
# 127 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPrintOperation *GtkPrintOperation_autoptr; typedef GList *GtkPrintOperation_listautoptr; typedef GSList *GtkPrintOperation_slistautoptr; typedef GQueue *GtkPrintOperation_queueautoptr;
# 128 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 128 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 128 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPrintOperation (GtkPrintOperation *_ptr) { if (_ptr) (g_object_unref) ((GtkPrintOperation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPrintOperation (GtkPrintOperation **_ptr) { glib_autoptr_clear_GtkPrintOperation (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPrintOperation (void *_ptr) { (g_object_unref) ((GtkPrintOperation *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPrintOperation (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPrintOperation); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPrintOperation (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPrintOperation); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPrintOperation (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPrintOperation); }
# 128 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPrintOperationPreview *GtkPrintOperationPreview_autoptr; typedef GList *GtkPrintOperationPreview_listautoptr; typedef GSList *GtkPrintOperationPreview_slistautoptr; typedef GQueue *GtkPrintOperationPreview_queueautoptr;
# 129 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 129 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 129 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPrintOperationPreview (GtkPrintOperationPreview *_ptr) { if (_ptr) (g_object_unref) ((GtkPrintOperationPreview *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPrintOperationPreview (GtkPrintOperationPreview **_ptr) { glib_autoptr_clear_GtkPrintOperationPreview (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPrintOperationPreview (void *_ptr) { (g_object_unref) ((GtkPrintOperationPreview *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPrintOperationPreview (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPrintOperationPreview); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPrintOperationPreview (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPrintOperationPreview); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPrintOperationPreview (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPrintOperationPreview); }
# 129 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkPrintSettings *GtkPrintSettings_autoptr; typedef GList *GtkPrintSettings_listautoptr; typedef GSList *GtkPrintSettings_slistautoptr; typedef GQueue *GtkPrintSettings_queueautoptr;
# 130 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 130 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 130 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPrintSettings (GtkPrintSettings *_ptr) { if (_ptr) (g_object_unref) ((GtkPrintSettings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPrintSettings (GtkPrintSettings **_ptr) { glib_autoptr_clear_GtkPrintSettings (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPrintSettings (void *_ptr) { (g_object_unref) ((GtkPrintSettings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPrintSettings (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPrintSettings); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPrintSettings (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPrintSettings); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPrintSettings (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPrintSettings); }
# 130 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkProgressBar *GtkProgressBar_autoptr; typedef GList *GtkProgressBar_listautoptr; typedef GSList *GtkProgressBar_slistautoptr; typedef GQueue *GtkProgressBar_queueautoptr;
# 131 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 131 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 131 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkProgressBar (GtkProgressBar *_ptr) { if (_ptr) (g_object_unref) ((GtkProgressBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkProgressBar (GtkProgressBar **_ptr) { glib_autoptr_clear_GtkProgressBar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkProgressBar (void *_ptr) { (g_object_unref) ((GtkProgressBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkProgressBar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkProgressBar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkProgressBar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkProgressBar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkProgressBar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkProgressBar); }
# 131 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRadioButton *GtkRadioButton_autoptr; typedef GList *GtkRadioButton_listautoptr; typedef GSList *GtkRadioButton_slistautoptr; typedef GQueue *GtkRadioButton_queueautoptr;
# 132 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 132 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 132 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRadioButton (GtkRadioButton *_ptr) { if (_ptr) (g_object_unref) ((GtkRadioButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRadioButton (GtkRadioButton **_ptr) { glib_autoptr_clear_GtkRadioButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRadioButton (void *_ptr) { (g_object_unref) ((GtkRadioButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRadioButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRadioButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRadioButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRadioButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRadioButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRadioButton); }
# 132 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRadioMenuItem *GtkRadioMenuItem_autoptr; typedef GList *GtkRadioMenuItem_listautoptr; typedef GSList *GtkRadioMenuItem_slistautoptr; typedef GQueue *GtkRadioMenuItem_queueautoptr;
# 133 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 133 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 133 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRadioMenuItem (GtkRadioMenuItem *_ptr) { if (_ptr) (g_object_unref) ((GtkRadioMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRadioMenuItem (GtkRadioMenuItem **_ptr) { glib_autoptr_clear_GtkRadioMenuItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRadioMenuItem (void *_ptr) { (g_object_unref) ((GtkRadioMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRadioMenuItem (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRadioMenuItem); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRadioMenuItem (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRadioMenuItem); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRadioMenuItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRadioMenuItem); }
# 133 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRadioToolButton *GtkRadioToolButton_autoptr; typedef GList *GtkRadioToolButton_listautoptr; typedef GSList *GtkRadioToolButton_slistautoptr; typedef GQueue *GtkRadioToolButton_queueautoptr;
# 134 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 134 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 134 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRadioToolButton (GtkRadioToolButton *_ptr) { if (_ptr) (g_object_unref) ((GtkRadioToolButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRadioToolButton (GtkRadioToolButton **_ptr) { glib_autoptr_clear_GtkRadioToolButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRadioToolButton (void *_ptr) { (g_object_unref) ((GtkRadioToolButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRadioToolButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRadioToolButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRadioToolButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRadioToolButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRadioToolButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRadioToolButton); }
# 134 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRange *GtkRange_autoptr; typedef GList *GtkRange_listautoptr; typedef GSList *GtkRange_slistautoptr; typedef GQueue *GtkRange_queueautoptr;
# 135 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 135 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 135 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRange (GtkRange *_ptr) { if (_ptr) (g_object_unref) ((GtkRange *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRange (GtkRange **_ptr) { glib_autoptr_clear_GtkRange (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRange (void *_ptr) { (g_object_unref) ((GtkRange *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRange (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRange); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRange (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRange); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRange (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRange); }
# 135 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRcStyle *GtkRcStyle_autoptr; typedef GList *GtkRcStyle_listautoptr; typedef GSList *GtkRcStyle_slistautoptr; typedef GQueue *GtkRcStyle_queueautoptr;
# 136 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 136 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 136 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRcStyle (GtkRcStyle *_ptr) { if (_ptr) (g_object_unref) ((GtkRcStyle *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRcStyle (GtkRcStyle **_ptr) { glib_autoptr_clear_GtkRcStyle (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRcStyle (void *_ptr) { (g_object_unref) ((GtkRcStyle *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRcStyle (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRcStyle); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRcStyle (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRcStyle); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRcStyle (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRcStyle); }
# 136 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRecentChooser *GtkRecentChooser_autoptr; typedef GList *GtkRecentChooser_listautoptr; typedef GSList *GtkRecentChooser_slistautoptr; typedef GQueue *GtkRecentChooser_queueautoptr;
# 137 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 137 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 137 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRecentChooser (GtkRecentChooser *_ptr) { if (_ptr) (g_object_unref) ((GtkRecentChooser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRecentChooser (GtkRecentChooser **_ptr) { glib_autoptr_clear_GtkRecentChooser (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRecentChooser (void *_ptr) { (g_object_unref) ((GtkRecentChooser *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRecentChooser (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRecentChooser); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRecentChooser (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRecentChooser); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRecentChooser (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRecentChooser); }
# 137 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRecentChooserDialog *GtkRecentChooserDialog_autoptr; typedef GList *GtkRecentChooserDialog_listautoptr; typedef GSList *GtkRecentChooserDialog_slistautoptr; typedef GQueue *GtkRecentChooserDialog_queueautoptr;
# 138 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 138 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 138 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRecentChooserDialog (GtkRecentChooserDialog *_ptr) { if (_ptr) (g_object_unref) ((GtkRecentChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRecentChooserDialog (GtkRecentChooserDialog **_ptr) { glib_autoptr_clear_GtkRecentChooserDialog (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRecentChooserDialog (void *_ptr) { (g_object_unref) ((GtkRecentChooserDialog *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRecentChooserDialog (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRecentChooserDialog); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRecentChooserDialog (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRecentChooserDialog); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRecentChooserDialog (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRecentChooserDialog); }
# 138 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRecentChooserMenu *GtkRecentChooserMenu_autoptr; typedef GList *GtkRecentChooserMenu_listautoptr; typedef GSList *GtkRecentChooserMenu_slistautoptr; typedef GQueue *GtkRecentChooserMenu_queueautoptr;
# 139 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 139 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 139 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRecentChooserMenu (GtkRecentChooserMenu *_ptr) { if (_ptr) (g_object_unref) ((GtkRecentChooserMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRecentChooserMenu (GtkRecentChooserMenu **_ptr) { glib_autoptr_clear_GtkRecentChooserMenu (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRecentChooserMenu (void *_ptr) { (g_object_unref) ((GtkRecentChooserMenu *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRecentChooserMenu (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRecentChooserMenu); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRecentChooserMenu (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRecentChooserMenu); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRecentChooserMenu (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRecentChooserMenu); }
# 139 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRecentChooserWidget *GtkRecentChooserWidget_autoptr; typedef GList *GtkRecentChooserWidget_listautoptr; typedef GSList *GtkRecentChooserWidget_slistautoptr; typedef GQueue *GtkRecentChooserWidget_queueautoptr;
# 140 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 140 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 140 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRecentChooserWidget (GtkRecentChooserWidget *_ptr) { if (_ptr) (g_object_unref) ((GtkRecentChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRecentChooserWidget (GtkRecentChooserWidget **_ptr) { glib_autoptr_clear_GtkRecentChooserWidget (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRecentChooserWidget (void *_ptr) { (g_object_unref) ((GtkRecentChooserWidget *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRecentChooserWidget (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRecentChooserWidget); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRecentChooserWidget (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRecentChooserWidget); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRecentChooserWidget (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRecentChooserWidget); }
# 140 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRecentFilter *GtkRecentFilter_autoptr; typedef GList *GtkRecentFilter_listautoptr; typedef GSList *GtkRecentFilter_slistautoptr; typedef GQueue *GtkRecentFilter_queueautoptr;
# 141 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 141 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 141 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRecentFilter (GtkRecentFilter *_ptr) { if (_ptr) (g_object_unref) ((GtkRecentFilter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRecentFilter (GtkRecentFilter **_ptr) { glib_autoptr_clear_GtkRecentFilter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRecentFilter (void *_ptr) { (g_object_unref) ((GtkRecentFilter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRecentFilter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRecentFilter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRecentFilter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRecentFilter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRecentFilter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRecentFilter); }
# 141 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRecentManager *GtkRecentManager_autoptr; typedef GList *GtkRecentManager_listautoptr; typedef GSList *GtkRecentManager_slistautoptr; typedef GQueue *GtkRecentManager_queueautoptr;
# 142 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 142 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 142 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRecentManager (GtkRecentManager *_ptr) { if (_ptr) (g_object_unref) ((GtkRecentManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRecentManager (GtkRecentManager **_ptr) { glib_autoptr_clear_GtkRecentManager (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRecentManager (void *_ptr) { (g_object_unref) ((GtkRecentManager *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRecentManager (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRecentManager); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRecentManager (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRecentManager); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRecentManager (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRecentManager); }
# 142 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRevealer *GtkRevealer_autoptr; typedef GList *GtkRevealer_listautoptr; typedef GSList *GtkRevealer_slistautoptr; typedef GQueue *GtkRevealer_queueautoptr;
# 143 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 143 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 143 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRevealer (GtkRevealer *_ptr) { if (_ptr) (g_object_unref) ((GtkRevealer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRevealer (GtkRevealer **_ptr) { glib_autoptr_clear_GtkRevealer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRevealer (void *_ptr) { (g_object_unref) ((GtkRevealer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRevealer (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRevealer); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRevealer (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRevealer); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRevealer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRevealer); }
# 143 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkScale *GtkScale_autoptr; typedef GList *GtkScale_listautoptr; typedef GSList *GtkScale_slistautoptr; typedef GQueue *GtkScale_queueautoptr;
# 144 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 144 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 144 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkScale (GtkScale *_ptr) { if (_ptr) (g_object_unref) ((GtkScale *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkScale (GtkScale **_ptr) { glib_autoptr_clear_GtkScale (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkScale (void *_ptr) { (g_object_unref) ((GtkScale *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkScale (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkScale); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkScale (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkScale); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkScale (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkScale); }
# 144 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkScaleButton *GtkScaleButton_autoptr; typedef GList *GtkScaleButton_listautoptr; typedef GSList *GtkScaleButton_slistautoptr; typedef GQueue *GtkScaleButton_queueautoptr;
# 145 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 145 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 145 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkScaleButton (GtkScaleButton *_ptr) { if (_ptr) (g_object_unref) ((GtkScaleButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkScaleButton (GtkScaleButton **_ptr) { glib_autoptr_clear_GtkScaleButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkScaleButton (void *_ptr) { (g_object_unref) ((GtkScaleButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkScaleButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkScaleButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkScaleButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkScaleButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkScaleButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkScaleButton); }
# 145 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkScrollable *GtkScrollable_autoptr; typedef GList *GtkScrollable_listautoptr; typedef GSList *GtkScrollable_slistautoptr; typedef GQueue *GtkScrollable_queueautoptr;
# 146 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 146 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 146 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkScrollable (GtkScrollable *_ptr) { if (_ptr) (g_object_unref) ((GtkScrollable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkScrollable (GtkScrollable **_ptr) { glib_autoptr_clear_GtkScrollable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkScrollable (void *_ptr) { (g_object_unref) ((GtkScrollable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkScrollable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkScrollable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkScrollable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkScrollable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkScrollable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkScrollable); }
# 146 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkScrollbar *GtkScrollbar_autoptr; typedef GList *GtkScrollbar_listautoptr; typedef GSList *GtkScrollbar_slistautoptr; typedef GQueue *GtkScrollbar_queueautoptr;
# 147 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 147 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 147 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkScrollbar (GtkScrollbar *_ptr) { if (_ptr) (g_object_unref) ((GtkScrollbar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkScrollbar (GtkScrollbar **_ptr) { glib_autoptr_clear_GtkScrollbar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkScrollbar (void *_ptr) { (g_object_unref) ((GtkScrollbar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkScrollbar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkScrollbar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkScrollbar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkScrollbar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkScrollbar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkScrollbar); }
# 147 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkScrolledWindow *GtkScrolledWindow_autoptr; typedef GList *GtkScrolledWindow_listautoptr; typedef GSList *GtkScrolledWindow_slistautoptr; typedef GQueue *GtkScrolledWindow_queueautoptr;
# 148 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 148 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 148 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkScrolledWindow (GtkScrolledWindow *_ptr) { if (_ptr) (g_object_unref) ((GtkScrolledWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkScrolledWindow (GtkScrolledWindow **_ptr) { glib_autoptr_clear_GtkScrolledWindow (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkScrolledWindow (void *_ptr) { (g_object_unref) ((GtkScrolledWindow *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkScrolledWindow (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkScrolledWindow); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkScrolledWindow (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkScrolledWindow); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkScrolledWindow (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkScrolledWindow); }
# 148 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSearchBar *GtkSearchBar_autoptr; typedef GList *GtkSearchBar_listautoptr; typedef GSList *GtkSearchBar_slistautoptr; typedef GQueue *GtkSearchBar_queueautoptr;
# 149 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 149 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 149 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSearchBar (GtkSearchBar *_ptr) { if (_ptr) (g_object_unref) ((GtkSearchBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSearchBar (GtkSearchBar **_ptr) { glib_autoptr_clear_GtkSearchBar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSearchBar (void *_ptr) { (g_object_unref) ((GtkSearchBar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSearchBar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSearchBar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSearchBar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSearchBar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSearchBar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSearchBar); }
# 149 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSearchEntry *GtkSearchEntry_autoptr; typedef GList *GtkSearchEntry_listautoptr; typedef GSList *GtkSearchEntry_slistautoptr; typedef GQueue *GtkSearchEntry_queueautoptr;
# 150 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 150 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 150 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSearchEntry (GtkSearchEntry *_ptr) { if (_ptr) (g_object_unref) ((GtkSearchEntry *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSearchEntry (GtkSearchEntry **_ptr) { glib_autoptr_clear_GtkSearchEntry (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSearchEntry (void *_ptr) { (g_object_unref) ((GtkSearchEntry *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSearchEntry (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSearchEntry); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSearchEntry (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSearchEntry); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSearchEntry (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSearchEntry); }
# 150 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSeparator *GtkSeparator_autoptr; typedef GList *GtkSeparator_listautoptr; typedef GSList *GtkSeparator_slistautoptr; typedef GQueue *GtkSeparator_queueautoptr;
# 151 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 151 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 151 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSeparator (GtkSeparator *_ptr) { if (_ptr) (g_object_unref) ((GtkSeparator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSeparator (GtkSeparator **_ptr) { glib_autoptr_clear_GtkSeparator (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSeparator (void *_ptr) { (g_object_unref) ((GtkSeparator *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSeparator (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSeparator); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSeparator (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSeparator); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSeparator (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSeparator); }
# 151 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSeparatorMenuItem *GtkSeparatorMenuItem_autoptr; typedef GList *GtkSeparatorMenuItem_listautoptr; typedef GSList *GtkSeparatorMenuItem_slistautoptr; typedef GQueue *GtkSeparatorMenuItem_queueautoptr;
# 152 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 152 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 152 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSeparatorMenuItem (GtkSeparatorMenuItem *_ptr) { if (_ptr) (g_object_unref) ((GtkSeparatorMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSeparatorMenuItem (GtkSeparatorMenuItem **_ptr) { glib_autoptr_clear_GtkSeparatorMenuItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSeparatorMenuItem (void *_ptr) { (g_object_unref) ((GtkSeparatorMenuItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSeparatorMenuItem (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSeparatorMenuItem); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSeparatorMenuItem (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSeparatorMenuItem); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSeparatorMenuItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSeparatorMenuItem); }
# 152 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSeparatorToolItem *GtkSeparatorToolItem_autoptr; typedef GList *GtkSeparatorToolItem_listautoptr; typedef GSList *GtkSeparatorToolItem_slistautoptr; typedef GQueue *GtkSeparatorToolItem_queueautoptr;
# 153 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 153 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 153 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSeparatorToolItem (GtkSeparatorToolItem *_ptr) { if (_ptr) (g_object_unref) ((GtkSeparatorToolItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSeparatorToolItem (GtkSeparatorToolItem **_ptr) { glib_autoptr_clear_GtkSeparatorToolItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSeparatorToolItem (void *_ptr) { (g_object_unref) ((GtkSeparatorToolItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSeparatorToolItem (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSeparatorToolItem); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSeparatorToolItem (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSeparatorToolItem); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSeparatorToolItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSeparatorToolItem); }
# 153 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSettings *GtkSettings_autoptr; typedef GList *GtkSettings_listautoptr; typedef GSList *GtkSettings_slistautoptr; typedef GQueue *GtkSettings_queueautoptr;
# 154 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 154 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 154 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSettings (GtkSettings *_ptr) { if (_ptr) (g_object_unref) ((GtkSettings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSettings (GtkSettings **_ptr) { glib_autoptr_clear_GtkSettings (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSettings (void *_ptr) { (g_object_unref) ((GtkSettings *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSettings (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSettings); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSettings (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSettings); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSettings (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSettings); }
# 154 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkStackSidebar *GtkStackSidebar_autoptr; typedef GList *GtkStackSidebar_listautoptr; typedef GSList *GtkStackSidebar_slistautoptr; typedef GQueue *GtkStackSidebar_queueautoptr;
# 155 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 155 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 155 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkStackSidebar (GtkStackSidebar *_ptr) { if (_ptr) (g_object_unref) ((GtkStackSidebar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkStackSidebar (GtkStackSidebar **_ptr) { glib_autoptr_clear_GtkStackSidebar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkStackSidebar (void *_ptr) { (g_object_unref) ((GtkStackSidebar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkStackSidebar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkStackSidebar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkStackSidebar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkStackSidebar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkStackSidebar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkStackSidebar); }
# 155 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSizeGroup *GtkSizeGroup_autoptr; typedef GList *GtkSizeGroup_listautoptr; typedef GSList *GtkSizeGroup_slistautoptr; typedef GQueue *GtkSizeGroup_queueautoptr;
# 156 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 156 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 156 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSizeGroup (GtkSizeGroup *_ptr) { if (_ptr) (g_object_unref) ((GtkSizeGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSizeGroup (GtkSizeGroup **_ptr) { glib_autoptr_clear_GtkSizeGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSizeGroup (void *_ptr) { (g_object_unref) ((GtkSizeGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSizeGroup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSizeGroup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSizeGroup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSizeGroup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSizeGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSizeGroup); }
# 156 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSpinButton *GtkSpinButton_autoptr; typedef GList *GtkSpinButton_listautoptr; typedef GSList *GtkSpinButton_slistautoptr; typedef GQueue *GtkSpinButton_queueautoptr;
# 157 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 157 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 157 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSpinButton (GtkSpinButton *_ptr) { if (_ptr) (g_object_unref) ((GtkSpinButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSpinButton (GtkSpinButton **_ptr) { glib_autoptr_clear_GtkSpinButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSpinButton (void *_ptr) { (g_object_unref) ((GtkSpinButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSpinButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSpinButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSpinButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSpinButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSpinButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSpinButton); }
# 157 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSpinner *GtkSpinner_autoptr; typedef GList *GtkSpinner_listautoptr; typedef GSList *GtkSpinner_slistautoptr; typedef GQueue *GtkSpinner_queueautoptr;
# 158 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 158 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 158 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSpinner (GtkSpinner *_ptr) { if (_ptr) (g_object_unref) ((GtkSpinner *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSpinner (GtkSpinner **_ptr) { glib_autoptr_clear_GtkSpinner (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSpinner (void *_ptr) { (g_object_unref) ((GtkSpinner *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSpinner (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSpinner); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSpinner (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSpinner); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSpinner (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSpinner); }
# 158 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkStack *GtkStack_autoptr; typedef GList *GtkStack_listautoptr; typedef GSList *GtkStack_slistautoptr; typedef GQueue *GtkStack_queueautoptr;
# 159 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 159 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 159 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkStack (GtkStack *_ptr) { if (_ptr) (g_object_unref) ((GtkStack *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkStack (GtkStack **_ptr) { glib_autoptr_clear_GtkStack (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkStack (void *_ptr) { (g_object_unref) ((GtkStack *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkStack (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkStack); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkStack (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkStack); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkStack (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkStack); }
# 159 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkStackSwitcher *GtkStackSwitcher_autoptr; typedef GList *GtkStackSwitcher_listautoptr; typedef GSList *GtkStackSwitcher_slistautoptr; typedef GQueue *GtkStackSwitcher_queueautoptr;
# 160 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 160 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 160 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkStackSwitcher (GtkStackSwitcher *_ptr) { if (_ptr) (g_object_unref) ((GtkStackSwitcher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkStackSwitcher (GtkStackSwitcher **_ptr) { glib_autoptr_clear_GtkStackSwitcher (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkStackSwitcher (void *_ptr) { (g_object_unref) ((GtkStackSwitcher *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkStackSwitcher (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkStackSwitcher); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkStackSwitcher (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkStackSwitcher); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkStackSwitcher (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkStackSwitcher); }
# 160 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkStatusbar *GtkStatusbar_autoptr; typedef GList *GtkStatusbar_listautoptr; typedef GSList *GtkStatusbar_slistautoptr; typedef GQueue *GtkStatusbar_queueautoptr;
# 161 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 161 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 161 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkStatusbar (GtkStatusbar *_ptr) { if (_ptr) (g_object_unref) ((GtkStatusbar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkStatusbar (GtkStatusbar **_ptr) { glib_autoptr_clear_GtkStatusbar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkStatusbar (void *_ptr) { (g_object_unref) ((GtkStatusbar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkStatusbar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkStatusbar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkStatusbar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkStatusbar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkStatusbar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkStatusbar); }
# 161 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkStyle *GtkStyle_autoptr; typedef GList *GtkStyle_listautoptr; typedef GSList *GtkStyle_slistautoptr; typedef GQueue *GtkStyle_queueautoptr;
# 162 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 162 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 162 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkStyle (GtkStyle *_ptr) { if (_ptr) (g_object_unref) ((GtkStyle *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkStyle (GtkStyle **_ptr) { glib_autoptr_clear_GtkStyle (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkStyle (void *_ptr) { (g_object_unref) ((GtkStyle *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkStyle (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkStyle); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkStyle (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkStyle); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkStyle (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkStyle); }
# 162 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkStyleContext *GtkStyleContext_autoptr; typedef GList *GtkStyleContext_listautoptr; typedef GSList *GtkStyleContext_slistautoptr; typedef GQueue *GtkStyleContext_queueautoptr;
# 163 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 163 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 163 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkStyleContext (GtkStyleContext *_ptr) { if (_ptr) (g_object_unref) ((GtkStyleContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkStyleContext (GtkStyleContext **_ptr) { glib_autoptr_clear_GtkStyleContext (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkStyleContext (void *_ptr) { (g_object_unref) ((GtkStyleContext *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkStyleContext (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkStyleContext); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkStyleContext (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkStyleContext); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkStyleContext (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkStyleContext); }
# 163 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkStyleProperties *GtkStyleProperties_autoptr; typedef GList *GtkStyleProperties_listautoptr; typedef GSList *GtkStyleProperties_slistautoptr; typedef GQueue *GtkStyleProperties_queueautoptr;
# 164 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 164 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 164 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkStyleProperties (GtkStyleProperties *_ptr) { if (_ptr) (g_object_unref) ((GtkStyleProperties *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkStyleProperties (GtkStyleProperties **_ptr) { glib_autoptr_clear_GtkStyleProperties (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkStyleProperties (void *_ptr) { (g_object_unref) ((GtkStyleProperties *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkStyleProperties (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkStyleProperties); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkStyleProperties (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkStyleProperties); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkStyleProperties (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkStyleProperties); }
# 164 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkStyleProvider *GtkStyleProvider_autoptr; typedef GList *GtkStyleProvider_listautoptr; typedef GSList *GtkStyleProvider_slistautoptr; typedef GQueue *GtkStyleProvider_queueautoptr;
# 165 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 165 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 165 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkStyleProvider (GtkStyleProvider *_ptr) { if (_ptr) (g_object_unref) ((GtkStyleProvider *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkStyleProvider (GtkStyleProvider **_ptr) { glib_autoptr_clear_GtkStyleProvider (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkStyleProvider (void *_ptr) { (g_object_unref) ((GtkStyleProvider *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkStyleProvider (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkStyleProvider); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkStyleProvider (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkStyleProvider); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkStyleProvider (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkStyleProvider); }
# 165 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSwitch *GtkSwitch_autoptr; typedef GList *GtkSwitch_listautoptr; typedef GSList *GtkSwitch_slistautoptr; typedef GQueue *GtkSwitch_queueautoptr;
# 166 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 166 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 166 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSwitch (GtkSwitch *_ptr) { if (_ptr) (g_object_unref) ((GtkSwitch *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSwitch (GtkSwitch **_ptr) { glib_autoptr_clear_GtkSwitch (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSwitch (void *_ptr) { (g_object_unref) ((GtkSwitch *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSwitch (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSwitch); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSwitch (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSwitch); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSwitch (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSwitch); }
# 166 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTextBuffer *GtkTextBuffer_autoptr; typedef GList *GtkTextBuffer_listautoptr; typedef GSList *GtkTextBuffer_slistautoptr; typedef GQueue *GtkTextBuffer_queueautoptr;
# 167 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 167 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 167 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTextBuffer (GtkTextBuffer *_ptr) { if (_ptr) (g_object_unref) ((GtkTextBuffer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTextBuffer (GtkTextBuffer **_ptr) { glib_autoptr_clear_GtkTextBuffer (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTextBuffer (void *_ptr) { (g_object_unref) ((GtkTextBuffer *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTextBuffer (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTextBuffer); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTextBuffer (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTextBuffer); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTextBuffer (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTextBuffer); }
# 167 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTextChildAnchor *GtkTextChildAnchor_autoptr; typedef GList *GtkTextChildAnchor_listautoptr; typedef GSList *GtkTextChildAnchor_slistautoptr; typedef GQueue *GtkTextChildAnchor_queueautoptr;
# 168 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 168 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 168 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTextChildAnchor (GtkTextChildAnchor *_ptr) { if (_ptr) (g_object_unref) ((GtkTextChildAnchor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTextChildAnchor (GtkTextChildAnchor **_ptr) { glib_autoptr_clear_GtkTextChildAnchor (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTextChildAnchor (void *_ptr) { (g_object_unref) ((GtkTextChildAnchor *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTextChildAnchor (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTextChildAnchor); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTextChildAnchor (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTextChildAnchor); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTextChildAnchor (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTextChildAnchor); }
# 168 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTextMark *GtkTextMark_autoptr; typedef GList *GtkTextMark_listautoptr; typedef GSList *GtkTextMark_slistautoptr; typedef GQueue *GtkTextMark_queueautoptr;
# 169 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 169 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 169 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTextMark (GtkTextMark *_ptr) { if (_ptr) (g_object_unref) ((GtkTextMark *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTextMark (GtkTextMark **_ptr) { glib_autoptr_clear_GtkTextMark (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTextMark (void *_ptr) { (g_object_unref) ((GtkTextMark *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTextMark (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTextMark); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTextMark (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTextMark); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTextMark (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTextMark); }
# 169 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTextTag *GtkTextTag_autoptr; typedef GList *GtkTextTag_listautoptr; typedef GSList *GtkTextTag_slistautoptr; typedef GQueue *GtkTextTag_queueautoptr;
# 170 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 170 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 170 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTextTag (GtkTextTag *_ptr) { if (_ptr) (g_object_unref) ((GtkTextTag *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTextTag (GtkTextTag **_ptr) { glib_autoptr_clear_GtkTextTag (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTextTag (void *_ptr) { (g_object_unref) ((GtkTextTag *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTextTag (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTextTag); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTextTag (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTextTag); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTextTag (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTextTag); }
# 170 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTextTagTable *GtkTextTagTable_autoptr; typedef GList *GtkTextTagTable_listautoptr; typedef GSList *GtkTextTagTable_slistautoptr; typedef GQueue *GtkTextTagTable_queueautoptr;
# 171 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 171 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 171 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTextTagTable (GtkTextTagTable *_ptr) { if (_ptr) (g_object_unref) ((GtkTextTagTable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTextTagTable (GtkTextTagTable **_ptr) { glib_autoptr_clear_GtkTextTagTable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTextTagTable (void *_ptr) { (g_object_unref) ((GtkTextTagTable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTextTagTable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTextTagTable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTextTagTable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTextTagTable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTextTagTable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTextTagTable); }
# 171 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTextView *GtkTextView_autoptr; typedef GList *GtkTextView_listautoptr; typedef GSList *GtkTextView_slistautoptr; typedef GQueue *GtkTextView_queueautoptr;
# 172 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 172 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 172 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTextView (GtkTextView *_ptr) { if (_ptr) (g_object_unref) ((GtkTextView *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTextView (GtkTextView **_ptr) { glib_autoptr_clear_GtkTextView (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTextView (void *_ptr) { (g_object_unref) ((GtkTextView *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTextView (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTextView); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTextView (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTextView); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTextView (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTextView); }
# 172 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkToggleButton *GtkToggleButton_autoptr; typedef GList *GtkToggleButton_listautoptr; typedef GSList *GtkToggleButton_slistautoptr; typedef GQueue *GtkToggleButton_queueautoptr;
# 173 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 173 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 173 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkToggleButton (GtkToggleButton *_ptr) { if (_ptr) (g_object_unref) ((GtkToggleButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkToggleButton (GtkToggleButton **_ptr) { glib_autoptr_clear_GtkToggleButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkToggleButton (void *_ptr) { (g_object_unref) ((GtkToggleButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkToggleButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkToggleButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkToggleButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkToggleButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkToggleButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkToggleButton); }
# 173 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkToggleToolButton *GtkToggleToolButton_autoptr; typedef GList *GtkToggleToolButton_listautoptr; typedef GSList *GtkToggleToolButton_slistautoptr; typedef GQueue *GtkToggleToolButton_queueautoptr;
# 174 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 174 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 174 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkToggleToolButton (GtkToggleToolButton *_ptr) { if (_ptr) (g_object_unref) ((GtkToggleToolButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkToggleToolButton (GtkToggleToolButton **_ptr) { glib_autoptr_clear_GtkToggleToolButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkToggleToolButton (void *_ptr) { (g_object_unref) ((GtkToggleToolButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkToggleToolButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkToggleToolButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkToggleToolButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkToggleToolButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkToggleToolButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkToggleToolButton); }
# 174 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkToolButton *GtkToolButton_autoptr; typedef GList *GtkToolButton_listautoptr; typedef GSList *GtkToolButton_slistautoptr; typedef GQueue *GtkToolButton_queueautoptr;
# 175 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 175 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 175 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkToolButton (GtkToolButton *_ptr) { if (_ptr) (g_object_unref) ((GtkToolButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkToolButton (GtkToolButton **_ptr) { glib_autoptr_clear_GtkToolButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkToolButton (void *_ptr) { (g_object_unref) ((GtkToolButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkToolButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkToolButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkToolButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkToolButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkToolButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkToolButton); }
# 175 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkToolItem *GtkToolItem_autoptr; typedef GList *GtkToolItem_listautoptr; typedef GSList *GtkToolItem_slistautoptr; typedef GQueue *GtkToolItem_queueautoptr;
# 176 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 176 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 176 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkToolItem (GtkToolItem *_ptr) { if (_ptr) (g_object_unref) ((GtkToolItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkToolItem (GtkToolItem **_ptr) { glib_autoptr_clear_GtkToolItem (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkToolItem (void *_ptr) { (g_object_unref) ((GtkToolItem *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkToolItem (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkToolItem); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkToolItem (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkToolItem); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkToolItem (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkToolItem); }
# 176 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkToolItemGroup *GtkToolItemGroup_autoptr; typedef GList *GtkToolItemGroup_listautoptr; typedef GSList *GtkToolItemGroup_slistautoptr; typedef GQueue *GtkToolItemGroup_queueautoptr;
# 177 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 177 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 177 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkToolItemGroup (GtkToolItemGroup *_ptr) { if (_ptr) (g_object_unref) ((GtkToolItemGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkToolItemGroup (GtkToolItemGroup **_ptr) { glib_autoptr_clear_GtkToolItemGroup (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkToolItemGroup (void *_ptr) { (g_object_unref) ((GtkToolItemGroup *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkToolItemGroup (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkToolItemGroup); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkToolItemGroup (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkToolItemGroup); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkToolItemGroup (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkToolItemGroup); }
# 177 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkToolPalette *GtkToolPalette_autoptr; typedef GList *GtkToolPalette_listautoptr; typedef GSList *GtkToolPalette_slistautoptr; typedef GQueue *GtkToolPalette_queueautoptr;
# 178 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 178 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 178 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkToolPalette (GtkToolPalette *_ptr) { if (_ptr) (g_object_unref) ((GtkToolPalette *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkToolPalette (GtkToolPalette **_ptr) { glib_autoptr_clear_GtkToolPalette (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkToolPalette (void *_ptr) { (g_object_unref) ((GtkToolPalette *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkToolPalette (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkToolPalette); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkToolPalette (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkToolPalette); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkToolPalette (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkToolPalette); }
# 178 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkToolShell *GtkToolShell_autoptr; typedef GList *GtkToolShell_listautoptr; typedef GSList *GtkToolShell_slistautoptr; typedef GQueue *GtkToolShell_queueautoptr;
# 179 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 179 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 179 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkToolShell (GtkToolShell *_ptr) { if (_ptr) (g_object_unref) ((GtkToolShell *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkToolShell (GtkToolShell **_ptr) { glib_autoptr_clear_GtkToolShell (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkToolShell (void *_ptr) { (g_object_unref) ((GtkToolShell *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkToolShell (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkToolShell); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkToolShell (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkToolShell); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkToolShell (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkToolShell); }
# 179 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkToolbar *GtkToolbar_autoptr; typedef GList *GtkToolbar_listautoptr; typedef GSList *GtkToolbar_slistautoptr; typedef GQueue *GtkToolbar_queueautoptr;
# 180 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 180 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 180 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkToolbar (GtkToolbar *_ptr) { if (_ptr) (g_object_unref) ((GtkToolbar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkToolbar (GtkToolbar **_ptr) { glib_autoptr_clear_GtkToolbar (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkToolbar (void *_ptr) { (g_object_unref) ((GtkToolbar *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkToolbar (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkToolbar); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkToolbar (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkToolbar); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkToolbar (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkToolbar); }
# 180 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTooltip *GtkTooltip_autoptr; typedef GList *GtkTooltip_listautoptr; typedef GSList *GtkTooltip_slistautoptr; typedef GQueue *GtkTooltip_queueautoptr;
# 181 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 181 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 181 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTooltip (GtkTooltip *_ptr) { if (_ptr) (g_object_unref) ((GtkTooltip *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTooltip (GtkTooltip **_ptr) { glib_autoptr_clear_GtkTooltip (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTooltip (void *_ptr) { (g_object_unref) ((GtkTooltip *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTooltip (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTooltip); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTooltip (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTooltip); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTooltip (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTooltip); }
# 181 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeDragDest *GtkTreeDragDest_autoptr; typedef GList *GtkTreeDragDest_listautoptr; typedef GSList *GtkTreeDragDest_slistautoptr; typedef GQueue *GtkTreeDragDest_queueautoptr;
# 182 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 182 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 182 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeDragDest (GtkTreeDragDest *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeDragDest *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeDragDest (GtkTreeDragDest **_ptr) { glib_autoptr_clear_GtkTreeDragDest (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeDragDest (void *_ptr) { (g_object_unref) ((GtkTreeDragDest *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeDragDest (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeDragDest); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeDragDest (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeDragDest); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeDragDest (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeDragDest); }
# 182 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeDragSource *GtkTreeDragSource_autoptr; typedef GList *GtkTreeDragSource_listautoptr; typedef GSList *GtkTreeDragSource_slistautoptr; typedef GQueue *GtkTreeDragSource_queueautoptr;
# 183 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 183 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 183 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeDragSource (GtkTreeDragSource *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeDragSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeDragSource (GtkTreeDragSource **_ptr) { glib_autoptr_clear_GtkTreeDragSource (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeDragSource (void *_ptr) { (g_object_unref) ((GtkTreeDragSource *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeDragSource (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeDragSource); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeDragSource (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeDragSource); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeDragSource (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeDragSource); }
# 183 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeModel *GtkTreeModel_autoptr; typedef GList *GtkTreeModel_listautoptr; typedef GSList *GtkTreeModel_slistautoptr; typedef GQueue *GtkTreeModel_queueautoptr;
# 184 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 184 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 184 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeModel (GtkTreeModel *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeModel (GtkTreeModel **_ptr) { glib_autoptr_clear_GtkTreeModel (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeModel (void *_ptr) { (g_object_unref) ((GtkTreeModel *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeModel (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeModel); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeModel (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeModel); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeModel (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeModel); }
# 184 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeModelFilter *GtkTreeModelFilter_autoptr; typedef GList *GtkTreeModelFilter_listautoptr; typedef GSList *GtkTreeModelFilter_slistautoptr; typedef GQueue *GtkTreeModelFilter_queueautoptr;
# 185 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 185 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 185 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeModelFilter (GtkTreeModelFilter *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeModelFilter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeModelFilter (GtkTreeModelFilter **_ptr) { glib_autoptr_clear_GtkTreeModelFilter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeModelFilter (void *_ptr) { (g_object_unref) ((GtkTreeModelFilter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeModelFilter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeModelFilter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeModelFilter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeModelFilter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeModelFilter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeModelFilter); }
# 185 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeModelSort *GtkTreeModelSort_autoptr; typedef GList *GtkTreeModelSort_listautoptr; typedef GSList *GtkTreeModelSort_slistautoptr; typedef GQueue *GtkTreeModelSort_queueautoptr;
# 186 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 186 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 186 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeModelSort (GtkTreeModelSort *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeModelSort *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeModelSort (GtkTreeModelSort **_ptr) { glib_autoptr_clear_GtkTreeModelSort (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeModelSort (void *_ptr) { (g_object_unref) ((GtkTreeModelSort *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeModelSort (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeModelSort); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeModelSort (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeModelSort); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeModelSort (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeModelSort); }
# 186 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeSelection *GtkTreeSelection_autoptr; typedef GList *GtkTreeSelection_listautoptr; typedef GSList *GtkTreeSelection_slistautoptr; typedef GQueue *GtkTreeSelection_queueautoptr;
# 187 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 187 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 187 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeSelection (GtkTreeSelection *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeSelection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeSelection (GtkTreeSelection **_ptr) { glib_autoptr_clear_GtkTreeSelection (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeSelection (void *_ptr) { (g_object_unref) ((GtkTreeSelection *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeSelection (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeSelection); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeSelection (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeSelection); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeSelection (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeSelection); }
# 187 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeSortable *GtkTreeSortable_autoptr; typedef GList *GtkTreeSortable_listautoptr; typedef GSList *GtkTreeSortable_slistautoptr; typedef GQueue *GtkTreeSortable_queueautoptr;
# 188 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 188 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 188 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeSortable (GtkTreeSortable *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeSortable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeSortable (GtkTreeSortable **_ptr) { glib_autoptr_clear_GtkTreeSortable (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeSortable (void *_ptr) { (g_object_unref) ((GtkTreeSortable *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeSortable (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeSortable); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeSortable (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeSortable); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeSortable (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeSortable); }
# 188 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeStore *GtkTreeStore_autoptr; typedef GList *GtkTreeStore_listautoptr; typedef GSList *GtkTreeStore_slistautoptr; typedef GQueue *GtkTreeStore_queueautoptr;
# 189 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 189 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 189 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeStore (GtkTreeStore *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeStore *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeStore (GtkTreeStore **_ptr) { glib_autoptr_clear_GtkTreeStore (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeStore (void *_ptr) { (g_object_unref) ((GtkTreeStore *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeStore (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeStore); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeStore (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeStore); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeStore (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeStore); }
# 189 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeView *GtkTreeView_autoptr; typedef GList *GtkTreeView_listautoptr; typedef GSList *GtkTreeView_slistautoptr; typedef GQueue *GtkTreeView_queueautoptr;
# 190 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 190 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 190 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeView (GtkTreeView *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeView *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeView (GtkTreeView **_ptr) { glib_autoptr_clear_GtkTreeView (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeView (void *_ptr) { (g_object_unref) ((GtkTreeView *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeView (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeView); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeView (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeView); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeView (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeView); }
# 190 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeViewColumn *GtkTreeViewColumn_autoptr; typedef GList *GtkTreeViewColumn_listautoptr; typedef GSList *GtkTreeViewColumn_slistautoptr; typedef GQueue *GtkTreeViewColumn_queueautoptr;
# 191 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 191 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 191 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeViewColumn (GtkTreeViewColumn *_ptr) { if (_ptr) (g_object_unref) ((GtkTreeViewColumn *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeViewColumn (GtkTreeViewColumn **_ptr) { glib_autoptr_clear_GtkTreeViewColumn (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeViewColumn (void *_ptr) { (g_object_unref) ((GtkTreeViewColumn *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeViewColumn (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeViewColumn); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeViewColumn (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeViewColumn); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeViewColumn (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeViewColumn); }
# 191 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkViewport *GtkViewport_autoptr; typedef GList *GtkViewport_listautoptr; typedef GSList *GtkViewport_slistautoptr; typedef GQueue *GtkViewport_queueautoptr;
# 192 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 192 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 192 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkViewport (GtkViewport *_ptr) { if (_ptr) (g_object_unref) ((GtkViewport *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkViewport (GtkViewport **_ptr) { glib_autoptr_clear_GtkViewport (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkViewport (void *_ptr) { (g_object_unref) ((GtkViewport *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkViewport (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkViewport); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkViewport (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkViewport); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkViewport (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkViewport); }
# 192 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkVolumeButton *GtkVolumeButton_autoptr; typedef GList *GtkVolumeButton_listautoptr; typedef GSList *GtkVolumeButton_slistautoptr; typedef GQueue *GtkVolumeButton_queueautoptr;
# 193 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 193 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 193 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkVolumeButton (GtkVolumeButton *_ptr) { if (_ptr) (g_object_unref) ((GtkVolumeButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkVolumeButton (GtkVolumeButton **_ptr) { glib_autoptr_clear_GtkVolumeButton (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkVolumeButton (void *_ptr) { (g_object_unref) ((GtkVolumeButton *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkVolumeButton (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkVolumeButton); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkVolumeButton (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkVolumeButton); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkVolumeButton (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkVolumeButton); }
# 193 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop

typedef GtkPaperSize *GtkPaperSize_autoptr; typedef GList *GtkPaperSize_listautoptr; typedef GSList *GtkPaperSize_slistautoptr; typedef GQueue *GtkPaperSize_queueautoptr;
# 195 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 195 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 195 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkPaperSize (GtkPaperSize *_ptr) { if (_ptr) (gtk_paper_size_free) ((GtkPaperSize *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkPaperSize (GtkPaperSize **_ptr) { glib_autoptr_clear_GtkPaperSize (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkPaperSize (void *_ptr) { (gtk_paper_size_free) ((GtkPaperSize *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkPaperSize (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkPaperSize); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkPaperSize (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkPaperSize); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkPaperSize (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkPaperSize); }
# 195 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkRecentInfo *GtkRecentInfo_autoptr; typedef GList *GtkRecentInfo_listautoptr; typedef GSList *GtkRecentInfo_slistautoptr; typedef GQueue *GtkRecentInfo_queueautoptr;
# 196 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 196 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 196 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkRecentInfo (GtkRecentInfo *_ptr) { if (_ptr) (gtk_recent_info_unref) ((GtkRecentInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkRecentInfo (GtkRecentInfo **_ptr) { glib_autoptr_clear_GtkRecentInfo (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkRecentInfo (void *_ptr) { (gtk_recent_info_unref) ((GtkRecentInfo *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkRecentInfo (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkRecentInfo); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkRecentInfo (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkRecentInfo); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkRecentInfo (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkRecentInfo); }
# 196 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkSelectionData *GtkSelectionData_autoptr; typedef GList *GtkSelectionData_listautoptr; typedef GSList *GtkSelectionData_slistautoptr; typedef GQueue *GtkSelectionData_queueautoptr;
# 197 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 197 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 197 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkSelectionData (GtkSelectionData *_ptr) { if (_ptr) (gtk_selection_data_free) ((GtkSelectionData *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkSelectionData (GtkSelectionData **_ptr) { glib_autoptr_clear_GtkSelectionData (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkSelectionData (void *_ptr) { (gtk_selection_data_free) ((GtkSelectionData *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkSelectionData (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkSelectionData); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkSelectionData (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkSelectionData); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkSelectionData (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkSelectionData); }
# 197 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTargetList *GtkTargetList_autoptr; typedef GList *GtkTargetList_listautoptr; typedef GSList *GtkTargetList_slistautoptr; typedef GQueue *GtkTargetList_queueautoptr;
# 198 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 198 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 198 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTargetList (GtkTargetList *_ptr) { if (_ptr) (gtk_target_list_unref) ((GtkTargetList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTargetList (GtkTargetList **_ptr) { glib_autoptr_clear_GtkTargetList (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTargetList (void *_ptr) { (gtk_target_list_unref) ((GtkTargetList *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTargetList (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTargetList); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTargetList (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTargetList); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTargetList (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTargetList); }
# 198 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTextAttributes *GtkTextAttributes_autoptr; typedef GList *GtkTextAttributes_listautoptr; typedef GSList *GtkTextAttributes_slistautoptr; typedef GQueue *GtkTextAttributes_queueautoptr;
# 199 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 199 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 199 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTextAttributes (GtkTextAttributes *_ptr) { if (_ptr) (gtk_text_attributes_unref) ((GtkTextAttributes *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTextAttributes (GtkTextAttributes **_ptr) { glib_autoptr_clear_GtkTextAttributes (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTextAttributes (void *_ptr) { (gtk_text_attributes_unref) ((GtkTextAttributes *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTextAttributes (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTextAttributes); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTextAttributes (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTextAttributes); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTextAttributes (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTextAttributes); }
# 199 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTextIter *GtkTextIter_autoptr; typedef GList *GtkTextIter_listautoptr; typedef GSList *GtkTextIter_slistautoptr; typedef GQueue *GtkTextIter_queueautoptr;
# 200 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 200 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 200 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTextIter (GtkTextIter *_ptr) { if (_ptr) (gtk_text_iter_free) ((GtkTextIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTextIter (GtkTextIter **_ptr) { glib_autoptr_clear_GtkTextIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTextIter (void *_ptr) { (gtk_text_iter_free) ((GtkTextIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTextIter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTextIter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTextIter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTextIter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTextIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTextIter); }
# 200 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeIter *GtkTreeIter_autoptr; typedef GList *GtkTreeIter_listautoptr; typedef GSList *GtkTreeIter_slistautoptr; typedef GQueue *GtkTreeIter_queueautoptr;
# 201 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 201 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 201 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeIter (GtkTreeIter *_ptr) { if (_ptr) (gtk_tree_iter_free) ((GtkTreeIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeIter (GtkTreeIter **_ptr) { glib_autoptr_clear_GtkTreeIter (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeIter (void *_ptr) { (gtk_tree_iter_free) ((GtkTreeIter *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeIter (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeIter); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeIter (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeIter); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeIter (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeIter); }
# 201 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreePath *GtkTreePath_autoptr; typedef GList *GtkTreePath_listautoptr; typedef GSList *GtkTreePath_slistautoptr; typedef GQueue *GtkTreePath_queueautoptr;
# 202 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 202 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 202 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreePath (GtkTreePath *_ptr) { if (_ptr) (gtk_tree_path_free) ((GtkTreePath *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreePath (GtkTreePath **_ptr) { glib_autoptr_clear_GtkTreePath (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreePath (void *_ptr) { (gtk_tree_path_free) ((GtkTreePath *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreePath (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreePath); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreePath (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreePath); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreePath (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreePath); }
# 202 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkTreeRowReference *GtkTreeRowReference_autoptr; typedef GList *GtkTreeRowReference_listautoptr; typedef GSList *GtkTreeRowReference_slistautoptr; typedef GQueue *GtkTreeRowReference_queueautoptr;
# 203 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 203 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 203 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkTreeRowReference (GtkTreeRowReference *_ptr) { if (_ptr) (gtk_tree_row_reference_free) ((GtkTreeRowReference *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkTreeRowReference (GtkTreeRowReference **_ptr) { glib_autoptr_clear_GtkTreeRowReference (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkTreeRowReference (void *_ptr) { (gtk_tree_row_reference_free) ((GtkTreeRowReference *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkTreeRowReference (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkTreeRowReference); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkTreeRowReference (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkTreeRowReference); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkTreeRowReference (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkTreeRowReference); }
# 203 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
typedef GtkWidgetPath *GtkWidgetPath_autoptr; typedef GList *GtkWidgetPath_listautoptr; typedef GSList *GtkWidgetPath_slistautoptr; typedef GQueue *GtkWidgetPath_queueautoptr;
# 204 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic push
# 204 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
# 204 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
 static __attribute__ ((__unused__)) inline void glib_autoptr_clear_GtkWidgetPath (GtkWidgetPath *_ptr) { if (_ptr) (gtk_widget_path_unref) ((GtkWidgetPath *) _ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_cleanup_GtkWidgetPath (GtkWidgetPath **_ptr) { glib_autoptr_clear_GtkWidgetPath (*_ptr); } static __attribute__ ((__unused__)) inline void glib_autoptr_destroy_GtkWidgetPath (void *_ptr) { (gtk_widget_path_unref) ((GtkWidgetPath *) _ptr); } static __attribute__ ((__unused__)) inline void glib_listautoptr_cleanup_GtkWidgetPath (GList **_l) { g_list_free_full (*_l, glib_autoptr_destroy_GtkWidgetPath); } static __attribute__ ((__unused__)) inline void glib_slistautoptr_cleanup_GtkWidgetPath (GSList **_l) { g_slist_free_full (*_l, glib_autoptr_destroy_GtkWidgetPath); } static __attribute__ ((__unused__)) inline void glib_queueautoptr_cleanup_GtkWidgetPath (GQueue **_q) { if (*_q) g_queue_free_full (*_q, glib_autoptr_destroy_GtkWidgetPath); }
# 204 "/usr/include/gtk-3.0/gtk/gtk-autocleanups.h"
#pragma clang diagnostic pop
# 294 "/usr/include/gtk-3.0/gtk/gtk.h" 2
# 27 "caja-desktop-link-monitor.c" 2
# 1 "/usr/include/glib-2.0/glib/gi18n.h" 1
# 25 "/usr/include/glib-2.0/glib/gi18n.h"
# 1 "/usr/include/libintl.h" 1 3 4
# 39 "/usr/include/libintl.h" 3 4
extern char *gettext (const char *__msgid)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     __attribute__ ((__nothrow__ )) __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) __attribute__ ((__nothrow__ ));



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) __attribute__ ((__nothrow__ ));



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) __attribute__ ((__nothrow__ ));







# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 108 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3 4
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 101 "/usr/include/libintl.h" 2 3 4


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/stddef.h" 1 3 4
# 108 "/usr/bin/../lib/clang/19/include/stddef.h" 3 4
# 1 "/usr/bin/../lib/clang/19/include/__stddef_null.h" 1 3 4
# 109 "/usr/bin/../lib/clang/19/include/stddef.h" 2 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) __attribute__ ((__nothrow__ ));


extern struct lconv *localeconv (void) __attribute__ ((__nothrow__ ));
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) __attribute__ ((__nothrow__ ));
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) __attribute__ ((__nothrow__ ));



extern void freelocale (locale_t __dataset) __attribute__ ((__nothrow__ ));






extern locale_t uselocale (locale_t __dataset) __attribute__ ((__nothrow__ ));
# 104 "/usr/include/libintl.h" 2 3 4
# 26 "/usr/include/glib-2.0/glib/gi18n.h" 2
# 28 "caja-desktop-link-monitor.c" 2



# 1 "../eel/eel-debug.h" 1
# 34 "../eel/eel-debug.h"
    typedef void (* EelFunction) (void);

    void eel_stop_in_debugger (void);
    void eel_make_warnings_and_criticals_stop_in_debugger (void);




    void eel_debug_shut_down (void);
    void eel_debug_call_at_shutdown (EelFunction function);
    void eel_debug_call_at_shutdown_with_data (GFreeFunc function,
            gpointer data);
# 32 "caja-desktop-link-monitor.c" 2
# 1 "../eel/eel-gtk-macros.h" 1
# 33 "caja-desktop-link-monitor.c" 2
# 1 "../eel/eel-glib-extensions.h" 1
# 34 "../eel/eel-glib-extensions.h"
typedef guint eel_boolean_bit;


typedef gboolean (* EelPredicateFunction) (gpointer data,
        gpointer callback_data);


gboolean eel_g_list_exactly_one_item (GList *list);
gboolean eel_g_list_more_than_one_item (GList *list);
gboolean eel_g_list_equal (GList *list_a,
        GList *list_b);
gboolean eel_g_lists_sort_and_check_for_intersection (GList **list_a,
        GList **list_b);
GList * eel_g_list_partition (GList *list,
        EelPredicateFunction predicate,
        gpointer user_data,
        GList **removed);


void eel_g_list_free_deep (GList *list);


gboolean eel_g_str_list_equal (GList *str_list_a,
        GList *str_list_b);
GList * eel_g_str_list_alphabetize (GList *str_list);
int eel_g_str_list_index (GList *str_list,
        const char *str);


GHashTable *eel_g_hash_table_new_free_at_exit (GHashFunc hash_function,
        GCompareFunc key_compare_function,
        const char *display_name);
void eel_g_hash_table_safe_for_each (GHashTable *hash_table,
        GHFunc callback,
        gpointer callback_data);


int eel_g_strv_find (char **strv,
        const char *find_me);
gboolean eel_g_strv_equal (char **a,
        char **b);


int eel_round (double d);


void eel_add_weak_pointer (gpointer pointer_location);
void eel_remove_weak_pointer (gpointer pointer_location);

void eel_g_settings_add_auto_enum (GSettings *settings,
                                                         const char *key,
                                                         int *storage);
void eel_g_settings_add_auto_int (GSettings *settings,
                                                         const char *key,
                                                         int *storage);
void eel_g_settings_add_auto_boolean (GSettings *settings,
                                                         const char *key,
                                                         gboolean *storage);
void eel_g_settings_add_auto_strv (GSettings *settings,
                                                         const char *key,
                                                         char ***storage);
void eel_g_settings_add_auto_strv_as_quarks (GSettings *settings,
                                                         const char *key,
                                                         GQuark **storage);
# 34 "caja-desktop-link-monitor.c" 2
# 1 "../eel/eel-vfs-extensions.h" 1
# 42 "../eel/eel-vfs-extensions.h"
    gboolean eel_uri_is_trash(const char* uri);
    gboolean eel_uri_is_trash_folder(const char* uri);
    gboolean eel_uri_is_in_trash(const char* uri);
    gboolean eel_uri_is_desktop(const char* uri);
    gboolean eel_uri_is_search(const char* uri);

    char* eel_make_valid_utf8(const char* name);

    char* eel_filename_strip_extension(const char* filename);
    void eel_filename_get_rename_region(const char* filename, int* start_offset, int* end_offset);
# 35 "caja-desktop-link-monitor.c" 2
# 1 "../eel/eel-stock-dialogs.h" 1
# 30 "../eel/eel-stock-dialogs.h"
typedef void (* EelCancelCallback) (gpointer callback_data);


void eel_timed_wait_start (EelCancelCallback cancel_callback,
        gpointer callback_data,
        const char *wait_message,
        GtkWindow *parent_window);
void eel_timed_wait_start_with_duration (int duration,
        EelCancelCallback cancel_callback,
        gpointer callback_data,
        const char *wait_message,
        GtkWindow *parent_window);
void eel_timed_wait_stop (EelCancelCallback cancel_callback,
        gpointer callback_data);


int eel_run_simple_dialog (GtkWidget *parent,
        gboolean ignore_close_box,
        GtkMessageType message_type,
        const char *primary_text,
        const char *secondary_text,
        ...);
GtkWidget* eel_dialog_add_button (GtkDialog *dialog,
        const gchar *button_text,
        const gchar *icon_name,
              gint response_id);
GtkWidget* eel_file_chooser_dialog_new (const gchar *title,
        GtkWindow *parent,
        GtkFileChooserAction action,
        const gchar *first_button_text,
                              ...);






GtkDialog *eel_show_info_dialog (const char *primary_text,
        const char *secondary_text,
        GtkWindow *parent);
GtkDialog *eel_show_info_dialog_with_details (const char *primary_text,
        const char *secondary_text,
        const char *detailed_informative_message,
        GtkWindow *parent);
GtkDialog *eel_show_warning_dialog (const char *primary_text,
        const char *secondary_text,
        GtkWindow *parent);
GtkDialog *eel_show_error_dialog (const char *primary_text,
        const char *secondary_text,
        GtkWindow *parent);
GtkDialog *eel_show_yes_no_dialog (const char *primary_text,
        const char *secondary_text,
        const char *yes_label,
        const char *no_label,
        GtkWindow *parent);
GtkDialog *eel_create_question_dialog (const char *primary_text,
        const char *secondary_text,
        const char *answer_one,
        int response_one,
        const char *answer_two,
        int response_two,
        GtkWindow *parent);
# 36 "caja-desktop-link-monitor.c" 2

# 1 "./caja-desktop-link-monitor.h" 1
# 30 "./caja-desktop-link-monitor.h"
# 1 "./caja-desktop-link.h" 1
# 30 "./caja-desktop-link.h"
# 1 "./caja-file.h" 1
# 31 "./caja-file.h"
# 1 "./caja-file-attributes.h" 1
# 32 "./caja-file-attributes.h"
typedef enum
{
    CAJA_FILE_ATTRIBUTE_INFO = 1 << 0,
    CAJA_FILE_ATTRIBUTE_LINK_INFO = 1 << 1,
    CAJA_FILE_ATTRIBUTE_DEEP_COUNTS = 1 << 2,
    CAJA_FILE_ATTRIBUTE_DIRECTORY_ITEM_COUNT = 1 << 3,
    CAJA_FILE_ATTRIBUTE_DIRECTORY_ITEM_MIME_TYPES = 1 << 4,
    CAJA_FILE_ATTRIBUTE_TOP_LEFT_TEXT = 1 << 5,
    CAJA_FILE_ATTRIBUTE_LARGE_TOP_LEFT_TEXT = 1 << 6,
    CAJA_FILE_ATTRIBUTE_EXTENSION_INFO = 1 << 7,
    CAJA_FILE_ATTRIBUTE_THUMBNAIL = 1 << 8,
    CAJA_FILE_ATTRIBUTE_MOUNT = 1 << 9,
    CAJA_FILE_ATTRIBUTE_FILESYSTEM_INFO = 1 << 10,
} CajaFileAttributes;
# 32 "./caja-file.h" 2
# 1 "./caja-icon-info.h" 1
# 15 "./caja-icon-info.h"
    typedef enum {
        CAJA_ZOOM_LEVEL_SMALLEST = 0,
        CAJA_ZOOM_LEVEL_SMALLER,
        CAJA_ZOOM_LEVEL_SMALL,
        CAJA_ZOOM_LEVEL_STANDARD,
        CAJA_ZOOM_LEVEL_LARGE,
        CAJA_ZOOM_LEVEL_LARGER,
        CAJA_ZOOM_LEVEL_LARGEST
    }
    CajaZoomLevel;
# 45 "./caja-icon-info.h"
    typedef struct _CajaIconInfo CajaIconInfo;
    typedef struct _CajaIconInfoClass CajaIconInfoClass;
# 55 "./caja-icon-info.h"
    GType caja_icon_info_get_type (void) __attribute__ ((__const__));

    CajaIconInfo * caja_icon_info_new_for_pixbuf (GdkPixbuf *pixbuf,
            int scale);
    CajaIconInfo * caja_icon_info_lookup (GIcon *icon,
            int size,
            int scale);
    CajaIconInfo * caja_icon_info_lookup_from_name (const char *name,
            int size,
            int scale);
    CajaIconInfo * caja_icon_info_lookup_from_path (const char *path,
            int size,
            int scale);
    gboolean caja_icon_info_is_fallback (CajaIconInfo *icon);
    GdkPixbuf * caja_icon_info_get_pixbuf (CajaIconInfo *icon);
    cairo_surface_t * caja_icon_info_get_surface (CajaIconInfo *icon);
    GdkPixbuf * caja_icon_info_get_pixbuf_nodefault (CajaIconInfo *icon);
    cairo_surface_t * caja_icon_info_get_surface_nodefault (CajaIconInfo *icon);
    GdkPixbuf * caja_icon_info_get_pixbuf_nodefault_at_size (CajaIconInfo *icon,
            gsize forced_size);
    cairo_surface_t * caja_icon_info_get_surface_nodefault_at_size(CajaIconInfo *icon,
            gsize forced_size);
    GdkPixbuf * caja_icon_info_get_pixbuf_at_size (CajaIconInfo *icon,
            gsize forced_size);
    cairo_surface_t * caja_icon_info_get_surface_at_size(CajaIconInfo *icon,
            gsize forced_size);
    gboolean caja_icon_info_get_embedded_rect (CajaIconInfo *icon,
            GdkRectangle *rectangle);
    gboolean caja_icon_info_get_attach_points (CajaIconInfo *icon,
            GdkPoint **points,
            gint *n_points);
    const char* caja_icon_info_get_display_name(CajaIconInfo* icon);
    const char* caja_icon_info_get_used_name(CajaIconInfo* icon);

    void caja_icon_info_clear_caches (void);


    guint caja_get_icon_size_for_zoom_level (CajaZoomLevel zoom_level);
    float caja_get_relative_icon_size_for_zoom_level (CajaZoomLevel zoom_level);

    guint caja_icon_get_larger_icon_size (guint size);
    guint caja_icon_get_smaller_icon_size (guint size);

    gint caja_get_icon_size_for_stock_size (GtkIconSize size);
    guint caja_icon_get_emblem_size_for_icon_size (guint size);

gboolean caja_icon_theme_can_render (GThemedIcon *icon);
GIcon * caja_user_special_directory_get_gicon (GUserDirectory directory);
# 33 "./caja-file.h" 2
# 44 "./caja-file.h"
typedef struct CajaFile CajaFile;
# 59 "./caja-file.h"
typedef enum
{
    CAJA_FILE_SORT_NONE,
    CAJA_FILE_SORT_BY_DISPLAY_NAME,
    CAJA_FILE_SORT_BY_DIRECTORY,
    CAJA_FILE_SORT_BY_SIZE,
    CAJA_FILE_SORT_BY_TYPE,
    CAJA_FILE_SORT_BY_MTIME,
    CAJA_FILE_SORT_BY_BTIME,
    CAJA_FILE_SORT_BY_ATIME,
    CAJA_FILE_SORT_BY_EMBLEMS,
    CAJA_FILE_SORT_BY_TRASHED_TIME,
    CAJA_FILE_SORT_BY_SIZE_ON_DISK,
    CAJA_FILE_SORT_BY_EXTENSION
} CajaFileSortType;

typedef enum
{
    CAJA_REQUEST_NOT_STARTED,
    CAJA_REQUEST_IN_PROGRESS,
    CAJA_REQUEST_DONE
} CajaRequestStatus;

typedef enum
{
    CAJA_FILE_ICON_FLAGS_NONE = 0,
    CAJA_FILE_ICON_FLAGS_USE_THUMBNAILS = (1<<0),
    CAJA_FILE_ICON_FLAGS_IGNORE_VISITING = (1<<1),
    CAJA_FILE_ICON_FLAGS_EMBEDDING_TEXT = (1<<2),
    CAJA_FILE_ICON_FLAGS_FOR_DRAG_ACCEPT = (1<<3),
    CAJA_FILE_ICON_FLAGS_FOR_OPEN_FOLDER = (1<<4),

    CAJA_FILE_ICON_FLAGS_FORCE_THUMBNAIL_SIZE = (1<<5),

    CAJA_FILE_ICON_FLAGS_USE_MOUNT_ICON = (1<<6),

    CAJA_FILE_ICON_FLAGS_USE_MOUNT_ICON_AS_EMBLEM = (1<<7)
} CajaFileIconFlags;
# 107 "./caja-file.h"
typedef void (*CajaFileCallback) (CajaFile *file,
        gpointer callback_data);
typedef void (*CajaFileListCallback) (GList *file_list,
        gpointer callback_data);
typedef void (*CajaFileOperationCallback) (CajaFile *file,
        GFile *result_location,
        GError *error,
        gpointer callback_data);
typedef int (*CajaWidthMeasureCallback) (const char *string,
        void *context);
typedef char * (*CajaTruncateCallback) (const char *string,
        int width,
        void *context);



typedef void CajaFileListHandle;


GType caja_file_get_type (void);


CajaFile * caja_file_get (GFile *location);
CajaFile * caja_file_get_by_uri (const char *uri);


CajaFile * caja_file_get_existing (GFile *location);
CajaFile * caja_file_get_existing_by_uri (const char *uri);





CajaFile * caja_file_ref (CajaFile *file);
void caja_file_unref (CajaFile *file);


void caja_file_monitor_add (CajaFile *file,
        gconstpointer client,
        CajaFileAttributes attributes);
void caja_file_monitor_remove (CajaFile *file,
        gconstpointer client);





void caja_file_refresh_info (CajaFile *file);





void caja_file_call_when_ready (CajaFile *file,
        CajaFileAttributes attributes,
        CajaFileCallback callback,
        gpointer callback_data);
void caja_file_cancel_call_when_ready (CajaFile *file,
        CajaFileCallback callback,
        gpointer callback_data);
gboolean caja_file_check_if_ready (CajaFile *file,
        CajaFileAttributes attributes);
void caja_file_invalidate_attributes (CajaFile *file,
        CajaFileAttributes attributes);
void caja_file_invalidate_all_attributes (CajaFile *file);


gboolean caja_file_contains_text (CajaFile *file);
gboolean caja_file_is_binary (CajaFile *file);
char * caja_file_get_display_name (CajaFile *file);
char * caja_file_get_edit_name (CajaFile *file);
char * caja_file_get_name (CajaFile *file);
GFile * caja_file_get_location (CajaFile *file);
char * caja_file_get_description (CajaFile *file);
char * caja_file_get_uri (CajaFile *file);
char * caja_file_get_uri_scheme (CajaFile *file);
CajaFile * caja_file_get_parent (CajaFile *file);
GFile * caja_file_get_parent_location (CajaFile *file);
char * caja_file_get_parent_uri (CajaFile *file);
char * caja_file_get_parent_uri_for_display (CajaFile *file);
gboolean caja_file_can_get_size (CajaFile *file);
goffset caja_file_get_size (CajaFile *file);
goffset caja_file_get_size_on_disk (CajaFile *file);
time_t caja_file_get_mtime (CajaFile *file);
GFileType caja_file_get_file_type (CajaFile *file);
char * caja_file_get_mime_type (CajaFile *file);
gboolean caja_file_is_mime_type (CajaFile *file,
        const char *mime_type);
gboolean caja_file_is_launchable (CajaFile *file);
gboolean caja_file_is_symbolic_link (CajaFile *file);
gboolean caja_file_is_mountpoint (CajaFile *file);
GMount * caja_file_get_mount (CajaFile *file);
char * caja_file_get_volume_free_space (CajaFile *file);
char * caja_file_get_volume_name (CajaFile *file);
char * caja_file_get_symbolic_link_target_path (CajaFile *file);
char * caja_file_get_symbolic_link_target_uri (CajaFile *file);
gboolean caja_file_is_broken_symbolic_link (CajaFile *file);
gboolean caja_file_is_caja_link (CajaFile *file);
gboolean caja_file_is_executable (CajaFile *file);
gboolean caja_file_is_directory (CajaFile *file);
gboolean caja_file_is_user_special_directory (CajaFile *file,
        GUserDirectory special_directory);
gboolean caja_file_is_archive (CajaFile *file);
gboolean caja_file_is_in_trash (CajaFile *file);
gboolean caja_file_is_in_desktop (CajaFile *file);
gboolean caja_file_is_home (CajaFile *file);
gboolean caja_file_is_desktop_directory (CajaFile *file);
GError * caja_file_get_file_info_error (CajaFile *file);
gboolean caja_file_get_directory_item_count (CajaFile *file,
        guint *count,
        gboolean *count_unreadable);
void caja_file_recompute_deep_counts (CajaFile *file);
CajaRequestStatus caja_file_get_deep_counts (CajaFile *file,
        guint *directory_count,
        guint *file_count,
        guint *unreadable_directory_count,
        goffset *total_size,
        goffset *total_size_on_disk,
        gboolean force);
gboolean caja_file_should_show_thumbnail (CajaFile *file);
gboolean caja_file_should_show_directory_item_count (CajaFile *file);
gboolean caja_file_should_show_type (CajaFile *file);
GList * caja_file_get_keywords (CajaFile *file);
void caja_file_set_keywords (CajaFile *file,
        GList *keywords);
GList * caja_file_get_emblem_icons (CajaFile *file,
        char **exclude);
GList * caja_file_get_emblem_pixbufs (CajaFile *file,
        int size,
        gboolean force_size,
        char **exclude);
char * caja_file_get_top_left_text (CajaFile *file);
char * caja_file_peek_top_left_text (CajaFile *file,
        gboolean need_large_text,
        gboolean *got_top_left_text);

void caja_file_set_attributes (CajaFile *file,
        GFileInfo *attributes,
        CajaFileOperationCallback callback,
        gpointer callback_data);
GFilesystemPreviewType caja_file_get_filesystem_use_preview (CajaFile *file);

char * caja_file_get_filesystem_id (CajaFile *file);

CajaFile * caja_file_get_trash_original_file (CajaFile *file);


gboolean caja_file_can_get_permissions (CajaFile *file);
gboolean caja_file_can_set_permissions (CajaFile *file);
guint caja_file_get_permissions (CajaFile *file);
gboolean caja_file_can_get_owner (CajaFile *file);
gboolean caja_file_can_set_owner (CajaFile *file);
gboolean caja_file_can_get_group (CajaFile *file);
gboolean caja_file_can_set_group (CajaFile *file);
char * caja_file_get_owner_name (CajaFile *file);
char * caja_file_get_group_name (CajaFile *file);
GList * caja_get_user_names (void);
GList * caja_get_all_group_names (void);
GList * caja_file_get_settable_group_names (CajaFile *file);
gboolean caja_file_can_get_selinux_context (CajaFile *file);
char * caja_file_get_selinux_context (CajaFile *file);


gboolean caja_file_can_read (CajaFile *file);
gboolean caja_file_can_write (CajaFile *file);
gboolean caja_file_can_execute (CajaFile *file);
gboolean caja_file_can_rename (CajaFile *file);
gboolean caja_file_can_delete (CajaFile *file);
gboolean caja_file_can_trash (CajaFile *file);

gboolean caja_file_can_mount (CajaFile *file);
gboolean caja_file_can_unmount (CajaFile *file);
gboolean caja_file_can_eject (CajaFile *file);
gboolean caja_file_can_start (CajaFile *file);
gboolean caja_file_can_start_degraded (CajaFile *file);
gboolean caja_file_can_stop (CajaFile *file);
GDriveStartStopType caja_file_get_start_stop_type (CajaFile *file);
gboolean caja_file_can_poll_for_media (CajaFile *file);
gboolean caja_file_is_media_check_automatic (CajaFile *file);

void caja_file_mount (CajaFile *file,
        GMountOperation *mount_op,
        GCancellable *cancellable,
        CajaFileOperationCallback callback,
        gpointer callback_data);
void caja_file_unmount (CajaFile *file,
        GMountOperation *mount_op,
        GCancellable *cancellable,
        CajaFileOperationCallback callback,
        gpointer callback_data);
void caja_file_eject (CajaFile *file,
        GMountOperation *mount_op,
        GCancellable *cancellable,
        CajaFileOperationCallback callback,
        gpointer callback_data);

void caja_file_start (CajaFile *file,
        GMountOperation *start_op,
        GCancellable *cancellable,
        CajaFileOperationCallback callback,
        gpointer callback_data);
void caja_file_stop (CajaFile *file,
        GMountOperation *mount_op,
        GCancellable *cancellable,
        CajaFileOperationCallback callback,
        gpointer callback_data);
void caja_file_poll_for_media (CajaFile *file);


void caja_file_set_owner (CajaFile *file,
        const char *user_name_or_id,
        CajaFileOperationCallback callback,
        gpointer callback_data);
void caja_file_set_group (CajaFile *file,
        const char *group_name_or_id,
        CajaFileOperationCallback callback,
        gpointer callback_data);
void caja_file_set_permissions (CajaFile *file,
        guint32 permissions,
        CajaFileOperationCallback callback,
        gpointer callback_data);
void caja_file_rename (CajaFile *file,
        const char *new_name,
        CajaFileOperationCallback callback,
        gpointer callback_data);
void caja_file_cancel (CajaFile *file,
        CajaFileOperationCallback callback,
        gpointer callback_data);





gboolean caja_file_is_gone (CajaFile *file);





gboolean caja_file_is_not_yet_confirmed (CajaFile *file);


char * caja_file_get_metadata (CajaFile *file,
        const char *key,
        const char *default_metadata);
GList * caja_file_get_metadata_list (CajaFile *file,
        const char *key);
void caja_file_set_metadata (CajaFile *file,
        const char *key,
        const char *default_metadata,
        const char *metadata);
void caja_file_set_metadata_list (CajaFile *file,
        const char *key,
        GList *list);


gboolean caja_file_get_boolean_metadata (CajaFile *file,
        const char *key,
        gboolean default_metadata);
void caja_file_set_boolean_metadata (CajaFile *file,
        const char *key,
        gboolean default_metadata,
        gboolean metadata);
int caja_file_get_integer_metadata (CajaFile *file,
        const char *key,
        int default_metadata);
void caja_file_set_integer_metadata (CajaFile *file,
        const char *key,
        int default_metadata,
        int metadata);



time_t caja_file_get_time_metadata (CajaFile *file,
        const char *key);
void caja_file_set_time_metadata (CajaFile *file,
        const char *key,
        time_t time);


char * caja_file_get_string_attribute (CajaFile *file,
        const char *attribute_name);
char * caja_file_get_string_attribute_q (CajaFile *file,
        GQuark attribute_q);
char * caja_file_get_string_attribute_with_default (CajaFile *file,
        const char *attribute_name);
char * caja_file_get_string_attribute_with_default_q (CajaFile *file,
        GQuark attribute_q);
char * caja_file_fit_modified_date_as_string (CajaFile *file,
        int width,
        CajaWidthMeasureCallback measure_callback,
        CajaTruncateCallback truncate_callback,
        void *measure_truncate_context);


gboolean caja_file_matches_uri (CajaFile *file,
        const char *uri);


gboolean caja_file_is_local (CajaFile *file);


CajaFileSortType caja_file_get_default_sort_type (CajaFile *file,
        gboolean *reversed);
const gchar * caja_file_get_default_sort_attribute (CajaFile *file,
        gboolean *reversed);

int caja_file_compare_for_sort (CajaFile *file_1,
        CajaFile *file_2,
        CajaFileSortType sort_type,
        gboolean directories_first,
        gboolean reversed);
int caja_file_compare_for_sort_by_attribute (CajaFile *file_1,
        CajaFile *file_2,
        const char *attribute,
        gboolean directories_first,
        gboolean reversed);
int caja_file_compare_for_sort_by_attribute_q (CajaFile *file_1,
        CajaFile *file_2,
        GQuark attribute,
        gboolean directories_first,
        gboolean reversed);
gboolean caja_file_is_date_sort_attribute_q (GQuark attribute);

int caja_file_compare_display_name (CajaFile *file_1,
        const char *pattern);
int caja_file_compare_location (CajaFile *file_1,
        CajaFile *file_2);


gboolean caja_file_is_hidden_file (CajaFile *file);
gboolean caja_file_should_show (CajaFile *file,
        gboolean show_hidden,
        gboolean show_foreign,
        gboolean show_backup);
GList *caja_file_list_filter_hidden (GList *files,
        gboolean show_hidden);




gboolean caja_file_is_launcher (CajaFile *file);
gboolean caja_file_is_foreign_link (CajaFile *file);
gboolean caja_file_is_trusted_link (CajaFile *file);
gboolean caja_file_has_activation_uri (CajaFile *file);
char * caja_file_get_activation_uri (CajaFile *file);
GFile * caja_file_get_activation_location (CajaFile *file);

char * caja_file_get_drop_target_uri (CajaFile *file);


char * caja_file_get_custom_icon (CajaFile *file);

GIcon *caja_file_get_gicon (CajaFile *file,
                                             CajaFileIconFlags flags);
CajaIconInfo *caja_file_get_icon (CajaFile *file,
                                             int size,
                                             int scale,
                                             CajaFileIconFlags flags);
cairo_surface_t *caja_file_get_icon_surface (CajaFile *file,
                                             int size,
                                             gboolean force_size,
                                             int scale,
                                             CajaFileIconFlags flags);

gboolean caja_file_has_open_window (CajaFile *file);
void caja_file_set_has_open_window (CajaFile *file,
        gboolean has_open_window);


gboolean caja_file_is_thumbnailing (CajaFile *file);




GList * caja_file_list_ref (GList *file_list);
void caja_file_list_unref (GList *file_list);
void caja_file_list_free (GList *file_list);
GList * caja_file_list_copy (GList *file_list);
GList * caja_file_list_sort_by_display_name (GList *file_list);
void caja_file_list_call_when_ready (GList *file_list,
        CajaFileAttributes attributes,
        CajaFileListHandle **handle,
        CajaFileListCallback callback,
        gpointer callback_data);
void caja_file_list_cancel_call_when_ready (CajaFileListHandle *handle);


void caja_file_dump (CajaFile *file);

typedef struct _CajaFilePrivate CajaFilePrivate;

struct CajaFile
{
    GObject parent_slot;
    CajaFilePrivate *details;
};




typedef enum
{
    CAJA_DATE_TYPE_MODIFIED,
    CAJA_DATE_TYPE_CREATED,
    CAJA_DATE_TYPE_CHANGED,
    CAJA_DATE_TYPE_ACCESSED,
    CAJA_DATE_TYPE_PERMISSIONS_CHANGED,
    CAJA_DATE_TYPE_TRASHED
} CajaDateType;

typedef struct
{
    GObjectClass parent_slot;





    GFileType default_file_type;


    void (* changed) (CajaFile *file);


    void (* updated_deep_count_in_progress) (CajaFile *file);


    void (* monitor_add) (CajaFile *file,
            gconstpointer client,
            CajaFileAttributes attributes);
    void (* monitor_remove) (CajaFile *file,
            gconstpointer client);
    void (* call_when_ready) (CajaFile *file,
            CajaFileAttributes attributes,
            CajaFileCallback callback,
            gpointer callback_data);
    void (* cancel_call_when_ready) (CajaFile *file,
            CajaFileCallback callback,
            gpointer callback_data);
    gboolean (* check_if_ready) (CajaFile *file,
            CajaFileAttributes attributes);
    gboolean (* get_item_count) (CajaFile *file,
            guint *count,
            gboolean *count_unreadable);
    CajaRequestStatus (* get_deep_counts) (CajaFile *file,
            guint *directory_count,
            guint *file_count,
            guint *unreadable_directory_count,
            goffset *total_size,
            goffset *total_size_on_disk);
    gboolean (* get_date) (CajaFile *file,
            CajaDateType type,
            time_t *date);
    char * (* get_where_string) (CajaFile *file);

    void (* set_metadata) (CajaFile *file,
            const char *key,
            const char *value);
    void (* set_metadata_as_list) (CajaFile *file,
            const char *key,
            char **value);

    void (* mount) (CajaFile *file,
            GMountOperation *mount_op,
            GCancellable *cancellable,
            CajaFileOperationCallback callback,
            gpointer callback_data);
    void (* unmount) (CajaFile *file,
            GMountOperation *mount_op,
            GCancellable *cancellable,
            CajaFileOperationCallback callback,
            gpointer callback_data);
    void (* eject) (CajaFile *file,
            GMountOperation *mount_op,
            GCancellable *cancellable,
            CajaFileOperationCallback callback,
            gpointer callback_data);

    void (* start) (CajaFile *file,
            GMountOperation *start_op,
            GCancellable *cancellable,
            CajaFileOperationCallback callback,
            gpointer callback_data);
    void (* stop) (CajaFile *file,
            GMountOperation *mount_op,
            GCancellable *cancellable,
            CajaFileOperationCallback callback,
            gpointer callback_data);

    void (* poll_for_media) (CajaFile *file);
} CajaFileClass;
# 31 "./caja-desktop-link.h" 2
# 44 "./caja-desktop-link.h"
typedef struct _CajaDesktopLinkPrivate CajaDesktopLinkPrivate;

typedef struct
{
    GObject parent_slot;
    CajaDesktopLinkPrivate *details;
} CajaDesktopLink;

typedef struct
{
    GObjectClass parent_slot;
} CajaDesktopLinkClass;

typedef enum
{
    CAJA_DESKTOP_LINK_HOME,
    CAJA_DESKTOP_LINK_COMPUTER,
    CAJA_DESKTOP_LINK_TRASH,
    CAJA_DESKTOP_LINK_MOUNT,
    CAJA_DESKTOP_LINK_NETWORK
} CajaDesktopLinkType;

GType caja_desktop_link_get_type (void);

CajaDesktopLink * caja_desktop_link_new (CajaDesktopLinkType type);
CajaDesktopLink * caja_desktop_link_new_from_mount (GMount *mount);
CajaDesktopLinkType caja_desktop_link_get_link_type (CajaDesktopLink *link);
char * caja_desktop_link_get_file_name (CajaDesktopLink *link);
char * caja_desktop_link_get_display_name (CajaDesktopLink *link);
GIcon * caja_desktop_link_get_icon (CajaDesktopLink *link);
GFile * caja_desktop_link_get_activation_location (CajaDesktopLink *link);
char * caja_desktop_link_get_activation_uri (CajaDesktopLink *link);
gboolean caja_desktop_link_get_date (CajaDesktopLink *link,
        CajaDateType date_type,
        time_t *date);
GMount * caja_desktop_link_get_mount (CajaDesktopLink *link);
gboolean caja_desktop_link_can_rename (CajaDesktopLink *link);
gboolean caja_desktop_link_rename (CajaDesktopLink *link,
        const char *name);
# 31 "./caja-desktop-link-monitor.h" 2
# 44 "./caja-desktop-link-monitor.h"
typedef struct CajaDesktopLinkMonitorDetails CajaDesktopLinkMonitorDetails;

typedef struct
{
    GObject parent_slot;
    CajaDesktopLinkMonitorDetails *details;
} CajaDesktopLinkMonitor;

typedef struct
{
    GObjectClass parent_slot;
} CajaDesktopLinkMonitorClass;

GType caja_desktop_link_monitor_get_type (void);

CajaDesktopLinkMonitor * caja_desktop_link_monitor_get (void);


char * caja_desktop_link_monitor_make_filename_unique (CajaDesktopLinkMonitor *monitor,
        const char *filename);
# 38 "caja-desktop-link-monitor.c" 2

# 1 "./caja-desktop-icon-file.h" 1
# 44 "./caja-desktop-icon-file.h"
typedef struct _CajaDesktopIconFilePrivate CajaDesktopIconFilePrivate;

typedef struct
{
    CajaFile parent_slot;
    CajaDesktopIconFilePrivate *details;
} CajaDesktopIconFile;

typedef struct
{
    CajaFileClass parent_slot;
} CajaDesktopIconFileClass;

GType caja_desktop_icon_file_get_type (void);

CajaDesktopIconFile *caja_desktop_icon_file_new (CajaDesktopLink *link);
void caja_desktop_icon_file_update (CajaDesktopIconFile *icon_file);
void caja_desktop_icon_file_remove (CajaDesktopIconFile *icon_file);
CajaDesktopLink *caja_desktop_icon_file_get_link (CajaDesktopIconFile *icon_file);
# 40 "caja-desktop-link-monitor.c" 2
# 1 "./caja-directory.h" 1
# 65 "./caja-directory.h"
typedef struct _CajaDirectoryPrivate CajaDirectoryPrivate;

typedef struct
{
    GObject object;
    CajaDirectoryPrivate *details;
} CajaDirectory;

typedef void (*CajaDirectoryCallback) (CajaDirectory *directory,
                                       GList *files,
                                       gpointer callback_data);

typedef struct
{
    GObjectClass parent_class;






    void (* files_added) (CajaDirectory *directory,
                                      GList *added_files);
# 96 "./caja-directory.h"
    void (* files_changed) (CajaDirectory *directory,
                                      GList *changed_files);







    void (* done_loading) (CajaDirectory *directory);

    void (* load_error) (CajaDirectory *directory,
                                      GError *error);


    gboolean (* contains_file) (CajaDirectory *directory,
                                      CajaFile *file);
    void (* call_when_ready) (CajaDirectory *directory,
                                      CajaFileAttributes file_attributes,
                                      gboolean wait_for_file_list,
                                      CajaDirectoryCallback callback,
                                      gpointer callback_data);
    void (* cancel_callback) (CajaDirectory *directory,
                                      CajaDirectoryCallback callback,
                                      gpointer callback_data);
    void (* file_monitor_add) (CajaDirectory *directory,
                                      gconstpointer client,
                                      gboolean monitor_hidden_files,
                                      CajaFileAttributes monitor_attributes,
                                      CajaDirectoryCallback initial_files_callback,
                                      gpointer callback_data);
    void (* file_monitor_remove) (CajaDirectory *directory,
                                      gconstpointer client);
    void (* force_reload) (CajaDirectory *directory);
    gboolean (* are_all_files_seen) (CajaDirectory *directory);
    gboolean (* is_not_empty) (CajaDirectory *directory);
    char * (* get_name_for_self_as_new_file) (CajaDirectory *directory);







    GList * (* get_file_list) (CajaDirectory *directory);





    gboolean (* is_editable) (CajaDirectory *directory);
} CajaDirectoryClass;


GType caja_directory_get_type (void);






CajaDirectory *caja_directory_get (GFile *location);
CajaDirectory *caja_directory_get_by_uri (const char *uri);
CajaDirectory *caja_directory_get_for_file (CajaFile *file);





CajaDirectory *caja_directory_ref (CajaDirectory *directory);
void caja_directory_unref (CajaDirectory *directory);


char * caja_directory_get_uri (CajaDirectory *directory);
GFile * caja_directory_get_location (CajaDirectory *directory);


gboolean caja_directory_contains_file (CajaDirectory *directory,
        CajaFile *file);


CajaFile * caja_directory_get_corresponding_file (CajaDirectory *directory);




void caja_directory_call_when_ready (CajaDirectory *directory,
        CajaFileAttributes file_attributes,
        gboolean wait_for_all_files,
        CajaDirectoryCallback callback,
        gpointer callback_data);
void caja_directory_cancel_callback (CajaDirectory *directory,
        CajaDirectoryCallback callback,
        gpointer callback_data);


void caja_directory_file_monitor_add (CajaDirectory *directory,
        gconstpointer client,
        gboolean monitor_hidden_files,
        CajaFileAttributes attributes,
        CajaDirectoryCallback initial_files_callback,
        gpointer callback_data);
void caja_directory_file_monitor_remove (CajaDirectory *directory,
        gconstpointer client);
void caja_directory_force_reload (CajaDirectory *directory);


GList * caja_directory_get_file_list (CajaDirectory *directory);

GList * caja_directory_match_pattern (CajaDirectory *directory,
        const char *glob);




gboolean caja_directory_are_all_files_seen (CajaDirectory *directory);


gboolean caja_directory_is_local (CajaDirectory *directory);

gboolean caja_directory_is_in_trash (CajaDirectory *directory);




gboolean caja_directory_is_not_empty (CajaDirectory *directory);




GList * caja_directory_list_ref (GList *directory_list);
void caja_directory_list_unref (GList *directory_list);
void caja_directory_list_free (GList *directory_list);
GList * caja_directory_list_copy (GList *directory_list);
GList * caja_directory_list_sort_by_uri (GList *directory_list);


gboolean caja_directory_is_desktop_directory (CajaDirectory *directory);

gboolean caja_directory_is_editable (CajaDirectory *directory);
# 41 "caja-desktop-link-monitor.c" 2
# 1 "./caja-desktop-directory.h" 1
# 44 "./caja-desktop-directory.h"
typedef struct CajaDesktopDirectoryDetails CajaDesktopDirectoryDetails;

typedef struct
{
    CajaDirectory parent_slot;
    CajaDesktopDirectoryDetails *details;
} CajaDesktopDirectory;

typedef struct
{
    CajaDirectoryClass parent_slot;

} CajaDesktopDirectoryClass;

GType caja_desktop_directory_get_type (void);
CajaDirectory * caja_desktop_directory_get_real_directory (CajaDesktopDirectory *desktop_directory);
# 42 "caja-desktop-link-monitor.c" 2
# 1 "./caja-global-preferences.h" 1
# 78 "./caja-global-preferences.h"
typedef enum
{
    CAJA_DATE_FORMAT_LOCALE,
    CAJA_DATE_FORMAT_ISO,
    CAJA_DATE_FORMAT_INFORMAL
} CajaDateFormat;

typedef enum
{
    CAJA_NEW_TAB_POSITION_AFTER_CURRENT_TAB,
    CAJA_NEW_TAB_POSITION_END,
} CajaNewTabPosition;
# 126 "./caja-global-preferences.h"
    enum
    {
        CAJA_DEFAULT_FOLDER_VIEWER_ICON_VIEW,
        CAJA_DEFAULT_FOLDER_VIEWER_COMPACT_VIEW,
        CAJA_DEFAULT_FOLDER_VIEWER_LIST_VIEW,
        CAJA_DEFAULT_FOLDER_VIEWER_OTHER
    };
# 164 "./caja-global-preferences.h"
    enum
    {
        CAJA_CLICK_POLICY_SINGLE,
        CAJA_CLICK_POLICY_DOUBLE
    };

    enum
    {
        CAJA_EXECUTABLE_TEXT_LAUNCH,
        CAJA_EXECUTABLE_TEXT_DISPLAY,
        CAJA_EXECUTABLE_TEXT_ASK
    };

    typedef enum
    {
        CAJA_SPEED_TRADEOFF_ALWAYS,
        CAJA_SPEED_TRADEOFF_LOCAL_ONLY,
        CAJA_SPEED_TRADEOFF_NEVER
    } CajaSpeedTradeoffValue;







    typedef enum
    {
        CAJA_COMPLEX_SEARCH_BAR,
        CAJA_SIMPLE_SEARCH_BAR
    } CajaSearchBarMode;
# 209 "./caja-global-preferences.h"
void caja_global_preferences_init (void);
char *caja_global_preferences_get_default_folder_viewer_preference_as_iid (void);

extern GSettings *caja_preferences;
extern GSettings *caja_media_preferences;
extern GSettings *caja_window_state;
extern GSettings *caja_icon_view_preferences;
extern GSettings *caja_desktop_preferences;
extern GSettings *caja_tree_sidebar_preferences;
extern GSettings *caja_compact_view_preferences;
extern GSettings *caja_list_view_preferences;
extern GSettings *caja_extension_preferences;

extern GSettings *mate_background_preferences;
extern GSettings *mate_lockdown_preferences;
# 43 "caja-desktop-link-monitor.c" 2
# 1 "./caja-trash-monitor.h" 1
# 32 "./caja-trash-monitor.h"
typedef struct CajaTrashMonitor CajaTrashMonitor;
typedef struct CajaTrashMonitorClass CajaTrashMonitorClass;
typedef struct _CajaTrashMonitorPrivate CajaTrashMonitorPrivate;
# 48 "./caja-trash-monitor.h"
struct CajaTrashMonitor
{
    GObject object;
    CajaTrashMonitorPrivate *details;
};

struct CajaTrashMonitorClass
{
    GObjectClass parent_class;

    void (* trash_state_changed) (CajaTrashMonitor *trash_monitor,
                                         gboolean new_state);
};

GType caja_trash_monitor_get_type (void);

CajaTrashMonitor *caja_trash_monitor_get (void);
gboolean caja_trash_monitor_is_empty (void);
GIcon *caja_trash_monitor_get_icon (void);
# 44 "caja-desktop-link-monitor.c" 2

struct CajaDesktopLinkMonitorDetails
{
    GVolumeMonitor *volume_monitor;
    CajaDirectory *desktop_dir;

    CajaDesktopLink *home_link;
    CajaDesktopLink *computer_link;
    CajaDesktopLink *trash_link;
    CajaDesktopLink *network_link;

    gulong mount_id;
    gulong unmount_id;
    gulong changed_id;

    GList *mount_links;
};

static void caja_desktop_link_monitor_init (gpointer object,
        gpointer klass);
static void caja_desktop_link_monitor_class_init (gpointer klass);

static gpointer parent_class; GType caja_desktop_link_monitor_get_type (void) { GType parent_type; static GType type; if (type == 0) { static GTypeInfo info = { sizeof (CajaDesktopLinkMonitorClass), ((void*)0), ((void*)0), (GClassInitFunc) caja_desktop_link_monitor_class_init, ((void*)0), ((void*)0), sizeof (CajaDesktopLinkMonitor), 0, (GInstanceInitFunc) caja_desktop_link_monitor_init, ((void*)0) }; parent_type = (((GType) ((20) << (2)))); type = g_type_register_static (parent_type, "CajaDesktopLinkMonitor", &info, 0); parent_class = g_type_class_ref (parent_type); } return type; }



static CajaDesktopLinkMonitor *the_link_monitor = ((void*)0);

static void
destroy_desktop_link_monitor (void)
{
    if (the_link_monitor != ((void*)0))
    {
        g_object_unref (the_link_monitor);
    }
}

CajaDesktopLinkMonitor *
caja_desktop_link_monitor_get (void)
{
    if (the_link_monitor == ((void*)0))
    {
        g_object_new (caja_desktop_link_monitor_get_type(), ((void*)0));
        eel_debug_call_at_shutdown (destroy_desktop_link_monitor);
    }
    return the_link_monitor;
}

static gboolean
volume_file_name_used (CajaDesktopLinkMonitor *monitor,
                       const char *name)
{
    GList *l;
    gboolean same;

    for (l = monitor->details->mount_links; l != ((void*)0); l = l->next)
    {
        char *other_name;

        other_name = caja_desktop_link_get_file_name (l->data);
        same = strcmp (name, other_name) == 0;
        g_free (other_name);

        if (same)
        {
            return (!(0));
        }
    }

    return (0);
}

char *
caja_desktop_link_monitor_make_filename_unique (CajaDesktopLinkMonitor *monitor,
        const char *filename)
{
    char *unique_name;
    int i;

    i = 2;
    unique_name = g_strdup_inline (filename);
    while (volume_file_name_used (monitor, unique_name))
    {
        g_free (unique_name);
        unique_name = g_strdup_printf ("%s.%d", filename, i++);
    }
    return unique_name;
}

static gboolean
has_mount (CajaDesktopLinkMonitor *monitor,
           GMount *mount)
{
    gboolean ret;
    GList *l;
    GMount *other_mount = ((void*)0);

    ret = (0);

    for (l = monitor->details->mount_links; l != ((void*)0); l = l->next)
    {
        other_mount = caja_desktop_link_get_mount (l->data);
        if (mount == other_mount)
        {
            g_object_unref (other_mount);
            ret = (!(0));
            break;
        }
        g_object_unref (other_mount);
    }

    return ret;
}

static void
create_mount_link (CajaDesktopLinkMonitor *monitor,
                   GMount *mount)
{
    if (has_mount (monitor, mount))
        return;

    if ((!g_mount_is_shadowed (mount)) &&
            g_settings_get_boolean (caja_desktop_preferences, "volumes-visible"))
    {
        CajaDesktopLink *link;

        link = caja_desktop_link_new_from_mount (mount);
        monitor->details->mount_links = g_list_prepend (monitor->details->mount_links, link);
    }
}

static void
remove_mount_link (CajaDesktopLinkMonitor *monitor,
                   GMount *mount)
{
    GList *l;
    CajaDesktopLink *link;
    GMount *other_mount = ((void*)0);

    link = ((void*)0);
    for (l = monitor->details->mount_links; l != ((void*)0); l = l->next)
    {
        other_mount = caja_desktop_link_get_mount (l->data);
        if (mount == other_mount)
        {
            g_object_unref (other_mount);
            link = l->data;
            break;
        }
        g_object_unref (other_mount);
    }

    if (link)
    {
        monitor->details->mount_links = g_list_remove (monitor->details->mount_links, link);
        g_object_unref (link);
    }
}

static void
mount_added_callback (GVolumeMonitor *volume_monitor,
                      GMount *mount,
                      CajaDesktopLinkMonitor *monitor)
{
    create_mount_link (monitor, mount);
}

static void
mount_removed_callback (GVolumeMonitor *volume_monitor,
                        GMount *mount,
                        CajaDesktopLinkMonitor *monitor)
{
    remove_mount_link (monitor, mount);
}

static void
mount_changed_callback (GVolumeMonitor *volume_monitor,
                        GMount *mount,
                        CajaDesktopLinkMonitor *monitor)
{



    if (g_mount_is_shadowed (mount) && has_mount (monitor, mount))
    {
        remove_mount_link (monitor, mount);
    }
}

static void
update_link_visibility (CajaDesktopLinkMonitor *monitor,
                        CajaDesktopLink **link_ref,
                        CajaDesktopLinkType link_type,
                        const char *preference_key)
{
    if (g_settings_get_boolean (caja_desktop_preferences, preference_key))
    {
        if (*link_ref == ((void*)0))
        {
            *link_ref = caja_desktop_link_new (link_type);
        }
    }
    else
    {
        if (*link_ref != ((void*)0))
        {
            g_object_unref (*link_ref);
            *link_ref = ((void*)0);
        }
    }
}

static void
desktop_home_visible_changed (gpointer callback_data)
{
    CajaDesktopLinkMonitor *monitor;

    monitor = ((((CajaDesktopLinkMonitor*) (void *) ((callback_data)))));

    update_link_visibility (((((CajaDesktopLinkMonitor*) (void *) ((monitor))))),
                            &monitor->details->home_link,
                            CAJA_DESKTOP_LINK_HOME,
                            "home-icon-visible");
}

static void
desktop_computer_visible_changed (gpointer callback_data)
{
    CajaDesktopLinkMonitor *monitor;

    monitor = ((((CajaDesktopLinkMonitor*) (void *) ((callback_data)))));

    update_link_visibility (((((CajaDesktopLinkMonitor*) (void *) ((callback_data))))),
                            &monitor->details->computer_link,
                            CAJA_DESKTOP_LINK_COMPUTER,
                            "computer-icon-visible");
}

static void
desktop_trash_visible_changed (gpointer callback_data)
{
    CajaDesktopLinkMonitor *monitor;

    monitor = ((((CajaDesktopLinkMonitor*) (void *) ((callback_data)))));

    update_link_visibility (((((CajaDesktopLinkMonitor*) (void *) ((callback_data))))),
                            &monitor->details->trash_link,
                            CAJA_DESKTOP_LINK_TRASH,
                            "trash-icon-visible");
}

static void
desktop_network_visible_changed (gpointer callback_data)
{
    CajaDesktopLinkMonitor *monitor;

    monitor = ((((CajaDesktopLinkMonitor*) (void *) ((callback_data)))));

    update_link_visibility (((((CajaDesktopLinkMonitor*) (void *) ((callback_data))))),
                            &monitor->details->network_link,
                            CAJA_DESKTOP_LINK_NETWORK,
                            "network-icon-visible");
}

static void
desktop_volumes_visible_changed (gpointer callback_data)
{
    CajaDesktopLinkMonitor *monitor;
    GList *l, *mounts;

    monitor = ((((CajaDesktopLinkMonitor*) (void *) ((callback_data)))));

    if (g_settings_get_boolean (caja_desktop_preferences, "volumes-visible"))
    {
        if (monitor->details->mount_links == ((void*)0))
        {
            mounts = g_volume_monitor_get_mounts (monitor->details->volume_monitor);
            for (l = mounts; l != ((void*)0); l = l->next)
            {
                create_mount_link (monitor, l->data);
                g_object_unref (l->data);
            }
            g_list_free (mounts);
        }
    }
    else
    {
        g_list_foreach (monitor->details->mount_links, (GFunc)g_object_unref, ((void*)0));
        g_list_free (monitor->details->mount_links);
        monitor->details->mount_links = ((void*)0);
    }
}

static void
create_link_and_add_preference (CajaDesktopLink **link_ref,
                                CajaDesktopLinkType link_type,
                                const char *preference_key,
                                GCallback callback,
                                gpointer callback_data)
{
    gchar *detailed_signal;

    if (g_settings_get_boolean (caja_desktop_preferences, preference_key))
    {
        *link_ref = caja_desktop_link_new (link_type);
    }

    detailed_signal = g_strconcat ("changed::", preference_key, ((void*)0));
    g_signal_connect_data ((caja_desktop_preferences), (detailed_signal), (callback), (callback_data), ((void*)0), G_CONNECT_SWAPPED);


    g_free (detailed_signal);
}

static void
caja_desktop_link_monitor_init (gpointer object, gpointer klass)
{
    CajaDesktopLinkMonitor *monitor;
    GList *l, *mounts;
    GMount *mount = ((void*)0);

    monitor = ((((CajaDesktopLinkMonitor*) (void *) ((object)))));

    the_link_monitor = monitor;

    monitor->details = (CajaDesktopLinkMonitorDetails *) (__extension__ ({ gsize __n = (gsize) (1); gsize __s = sizeof (CajaDesktopLinkMonitorDetails); gpointer __p; if (__s == 1) __p = g_malloc0 (__n); else if (__builtin_constant_p (__n) && (__s == 0 || __n <= (9223372036854775807L *2UL+1UL) / __s)) __p = g_malloc0 (__n * __s); else __p = g_malloc0_n (__n, __s); __p; }));

    monitor->details->volume_monitor = g_volume_monitor_get ();


    monitor->details->desktop_dir = caja_directory_get_by_uri ("x-caja-desktop:");



    create_link_and_add_preference (&monitor->details->home_link,
                                    CAJA_DESKTOP_LINK_HOME,
                                    "home-icon-visible",
                                    ((GCallback) (desktop_home_visible_changed)),
                                    monitor);

    create_link_and_add_preference (&monitor->details->computer_link,
                                    CAJA_DESKTOP_LINK_COMPUTER,
                                    "computer-icon-visible",
                                    ((GCallback) (desktop_computer_visible_changed)),
                                    monitor);

    create_link_and_add_preference (&monitor->details->trash_link,
                                    CAJA_DESKTOP_LINK_TRASH,
                                    "trash-icon-visible",
                                    ((GCallback) (desktop_trash_visible_changed)),
                                    monitor);

    create_link_and_add_preference (&monitor->details->network_link,
                                    CAJA_DESKTOP_LINK_NETWORK,
                                    "network-icon-visible",
                                    ((GCallback) (desktop_network_visible_changed)),
                                    monitor);



    mounts = g_volume_monitor_get_mounts (monitor->details->volume_monitor);
    for (l = mounts; l != ((void*)0); l = l->next)
    {
        mount = l->data;
        create_mount_link (monitor, mount);
        g_object_unref (mount);
    }
    g_list_free (mounts);

    g_signal_connect_data ((caja_desktop_preferences), ("changed::" "volumes-visible"), (((GCallback) (desktop_volumes_visible_changed))), (monitor), ((void*)0), G_CONNECT_SWAPPED);




    monitor->details->mount_id =
        g_signal_connect_object (monitor->details->volume_monitor, "mount_added",
                                 ((GCallback) (mount_added_callback)), monitor, 0);
    monitor->details->unmount_id =
        g_signal_connect_object (monitor->details->volume_monitor, "mount_removed",
                                 ((GCallback) (mount_removed_callback)), monitor, 0);
    monitor->details->changed_id =
        g_signal_connect_object (monitor->details->volume_monitor, "mount_changed",
                                 ((GCallback) (mount_changed_callback)), monitor, 0);

}

static void
remove_link_and_preference (CajaDesktopLink **link_ref,
                            const char *preference_key,
                            GCallback callback,
                            gpointer callback_data)
{
    if (*link_ref != ((void*)0))
    {
        g_object_unref (*link_ref);
        *link_ref = ((void*)0);
    }

    g_signal_handlers_disconnect_matched ((caja_desktop_preferences), (GSignalMatchType) (G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), 0, 0, ((void*)0), (callback), (callback_data));

}

static void
desktop_link_monitor_finalize (GObject *object)
{
    CajaDesktopLinkMonitor *monitor;

    monitor = ((((CajaDesktopLinkMonitor*) (void *) ((object)))));

    g_object_unref (monitor->details->volume_monitor);



    remove_link_and_preference (&monitor->details->home_link,
                                "home-icon-visible",
                                ((GCallback) (desktop_home_visible_changed)),
                                monitor);

    remove_link_and_preference (&monitor->details->computer_link,
                                "computer-icon-visible",
                                ((GCallback) (desktop_computer_visible_changed)),
                                monitor);

    remove_link_and_preference (&monitor->details->trash_link,
                                "trash-icon-visible",
                                ((GCallback) (desktop_trash_visible_changed)),
                                monitor);

    remove_link_and_preference (&monitor->details->network_link,
                                "network-icon-visible",
                                ((GCallback) (desktop_network_visible_changed)),
                                monitor);



    g_list_foreach (monitor->details->mount_links, (GFunc)g_object_unref, ((void*)0));
    g_list_free (monitor->details->mount_links);
    monitor->details->mount_links = ((void*)0);

    caja_directory_unref (monitor->details->desktop_dir);
    monitor->details->desktop_dir = ((void*)0);

    g_signal_handlers_disconnect_matched ((caja_desktop_preferences), (GSignalMatchType) (G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA), 0, 0, ((void*)0), (desktop_volumes_visible_changed), (monitor));
# 504 "caja-desktop-link-monitor.c"
    g_free (monitor->details);

    do { if (((((GObjectClass*) (void *) ((parent_class)))))->finalize != ((void*)0)) { (* ((((GObjectClass*) (void *) ((parent_class)))))->finalize) (object); } } while (0);
}

static void
caja_desktop_link_monitor_class_init (gpointer klass)
{
    GObjectClass *object_class;

    object_class = ((((GObjectClass*) (void *) ((klass)))));

    object_class->finalize = desktop_link_monitor_finalize;

}
